
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011090  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  08011230  08011230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801246c  0801246c  00014164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801246c  0801246c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012474  08012474  00014164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012474  08012474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012478  08012478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0801247c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a8  20000164  080125e0  00014164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000230c  080125e0  0001430c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec3c  00000000  00000000  00014194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b04  00000000  00000000  00032dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000150a  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c798  00000000  00000000  0003a912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243bc  00000000  00000000  000570aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26cd  00000000  00000000  0007b466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011db33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d8  00000000  00000000  0011db78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00125250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011218 	.word	0x08011218

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	08011218 	.word	0x08011218

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003c0 	.word	0x200003c0
 8000670:	200003d2 	.word	0x200003d2
 8000674:	20000180 	.word	0x20000180

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003e0 	.word	0x200003e0
 80007a0:	200003d4 	.word	0x200003d4

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003e0 	.word	0x200003e0
 8000808:	200003d4 	.word	0x200003d4

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d4 	.word	0x200003d4

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e4 	.word	0x200003e4
 8000898:	200003e8 	.word	0x200003e8

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b099      	sub	sp, #100	@ 0x64
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MPU6050_Init+0x13c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	d174      	bne.n	80009ca <MPU6050_Init+0x12e>
		data = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MPU6050_Init+0x140>)
 80008e8:	681c      	ldr	r4, [r3, #0]
 80008ea:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	216b      	movs	r1, #107	@ 0x6b
 80008fc:	20d0      	movs	r0, #208	@ 0xd0
 80008fe:	47a0      	blx	r4

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000900:	2307      	movs	r3, #7
 8000902:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MPU6050_Init+0x140>)
 8000908:	681c      	ldr	r4, [r3, #0]
 800090a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800090e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000912:	9201      	str	r2, [sp, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	2119      	movs	r1, #25
 800091c:	20d0      	movs	r0, #208	@ 0xd0
 800091e:	47a0      	blx	r4

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MPU6050_Init+0x140>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	211c      	movs	r1, #28
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MPU6050_Init+0x140>)
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	211b      	movs	r1, #27
 800095c:	20d0      	movs	r0, #208	@ 0xd0
 800095e:	47a0      	blx	r4

		// Set Digital Low Pass Filter
		data = 0x03;
 8000960:	2303      	movs	r3, #3
 8000962:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MPU6050_Init+0x140>)
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800096e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	211a      	movs	r1, #26
 800097c:	20d0      	movs	r0, #208	@ 0xd0
 800097e:	47a0      	blx	r4
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	2348      	movs	r3, #72	@ 0x48
 8000986:	461a      	mov	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f00f ffc7 	bl	801091c <memset>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			.Angle = {0, 0, 0},
			.dataReady = 0,
			.isInit = 1
		};

		for(uint8_t i=0; i<14; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800099c:	e00b      	b.n	80009b6 <MPU6050_Init+0x11a>
			mpu->data[i] = 0;
 800099e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		for(uint8_t i=0; i<14; i++){
 80009ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009b0:	3301      	adds	r3, #1
 80009b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80009b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ba:	2b0d      	cmp	r3, #13
 80009bc:	d9ef      	bls.n	800099e <MPU6050_Init+0x102>
		}

		if(status != SYS_OK){
 80009be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <MPU6050_Init+0x132>
			return SYS_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e002      	b.n	80009d0 <MPU6050_Init+0x134>
		}


	}else{
		return SYS_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <MPU6050_Init+0x134>
	}
	return SYS_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	375c      	adds	r7, #92	@ 0x5c
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200003e8 	.word	0x200003e8
 80009dc:	200003e4 	.word	0x200003e4

080009e0 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
 80009ec:	e075      	b.n	8000ada <MPU6050_Calibrate+0xfa>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->data, 14, MPU_TIMEOUT);
 80009ee:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <MPU6050_Calibrate+0x15c>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3336      	adds	r3, #54	@ 0x36
 80009f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	220e      	movs	r2, #14
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	213b      	movs	r1, #59	@ 0x3b
 8000a04:	20d0      	movs	r0, #208	@ 0xd0
 8000a06:	47a0      	blx	r4
		mpu->Acc.raw.x += (int16_t)((mpu->data[0] << 8) | mpu->data[1]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8000a12:	b212      	sxth	r2, r2
 8000a14:	0212      	lsls	r2, r2, #8
 8000a16:	b211      	sxth	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000a1e:	b212      	sxth	r2, r2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	b212      	sxth	r2, r2
 8000a24:	441a      	add	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]
		mpu->Acc.raw.y += (int16_t)((mpu->data[2] << 8) | mpu->data[3]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a34:	b212      	sxth	r2, r2
 8000a36:	0212      	lsls	r2, r2, #8
 8000a38:	b211      	sxth	r1, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000a40:	b212      	sxth	r2, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	b212      	sxth	r2, r2
 8000a46:	441a      	add	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
		mpu->Acc.raw.z += (int16_t)((mpu->data[4] << 8) | mpu->data[5]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8000a56:	b212      	sxth	r2, r2
 8000a58:	0212      	lsls	r2, r2, #8
 8000a5a:	b211      	sxth	r1, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000a62:	b212      	sxth	r2, r2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	b212      	sxth	r2, r2
 8000a68:	441a      	add	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]

		mpu->Gyro.raw.x += (int16_t)((mpu->data[8 ] << 8) | mpu->data[9 ]);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 8000a78:	b212      	sxth	r2, r2
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	b211      	sxth	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000a84:	b212      	sxth	r2, r2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	b212      	sxth	r2, r2
 8000a8a:	441a      	add	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
		mpu->Gyro.raw.y += (int16_t)((mpu->data[10] << 8) | mpu->data[11]);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	0212      	lsls	r2, r2, #8
 8000a9e:	b211      	sxth	r1, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000aa6:	b212      	sxth	r2, r2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	b212      	sxth	r2, r2
 8000aac:	441a      	add	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
		mpu->Gyro.raw.z += (int16_t)((mpu->data[12] << 8) | mpu->data[13]);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8000abc:	b212      	sxth	r2, r2
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	b211      	sxth	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000ac8:	b212      	sxth	r2, r2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	b212      	sxth	r2, r2
 8000ace:	441a      	add	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ae0:	d385      	bcc.n	80009ee <MPU6050_Calibrate+0xe>
	}
    mpu->Acc.offset.x = (int16_t)(mpu->Acc.raw.x >> NUM_SAMPLES_BITS);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	131b      	asrs	r3, r3, #12
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(mpu->Acc.raw.y >> NUM_SAMPLES_BITS);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	131b      	asrs	r3, r3, #12
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(mpu->Acc.raw.z >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(mpu->Gyro.raw.x >> NUM_SAMPLES_BITS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	83da      	strh	r2, [r3, #30]
	mpu->Gyro.offset.y = (int16_t)(mpu->Gyro.raw.y >> NUM_SAMPLES_BITS);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	841a      	strh	r2, [r3, #32]
	mpu->Gyro.offset.z = (int16_t)(mpu->Gyro.raw.z >> NUM_SAMPLES_BITS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2a:	131b      	asrs	r3, r3, #12
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003e8 	.word	0x200003e8

08000b40 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->Acc.raw.x = (((mpu->data[0] << 8) | mpu->data[1]));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	mpu->Acc.raw.y = (((mpu->data[2] << 8) | mpu->data[3]));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
	mpu->Acc.raw.z = (((mpu->data[4] << 8) | mpu->data[5]));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
	// ACC: CALCULATE TRUE ACCELERATION
	mpu->Acc.x = mpu->Acc.raw.x - mpu->Acc.offset.x;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	801a      	strh	r2, [r3, #0]
	mpu->Acc.y = mpu->Acc.raw.y - mpu->Acc.offset.y;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	805a      	strh	r2, [r3, #2]
	mpu->Acc.z = mpu->Acc.raw.z - mpu->Acc.offset.z;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	809a      	strh	r2, [r3, #4]

	// GYR: GET RAW INFORMATION
	mpu->Gyro.raw.x = (((mpu->data[8 ] << 8) | mpu->data[9 ]));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->Gyro.raw.y = (((mpu->data[10] << 8) | mpu->data[11]));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->Gyro.raw.z = (((mpu->data[12] << 8) | mpu->data[13]));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	// GYR: CALCULATE TRUE ACCELERATION
	mpu->Gyro.x = mpu->Gyro.raw.x - mpu->Gyro.offset.x;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	831a      	strh	r2, [r3, #24]
	mpu->Gyro.y = mpu->Gyro.raw.y - mpu->Gyro.offset.y;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	835a      	strh	r2, [r3, #26]
	mpu->Gyro.z = mpu->Gyro.raw.z - mpu->Gyro.offset.z;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	839a      	strh	r2, [r3, #28]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <Display_Set_I2C_Master_Transmit+0x24>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <Display_Set_I2C_Master_Transmit+0x28>)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200003f4 	.word	0x200003f4
 8000c84:	200003f8 	.word	0x200003f8

08000c88 <Display_Init>:

e_system Display_Init(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000c92:	22ae      	movs	r2, #174	@ 0xae
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	@ 0x78
 8000c98:	f000 f94e 	bl	8000f38 <ssd1306_I2C_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	@ 0x78
 8000cac:	f000 f944 	bl	8000f38 <ssd1306_I2C_Write>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cba:	2210      	movs	r2, #16
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	@ 0x78
 8000cc0:	f000 f93a 	bl	8000f38 <ssd1306_I2C_Write>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4413      	add	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000cce:	22b0      	movs	r2, #176	@ 0xb0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	@ 0x78
 8000cd4:	f000 f930 	bl	8000f38 <ssd1306_I2C_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000ce2:	22c8      	movs	r2, #200	@ 0xc8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	@ 0x78
 8000ce8:	f000 f926 	bl	8000f38 <ssd1306_I2C_Write>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 f91c 	bl	8000f38 <ssd1306_I2C_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4413      	add	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	@ 0x78
 8000d10:	f000 f912 	bl	8000f38 <ssd1306_I2C_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	@ 0x78
 8000d24:	f000 f908 	bl	8000f38 <ssd1306_I2C_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4413      	add	r3, r2
 8000d30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000d32:	2281      	movs	r2, #129	@ 0x81
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 f8fe 	bl	8000f38 <ssd1306_I2C_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4413      	add	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 f8f4 	bl	8000f38 <ssd1306_I2C_Write>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4413      	add	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000d5a:	22a1      	movs	r2, #161	@ 0xa1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 f8ea 	bl	8000f38 <ssd1306_I2C_Write>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000d6e:	22a6      	movs	r2, #166	@ 0xa6
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	@ 0x78
 8000d74:	f000 f8e0 	bl	8000f38 <ssd1306_I2C_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4413      	add	r3, r2
 8000d80:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000d82:	22a8      	movs	r2, #168	@ 0xa8
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 f8d6 	bl	8000f38 <ssd1306_I2C_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4413      	add	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000d96:	223f      	movs	r2, #63	@ 0x3f
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 f8cc 	bl	8000f38 <ssd1306_I2C_Write>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4413      	add	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000daa:	22a4      	movs	r2, #164	@ 0xa4
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 f8c2 	bl	8000f38 <ssd1306_I2C_Write>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4413      	add	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000dbe:	22d3      	movs	r2, #211	@ 0xd3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 f8b8 	bl	8000f38 <ssd1306_I2C_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4413      	add	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 f8ae 	bl	8000f38 <ssd1306_I2C_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4413      	add	r3, r2
 8000de4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000de6:	22d5      	movs	r2, #213	@ 0xd5
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 f8a4 	bl	8000f38 <ssd1306_I2C_Write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4413      	add	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000dfa:	22f0      	movs	r2, #240	@ 0xf0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 f89a 	bl	8000f38 <ssd1306_I2C_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000e0e:	22d9      	movs	r2, #217	@ 0xd9
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 f890 	bl	8000f38 <ssd1306_I2C_Write>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4413      	add	r3, r2
 8000e20:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000e22:	2222      	movs	r2, #34	@ 0x22
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	@ 0x78
 8000e28:	f000 f886 	bl	8000f38 <ssd1306_I2C_Write>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4413      	add	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000e36:	22da      	movs	r2, #218	@ 0xda
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	@ 0x78
 8000e3c:	f000 f87c 	bl	8000f38 <ssd1306_I2C_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	@ 0x78
 8000e50:	f000 f872 	bl	8000f38 <ssd1306_I2C_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000e5e:	22db      	movs	r2, #219	@ 0xdb
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 f868 	bl	8000f38 <ssd1306_I2C_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 f85e 	bl	8000f38 <ssd1306_I2C_Write>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4413      	add	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000e86:	228d      	movs	r2, #141	@ 0x8d
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 f854 	bl	8000f38 <ssd1306_I2C_Write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4413      	add	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 f84a 	bl	8000f38 <ssd1306_I2C_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4413      	add	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000eae:	22af      	movs	r2, #175	@ 0xaf
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 f840 	bl	8000f38 <ssd1306_I2C_Write>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 f836 	bl	8000f38 <ssd1306_I2C_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8f0 	bl	80010bc <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <Display_Init+0x2a8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <Display_Init+0x2a8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <Display_Init+0x2a8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <Display_Init+0x2ac>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	711a      	strb	r2, [r3, #4]
	Update.Page = 0;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <Display_Init+0x2ac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	70da      	strb	r2, [r3, #3]
	Update.Ready_DMA = FALSE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <Display_Init+0x2ac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	705a      	strb	r2, [r3, #1]
	Update.Ready_MPU_data = FALSE;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <Display_Init+0x2ac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	709a      	strb	r2, [r3, #2]
	Update.Ready_To_Refresh = FALSE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <Display_Init+0x2ac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <Display_Init+0x2ac>)
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	3b50      	subs	r3, #80	@ 0x50
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <Display_Init+0x2ac>)
 8000f16:	715a      	strb	r2, [r3, #5]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <Display_Init+0x2ac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	719a      	strb	r2, [r3, #6]
	Update.PageData[2] = 0x10; //< y acá upper start
 8000f1e:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <Display_Init+0x2ac>)
 8000f20:	2210      	movs	r2, #16
 8000f22:	71da      	strb	r2, [r3, #7]

	/* Return OK */
	return status;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200003ec 	.word	0x200003ec
 8000f34:	200007fc 	.word	0x200007fc

08000f38 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	460b      	mov	r3, r1
 8000f44:	71bb      	strb	r3, [r7, #6]
 8000f46:	4613      	mov	r3, r2
 8000f48:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <ssd1306_I2C_Write+0x38>)
 8000f54:	681c      	ldr	r4, [r3, #0]
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	b298      	uxth	r0, r3
 8000f5a:	f107 010c 	add.w	r1, r7, #12
 8000f5e:	230a      	movs	r3, #10
 8000f60:	2202      	movs	r2, #2
 8000f62:	47a0      	blx	r4
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200003f8 	.word	0x200003f8

08000f74 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 8000f74:	b598      	push	{r3, r4, r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 8000f78:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d057      	beq.n	8001030 <Display_UpdateScreen_Task+0xbc>
 8000f80:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d053      	beq.n	8001030 <Display_UpdateScreen_Task+0xbc>
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <Display_UpdateScreen_Task+0xc8>)
 8000f8a:	795b      	ldrb	r3, [r3, #5]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d04f      	beq.n	8001030 <Display_UpdateScreen_Task+0xbc>

		switch(Update.state){
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <Display_UpdateScreen_Task+0x2a>
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d01f      	beq.n	8000fdc <Display_UpdateScreen_Task+0x68>
 8000f9c:	e03b      	b.n	8001016 <Display_UpdateScreen_Task+0xa2>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fa0:	78db      	ldrb	r3, [r3, #3]
 8000fa2:	3b50      	subs	r3, #80	@ 0x50
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fa8:	715a      	strb	r2, [r3, #5]
			Update.PageData[1] = 0x00;                   // Lower Column
 8000faa:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	719a      	strb	r2, [r3, #6]
			Update.PageData[2] = 0x10;                   // Upper Column
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	71da      	strb	r2, [r3, #7]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <Display_UpdateScreen_Task+0xcc>)
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	2303      	movs	r3, #3
 8000fbc:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <Display_UpdateScreen_Task+0xd0>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	@ 0x78
 8000fc2:	47a0      	blx	r4
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d106      	bne.n	8000fd8 <Display_UpdateScreen_Task+0x64>
				Update.state = DATA;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	711a      	strb	r2, [r3, #4]
				Update.Ready_DMA = FALSE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000fd6:	e021      	b.n	800101c <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e02a      	b.n	8001032 <Display_UpdateScreen_Task+0xbe>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <Display_UpdateScreen_Task+0xcc>)
 8000fde:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fe6:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <Display_UpdateScreen_Task+0xd4>)
 8000fe8:	441a      	add	r2, r3
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	2140      	movs	r1, #64	@ 0x40
 8000fee:	2078      	movs	r0, #120	@ 0x78
 8000ff0:	47a0      	blx	r4
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10c      	bne.n	8001012 <Display_UpdateScreen_Task+0x9e>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8000ffa:	78db      	ldrb	r3, [r3, #3]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8001002:	70da      	strb	r2, [r3, #3]
				Update.state = PAGE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8001006:	2200      	movs	r2, #0
 8001008:	711a      	strb	r2, [r3, #4]
				Update.Ready_DMA = FALSE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001010:	e004      	b.n	800101c <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00d      	b.n	8001032 <Display_UpdateScreen_Task+0xbe>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8001018:	2208      	movs	r2, #8
 800101a:	70da      	strb	r2, [r3, #3]
		}
		if(Update.Page > 7){
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d905      	bls.n	8001030 <Display_UpdateScreen_Task+0xbc>
			Update.Page = 0;
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	70da      	strb	r2, [r3, #3]
			Update.Ready_To_Refresh = FALSE;
 800102a:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <Display_UpdateScreen_Task+0xc4>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd98      	pop	{r3, r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	200007fc 	.word	0x200007fc
 800103c:	200003ec 	.word	0x200003ec
 8001040:	200003f4 	.word	0x200003f4
 8001044:	20000801 	.word	0x20000801
 8001048:	200003fc 	.word	0x200003fc

0800104c <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <Display_I2C_DMA_Ready+0x1c>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	7053      	strb	r3, [r2, #1]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	200007fc 	.word	0x200007fc

0800106c <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 8001076:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <Display_I2C_Refresh_Ready+0x1c>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	7013      	strb	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200007fc 	.word	0x200007fc

0800108c <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <Display_SetCursor+0x2c>)
 80010a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <Display_SetCursor+0x2c>)
 80010aa:	805a      	strh	r2, [r3, #2]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	200003ec 	.word	0x200003ec

080010bc <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00d      	b.n	80010e8 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <Display_Fill+0x1a>
 80010d2:	2100      	movs	r1, #0
 80010d4:	e000      	b.n	80010d8 <Display_Fill+0x1c>
 80010d6:	21ff      	movs	r1, #255	@ 0xff
 80010d8:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <Display_Fill+0x44>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ee:	d3ed      	bcc.n	80010cc <Display_Fill+0x10>
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200003fc 	.word	0x200003fc

08001104 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	460b      	mov	r3, r1
 8001110:	80bb      	strh	r3, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	70fb      	strb	r3, [r7, #3]
	if (
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2b7f      	cmp	r3, #127	@ 0x7f
 800111a:	d848      	bhi.n	80011ae <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001120:	d845      	bhi.n	80011ae <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <Display_DrawPixel+0xb8>)
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d11a      	bne.n	8001174 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	b298      	uxth	r0, r3
 8001146:	4603      	mov	r3, r0
 8001148:	01db      	lsls	r3, r3, #7
 800114a:	4413      	add	r3, r2
 800114c:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <Display_DrawPixel+0xbc>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	b25a      	sxtb	r2, r3
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	2101      	movs	r1, #1
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	b25b      	sxtb	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b259      	sxtb	r1, r3
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	01db      	lsls	r3, r3, #7
 800116a:	4413      	add	r3, r2
 800116c:	b2c9      	uxtb	r1, r1
 800116e:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <Display_DrawPixel+0xbc>)
 8001170:	54d1      	strb	r1, [r2, r3]
 8001172:	e01d      	b.n	80011b0 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001174:	88fa      	ldrh	r2, [r7, #6]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b298      	uxth	r0, r3
 800117c:	4603      	mov	r3, r0
 800117e:	01db      	lsls	r3, r3, #7
 8001180:	4413      	add	r3, r2
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <Display_DrawPixel+0xbc>)
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	b25a      	sxtb	r2, r3
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	b25b      	sxtb	r3, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4013      	ands	r3, r2
 800119c:	b259      	sxtb	r1, r3
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	4603      	mov	r3, r0
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	4413      	add	r3, r2
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <Display_DrawPixel+0xbc>)
 80011aa:	54d1      	strb	r1, [r2, r3]
 80011ac:	e000      	b.n	80011b0 <Display_DrawPixel+0xac>
		return;
 80011ae:	bf00      	nop
	}
}
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200003ec 	.word	0x200003ec
 80011c0:	200003fc 	.word	0x200003fc

080011c4 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60ba      	str	r2, [r7, #8]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4603      	mov	r3, r0
 80011d0:	81fb      	strh	r3, [r7, #14]
 80011d2:	460b      	mov	r3, r1
 80011d4:	81bb      	strh	r3, [r7, #12]
 80011d6:	4613      	mov	r3, r2
 80011d8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011de:	3307      	adds	r3, #7
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da00      	bge.n	80011e6 <Display_DrawBitmap+0x22>
 80011e4:	3307      	adds	r3, #7
 80011e6:	10db      	asrs	r3, r3, #3
 80011e8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	82bb      	strh	r3, [r7, #20]
 80011f2:	e044      	b.n	800127e <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	827b      	strh	r3, [r7, #18]
 80011f8:	e02f      	b.n	800125a <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 80011fa:	8a7b      	ldrh	r3, [r7, #18]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
 800120a:	e012      	b.n	8001232 <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800120c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001210:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da00      	bge.n	8001222 <Display_DrawBitmap+0x5e>
 8001220:	3307      	adds	r3, #7
 8001222:	10db      	asrs	r3, r3, #3
 8001224:	b21b      	sxth	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da09      	bge.n	800124e <Display_DrawBitmap+0x8a>
 800123a:	89fa      	ldrh	r2, [r7, #14]
 800123c:	8a7b      	ldrh	r3, [r7, #18]
 800123e:	4413      	add	r3, r2
 8001240:	b29b      	uxth	r3, r3
 8001242:	89b9      	ldrh	r1, [r7, #12]
 8001244:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5b 	bl	8001104 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800124e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001252:	b29b      	uxth	r3, r3
 8001254:	3301      	adds	r3, #1
 8001256:	b29b      	uxth	r3, r3
 8001258:	827b      	strh	r3, [r7, #18]
 800125a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbc9      	blt.n	80011fa <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001266:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800126a:	b29b      	uxth	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	82bb      	strh	r3, [r7, #20]
 8001272:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	81bb      	strh	r3, [r7, #12]
 800127e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001282:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001286:	429a      	cmp	r2, r3
 8001288:	dbb4      	blt.n	80011f4 <Display_DrawBitmap+0x30>
        }
    }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4604      	mov	r4, r0
 800129c:	1d38      	adds	r0, r7, #4
 800129e:	e880 0006 	stmia.w	r0, {r1, r2}
 80012a2:	461a      	mov	r2, r3
 80012a4:	4623      	mov	r3, r4
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	4613      	mov	r3, r2
 80012aa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <Display_WriteChar+0xf4>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	793b      	ldrb	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b8:	dc06      	bgt.n	80012c8 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012ba:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <Display_WriteChar+0xf4>)
 80012bc:	885b      	ldrh	r3, [r3, #2]
 80012be:	461a      	mov	r2, r3
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c6:	dd01      	ble.n	80012cc <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 80012c8:	2300      	movs	r3, #0
 80012ca:	e058      	b.n	800137e <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	e048      	b.n	8001364 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3b20      	subs	r3, #32
 80012d8:	7979      	ldrb	r1, [r7, #5]
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	440b      	add	r3, r1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	e030      	b.n	8001354 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <Display_WriteChar+0xf4>)
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b298      	uxth	r0, r3
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <Display_WriteChar+0xf4>)
 8001310:	885a      	ldrh	r2, [r3, #2]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	7bba      	ldrb	r2, [r7, #14]
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fef1 	bl	8001104 <Display_DrawPixel>
 8001322:	e014      	b.n	800134e <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <Display_WriteChar+0xf4>)
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b298      	uxth	r0, r3
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <Display_WriteChar+0xf4>)
 8001332:	885a      	ldrh	r2, [r3, #2]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4413      	add	r3, r2
 800133a:	b299      	uxth	r1, r3
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	f7ff fedb 	bl	8001104 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3301      	adds	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	793b      	ldrb	r3, [r7, #4]
 8001356:	461a      	mov	r2, r3
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	4293      	cmp	r3, r2
 800135c:	d3c9      	bcc.n	80012f2 <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	461a      	mov	r2, r3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4293      	cmp	r3, r2
 800136c:	d3b1      	bcc.n	80012d2 <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <Display_WriteChar+0xf4>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	793a      	ldrb	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <Display_WriteChar+0xf4>)
 800137a:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	200003ec 	.word	0x200003ec

0800138c <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	1d38      	adds	r0, r7, #4
 8001396:	e880 0006 	stmia.w	r0, {r1, r2}
 800139a:	70fb      	strb	r3, [r7, #3]
    while (*str){
 800139c:	e012      	b.n	80013c4 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	7818      	ldrb	r0, [r3, #0]
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	1d3a      	adds	r2, r7, #4
 80013a6:	ca06      	ldmia	r2, {r1, r2}
 80013a8:	f7ff ff74 	bl	8001294 <Display_WriteChar>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d002      	beq.n	80013be <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	e008      	b.n	80013d0 <Display_WriteString+0x44>

        str++;	// Next char
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
    while (*str){
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e8      	bne.n	800139e <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	781b      	ldrb	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	80fb      	strh	r3, [r7, #6]
 80013ea:	4603      	mov	r3, r0
 80013ec:	80bb      	strh	r3, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	807b      	strh	r3, [r7, #2]
 80013f2:	4613      	mov	r3, r2
 80013f4:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d004      	beq.n	8001408 <Display_DrawLine+0x30>
 80013fe:	88ba      	ldrh	r2, [r7, #4]
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	f040 8090 	bne.w	8001528 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	2b7f      	cmp	r3, #127	@ 0x7f
 800140c:	d901      	bls.n	8001412 <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 800140e:	237f      	movs	r3, #127	@ 0x7f
 8001410:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	2b7f      	cmp	r3, #127	@ 0x7f
 8001416:	d901      	bls.n	800141c <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001418:	237f      	movs	r3, #127	@ 0x7f
 800141a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001420:	d901      	bls.n	8001426 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001422:	233f      	movs	r3, #63	@ 0x3f
 8001424:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001426:	883b      	ldrh	r3, [r7, #0]
 8001428:	2b3f      	cmp	r3, #63	@ 0x3f
 800142a:	d901      	bls.n	8001430 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 800142c:	233f      	movs	r3, #63	@ 0x3f
 800142e:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	429a      	cmp	r2, r3
 8001436:	d205      	bcs.n	8001444 <Display_DrawLine+0x6c>
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b29b      	uxth	r3, r3
 8001440:	b21b      	sxth	r3, r3
 8001442:	e004      	b.n	800144e <Display_DrawLine+0x76>
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	b29b      	uxth	r3, r3
 800144c:	b21b      	sxth	r3, r3
 800144e:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001450:	88ba      	ldrh	r2, [r7, #4]
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d205      	bcs.n	8001464 <Display_DrawLine+0x8c>
 8001458:	883a      	ldrh	r2, [r7, #0]
 800145a:	88bb      	ldrh	r3, [r7, #4]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b29b      	uxth	r3, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	e004      	b.n	800146e <Display_DrawLine+0x96>
 8001464:	88ba      	ldrh	r2, [r7, #4]
 8001466:	883b      	ldrh	r3, [r7, #0]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	b21b      	sxth	r3, r3
 800146e:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001470:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d129      	bne.n	80014cc <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001478:	883a      	ldrh	r2, [r7, #0]
 800147a:	88bb      	ldrh	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	d205      	bcs.n	800148c <Display_DrawLine+0xb4>
			tmp = y1;
 8001480:	883b      	ldrh	r3, [r7, #0]
 8001482:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	429a      	cmp	r2, r3
 8001492:	d205      	bcs.n	80014a0 <Display_DrawLine+0xc8>
			tmp = x1;
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800149c:	893b      	ldrh	r3, [r7, #8]
 800149e:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e00c      	b.n	80014c0 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 80014a6:	89f9      	ldrh	r1, [r7, #14]
 80014a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fe28 	bl	8001104 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	81fb      	strh	r3, [r7, #14]
 80014c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014c4:	883b      	ldrh	r3, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dded      	ble.n	80014a6 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 80014ca:	e030      	b.n	800152e <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 80014cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d12b      	bne.n	800152c <Display_DrawLine+0x154>
		if (y1 < y0) {
 80014d4:	883a      	ldrh	r2, [r7, #0]
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d205      	bcs.n	80014e8 <Display_DrawLine+0x110>
			tmp = y1;
 80014dc:	883b      	ldrh	r3, [r7, #0]
 80014de:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d205      	bcs.n	80014fc <Display_DrawLine+0x124>
			tmp = x1;
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014f8:	893b      	ldrh	r3, [r7, #8]
 80014fa:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	81fb      	strh	r3, [r7, #14]
 8001500:	e00c      	b.n	800151c <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001508:	88b9      	ldrh	r1, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fdfa 	bl	8001104 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001514:	b29b      	uxth	r3, r3
 8001516:	3301      	adds	r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	81fb      	strh	r3, [r7, #14]
 800151c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	429a      	cmp	r2, r3
 8001524:	dded      	ble.n	8001502 <Display_DrawLine+0x12a>
		}
	}
	return;
 8001526:	e001      	b.n	800152c <Display_DrawLine+0x154>
		return;
 8001528:	bf00      	nop
 800152a:	e000      	b.n	800152e <Display_DrawLine+0x156>
	return;
 800152c:	bf00      	nop
}
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}

08001534 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b087      	sub	sp, #28
 8001538:	af02      	add	r7, sp, #8
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	4603      	mov	r3, r0
 8001548:	80bb      	strh	r3, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b7f      	cmp	r3, #127	@ 0x7f
 8001556:	d836      	bhi.n	80015c6 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	2b3f      	cmp	r3, #63	@ 0x3f
 800155c:	d833      	bhi.n	80015c6 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	4413      	add	r3, r2
 8001564:	2b7f      	cmp	r3, #127	@ 0x7f
 8001566:	dd03      	ble.n	8001570 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800156e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001570:	88ba      	ldrh	r2, [r7, #4]
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	2b3f      	cmp	r3, #63	@ 0x3f
 8001578:	dd03      	ble.n	8001582 <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001580:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e018      	b.n	80015ba <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	b29a      	uxth	r2, r3
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	b299      	uxth	r1, r3
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4413      	add	r3, r2
 8001598:	b29c      	uxth	r4, r3
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	b29a      	uxth	r2, r3
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	88f8      	ldrh	r0, [r7, #6]
 80015a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	4622      	mov	r2, r4
 80015b0:	f7ff ff12 	bl	80013d8 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	883a      	ldrh	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d2e1      	bcs.n	8001588 <Display_DrawFilledRectangle+0x54>
 80015c4:	e000      	b.n	80015c8 <Display_DrawFilledRectangle+0x94>
		return;
 80015c6:	bf00      	nop
	}
}
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	729a      	strb	r2, [r3, #10]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	885b      	ldrh	r3, [r3, #2]
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	885b      	ldrh	r3, [r3, #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10e      	bne.n	8001646 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	88da      	ldrh	r2, [r3, #6]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	4413      	add	r3, r2
 8001632:	b29a      	uxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7a9b      	ldrb	r3, [r3, #10]
 800164a:	3b01      	subs	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a9b      	ldrb	r3, [r3, #10]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <Encoder_Task+0x54>
		enc->pps = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	811a      	strh	r2, [r3, #8]
	}
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	889b      	ldrh	r3, [r3, #4]
 8001678:	3301      	adds	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	809a      	strh	r2, [r3, #4]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	88da      	ldrh	r2, [r3, #6]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	80da      	strh	r2, [r3, #6]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(e_direction dir), uint16_t max_value){
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	819a      	strh	r2, [r3, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <Motor_Set_PER_Speed>:
		motor->setPins(FREE_WHEEL);
		motor->setPWM(0);
	}
}

void Motor_Set_PER_Speed(s_motor *motor, int8_t speed){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL || motor->setPWM == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d054      	beq.n	80017aa <Motor_Set_PER_Speed+0xbe>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d050      	beq.n	80017aa <Motor_Set_PER_Speed+0xbe>
		return;
	if(speed > 100)
 8001708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800170c:	2b64      	cmp	r3, #100	@ 0x64
 800170e:	dd01      	ble.n	8001714 <Motor_Set_PER_Speed+0x28>
		speed = 100;
 8001710:	2364      	movs	r3, #100	@ 0x64
 8001712:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 8001714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001718:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800171c:	da01      	bge.n	8001722 <Motor_Set_PER_Speed+0x36>
		speed = -100;
 800171e:	239c      	movs	r3, #156	@ 0x9c
 8001720:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 8001722:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	429a      	cmp	r2, r3
 800172c:	d03f      	beq.n	80017ae <Motor_Set_PER_Speed+0xc2>
		return;

	motor->vel = speed * 600;
 800172e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001732:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001736:	fb03 f202 	mul.w	r2, r3, r2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 800173e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dd10      	ble.n	8001768 <Motor_Set_PER_Speed+0x7c>
		motor->direction = FORWARD;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
		motor->setPins(FORWARD);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2002      	movs	r0, #2
 8001752:	4798      	blx	r3
		motor->setPWM((uint16_t)motor->vel-1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6892      	ldr	r2, [r2, #8]
 800175c:	b292      	uxth	r2, r2
 800175e:	3a01      	subs	r2, #1
 8001760:	b292      	uxth	r2, r2
 8001762:	4610      	mov	r0, r2
 8001764:	4798      	blx	r3
 8001766:	e023      	b.n	80017b0 <Motor_Set_PER_Speed+0xc4>
	}else if(speed < 0){
 8001768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da10      	bge.n	8001792 <Motor_Set_PER_Speed+0xa6>
		motor->direction = BACKWARD;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	701a      	strb	r2, [r3, #0]
		motor->setPins(BACKWARD);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2003      	movs	r0, #3
 800177c:	4798      	blx	r3
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6892      	ldr	r2, [r2, #8]
 8001786:	b292      	uxth	r2, r2
 8001788:	43d2      	mvns	r2, r2
 800178a:	b292      	uxth	r2, r2
 800178c:	4610      	mov	r0, r2
 800178e:	4798      	blx	r3
 8001790:	e00e      	b.n	80017b0 <Motor_Set_PER_Speed+0xc4>
	}else{
		motor->direction = FREE_WHEEL;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
		motor->setPins(FREE_WHEEL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2001      	movs	r0, #1
 800179e:	4798      	blx	r3
		motor->setPWM(0);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	2000      	movs	r0, #0
 80017a6:	4798      	blx	r3
 80017a8:	e002      	b.n	80017b0 <Motor_Set_PER_Speed+0xc4>
		return;
 80017aa:	bf00      	nop
 80017ac:	e000      	b.n	80017b0 <Motor_Set_PER_Speed+0xc4>
		return;
 80017ae:	bf00      	nop
	}
}
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	motor->setPins(BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d10c      	bne.n	80017e0 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	899b      	ldrh	r3, [r3, #12]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	899b      	ldrh	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
	}
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <Comm_Task>:

void Comm_Task(s_commData* comm){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001868:	429a      	cmp	r2, r3
 800186a:	d002      	beq.n	8001872 <Comm_Task+0x1e>
		decodeProtocol(comm);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f819 	bl	80018a4 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	789a      	ldrb	r2, [r3, #2]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	78db      	ldrb	r3, [r3, #3]
 800187a:	429a      	cmp	r2, r3
 800187c:	d00e      	beq.n	800189c <Comm_Task+0x48>
		if(!comm->isESP01){
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <Comm_Task+0x48>
				comm->dataWriter(comm);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80018b2:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 80018b4:	e11b      	b.n	8001aee <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 80018bc:	2b06      	cmp	r3, #6
 80018be:	f200 810e 	bhi.w	8001ade <decodeProtocol+0x23a>
 80018c2:	a201      	add	r2, pc, #4	@ (adr r2, 80018c8 <decodeProtocol+0x24>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	080018e5 	.word	0x080018e5
 80018cc:	08001917 	.word	0x08001917
 80018d0:	08001959 	.word	0x08001959
 80018d4:	0800199b 	.word	0x0800199b
 80018d8:	080019dd 	.word	0x080019dd
 80018dc:	08001a0f 	.word	0x08001a0f
 80018e0:	08001a61 	.word	0x08001a61
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	b2d1      	uxtb	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80018f4:	461a      	mov	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80018fe:	2b55      	cmp	r3, #85	@ 0x55
 8001900:	f040 80f2 	bne.w	8001ae8 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001914:	e0e8      	b.n	8001ae8 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	b2d1      	uxtb	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001930:	2b4e      	cmp	r3, #78	@ 0x4e
 8001932:	d104      	bne.n	800193e <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 800193c:	e0d7      	b.n	8001aee <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001944:	3b01      	subs	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001956:	e0ca      	b.n	8001aee <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	b2d1      	uxtb	r1, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001972:	2b45      	cmp	r3, #69	@ 0x45
 8001974:	d104      	bne.n	8001980 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 800197e:	e0b6      	b.n	8001aee <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001986:	3b01      	subs	r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001998:	e0a9      	b.n	8001aee <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	b2d1      	uxtb	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80019b4:	2b52      	cmp	r3, #82	@ 0x52
 80019b6:	d104      	bne.n	80019c2 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80019c0:	e095      	b.n	8001aee <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80019da:	e088      	b.n	8001aee <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	b2d1      	uxtb	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001a00:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <decodeProtocol+0x264>)
 8001a02:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2205      	movs	r2, #5
 8001a08:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a0c:	e06f      	b.n	8001aee <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	b2d1      	uxtb	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a28:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a2a:	d10c      	bne.n	8001a46 <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2206      	movs	r2, #6
 8001a30:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001a34:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <decodeProtocol+0x264>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001a44:	e053      	b.n	8001aee <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a5e:	e046      	b.n	8001aee <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <decodeProtocol+0x264>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d914      	bls.n	8001a92 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	b2d1      	uxtb	r1, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001a88:	4053      	eors	r3, r2
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <decodeProtocol+0x264>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <decodeProtocol+0x264>)
 8001a9c:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <decodeProtocol+0x264>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d122      	bne.n	8001aec <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001aba:	4619      	mov	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	440b      	add	r3, r1
 8001ac0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d111      	bne.n	8001aec <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00c      	beq.n	8001aec <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
				}
			}
			break;
 8001adc:	e006      	b.n	8001aec <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001ae6:	e002      	b.n	8001aee <decodeProtocol+0x24a>
			break;
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <decodeProtocol+0x24a>
			break;
 8001aec:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	f47f aedd 	bne.w	80018b6 <decodeProtocol+0x12>
		}
	}
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000082d 	.word	0x2000082d

08001b0c <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	72fb      	strb	r3, [r7, #11]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001b20:	4b62      	ldr	r3, [pc, #392]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001b26:	4b62      	ldr	r3, [pc, #392]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001b2c:	4b60      	ldr	r3, [pc, #384]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	b2d1      	uxtb	r1, r2
 8001b34:	4a5e      	ldr	r2, [pc, #376]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b36:	7011      	strb	r1, [r2, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001b3c:	2155      	movs	r1, #85	@ 0x55
 8001b3e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001b40:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	b2d1      	uxtb	r1, r2
 8001b48:	4a59      	ldr	r2, [pc, #356]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b4a:	7011      	strb	r1, [r2, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b59      	ldr	r3, [pc, #356]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001b50:	214e      	movs	r1, #78	@ 0x4e
 8001b52:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001b54:	4b56      	ldr	r3, [pc, #344]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	b2d1      	uxtb	r1, r2
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b5e:	7011      	strb	r1, [r2, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001b64:	2145      	movs	r1, #69	@ 0x45
 8001b66:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001b68:	4b51      	ldr	r3, [pc, #324]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	b2d1      	uxtb	r1, r2
 8001b70:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b72:	7011      	strb	r1, [r2, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001b78:	2152      	movs	r1, #82	@ 0x52
 8001b7a:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb8 <comm_sendCMD+0x1ac>)
 8001b82:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001b84:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	b2d1      	uxtb	r1, r2
 8001b8c:	4a48      	ldr	r2, [pc, #288]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b8e:	7011      	strb	r1, [r2, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b48      	ldr	r3, [pc, #288]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001b98:	4b45      	ldr	r3, [pc, #276]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	b2d1      	uxtb	r1, r2
 8001ba0:	4a43      	ldr	r2, [pc, #268]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001ba2:	7011      	strb	r1, [r2, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001ba8:	213a      	movs	r1, #58	@ 0x3a
 8001baa:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001bac:	4b40      	ldr	r3, [pc, #256]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	b2d1      	uxtb	r1, r2
 8001bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001bb6:	7011      	strb	r1, [r2, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
 8001bbe:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	2bb1      	cmp	r3, #177	@ 0xb1
 8001bc4:	d002      	beq.n	8001bcc <comm_sendCMD+0xc0>
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	2bee      	cmp	r3, #238	@ 0xee
 8001bca:	d109      	bne.n	8001be0 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001bcc:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	b2d1      	uxtb	r1, r2
 8001bd4:	4a36      	ldr	r2, [pc, #216]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001bd6:	7011      	strb	r1, [r2, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4a36      	ldr	r2, [pc, #216]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001bdc:	7abb      	ldrb	r3, [r7, #10]
 8001bde:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d013      	beq.n	8001c0e <comm_sendCMD+0x102>
 8001be6:	7abb      	ldrb	r3, [r7, #10]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001bec:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	7aba      	ldrb	r2, [r7, #10]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f00e fec2 	bl	8010984 <memcpy>
        auxIndex += len;
 8001c00:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	7abb      	ldrb	r3, [r7, #10]
 8001c06:	4413      	add	r3, r2
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001c0c:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <comm_sendCMD+0x1ac>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <comm_sendCMD+0x1b0>)
 8001c20:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001c22:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <comm_sendCMD+0x1ac>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <comm_sendCMD+0x1b0>)
 8001c2a:	7819      	ldrb	r1, [r3, #0]
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001c2e:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001c30:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <comm_sendCMD+0x1b4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e01f      	b.n	8001c7e <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001c46:	5c9a      	ldrb	r2, [r3, r2]
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <comm_sendCMD+0x1b4>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4053      	eors	r3, r2
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <comm_sendCMD+0x1b4>)
 8001c52:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	78db      	ldrb	r3, [r3, #3]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	b2d1      	uxtb	r1, r2
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	70d1      	strb	r1, [r2, #3]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <comm_sendCMD+0x1a8>)
 8001c6a:	5c1a      	ldrb	r2, [r3, r0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	440b      	add	r3, r1
 8001c70:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <comm_sendCMD+0x1a0>)
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <comm_sendCMD+0x1a4>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3d9      	bcc.n	8001c3e <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	78db      	ldrb	r3, [r3, #3]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	b2d1      	uxtb	r1, r2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	70d1      	strb	r1, [r2, #3]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <comm_sendCMD+0x1b4>)
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	711a      	strb	r2, [r3, #4]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000807 	.word	0x20000807
 8001cb0:	20000808 	.word	0x20000808
 8001cb4:	2000080c 	.word	0x2000080c
 8001cb8:	2000082a 	.word	0x2000082a
 8001cbc:	2000082b 	.word	0x2000082b
 8001cc0:	2000082c 	.word	0x2000082c

08001cc4 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8001cca:	4ba2      	ldr	r3, [pc, #648]	@ (8001f54 <OLED_Print_Data_Task+0x290>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8128 	beq.w	8001f24 <OLED_Print_Data_Task+0x260>
		switch(Display.state){
 8001cd4:	4b9f      	ldr	r3, [pc, #636]	@ (8001f54 <OLED_Print_Data_Task+0x290>)
 8001cd6:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d023      	beq.n	8001d26 <OLED_Print_Data_Task+0x62>
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	f300 8120 	bgt.w	8001f24 <OLED_Print_Data_Task+0x260>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <OLED_Print_Data_Task+0x28>
 8001ce8:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001cea:	e11b      	b.n	8001f24 <OLED_Print_Data_Task+0x260>
			if(HAL_GetTick() - Display.timer > 2000){
 8001cec:	f001 ff1c 	bl	8003b28 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b98      	ldr	r3, [pc, #608]	@ (8001f54 <OLED_Print_Data_Task+0x290>)
 8001cf4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cfe:	f240 8110 	bls.w	8001f22 <OLED_Print_Data_Task+0x25e>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff f9da 	bl	80010bc <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2340      	movs	r3, #64	@ 0x40
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	4a91      	ldr	r2, [pc, #580]	@ (8001f58 <OLED_Print_Data_Task+0x294>)
 8001d14:	2100      	movs	r1, #0
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fa54 	bl	80011c4 <Display_DrawBitmap>
				Display.state = INPUTS;
 8001d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f54 <OLED_Print_Data_Task+0x290>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001d24:	e0fd      	b.n	8001f22 <OLED_Print_Data_Task+0x25e>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8001d26:	2300      	movs	r3, #0
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	232c      	movs	r3, #44	@ 0x2c
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2325      	movs	r3, #37	@ 0x25
 8001d30:	4a8a      	ldr	r2, [pc, #552]	@ (8001f5c <OLED_Print_Data_Task+0x298>)
 8001d32:	2111      	movs	r1, #17
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff fa45 	bl	80011c4 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	e044      	b.n	8001dca <OLED_Print_Data_Task+0x106>
				for(uint8_t j = 0; j < 45; j++){
 8001d40:	2300      	movs	r3, #0
 8001d42:	71bb      	strb	r3, [r7, #6]
 8001d44:	e03b      	b.n	8001dbe <OLED_Print_Data_Task+0xfa>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4a85      	ldr	r2, [pc, #532]	@ (8001f60 <OLED_Print_Data_Task+0x29c>)
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	885a      	ldrh	r2, [r3, #2]
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	4983      	ldr	r1, [pc, #524]	@ (8001f64 <OLED_Print_Data_Task+0x2a0>)
 8001d56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d82c      	bhi.n	8001db8 <OLED_Print_Data_Task+0xf4>
						pepe = 2 + i * 3;
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	3302      	adds	r3, #2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f68 <OLED_Print_Data_Task+0x2a4>)
 8001d6c:	601a      	str	r2, [r3, #0]
						Display_DrawLine(pepe, 61,  pepe, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f68 <OLED_Print_Data_Task+0x2a4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b298      	uxth	r0, r3
 8001d74:	4b7c      	ldr	r3, [pc, #496]	@ (8001f68 <OLED_Print_Data_Task+0x2a4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	497b      	ldr	r1, [pc, #492]	@ (8001f6c <OLED_Print_Data_Task+0x2a8>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2301      	movs	r3, #1
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	460b      	mov	r3, r1
 8001d88:	213d      	movs	r1, #61	@ 0x3d
 8001d8a:	f7ff fb25 	bl	80013d8 <Display_DrawLine>
						Display_DrawLine(pepe+1, 61,  pepe+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001d8e:	4b76      	ldr	r3, [pc, #472]	@ (8001f68 <OLED_Print_Data_Task+0x2a4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b298      	uxth	r0, r3
 8001d98:	4b73      	ldr	r3, [pc, #460]	@ (8001f68 <OLED_Print_Data_Task+0x2a4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	4971      	ldr	r1, [pc, #452]	@ (8001f6c <OLED_Print_Data_Task+0x2a8>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	4619      	mov	r1, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	213d      	movs	r1, #61	@ 0x3d
 8001db2:	f7ff fb11 	bl	80013d8 <Display_DrawLine>
						break;
 8001db6:	e005      	b.n	8001dc4 <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	2b2c      	cmp	r3, #44	@ 0x2c
 8001dc2:	d9c0      	bls.n	8001d46 <OLED_Print_Data_Task+0x82>
			for(uint8_t i = 0; i < 8; i++){
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d9b7      	bls.n	8001d40 <OLED_Print_Data_Task+0x7c>
					}
				}
			}


			MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8001dd0:	4b67      	ldr	r3, [pc, #412]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	139b      	asrs	r3, r3, #14
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001f74 <OLED_Print_Data_Task+0x2b0>
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dee:	ee17 3a90 	vmov	r3, s15
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001df6:	801a      	strh	r2, [r3, #0]
			MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8001df8:	4b5d      	ldr	r3, [pc, #372]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001dfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dfe:	139b      	asrs	r3, r3, #14
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001f74 <OLED_Print_Data_Task+0x2b0>
 8001e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e16:	ee17 3a90 	vmov	r3, s15
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001e1e:	805a      	strh	r2, [r3, #2]
			MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8001e20:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001e22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e26:	139b      	asrs	r3, r3, #14
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001f74 <OLED_Print_Data_Task+0x2b0>
 8001e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3e:	ee17 3a90 	vmov	r3, s15
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001e46:	809a      	strh	r2, [r3, #4]

			sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8001e48:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4949      	ldr	r1, [pc, #292]	@ (8001f78 <OLED_Print_Data_Task+0x2b4>)
 8001e52:	484a      	ldr	r0, [pc, #296]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001e54:	f00e fd40 	bl	80108d8 <siprintf>
			Display_SetCursor(25, 17);
 8001e58:	2111      	movs	r1, #17
 8001e5a:	2019      	movs	r0, #25
 8001e5c:	f7ff f916 	bl	800108c <Display_SetCursor>
			Display_WriteString((char*)&Display.auxString[0], Font_7x10, SSD1306_COLOR_WHITE);
 8001e60:	4a47      	ldr	r2, [pc, #284]	@ (8001f80 <OLED_Print_Data_Task+0x2bc>)
 8001e62:	2301      	movs	r3, #1
 8001e64:	ca06      	ldmia	r2, {r1, r2}
 8001e66:	4845      	ldr	r0, [pc, #276]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001e68:	f7ff fa90 	bl	800138c <Display_WriteString>
			sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8001e6c:	4b40      	ldr	r3, [pc, #256]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001e6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4943      	ldr	r1, [pc, #268]	@ (8001f84 <OLED_Print_Data_Task+0x2c0>)
 8001e76:	4841      	ldr	r0, [pc, #260]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001e78:	f00e fd2e 	bl	80108d8 <siprintf>
			Display_SetCursor(25, 34);
 8001e7c:	2122      	movs	r1, #34	@ 0x22
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f7ff f904 	bl	800108c <Display_SetCursor>
			Display_WriteString((char*)&Display.auxString[0], Font_7x10, SSD1306_COLOR_WHITE);
 8001e84:	4a3e      	ldr	r2, [pc, #248]	@ (8001f80 <OLED_Print_Data_Task+0x2bc>)
 8001e86:	2301      	movs	r3, #1
 8001e88:	ca06      	ldmia	r2, {r1, r2}
 8001e8a:	483c      	ldr	r0, [pc, #240]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001e8c:	f7ff fa7e 	bl	800138c <Display_WriteString>
			sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8001e90:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001e92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e96:	461a      	mov	r2, r3
 8001e98:	493b      	ldr	r1, [pc, #236]	@ (8001f88 <OLED_Print_Data_Task+0x2c4>)
 8001e9a:	4838      	ldr	r0, [pc, #224]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001e9c:	f00e fd1c 	bl	80108d8 <siprintf>
			Display_SetCursor(25, 51);
 8001ea0:	2133      	movs	r1, #51	@ 0x33
 8001ea2:	2019      	movs	r0, #25
 8001ea4:	f7ff f8f2 	bl	800108c <Display_SetCursor>
			Display_WriteString((char*)&Display.auxString[0], Font_7x10, SSD1306_COLOR_WHITE);
 8001ea8:	4a35      	ldr	r2, [pc, #212]	@ (8001f80 <OLED_Print_Data_Task+0x2bc>)
 8001eaa:	2301      	movs	r3, #1
 8001eac:	ca06      	ldmia	r2, {r1, r2}
 8001eae:	4833      	ldr	r0, [pc, #204]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001eb0:	f7ff fa6c 	bl	800138c <Display_WriteString>
			sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001eb6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4933      	ldr	r1, [pc, #204]	@ (8001f8c <OLED_Print_Data_Task+0x2c8>)
 8001ebe:	482f      	ldr	r0, [pc, #188]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001ec0:	f00e fd0a 	bl	80108d8 <siprintf>
			Display_SetCursor(73, 17);
 8001ec4:	2111      	movs	r1, #17
 8001ec6:	2049      	movs	r0, #73	@ 0x49
 8001ec8:	f7ff f8e0 	bl	800108c <Display_SetCursor>
			Display_WriteString((char*)&Display.auxString[0], Font_7x10, SSD1306_COLOR_WHITE);
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f80 <OLED_Print_Data_Task+0x2bc>)
 8001ece:	2301      	movs	r3, #1
 8001ed0:	ca06      	ldmia	r2, {r1, r2}
 8001ed2:	482a      	ldr	r0, [pc, #168]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001ed4:	f7ff fa5a 	bl	800138c <Display_WriteString>
			sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001eda:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	492b      	ldr	r1, [pc, #172]	@ (8001f90 <OLED_Print_Data_Task+0x2cc>)
 8001ee2:	4826      	ldr	r0, [pc, #152]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001ee4:	f00e fcf8 	bl	80108d8 <siprintf>
			Display_SetCursor(73, 34);
 8001ee8:	2122      	movs	r1, #34	@ 0x22
 8001eea:	2049      	movs	r0, #73	@ 0x49
 8001eec:	f7ff f8ce 	bl	800108c <Display_SetCursor>
			Display_WriteString((char*)&Display.auxString[0], Font_7x10, SSD1306_COLOR_WHITE);
 8001ef0:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <OLED_Print_Data_Task+0x2bc>)
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	ca06      	ldmia	r2, {r1, r2}
 8001ef6:	4821      	ldr	r0, [pc, #132]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001ef8:	f7ff fa48 	bl	800138c <Display_WriteString>
			sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <OLED_Print_Data_Task+0x2ac>)
 8001efe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <OLED_Print_Data_Task+0x2d0>)
 8001f06:	481d      	ldr	r0, [pc, #116]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001f08:	f00e fce6 	bl	80108d8 <siprintf>
			Display_SetCursor(73, 51);
 8001f0c:	2133      	movs	r1, #51	@ 0x33
 8001f0e:	2049      	movs	r0, #73	@ 0x49
 8001f10:	f7ff f8bc 	bl	800108c <Display_SetCursor>
			Display_WriteString((char*)&Display.auxString[0], Font_7x10, SSD1306_COLOR_WHITE);
 8001f14:	4a1a      	ldr	r2, [pc, #104]	@ (8001f80 <OLED_Print_Data_Task+0x2bc>)
 8001f16:	2301      	movs	r3, #1
 8001f18:	ca06      	ldmia	r2, {r1, r2}
 8001f1a:	4818      	ldr	r0, [pc, #96]	@ (8001f7c <OLED_Print_Data_Task+0x2b8>)
 8001f1c:	f7ff fa36 	bl	800138c <Display_WriteString>
			break;
 8001f20:	e000      	b.n	8001f24 <OLED_Print_Data_Task+0x260>
			break;
 8001f22:	bf00      	nop
		}
	}

	is30s--;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <OLED_Print_Data_Task+0x2d4>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <OLED_Print_Data_Task+0x2d4>)
 8001f2e:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <OLED_Print_Data_Task+0x2d4>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <OLED_Print_Data_Task+0x280>
		is30s = 300;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <OLED_Print_Data_Task+0x2d4>)
 8001f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f3e:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 8001f40:	f000 f82c 	bl	8001f9c <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff f891 	bl	800106c <Display_I2C_Refresh_Ready>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000b64 	.word	0x20000b64
 8001f58:	080118ac 	.word	0x080118ac
 8001f5c:	080113d0 	.word	0x080113d0
 8001f60:	20000f78 	.word	0x20000f78
 8001f64:	08011374 	.word	0x08011374
 8001f68:	20000ac4 	.word	0x20000ac4
 8001f6c:	08011344 	.word	0x08011344
 8001f70:	20000b1c 	.word	0x20000b1c
 8001f74:	411ccccd 	.word	0x411ccccd
 8001f78:	08011230 	.word	0x08011230
 8001f7c:	20000f6c 	.word	0x20000f6c
 8001f80:	20000000 	.word	0x20000000
 8001f84:	08011238 	.word	0x08011238
 8001f88:	08011240 	.word	0x08011240
 8001f8c:	08011248 	.word	0x08011248
 8001f90:	08011250 	.word	0x08011250
 8001f94:	08011258 	.word	0x08011258
 8001f98:	2000000c 	.word	0x2000000c

08001f9c <BateryLevel_Set>:

void BateryLevel_Set(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2309      	movs	r3, #9
 8001fa8:	2206      	movs	r2, #6
 8001faa:	2104      	movs	r1, #4
 8001fac:	2003      	movs	r0, #3
 8001fae:	f7ff fac1 	bl	8001534 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <BateryLevel_Set+0x94>)
 8001fb4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001fb6:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d908      	bls.n	8001fd0 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2309      	movs	r3, #9
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f7ff fab3 	bl	8001534 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8001fce:	e02b      	b.n	8002028 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <BateryLevel_Set+0x94>)
 8001fd2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001fd4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d908      	bls.n	8001fee <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	2206      	movs	r2, #6
 8001fe4:	2106      	movs	r1, #6
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f7ff faa4 	bl	8001534 <Display_DrawFilledRectangle>
}
 8001fec:	e01c      	b.n	8002028 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <BateryLevel_Set+0x94>)
 8001ff0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001ff2:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d908      	bls.n	800200c <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2305      	movs	r3, #5
 8002000:	2206      	movs	r2, #6
 8002002:	2108      	movs	r1, #8
 8002004:	2003      	movs	r0, #3
 8002006:	f7ff fa95 	bl	8001534 <Display_DrawFilledRectangle>
}
 800200a:	e00d      	b.n	8002028 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <BateryLevel_Set+0x94>)
 800200e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002010:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8002014:	4293      	cmp	r3, r2
 8002016:	d907      	bls.n	8002028 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8002018:	2301      	movs	r3, #1
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2302      	movs	r3, #2
 800201e:	2206      	movs	r2, #6
 8002020:	210b      	movs	r1, #11
 8002022:	2003      	movs	r0, #3
 8002024:	f7ff fa86 	bl	8001534 <Display_DrawFilledRectangle>
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000f78 	.word	0x20000f78

08002034 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	3302      	adds	r3, #2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800204a:	2bf1      	cmp	r3, #241	@ 0xf1
 800204c:	f000 81c9 	beq.w	80023e2 <decodeOn_USB+0x3ae>
 8002050:	2bf1      	cmp	r3, #241	@ 0xf1
 8002052:	f300 81bf 	bgt.w	80023d4 <decodeOn_USB+0x3a0>
 8002056:	2bf0      	cmp	r3, #240	@ 0xf0
 8002058:	d036      	beq.n	80020c8 <decodeOn_USB+0x94>
 800205a:	2bf0      	cmp	r3, #240	@ 0xf0
 800205c:	f300 81ba 	bgt.w	80023d4 <decodeOn_USB+0x3a0>
 8002060:	2bb1      	cmp	r3, #177	@ 0xb1
 8002062:	dc2d      	bgt.n	80020c0 <decodeOn_USB+0x8c>
 8002064:	2ba0      	cmp	r3, #160	@ 0xa0
 8002066:	f2c0 81b5 	blt.w	80023d4 <decodeOn_USB+0x3a0>
 800206a:	3ba0      	subs	r3, #160	@ 0xa0
 800206c:	2b11      	cmp	r3, #17
 800206e:	f200 81b1 	bhi.w	80023d4 <decodeOn_USB+0x3a0>
 8002072:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <decodeOn_USB+0x44>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020e3 	.word	0x080020e3
 800207c:	08002159 	.word	0x08002159
 8002080:	080021b3 	.word	0x080021b3
 8002084:	0800223f 	.word	0x0800223f
 8002088:	080022dd 	.word	0x080022dd
 800208c:	080023d5 	.word	0x080023d5
 8002090:	080023d5 	.word	0x080023d5
 8002094:	080023d5 	.word	0x080023d5
 8002098:	080023d5 	.word	0x080023d5
 800209c:	080023d5 	.word	0x080023d5
 80020a0:	080023d5 	.word	0x080023d5
 80020a4:	080023d5 	.word	0x080023d5
 80020a8:	080023d5 	.word	0x080023d5
 80020ac:	080023d5 	.word	0x080023d5
 80020b0:	080023d5 	.word	0x080023d5
 80020b4:	080023d5 	.word	0x080023d5
 80020b8:	080023d5 	.word	0x080023d5
 80020bc:	080023e7 	.word	0x080023e7
 80020c0:	2bde      	cmp	r3, #222	@ 0xde
 80020c2:	f000 8192 	beq.w	80023ea <decodeOn_USB+0x3b6>
 80020c6:	e185      	b.n	80023d4 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	220d      	movs	r2, #13
 80020cc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80020d6:	2301      	movs	r3, #1
 80020d8:	21f0      	movs	r1, #240	@ 0xf0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fd16 	bl	8001b0c <comm_sendCMD>
		break;
 80020e0:	e184      	b.n	80023ec <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	785b      	ldrb	r3, [r3, #1]
 80020e6:	3303      	adds	r3, #3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d82a      	bhi.n	800214a <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	3303      	adds	r3, #3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002102:	4aa8      	ldr	r2, [pc, #672]	@ (80023a4 <decodeOn_USB+0x370>)
 8002104:	3308      	adds	r3, #8
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	885a      	ldrh	r2, [r3, #2]
 800210c:	4ba6      	ldr	r3, [pc, #664]	@ (80023a8 <decodeOn_USB+0x374>)
 800210e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	3303      	adds	r3, #3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002124:	4ba0      	ldr	r3, [pc, #640]	@ (80023a8 <decodeOn_USB+0x374>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800212e:	4b9e      	ldr	r3, [pc, #632]	@ (80023a8 <decodeOn_USB+0x374>)
 8002130:	785a      	ldrb	r2, [r3, #1]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800213e:	2303      	movs	r3, #3
 8002140:	21a0      	movs	r1, #160	@ 0xa0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fce2 	bl	8001b0c <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
		}
		break;
 8002148:	e150      	b.n	80023ec <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
 800214a:	2306      	movs	r3, #6
 800214c:	4a97      	ldr	r2, [pc, #604]	@ (80023ac <decodeOn_USB+0x378>)
 800214e:	21ee      	movs	r1, #238	@ 0xee
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fcdb 	bl	8001b0c <comm_sendCMD>
		break;
 8002156:	e149      	b.n	80023ec <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e01d      	b.n	800219a <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	4a90      	ldr	r2, [pc, #576]	@ (80023a4 <decodeOn_USB+0x370>)
 8002162:	3308      	adds	r3, #8
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	885a      	ldrh	r2, [r3, #2]
 800216a:	4b8f      	ldr	r3, [pc, #572]	@ (80023a8 <decodeOn_USB+0x374>)
 800216c:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4a8d      	ldr	r2, [pc, #564]	@ (80023a8 <decodeOn_USB+0x374>)
 8002174:	7811      	ldrb	r1, [r2, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	3301      	adds	r3, #1
 8002186:	4a88      	ldr	r2, [pc, #544]	@ (80023a8 <decodeOn_USB+0x374>)
 8002188:	7851      	ldrb	r1, [r2, #1]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	460a      	mov	r2, r1
 8002190:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	3301      	adds	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b08      	cmp	r3, #8
 800219e:	d9de      	bls.n	800215e <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80021a6:	2311      	movs	r3, #17
 80021a8:	21a1      	movs	r1, #161	@ 0xa1
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fcae 	bl	8001b0c <comm_sendCMD>
		break;
 80021b0:	e11c      	b.n	80023ec <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	3303      	adds	r3, #3
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d115      	bne.n	80021f0 <decodeOn_USB+0x1bc>
			Motor_Set_PER_Speed(&MotorL, RXBUF[RXCMD + 2]);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	3304      	adds	r3, #4
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	4876      	ldr	r0, [pc, #472]	@ (80023b0 <decodeOn_USB+0x37c>)
 80021d8:	f7ff fa88 	bl	80016ec <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 80021dc:	4b75      	ldr	r3, [pc, #468]	@ (80023b4 <decodeOn_USB+0x380>)
 80021de:	220d      	movs	r2, #13
 80021e0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80021e4:	2301      	movs	r3, #1
 80021e6:	4a74      	ldr	r2, [pc, #464]	@ (80023b8 <decodeOn_USB+0x384>)
 80021e8:	21a2      	movs	r1, #162	@ 0xa2
 80021ea:	4872      	ldr	r0, [pc, #456]	@ (80023b4 <decodeOn_USB+0x380>)
 80021ec:	f7ff fc8e 	bl	8001b0c <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	3303      	adds	r3, #3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d116      	bne.n	8002230 <decodeOn_USB+0x1fc>
			Motor_Set_PER_Speed(&MotorR, RXBUF[RXCMD + 2]);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	3304      	adds	r3, #4
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002210:	b25b      	sxtb	r3, r3
 8002212:	4619      	mov	r1, r3
 8002214:	4869      	ldr	r0, [pc, #420]	@ (80023bc <decodeOn_USB+0x388>)
 8002216:	f7ff fa69 	bl	80016ec <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 800221a:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <decodeOn_USB+0x380>)
 800221c:	220d      	movs	r2, #13
 800221e:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002222:	2301      	movs	r3, #1
 8002224:	4a64      	ldr	r2, [pc, #400]	@ (80023b8 <decodeOn_USB+0x384>)
 8002226:	21a2      	movs	r1, #162	@ 0xa2
 8002228:	4862      	ldr	r0, [pc, #392]	@ (80023b4 <decodeOn_USB+0x380>)
 800222a:	f7ff fc6f 	bl	8001b0c <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 800222e:	e0dd      	b.n	80023ec <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
 8002230:	2308      	movs	r3, #8
 8002232:	4a63      	ldr	r2, [pc, #396]	@ (80023c0 <decodeOn_USB+0x38c>)
 8002234:	21ee      	movs	r1, #238	@ 0xee
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fc68 	bl	8001b0c <comm_sendCMD>
		break;
 800223c:	e0d6      	b.n	80023ec <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	3303      	adds	r3, #3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11a      	bne.n	8002286 <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 8002250:	4b5c      	ldr	r3, [pc, #368]	@ (80023c4 <decodeOn_USB+0x390>)
 8002252:	891a      	ldrh	r2, [r3, #8]
 8002254:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <decodeOn_USB+0x374>)
 8002256:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002260:	4b51      	ldr	r3, [pc, #324]	@ (80023a8 <decodeOn_USB+0x374>)
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800226a:	4b4f      	ldr	r3, [pc, #316]	@ (80023a8 <decodeOn_USB+0x374>)
 800226c:	785a      	ldrb	r2, [r3, #1]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800227a:	2303      	movs	r3, #3
 800227c:	21a3      	movs	r1, #163	@ 0xa3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fc44 	bl	8001b0c <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8002284:	e0b2      	b.n	80023ec <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	3303      	adds	r3, #3
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002294:	2b01      	cmp	r3, #1
 8002296:	d11a      	bne.n	80022ce <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 8002298:	4b4b      	ldr	r3, [pc, #300]	@ (80023c8 <decodeOn_USB+0x394>)
 800229a:	891a      	ldrh	r2, [r3, #8]
 800229c:	4b42      	ldr	r3, [pc, #264]	@ (80023a8 <decodeOn_USB+0x374>)
 800229e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <decodeOn_USB+0x374>)
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <decodeOn_USB+0x374>)
 80022b4:	785a      	ldrb	r2, [r3, #1]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80022c2:	2303      	movs	r3, #3
 80022c4:	21a3      	movs	r1, #163	@ 0xa3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fc20 	bl	8001b0c <comm_sendCMD>
		break;
 80022cc:	e08e      	b.n	80023ec <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
 80022ce:	230a      	movs	r3, #10
 80022d0:	4a3e      	ldr	r2, [pc, #248]	@ (80023cc <decodeOn_USB+0x398>)
 80022d2:	21ee      	movs	r1, #238	@ 0xee
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fc19 	bl	8001b0c <comm_sendCMD>
		break;
 80022da:	e087      	b.n	80023ec <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 80022dc:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <decodeOn_USB+0x39c>)
 80022de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <decodeOn_USB+0x374>)
 80022e4:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 80022e6:	4b30      	ldr	r3, [pc, #192]	@ (80023a8 <decodeOn_USB+0x374>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 80022f0:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <decodeOn_USB+0x374>)
 80022f2:	785a      	ldrb	r2, [r3, #1]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 80022fa:	4b35      	ldr	r3, [pc, #212]	@ (80023d0 <decodeOn_USB+0x39c>)
 80022fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002300:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <decodeOn_USB+0x374>)
 8002302:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8002304:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <decodeOn_USB+0x374>)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <decodeOn_USB+0x374>)
 8002310:	785a      	ldrb	r2, [r3, #1]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <decodeOn_USB+0x39c>)
 800231a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <decodeOn_USB+0x374>)
 8002320:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8002322:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <decodeOn_USB+0x374>)
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 800232c:	4b1e      	ldr	r3, [pc, #120]	@ (80023a8 <decodeOn_USB+0x374>)
 800232e:	785a      	ldrb	r2, [r3, #1]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8002336:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <decodeOn_USB+0x39c>)
 8002338:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <decodeOn_USB+0x374>)
 800233e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <decodeOn_USB+0x374>)
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 800234a:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <decodeOn_USB+0x374>)
 800234c:	785a      	ldrb	r2, [r3, #1]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8002354:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <decodeOn_USB+0x39c>)
 8002356:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <decodeOn_USB+0x374>)
 800235c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <decodeOn_USB+0x374>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8002368:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <decodeOn_USB+0x374>)
 800236a:	785a      	ldrb	r2, [r3, #1]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8002372:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <decodeOn_USB+0x39c>)
 8002374:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <decodeOn_USB+0x374>)
 800237a:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <decodeOn_USB+0x374>)
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <decodeOn_USB+0x374>)
 8002388:	785a      	ldrb	r2, [r3, #1]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002396:	230c      	movs	r3, #12
 8002398:	21a4      	movs	r1, #164	@ 0xa4
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fbb6 	bl	8001b0c <comm_sendCMD>
		break;
 80023a0:	e024      	b.n	80023ec <decodeOn_USB+0x3b8>
 80023a2:	bf00      	nop
 80023a4:	20000f78 	.word	0x20000f78
 80023a8:	20000acc 	.word	0x20000acc
 80023ac:	08011260 	.word	0x08011260
 80023b0:	20000ad4 	.word	0x20000ad4
 80023b4:	20000f9c 	.word	0x20000f9c
 80023b8:	200011ac 	.word	0x200011ac
 80023bc:	20000aec 	.word	0x20000aec
 80023c0:	08011268 	.word	0x08011268
 80023c4:	20000b04 	.word	0x20000b04
 80023c8:	20000b10 	.word	0x20000b10
 80023cc:	08011274 	.word	0x08011274
 80023d0:	20000b1c 	.word	0x20000b1c
	default:
		comm_sendCMD(data, SYSERROR, (uint8_t*)"NO CMD", 17);
 80023d4:	2311      	movs	r3, #17
 80023d6:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <decodeOn_USB+0x3c0>)
 80023d8:	21ee      	movs	r1, #238	@ 0xee
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fb96 	bl	8001b0c <comm_sendCMD>
		break;
 80023e0:	e004      	b.n	80023ec <decodeOn_USB+0x3b8>
		break;
 80023e2:	bf00      	nop
 80023e4:	e002      	b.n	80023ec <decodeOn_USB+0x3b8>
		break;
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <decodeOn_USB+0x3b8>
		break;
 80023ea:	bf00      	nop
	}
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08011280 	.word	0x08011280

080023f8 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]

}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <task_10ms>:

void task_10ms(){
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0

	Debouncer_Task();
 8002414:	f7fe f9fa 	bl	800080c <Debouncer_Task>

	Encoder_Task(&EncoderL);
 8002418:	4826      	ldr	r0, [pc, #152]	@ (80024b4 <task_10ms+0xa4>)
 800241a:	f7ff f8f7 	bl	800160c <Encoder_Task>
	Encoder_Task(&EncoderR);
 800241e:	4826      	ldr	r0, [pc, #152]	@ (80024b8 <task_10ms+0xa8>)
 8002420:	f7ff f8f4 	bl	800160c <Encoder_Task>

	is100ms1--;
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <task_10ms+0xac>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <task_10ms+0xac>)
 800242e:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <task_10ms+0xac>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11a      	bne.n	800246e <task_10ms+0x5e>
		is100ms1 = 10;
 8002438:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <task_10ms+0xac>)
 800243a:	220a      	movs	r2, #10
 800243c:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800243e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002442:	481f      	ldr	r0, [pc, #124]	@ (80024c0 <task_10ms+0xb0>)
 8002444:	f002 ff9f 	bl	8005386 <HAL_GPIO_TogglePin>

		is1s--;
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <task_10ms+0xb4>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <task_10ms+0xb4>)
 8002452:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <task_10ms+0xb4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d108      	bne.n	800246e <task_10ms+0x5e>
			is1s = 10;
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <task_10ms+0xb4>)
 800245e:	220a      	movs	r2, #10
 8002460:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 8002462:	4814      	ldr	r0, [pc, #80]	@ (80024b4 <task_10ms+0xa4>)
 8002464:	f7ff f912 	bl	800168c <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 8002468:	4813      	ldr	r0, [pc, #76]	@ (80024b8 <task_10ms+0xa8>)
 800246a:	f7ff f90f 	bl	800168c <Encoder_1s_Elapsed>
		}
	}

	Display.refreshCounter--;
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <task_10ms+0xb8>)
 8002470:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8002474:	3b01      	subs	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <task_10ms+0xb8>)
 800247a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter){
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <task_10ms+0xb8>)
 8002480:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <task_10ms+0x88>
		Display.refreshCounter = Display.refreshRate;
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <task_10ms+0xb8>)
 800248a:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800248e:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <task_10ms+0xb8>)
 8002490:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8002494:	f7ff fc16 	bl	8001cc4 <OLED_Print_Data_Task>
	}

	Motor_Break_Timeout(&MotorL);
 8002498:	480c      	ldr	r0, [pc, #48]	@ (80024cc <task_10ms+0xbc>)
 800249a:	f7ff f98c 	bl	80017b6 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800249e:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <task_10ms+0xc0>)
 80024a0:	f7ff f989 	bl	80017b6 <Motor_Break_Timeout>
	IS10MS = FALSE;
 80024a4:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <task_10ms+0xc4>)
 80024a6:	7813      	ldrb	r3, [r2, #0]
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	7013      	strb	r3, [r2, #0]
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000b04 	.word	0x20000b04
 80024b8:	20000b10 	.word	0x20000b10
 80024bc:	20000008 	.word	0x20000008
 80024c0:	40020800 	.word	0x40020800
 80024c4:	20000009 	.word	0x20000009
 80024c8:	20000b64 	.word	0x20000b64
 80024cc:	20000ad4 	.word	0x20000ad4
 80024d0:	20000aec 	.word	0x20000aec
 80024d4:	20000ac8 	.word	0x20000ac8

080024d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024dc:	f001 fabe 	bl	8003a5c <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 80024e0:	4b3c      	ldr	r3, [pc, #240]	@ (80025d4 <main+0xfc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  Display.isInit = FALSE;
 80024e8:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <main+0x100>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]

  Display.state = INIT;
 80024ee:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <main+0x100>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f6:	f000 f899 	bl	800262c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024fa:	f000 fb2b 	bl	8002b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80024fe:	f000 faeb 	bl	8002ad8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002502:	f000 f8fd 	bl	8002700 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002506:	f00d fc6b 	bl	800fde0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800250a:	f000 f9e9 	bl	80028e0 <MX_TIM1_Init>
  MX_I2C1_Init();
 800250e:	f000 f9b9 	bl	8002884 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002512:	f000 fa35 	bl	8002980 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002516:	f000 fab5 	bl	8002a84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 800251a:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <main+0x104>)
 800251c:	4930      	ldr	r1, [pc, #192]	@ (80025e0 <main+0x108>)
 800251e:	4831      	ldr	r0, [pc, #196]	@ (80025e4 <main+0x10c>)
 8002520:	f7ff f964 	bl	80017ec <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 8002524:	4830      	ldr	r0, [pc, #192]	@ (80025e8 <main+0x110>)
 8002526:	f00d fdad 	bl	8010084 <CDC_Attach_Rx>

  HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 800252a:	2201      	movs	r2, #1
 800252c:	492f      	ldr	r1, [pc, #188]	@ (80025ec <main+0x114>)
 800252e:	4830      	ldr	r0, [pc, #192]	@ (80025f0 <main+0x118>)
 8002530:	f009 fa18 	bl	800b964 <HAL_UART_Receive_IT>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 8002534:	f7fe f902 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 8002538:	492e      	ldr	r1, [pc, #184]	@ (80025f4 <main+0x11c>)
 800253a:	482f      	ldr	r0, [pc, #188]	@ (80025f8 <main+0x120>)
 800253c:	f7fe f932 	bl	80007a4 <Debounce_Add>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <main+0x124>)
 8002546:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  Init_Timing();
 8002548:	f000 fbe6 	bl	8002d18 <Init_Timing>

  Init_MPU6050();
 800254c:	f000 fc28 	bl	8002da0 <Init_MPU6050>

  Init_Display();
 8002550:	f000 fc5e 	bl	8002e10 <Init_Display>

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 8002554:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <main+0x128>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	b29b      	uxth	r3, r3
 800255c:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <main+0x12c>)
 800255e:	492a      	ldr	r1, [pc, #168]	@ (8002608 <main+0x130>)
 8002560:	482a      	ldr	r0, [pc, #168]	@ (800260c <main+0x134>)
 8002562:	f7ff f8a4 	bl	80016ae <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8002566:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <main+0x128>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	b29b      	uxth	r3, r3
 800256e:	4a28      	ldr	r2, [pc, #160]	@ (8002610 <main+0x138>)
 8002570:	4928      	ldr	r1, [pc, #160]	@ (8002614 <main+0x13c>)
 8002572:	4829      	ldr	r0, [pc, #164]	@ (8002618 <main+0x140>)
 8002574:	f7ff f89b 	bl	80016ae <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8002578:	210a      	movs	r1, #10
 800257a:	4828      	ldr	r0, [pc, #160]	@ (800261c <main+0x144>)
 800257c:	f7ff f827 	bl	80015ce <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8002580:	210a      	movs	r1, #10
 8002582:	4827      	ldr	r0, [pc, #156]	@ (8002620 <main+0x148>)
 8002584:	f7ff f823 	bl	80015ce <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  Car.state = IDLE;
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <main+0x14c>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
  Display.timer = HAL_GetTick();
 800258e:	f001 facb 	bl	8003b28 <HAL_GetTick>
 8002592:	4603      	mov	r3, r0
 8002594:	4a10      	ldr	r2, [pc, #64]	@ (80025d8 <main+0x100>)
 8002596:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 800259a:	4812      	ldr	r0, [pc, #72]	@ (80025e4 <main+0x10c>)
 800259c:	f7ff f95a 	bl	8001854 <Comm_Task>
	Display_UpdateScreen_Task();
 80025a0:	f7fe fce8 	bl	8000f74 <Display_UpdateScreen_Task>
	  /* END USER TASK */

	if(IS10MS)
 80025a4:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <main+0x150>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <main+0xde>
		task_10ms();
 80025b2:	f7ff ff2d 	bl	8002410 <task_10ms>

	switch(Car.state){
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <main+0x14c>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d005      	beq.n	80025ca <main+0xf2>
 80025be:	2b02      	cmp	r3, #2
 80025c0:	dceb      	bgt.n	800259a <main+0xc2>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <main+0xf6>
 80025c6:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 80025c8:	e002      	b.n	80025d0 <main+0xf8>
	case GO_FROM_TO:

		break;
 80025ca:	bf00      	nop
 80025cc:	e7e5      	b.n	800259a <main+0xc2>
		break;
 80025ce:	bf00      	nop
	Comm_Task(&USB.data);
 80025d0:	e7e3      	b.n	800259a <main+0xc2>
 80025d2:	bf00      	nop
 80025d4:	20000b1c 	.word	0x20000b1c
 80025d8:	20000b64 	.word	0x20000b64
 80025dc:	08003109 	.word	0x08003109
 80025e0:	08002035 	.word	0x08002035
 80025e4:	20000f9c 	.word	0x20000f9c
 80025e8:	0800317d 	.word	0x0800317d
 80025ec:	200011d1 	.word	0x200011d1
 80025f0:	20000a7c 	.word	0x20000a7c
 80025f4:	080023f9 	.word	0x080023f9
 80025f8:	080030f1 	.word	0x080030f1
 80025fc:	20000ad0 	.word	0x20000ad0
 8002600:	20000a34 	.word	0x20000a34
 8002604:	080031d5 	.word	0x080031d5
 8002608:	08003319 	.word	0x08003319
 800260c:	20000ad4 	.word	0x20000ad4
 8002610:	08003279 	.word	0x08003279
 8002614:	0800333d 	.word	0x0800333d
 8002618:	20000aec 	.word	0x20000aec
 800261c:	20000b04 	.word	0x20000b04
 8002620:	20000b10 	.word	0x20000b10
 8002624:	200011d0 	.word	0x200011d0
 8002628:	20000ac8 	.word	0x20000ac8

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b094      	sub	sp, #80	@ 0x50
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	2230      	movs	r2, #48	@ 0x30
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f00e f96e 	bl	801091c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <SystemClock_Config+0xcc>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <SystemClock_Config+0xcc>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <SystemClock_Config+0xcc>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <SystemClock_Config+0xd0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <SystemClock_Config+0xd0>)
 8002676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b1f      	ldr	r3, [pc, #124]	@ (80026fc <SystemClock_Config+0xd0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002688:	2301      	movs	r3, #1
 800268a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800268c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002692:	2302      	movs	r3, #2
 8002694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002696:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800269c:	2319      	movs	r3, #25
 800269e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80026a0:	23c0      	movs	r3, #192	@ 0xc0
 80026a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026a4:	2302      	movs	r3, #2
 80026a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026a8:	2304      	movs	r3, #4
 80026aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ac:	f107 0320 	add.w	r3, r7, #32
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 fcd1 	bl	800a058 <HAL_RCC_OscConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026bc:	f000 fe50 	bl	8003360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c0:	230f      	movs	r3, #15
 80026c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c4:	2302      	movs	r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	2103      	movs	r1, #3
 80026dc:	4618      	mov	r0, r3
 80026de:	f007 ff33 	bl	800a548 <HAL_RCC_ClockConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026e8:	f000 fe3a 	bl	8003360 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80026ec:	f008 f812 	bl	800a714 <HAL_RCC_EnableCSS>
}
 80026f0:	bf00      	nop
 80026f2:	3750      	adds	r7, #80	@ 0x50
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000

08002700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002706:	463b      	mov	r3, r7
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002712:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002714:	4a59      	ldr	r2, [pc, #356]	@ (800287c <MX_ADC1_Init+0x17c>)
 8002716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002718:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <MX_ADC1_Init+0x178>)
 800271a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800271e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002720:	4b55      	ldr	r3, [pc, #340]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002726:	4b54      	ldr	r3, [pc, #336]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002728:	2201      	movs	r2, #1
 800272a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800272c:	4b52      	ldr	r3, [pc, #328]	@ (8002878 <MX_ADC1_Init+0x178>)
 800272e:	2200      	movs	r2, #0
 8002730:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002732:	4b51      	ldr	r3, [pc, #324]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800273a:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <MX_ADC1_Init+0x178>)
 800273c:	2200      	movs	r2, #0
 800273e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002740:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002742:	4a4f      	ldr	r2, [pc, #316]	@ (8002880 <MX_ADC1_Init+0x180>)
 8002744:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002746:	4b4c      	ldr	r3, [pc, #304]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 800274c:	4b4a      	ldr	r3, [pc, #296]	@ (8002878 <MX_ADC1_Init+0x178>)
 800274e:	2209      	movs	r2, #9
 8002750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002752:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <MX_ADC1_Init+0x178>)
 800275c:	2201      	movs	r2, #1
 800275e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002760:	4845      	ldr	r0, [pc, #276]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002762:	f001 fa11 	bl	8003b88 <HAL_ADC_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800276c:	f000 fdf8 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002770:	2301      	movs	r3, #1
 8002772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002778:	2303      	movs	r3, #3
 800277a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	483d      	ldr	r0, [pc, #244]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002782:	f001 fc63 	bl	800404c <HAL_ADC_ConfigChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800278c:	f000 fde8 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002790:	2302      	movs	r3, #2
 8002792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002794:	2302      	movs	r3, #2
 8002796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002798:	463b      	mov	r3, r7
 800279a:	4619      	mov	r1, r3
 800279c:	4836      	ldr	r0, [pc, #216]	@ (8002878 <MX_ADC1_Init+0x178>)
 800279e:	f001 fc55 	bl	800404c <HAL_ADC_ConfigChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80027a8:	f000 fdda 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80027ac:	2303      	movs	r3, #3
 80027ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80027b0:	2303      	movs	r3, #3
 80027b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b4:	463b      	mov	r3, r7
 80027b6:	4619      	mov	r1, r3
 80027b8:	482f      	ldr	r0, [pc, #188]	@ (8002878 <MX_ADC1_Init+0x178>)
 80027ba:	f001 fc47 	bl	800404c <HAL_ADC_ConfigChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80027c4:	f000 fdcc 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80027c8:	2304      	movs	r3, #4
 80027ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80027cc:	2304      	movs	r3, #4
 80027ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	4828      	ldr	r0, [pc, #160]	@ (8002878 <MX_ADC1_Init+0x178>)
 80027d6:	f001 fc39 	bl	800404c <HAL_ADC_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80027e0:	f000 fdbe 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80027e4:	2305      	movs	r3, #5
 80027e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80027e8:	2305      	movs	r3, #5
 80027ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ec:	463b      	mov	r3, r7
 80027ee:	4619      	mov	r1, r3
 80027f0:	4821      	ldr	r0, [pc, #132]	@ (8002878 <MX_ADC1_Init+0x178>)
 80027f2:	f001 fc2b 	bl	800404c <HAL_ADC_ConfigChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80027fc:	f000 fdb0 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002800:	2306      	movs	r3, #6
 8002802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002804:	2306      	movs	r3, #6
 8002806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	4619      	mov	r1, r3
 800280c:	481a      	ldr	r0, [pc, #104]	@ (8002878 <MX_ADC1_Init+0x178>)
 800280e:	f001 fc1d 	bl	800404c <HAL_ADC_ConfigChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002818:	f000 fda2 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800281c:	2307      	movs	r3, #7
 800281e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002820:	2307      	movs	r3, #7
 8002822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002824:	463b      	mov	r3, r7
 8002826:	4619      	mov	r1, r3
 8002828:	4813      	ldr	r0, [pc, #76]	@ (8002878 <MX_ADC1_Init+0x178>)
 800282a:	f001 fc0f 	bl	800404c <HAL_ADC_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002834:	f000 fd94 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002838:	2308      	movs	r3, #8
 800283a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800283c:	2308      	movs	r3, #8
 800283e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	480c      	ldr	r0, [pc, #48]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002846:	f001 fc01 	bl	800404c <HAL_ADC_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002850:	f000 fd86 	bl	8003360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002854:	2309      	movs	r3, #9
 8002856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002858:	2309      	movs	r3, #9
 800285a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285c:	463b      	mov	r3, r7
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_ADC1_Init+0x178>)
 8002862:	f001 fbf3 	bl	800404c <HAL_ADC_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800286c:	f000 fd78 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000830 	.word	0x20000830
 800287c:	40012000 	.word	0x40012000
 8002880:	0f000001 	.word	0x0f000001

08002884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002888:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <MX_I2C1_Init+0x50>)
 800288a:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <MX_I2C1_Init+0x54>)
 800288c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <MX_I2C1_Init+0x50>)
 8002890:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <MX_I2C1_Init+0x58>)
 8002892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <MX_I2C1_Init+0x50>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <MX_I2C1_Init+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028c2:	f002 fd93 	bl	80053ec <HAL_I2C_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028cc:	f000 fd48 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200008d8 	.word	0x200008d8
 80028d8:	40005400 	.word	0x40005400
 80028dc:	00061a80 	.word	0x00061a80

080028e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f4:	463b      	mov	r3, r7
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <MX_TIM1_Init+0x98>)
 80028fe:	4a1f      	ldr	r2, [pc, #124]	@ (800297c <MX_TIM1_Init+0x9c>)
 8002900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <MX_TIM1_Init+0x98>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <MX_TIM1_Init+0x98>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <MX_TIM1_Init+0x98>)
 8002910:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <MX_TIM1_Init+0x98>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <MX_TIM1_Init+0x98>)
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <MX_TIM1_Init+0x98>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002928:	4813      	ldr	r0, [pc, #76]	@ (8002978 <MX_TIM1_Init+0x98>)
 800292a:	f008 f814 	bl	800a956 <HAL_TIM_Base_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002934:	f000 fd14 	bl	8003360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800293c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	4619      	mov	r1, r3
 8002944:	480c      	ldr	r0, [pc, #48]	@ (8002978 <MX_TIM1_Init+0x98>)
 8002946:	f008 fb73 	bl	800b030 <HAL_TIM_ConfigClockSource>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002950:	f000 fd06 	bl	8003360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800295c:	463b      	mov	r3, r7
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	@ (8002978 <MX_TIM1_Init+0x98>)
 8002962:	f008 ff2d 	bl	800b7c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800296c:	f000 fcf8 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	200009ec 	.word	0x200009ec
 800297c:	40010000 	.word	0x40010000

08002980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08e      	sub	sp, #56	@ 0x38
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002994:	f107 0320 	add.w	r3, r7, #32
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029b0:	4b32      	ldr	r3, [pc, #200]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029b2:	4a33      	ldr	r2, [pc, #204]	@ (8002a80 <MX_TIM3_Init+0x100>)
 80029b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80029b6:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029b8:	220f      	movs	r2, #15
 80029ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80029c2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029c4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80029c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029d6:	4829      	ldr	r0, [pc, #164]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029d8:	f007 ffbd 	bl	800a956 <HAL_TIM_Base_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029e2:	f000 fcbd 	bl	8003360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029f0:	4619      	mov	r1, r3
 80029f2:	4822      	ldr	r0, [pc, #136]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 80029f4:	f008 fb1c 	bl	800b030 <HAL_TIM_ConfigClockSource>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80029fe:	f000 fcaf 	bl	8003360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a02:	481e      	ldr	r0, [pc, #120]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 8002a04:	f008 f858 	bl	800aab8 <HAL_TIM_PWM_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a0e:	f000 fca7 	bl	8003360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4816      	ldr	r0, [pc, #88]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 8002a22:	f008 fecd 	bl	800b7c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a2c:	f000 fc98 	bl	8003360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	@ 0x60
 8002a32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 8002a48:	f008 fa30 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002a52:	f000 fc85 	bl	8003360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4807      	ldr	r0, [pc, #28]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 8002a5e:	f008 fa25 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002a68:	f000 fc7a 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a6c:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <MX_TIM3_Init+0xfc>)
 8002a6e:	f000 fe4b 	bl	8003708 <HAL_TIM_MspPostInit>

}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	@ 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000a34 	.word	0x20000a34
 8002a80:	40000400 	.word	0x40000400

08002a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <MX_USART1_UART_Init+0x50>)
 8002a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	@ (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002abc:	f008 ff02 	bl	800b8c4 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ac6:	f000 fc4b 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000a7c 	.word	0x20000a7c
 8002ad4:	40011000 	.word	0x40011000

08002ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <MX_DMA_Init+0x78>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b50 <MX_DMA_Init+0x78>)
 8002ae8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <MX_DMA_Init+0x78>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <MX_DMA_Init+0x78>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <MX_DMA_Init+0x78>)
 8002b04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <MX_DMA_Init+0x78>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	200b      	movs	r0, #11
 8002b1c:	f001 fe2b 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b20:	200b      	movs	r0, #11
 8002b22:	f001 fe44 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	200c      	movs	r0, #12
 8002b2c:	f001 fe23 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b30:	200c      	movs	r0, #12
 8002b32:	f001 fe3c 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2038      	movs	r0, #56	@ 0x38
 8002b3c:	f001 fe1b 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b40:	2038      	movs	r0, #56	@ 0x38
 8002b42:	f001 fe34 	bl	80047ae <HAL_NVIC_EnableIRQ>

}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	@ 0x28
 8002b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a65      	ldr	r2, [pc, #404]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b5c      	ldr	r3, [pc, #368]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a57      	ldr	r2, [pc, #348]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b55      	ldr	r3, [pc, #340]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	4b51      	ldr	r3, [pc, #324]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a50      	ldr	r2, [pc, #320]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b4e      	ldr	r3, [pc, #312]	@ (8002d08 <MX_GPIO_Init+0x1b4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002be0:	484a      	ldr	r0, [pc, #296]	@ (8002d0c <MX_GPIO_Init+0x1b8>)
 8002be2:	f002 fbb7 	bl	8005354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002bec:	4848      	ldr	r0, [pc, #288]	@ (8002d10 <MX_GPIO_Init+0x1bc>)
 8002bee:	f002 fbb1 	bl	8005354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2108      	movs	r1, #8
 8002bf6:	4847      	ldr	r0, [pc, #284]	@ (8002d14 <MX_GPIO_Init+0x1c0>)
 8002bf8:	f002 fbac 	bl	8005354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002bfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	483d      	ldr	r0, [pc, #244]	@ (8002d0c <MX_GPIO_Init+0x1b8>)
 8002c16:	f002 fa01 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002c26:	f107 0314 	add.w	r3, r7, #20
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4838      	ldr	r0, [pc, #224]	@ (8002d10 <MX_GPIO_Init+0x1bc>)
 8002c2e:	f002 f9f5 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8002c32:	2304      	movs	r3, #4
 8002c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4619      	mov	r1, r3
 8002c44:	4833      	ldr	r0, [pc, #204]	@ (8002d14 <MX_GPIO_Init+0x1c0>)
 8002c46:	f002 f9e9 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	482c      	ldr	r0, [pc, #176]	@ (8002d14 <MX_GPIO_Init+0x1c0>)
 8002c62:	f002 f9db 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c66:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c78:	2305      	movs	r3, #5
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	4824      	ldr	r0, [pc, #144]	@ (8002d14 <MX_GPIO_Init+0x1c0>)
 8002c84:	f002 f9ca 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481c      	ldr	r0, [pc, #112]	@ (8002d10 <MX_GPIO_Init+0x1bc>)
 8002ca0:	f002 f9bc 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8002ca4:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4814      	ldr	r0, [pc, #80]	@ (8002d10 <MX_GPIO_Init+0x1bc>)
 8002cbe:	f002 f9ad 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480e      	ldr	r0, [pc, #56]	@ (8002d14 <MX_GPIO_Init+0x1c0>)
 8002cda:	f002 f99f 	bl	800501c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2017      	movs	r0, #23
 8002ce4:	f001 fd47 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ce8:	2017      	movs	r0, #23
 8002cea:	f001 fd60 	bl	80047ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2028      	movs	r0, #40	@ 0x28
 8002cf4:	f001 fd3f 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cf8:	2028      	movs	r0, #40	@ 0x28
 8002cfa:	f001 fd58 	bl	80047ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002cfe:	bf00      	nop
 8002d00:	3728      	adds	r7, #40	@ 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400

08002d18 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8002d1c:	4819      	ldr	r0, [pc, #100]	@ (8002d84 <Init_Timing+0x6c>)
 8002d1e:	f007 fe69 	bl	800a9f4 <HAL_TIM_Base_Start_IT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8002d28:	2309      	movs	r3, #9
 8002d2a:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <Init_Timing+0x70>)
 8002d2c:	21ee      	movs	r1, #238	@ 0xee
 8002d2e:	4817      	ldr	r0, [pc, #92]	@ (8002d8c <Init_Timing+0x74>)
 8002d30:	f7fe feec 	bl	8001b0c <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8002d34:	4816      	ldr	r0, [pc, #88]	@ (8002d90 <Init_Timing+0x78>)
 8002d36:	f007 fe5d 	bl	800a9f4 <HAL_TIM_Base_Start_IT>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002d40:	230e      	movs	r3, #14
 8002d42:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <Init_Timing+0x7c>)
 8002d44:	21ee      	movs	r1, #238	@ 0xee
 8002d46:	4811      	ldr	r0, [pc, #68]	@ (8002d8c <Init_Timing+0x74>)
 8002d48:	f7fe fee0 	bl	8001b0c <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4810      	ldr	r0, [pc, #64]	@ (8002d90 <Init_Timing+0x78>)
 8002d50:	f007 ff0c 	bl	800ab6c <HAL_TIM_PWM_Start>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002d5a:	230e      	movs	r3, #14
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d98 <Init_Timing+0x80>)
 8002d5e:	21ee      	movs	r1, #238	@ 0xee
 8002d60:	480a      	ldr	r0, [pc, #40]	@ (8002d8c <Init_Timing+0x74>)
 8002d62:	f7fe fed3 	bl	8001b0c <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8002d66:	2104      	movs	r1, #4
 8002d68:	4809      	ldr	r0, [pc, #36]	@ (8002d90 <Init_Timing+0x78>)
 8002d6a:	f007 feff 	bl	800ab6c <HAL_TIM_PWM_Start>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8002d74:	230e      	movs	r3, #14
 8002d76:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <Init_Timing+0x84>)
 8002d78:	21ee      	movs	r1, #238	@ 0xee
 8002d7a:	4804      	ldr	r0, [pc, #16]	@ (8002d8c <Init_Timing+0x74>)
 8002d7c:	f7fe fec6 	bl	8001b0c <comm_sendCMD>
	  }
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200009ec 	.word	0x200009ec
 8002d88:	08011288 	.word	0x08011288
 8002d8c:	20000f9c 	.word	0x20000f9c
 8002d90:	20000a34 	.word	0x20000a34
 8002d94:	08011294 	.word	0x08011294
 8002d98:	080112a4 	.word	0x080112a4
 8002d9c:	080112b4 	.word	0x080112b4

08002da0 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8002da4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002da8:	2201      	movs	r2, #1
 8002daa:	21d0      	movs	r1, #208	@ 0xd0
 8002dac:	4811      	ldr	r0, [pc, #68]	@ (8002df4 <Init_MPU6050+0x54>)
 8002dae:	f003 fb8f 	bl	80064d0 <HAL_I2C_IsDeviceReady>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8002db8:	230d      	movs	r3, #13
 8002dba:	4a0f      	ldr	r2, [pc, #60]	@ (8002df8 <Init_MPU6050+0x58>)
 8002dbc:	21ee      	movs	r1, #238	@ 0xee
 8002dbe:	480f      	ldr	r0, [pc, #60]	@ (8002dfc <Init_MPU6050+0x5c>)
 8002dc0:	f7fe fea4 	bl	8001b0c <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8002dc4:	e013      	b.n	8002dee <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 8002dc6:	490e      	ldr	r1, [pc, #56]	@ (8002e00 <Init_MPU6050+0x60>)
 8002dc8:	480e      	ldr	r0, [pc, #56]	@ (8002e04 <Init_MPU6050+0x64>)
 8002dca:	f7fd fd51 	bl	8000870 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8002dce:	480e      	ldr	r0, [pc, #56]	@ (8002e08 <Init_MPU6050+0x68>)
 8002dd0:	f7fd fd64 	bl	800089c <MPU6050_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8002dda:	230c      	movs	r3, #12
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8002e0c <Init_MPU6050+0x6c>)
 8002dde:	21ee      	movs	r1, #238	@ 0xee
 8002de0:	4806      	ldr	r0, [pc, #24]	@ (8002dfc <Init_MPU6050+0x5c>)
 8002de2:	f7fe fe93 	bl	8001b0c <comm_sendCMD>
}
 8002de6:	e002      	b.n	8002dee <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8002de8:	4807      	ldr	r0, [pc, #28]	@ (8002e08 <Init_MPU6050+0x68>)
 8002dea:	f7fd fdf9 	bl	80009e0 <MPU6050_Calibrate>
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200008d8 	.word	0x200008d8
 8002df8:	080112c4 	.word	0x080112c4
 8002dfc:	20000f9c 	.word	0x20000f9c
 8002e00:	080030b1 	.word	0x080030b1
 8002e04:	08003071 	.word	0x08003071
 8002e08:	20000b1c 	.word	0x20000b1c
 8002e0c:	080112d4 	.word	0x080112d4

08002e10 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af02      	add	r7, sp, #8
	Display.refreshCounter = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	@ (8002e88 <Init_Display+0x78>)
 8002e18:	220a      	movs	r2, #10
 8002e1a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <Init_Display+0x78>)
 8002e20:	220a      	movs	r2, #10
 8002e22:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8002e26:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2178      	movs	r1, #120	@ 0x78
 8002e2e:	4817      	ldr	r0, [pc, #92]	@ (8002e8c <Init_Display+0x7c>)
 8002e30:	f003 fb4e 	bl	80064d0 <HAL_I2C_IsDeviceReady>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"I2C READY", 9);
 8002e3a:	2309      	movs	r3, #9
 8002e3c:	4a14      	ldr	r2, [pc, #80]	@ (8002e90 <Init_Display+0x80>)
 8002e3e:	21ee      	movs	r1, #238	@ 0xee
 8002e40:	4814      	ldr	r0, [pc, #80]	@ (8002e94 <Init_Display+0x84>)
 8002e42:	f7fe fe63 	bl	8001b0c <comm_sendCMD>
		}else{
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
		}
	}
}
 8002e46:	e01c      	b.n	8002e82 <Init_Display+0x72>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002e48:	4913      	ldr	r1, [pc, #76]	@ (8002e98 <Init_Display+0x88>)
 8002e4a:	4814      	ldr	r0, [pc, #80]	@ (8002e9c <Init_Display+0x8c>)
 8002e4c:	f7fd ff06 	bl	8000c5c <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8002e50:	f7fd ff1a 	bl	8000c88 <Display_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <Init_Display+0x90>)
 8002e5e:	21ee      	movs	r1, #238	@ 0xee
 8002e60:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <Init_Display+0x84>)
 8002e62:	f7fe fe53 	bl	8001b0c <comm_sendCMD>
}
 8002e66:	e00c      	b.n	8002e82 <Init_Display+0x72>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002e68:	2301      	movs	r3, #1
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2340      	movs	r3, #64	@ 0x40
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea4 <Init_Display+0x94>)
 8002e74:	2100      	movs	r1, #0
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe f9a4 	bl	80011c4 <Display_DrawBitmap>
			Display.isInit = TRUE;
 8002e7c:	4b02      	ldr	r3, [pc, #8]	@ (8002e88 <Init_Display+0x78>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000b64 	.word	0x20000b64
 8002e8c:	200008d8 	.word	0x200008d8
 8002e90:	080112e4 	.word	0x080112e4
 8002e94:	20000f9c 	.word	0x20000f9c
 8002e98:	0800303d 	.word	0x0800303d
 8002e9c:	08003001 	.word	0x08003001
 8002ea0:	080112f0 	.word	0x080112f0
 8002ea4:	080114ac 	.word	0x080114ac

08002ea8 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f20 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d123      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8002eba:	2209      	movs	r2, #9
 8002ebc:	4919      	ldr	r1, [pc, #100]	@ (8002f24 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ebe:	481a      	ldr	r0, [pc, #104]	@ (8002f28 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ec0:	f000 ffb6 	bl	8003e30 <HAL_ADC_Start_DMA>
		is5ms--;
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ece:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8002ed0:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d114      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002eda:	2214      	movs	r2, #20
 8002edc:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8002ede:	4b14      	ldr	r3, [pc, #80]	@ (8002f30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00c      	beq.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14);
 8002ee8:	230e      	movs	r3, #14
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	223b      	movs	r2, #59	@ 0x3b
 8002ef4:	21d0      	movs	r1, #208	@ 0xd0
 8002ef6:	4810      	ldr	r0, [pc, #64]	@ (8002f38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ef8:	f003 f95a 	bl	80061b0 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fe f8a5 	bl	800104c <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d104      	bne.n	8002f16 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002f0e:	7813      	ldrb	r3, [r2, #0]
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	7013      	strb	r3, [r2, #0]
	}
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000
 8002f24:	20000f78 	.word	0x20000f78
 8002f28:	20000830 	.word	0x20000830
 8002f2c:	2000000a 	.word	0x2000000a
 8002f30:	20000b1c 	.word	0x20000b1c
 8002f34:	20000b52 	.word	0x20000b52
 8002f38:	200008d8 	.word	0x200008d8
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	20000ac8 	.word	0x20000ac8

08002f44 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	2bd0      	cmp	r3, #208	@ 0xd0
 8002f52:	d105      	bne.n	8002f60 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8002f54:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <HAL_I2C_MemRxCpltCallback+0x28>)
 8002f56:	f7fd fdf3 	bl	8000b40 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7fe f876 	bl	800104c <Display_I2C_DMA_Ready>
	}
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44

	}

}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000b1c 	.word	0x20000b1c

08002f70 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8002f78:	4903      	ldr	r1, [pc, #12]	@ (8002f88 <HAL_ADC_ConvCpltCallback+0x18>)
 8002f7a:	4804      	ldr	r0, [pc, #16]	@ (8002f8c <HAL_ADC_ConvCpltCallback+0x1c>)
 8002f7c:	f7fd fb16 	bl	80005ac <ADC_Conversion_Cplt>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000f8a 	.word	0x20000f8a
 8002f8c:	20000f78 	.word	0x20000f78

08002f90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d102      	bne.n	8002fa8 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8002fa2:	4807      	ldr	r0, [pc, #28]	@ (8002fc0 <HAL_GPIO_EXTI_Callback+0x30>)
 8002fa4:	f7fe fb62 	bl	800166c <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fae:	d102      	bne.n	8002fb6 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8002fb0:	4804      	ldr	r0, [pc, #16]	@ (8002fc4 <HAL_GPIO_EXTI_Callback+0x34>)
 8002fb2:	f7fe fb5b 	bl	800166c <Encoder_Add_Pulse>
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000b04 	.word	0x20000b04
 8002fc4:	20000b10 	.word	0x20000b10

08002fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a07      	ldr	r2, [pc, #28]	@ (8002ff4 <HAL_UART_RxCpltCallback+0x2c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d107      	bne.n	8002fea <HAL_UART_RxCpltCallback+0x22>
		//dataTx = dataRx;
		HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4906      	ldr	r1, [pc, #24]	@ (8002ff8 <HAL_UART_RxCpltCallback+0x30>)
 8002fde:	4807      	ldr	r0, [pc, #28]	@ (8002ffc <HAL_UART_RxCpltCallback+0x34>)
 8002fe0:	f008 fcc0 	bl	800b964 <HAL_UART_Receive_IT>
		dataRx = 0;
 8002fe4:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <HAL_UART_RxCpltCallback+0x30>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
	}
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	200011d1 	.word	0x200011d1
 8002ffc:	20000a7c 	.word	0x20000a7c

08003000 <I2C_1_Abstract_Mem_DMA_Transmit>:
/**************************************** END HAL CALLBACKS ***************************************/
/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af02      	add	r7, sp, #8
 8003006:	60ba      	str	r2, [r7, #8]
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	81fb      	strh	r3, [r7, #14]
 800300e:	460b      	mov	r3, r1
 8003010:	737b      	strb	r3, [r7, #13]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8003016:	7b7b      	ldrb	r3, [r7, #13]
 8003018:	b29a      	uxth	r2, r3
 800301a:	89f9      	ldrh	r1, [r7, #14]
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	4804      	ldr	r0, [pc, #16]	@ (8003038 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 8003028:	f002 ff64 	bl	8005ef4 <HAL_I2C_Mem_Write_DMA>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200008d8 	.word	0x200008d8

0800303c <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	4603      	mov	r3, r0
 8003048:	81fb      	strh	r3, [r7, #14]
 800304a:	4613      	mov	r3, r2
 800304c:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800304e:	89ba      	ldrh	r2, [r7, #12]
 8003050:	89f9      	ldrh	r1, [r7, #14]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4804      	ldr	r0, [pc, #16]	@ (800306c <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 800305c:	f002 fb20 	bl	80056a0 <HAL_I2C_Master_Transmit>
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200008d8 	.word	0x200008d8

08003070 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af04      	add	r7, sp, #16
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	80fb      	strh	r3, [r7, #6]
 800307c:	460b      	mov	r3, r1
 800307e:	717b      	strb	r3, [r7, #5]
 8003080:	4613      	mov	r3, r2
 8003082:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8003084:	797b      	ldrb	r3, [r7, #5]
 8003086:	b29a      	uxth	r2, r3
 8003088:	793b      	ldrb	r3, [r7, #4]
 800308a:	b298      	uxth	r0, r3
 800308c:	88f9      	ldrh	r1, [r7, #6]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	8a3b      	ldrh	r3, [r7, #16]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	4803      	ldr	r0, [pc, #12]	@ (80030ac <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800309e:	f002 fbfd 	bl	800589c <HAL_I2C_Mem_Write>
 80030a2:	4603      	mov	r3, r0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200008d8 	.word	0x200008d8

080030b0 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	80fb      	strh	r3, [r7, #6]
 80030bc:	460b      	mov	r3, r1
 80030be:	717b      	strb	r3, [r7, #5]
 80030c0:	4613      	mov	r3, r2
 80030c2:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80030c4:	797b      	ldrb	r3, [r7, #5]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	793b      	ldrb	r3, [r7, #4]
 80030ca:	b298      	uxth	r0, r3
 80030cc:	88f9      	ldrh	r1, [r7, #6]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	9302      	str	r3, [sp, #8]
 80030d2:	8a3b      	ldrh	r3, [r7, #16]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4603      	mov	r3, r0
 80030dc:	4803      	ldr	r0, [pc, #12]	@ (80030ec <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 80030de:	f002 fcd7 	bl	8005a90 <HAL_I2C_Mem_Read>
 80030e2:	4603      	mov	r3, r0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200008d8 	.word	0x200008d8

080030f0 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 80030f4:	2101      	movs	r1, #1
 80030f6:	4803      	ldr	r0, [pc, #12]	@ (8003104 <KEY_Read_Value+0x14>)
 80030f8:	f002 f914 	bl	8005324 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40020000 	.word	0x40020000

08003108 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8003110:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <writeOn_USB+0x70>)
 8003112:	78da      	ldrb	r2, [r3, #3]
 8003114:	4b18      	ldr	r3, [pc, #96]	@ (8003178 <writeOn_USB+0x70>)
 8003116:	789b      	ldrb	r3, [r3, #2]
 8003118:	429a      	cmp	r2, r3
 800311a:	d909      	bls.n	8003130 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 800311c:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <writeOn_USB+0x70>)
 800311e:	78da      	ldrb	r2, [r3, #3]
 8003120:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <writeOn_USB+0x70>)
 8003122:	789b      	ldrb	r3, [r3, #2]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b13      	ldr	r3, [pc, #76]	@ (8003178 <writeOn_USB+0x70>)
 800312a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 800312e:	e006      	b.n	800313e <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8003130:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <writeOn_USB+0x70>)
 8003132:	789b      	ldrb	r3, [r3, #2]
 8003134:	425b      	negs	r3, r3
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <writeOn_USB+0x70>)
 800313a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <writeOn_USB+0x70>)
 8003140:	789b      	ldrb	r3, [r3, #2]
 8003142:	461a      	mov	r2, r3
 8003144:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <writeOn_USB+0x70>)
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	4a0b      	ldr	r2, [pc, #44]	@ (8003178 <writeOn_USB+0x70>)
 800314c:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f00c ff5e 	bl	8010014 <CDC_Transmit_FS>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <writeOn_USB+0x70>)
 8003160:	789a      	ldrb	r2, [r3, #2]
 8003162:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <writeOn_USB+0x70>)
 8003164:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8003168:	4413      	add	r3, r2
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b02      	ldr	r3, [pc, #8]	@ (8003178 <writeOn_USB+0x70>)
 800316e:	709a      	strb	r2, [r3, #2]
	}
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000f9c 	.word	0x20000f9c

0800317c <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 800318c:	2300      	movs	r3, #0
 800318e:	81fb      	strh	r3, [r7, #14]
 8003190:	e013      	b.n	80031ba <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	441a      	add	r2, r3
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <dataRxOn_USB+0x54>)
 800319a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	b2c8      	uxtb	r0, r1
 80031a2:	490b      	ldr	r1, [pc, #44]	@ (80031d0 <dataRxOn_USB+0x54>)
 80031a4:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 80031a8:	4619      	mov	r1, r3
 80031aa:	7812      	ldrb	r2, [r2, #0]
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <dataRxOn_USB+0x54>)
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	3301      	adds	r3, #1
 80031b8:	81fb      	strh	r3, [r7, #14]
 80031ba:	89fb      	ldrh	r3, [r7, #14]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d8e7      	bhi.n	8003192 <dataRxOn_USB+0x16>
		}
	}
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000f9c 	.word	0x20000f9c

080031d4 <Motor_Left_SetPins>:

void Motor_Left_SetPins(e_direction direction){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d842      	bhi.n	800326a <Motor_Left_SetPins+0x96>
 80031e4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <Motor_Left_SetPins+0x18>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003269 	.word	0x08003269
 80031f0:	08003201 	.word	0x08003201
 80031f4:	0800321b 	.word	0x0800321b
 80031f8:	08003235 	.word	0x08003235
 80031fc:	0800324f 	.word	0x0800324f
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003206:	481b      	ldr	r0, [pc, #108]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 8003208:	f002 f8a4 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003212:	4818      	ldr	r0, [pc, #96]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 8003214:	f002 f89e 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 8003218:	e027      	b.n	800326a <Motor_Left_SetPins+0x96>
	case FORWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 800321a:	2201      	movs	r2, #1
 800321c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003220:	4814      	ldr	r0, [pc, #80]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 8003222:	f002 f897 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800322c:	4811      	ldr	r0, [pc, #68]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 800322e:	f002 f891 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 8003232:	e01a      	b.n	800326a <Motor_Left_SetPins+0x96>
	case BACKWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800323a:	480e      	ldr	r0, [pc, #56]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 800323c:	f002 f88a 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003246:	480b      	ldr	r0, [pc, #44]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 8003248:	f002 f884 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 800324c:	e00d      	b.n	800326a <Motor_Left_SetPins+0x96>
	case BRAKE:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003254:	4807      	ldr	r0, [pc, #28]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 8003256:	f002 f87d 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 800325a:	2201      	movs	r2, #1
 800325c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003260:	4804      	ldr	r0, [pc, #16]	@ (8003274 <Motor_Left_SetPins+0xa0>)
 8003262:	f002 f877 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 8003266:	e000      	b.n	800326a <Motor_Left_SetPins+0x96>
		break;
 8003268:	bf00      	nop
	}
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40020000 	.word	0x40020000

08003278 <Motor_Right_SetPins>:

void Motor_Right_SetPins(e_direction direction){
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d83f      	bhi.n	8003308 <Motor_Right_SetPins+0x90>
 8003288:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <Motor_Right_SetPins+0x18>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	08003307 	.word	0x08003307
 8003294:	080032a5 	.word	0x080032a5
 8003298:	080032bd 	.word	0x080032bd
 800329c:	080032d5 	.word	0x080032d5
 80032a0:	080032ef 	.word	0x080032ef
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032aa:	4819      	ldr	r0, [pc, #100]	@ (8003310 <Motor_Right_SetPins+0x98>)
 80032ac:	f002 f852 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2108      	movs	r1, #8
 80032b4:	4817      	ldr	r0, [pc, #92]	@ (8003314 <Motor_Right_SetPins+0x9c>)
 80032b6:	f002 f84d 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 80032ba:	e025      	b.n	8003308 <Motor_Right_SetPins+0x90>
	case FORWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 80032bc:	2201      	movs	r2, #1
 80032be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032c2:	4813      	ldr	r0, [pc, #76]	@ (8003310 <Motor_Right_SetPins+0x98>)
 80032c4:	f002 f846 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2108      	movs	r1, #8
 80032cc:	4811      	ldr	r0, [pc, #68]	@ (8003314 <Motor_Right_SetPins+0x9c>)
 80032ce:	f002 f841 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 80032d2:	e019      	b.n	8003308 <Motor_Right_SetPins+0x90>
	case BACKWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032da:	480d      	ldr	r0, [pc, #52]	@ (8003310 <Motor_Right_SetPins+0x98>)
 80032dc:	f002 f83a 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M1_IN2_Pin, 1);
 80032e0:	2201      	movs	r2, #1
 80032e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032e6:	480b      	ldr	r0, [pc, #44]	@ (8003314 <Motor_Right_SetPins+0x9c>)
 80032e8:	f002 f834 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 80032ec:	e00c      	b.n	8003308 <Motor_Right_SetPins+0x90>
	case BRAKE:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 80032ee:	2201      	movs	r2, #1
 80032f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032f4:	4806      	ldr	r0, [pc, #24]	@ (8003310 <Motor_Right_SetPins+0x98>)
 80032f6:	f002 f82d 	bl	8005354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 1);
 80032fa:	2201      	movs	r2, #1
 80032fc:	2108      	movs	r1, #8
 80032fe:	4805      	ldr	r0, [pc, #20]	@ (8003314 <Motor_Right_SetPins+0x9c>)
 8003300:	f002 f828 	bl	8005354 <HAL_GPIO_WritePin>
		break;
 8003304:	e000      	b.n	8003308 <Motor_Right_SetPins+0x90>
		break;
 8003306:	bf00      	nop
	}
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400

08003318 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <Motor_Left_SetPWM+0x20>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000a34 	.word	0x20000a34

0800333c <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <Motor_Right_SetPWM+0x20>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000a34 	.word	0x20000a34

08003360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003364:	b672      	cpsid	i
}
 8003366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <Error_Handler+0x8>

0800336c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <HAL_MspInit+0x58>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <HAL_MspInit+0x58>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <HAL_MspInit+0x58>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <HAL_MspInit+0x58>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	4a0b      	ldr	r2, [pc, #44]	@ (80033c4 <HAL_MspInit+0x58>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	@ 0x40
 800339e:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <HAL_MspInit+0x58>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2051      	movs	r0, #81	@ 0x51
 80033b0:	f001 f9e1 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80033b4:	2051      	movs	r0, #81	@ 0x51
 80033b6:	f001 f9fa 	bl	80047ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	@ 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a40      	ldr	r2, [pc, #256]	@ (80034e8 <HAL_ADC_MspInit+0x120>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d179      	bne.n	80034de <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b3f      	ldr	r3, [pc, #252]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	4a3e      	ldr	r2, [pc, #248]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033fa:	4b3c      	ldr	r3, [pc, #240]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	4a37      	ldr	r2, [pc, #220]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6313      	str	r3, [r2, #48]	@ 0x30
 8003416:	4b35      	ldr	r3, [pc, #212]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	4b31      	ldr	r3, [pc, #196]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a30      	ldr	r2, [pc, #192]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b2e      	ldr	r3, [pc, #184]	@ (80034ec <HAL_ADC_MspInit+0x124>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 800343e:	23fe      	movs	r3, #254	@ 0xfe
 8003440:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003442:	2303      	movs	r3, #3
 8003444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	4827      	ldr	r0, [pc, #156]	@ (80034f0 <HAL_ADC_MspInit+0x128>)
 8003452:	f001 fde3 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8003456:	2303      	movs	r3, #3
 8003458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345a:	2303      	movs	r3, #3
 800345c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4822      	ldr	r0, [pc, #136]	@ (80034f4 <HAL_ADC_MspInit+0x12c>)
 800346a:	f001 fdd7 	bl	800501c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800346e:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 8003470:	4a22      	ldr	r2, [pc, #136]	@ (80034fc <HAL_ADC_MspInit+0x134>)
 8003472:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003474:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 8003476:	2200      	movs	r2, #0
 8003478:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800347a:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003480:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003486:	4b1c      	ldr	r3, [pc, #112]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 8003488:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800348c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800348e:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 8003490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003494:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003496:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 8003498:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800349c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800349e:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034a4:	4b14      	ldr	r3, [pc, #80]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 80034a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80034aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ac:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034b2:	4811      	ldr	r0, [pc, #68]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 80034b4:	f001 f996 	bl	80047e4 <HAL_DMA_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80034be:	f7ff ff4f 	bl	8003360 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80034c8:	4a0b      	ldr	r2, [pc, #44]	@ (80034f8 <HAL_ADC_MspInit+0x130>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	2012      	movs	r0, #18
 80034d4:	f001 f94f 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80034d8:	2012      	movs	r0, #18
 80034da:	f001 f968 	bl	80047ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	@ 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40012000 	.word	0x40012000
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	20000878 	.word	0x20000878
 80034fc:	40026410 	.word	0x40026410

08003500 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a50      	ldr	r2, [pc, #320]	@ (8003660 <HAL_I2C_MspInit+0x160>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f040 8099 	bne.w	8003656 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	4b4e      	ldr	r3, [pc, #312]	@ (8003664 <HAL_I2C_MspInit+0x164>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	4a4d      	ldr	r2, [pc, #308]	@ (8003664 <HAL_I2C_MspInit+0x164>)
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	6313      	str	r3, [r2, #48]	@ 0x30
 8003534:	4b4b      	ldr	r3, [pc, #300]	@ (8003664 <HAL_I2C_MspInit+0x164>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8003540:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003546:	2312      	movs	r3, #18
 8003548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003552:	2304      	movs	r3, #4
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4619      	mov	r1, r3
 800355c:	4842      	ldr	r0, [pc, #264]	@ (8003668 <HAL_I2C_MspInit+0x168>)
 800355e:	f001 fd5d 	bl	800501c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <HAL_I2C_MspInit+0x164>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	4a3e      	ldr	r2, [pc, #248]	@ (8003664 <HAL_I2C_MspInit+0x164>)
 800356c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003570:	6413      	str	r3, [r2, #64]	@ 0x40
 8003572:	4b3c      	ldr	r3, [pc, #240]	@ (8003664 <HAL_I2C_MspInit+0x164>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800357e:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 8003580:	4a3b      	ldr	r2, [pc, #236]	@ (8003670 <HAL_I2C_MspInit+0x170>)
 8003582:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003584:	4b39      	ldr	r3, [pc, #228]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 8003586:	2200      	movs	r2, #0
 8003588:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800358a:	4b38      	ldr	r3, [pc, #224]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 800358c:	2240      	movs	r2, #64	@ 0x40
 800358e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003590:	4b36      	ldr	r3, [pc, #216]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003596:	4b35      	ldr	r3, [pc, #212]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 8003598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800359c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800359e:	4b33      	ldr	r3, [pc, #204]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a4:	4b31      	ldr	r3, [pc, #196]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80035aa:	4b30      	ldr	r3, [pc, #192]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035b0:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b6:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80035bc:	482b      	ldr	r0, [pc, #172]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035be:	f001 f911 	bl	80047e4 <HAL_DMA_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80035c8:	f7ff feca 	bl	8003360 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a27      	ldr	r2, [pc, #156]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035d2:	4a26      	ldr	r2, [pc, #152]	@ (800366c <HAL_I2C_MspInit+0x16c>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 80035da:	4a27      	ldr	r2, [pc, #156]	@ (8003678 <HAL_I2C_MspInit+0x178>)
 80035dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80035de:	4b25      	ldr	r3, [pc, #148]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 80035e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e6:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ec:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035f2:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 80035f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003600:	4b1c      	ldr	r3, [pc, #112]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 8003608:	2200      	movs	r2, #0
 800360a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800360c:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 800360e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003612:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003614:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 8003616:	2200      	movs	r2, #0
 8003618:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800361a:	4816      	ldr	r0, [pc, #88]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 800361c:	f001 f8e2 	bl	80047e4 <HAL_DMA_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8003626:	f7ff fe9b 	bl	8003360 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003630:	4a10      	ldr	r2, [pc, #64]	@ (8003674 <HAL_I2C_MspInit+0x174>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2100      	movs	r1, #0
 800363a:	201f      	movs	r0, #31
 800363c:	f001 f89b 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003640:	201f      	movs	r0, #31
 8003642:	f001 f8b4 	bl	80047ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	2020      	movs	r0, #32
 800364c:	f001 f893 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003650:	2020      	movs	r0, #32
 8003652:	f001 f8ac 	bl	80047ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	@ 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40005400 	.word	0x40005400
 8003664:	40023800 	.word	0x40023800
 8003668:	40020400 	.word	0x40020400
 800366c:	2000092c 	.word	0x2000092c
 8003670:	40026028 	.word	0x40026028
 8003674:	2000098c 	.word	0x2000098c
 8003678:	40026010 	.word	0x40026010

0800367c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_TIM_Base_MspInit+0x80>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d116      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_TIM_Base_MspInit+0x84>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <HAL_TIM_Base_MspInit+0x84>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6453      	str	r3, [r2, #68]	@ 0x44
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <HAL_TIM_Base_MspInit+0x84>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2019      	movs	r0, #25
 80036b0:	f001 f861 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036b4:	2019      	movs	r0, #25
 80036b6:	f001 f87a 	bl	80047ae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036ba:	e01a      	b.n	80036f2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a10      	ldr	r2, [pc, #64]	@ (8003704 <HAL_TIM_Base_MspInit+0x88>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d115      	bne.n	80036f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <HAL_TIM_Base_MspInit+0x84>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003700 <HAL_TIM_Base_MspInit+0x84>)
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <HAL_TIM_Base_MspInit+0x84>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2100      	movs	r1, #0
 80036e6:	201d      	movs	r0, #29
 80036e8:	f001 f845 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036ec:	201d      	movs	r0, #29
 80036ee:	f001 f85e 	bl	80047ae <HAL_NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40023800 	.word	0x40023800
 8003704:	40000400 	.word	0x40000400

08003708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <HAL_TIM_MspPostInit+0x68>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d11d      	bne.n	8003766 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <HAL_TIM_MspPostInit+0x6c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	4a10      	ldr	r2, [pc, #64]	@ (8003774 <HAL_TIM_MspPostInit+0x6c>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6313      	str	r3, [r2, #48]	@ 0x30
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_TIM_MspPostInit+0x6c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8003746:	2330      	movs	r3, #48	@ 0x30
 8003748:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003756:	2302      	movs	r3, #2
 8003758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	4619      	mov	r1, r3
 8003760:	4805      	ldr	r0, [pc, #20]	@ (8003778 <HAL_TIM_MspPostInit+0x70>)
 8003762:	f001 fc5b 	bl	800501c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003766:	bf00      	nop
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40000400 	.word	0x40000400
 8003774:	40023800 	.word	0x40023800
 8003778:	40020400 	.word	0x40020400

0800377c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	@ 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_UART_MspInit+0x94>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d133      	bne.n	8003806 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003814 <HAL_UART_MspInit+0x98>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <HAL_UART_MspInit+0x98>)
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_UART_MspInit+0x98>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <HAL_UART_MspInit+0x98>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <HAL_UART_MspInit+0x98>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ca:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_UART_MspInit+0x98>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 80037d6:	23c0      	movs	r3, #192	@ 0xc0
 80037d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037e6:	2307      	movs	r3, #7
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ea:	f107 0314 	add.w	r3, r7, #20
 80037ee:	4619      	mov	r1, r3
 80037f0:	4809      	ldr	r0, [pc, #36]	@ (8003818 <HAL_UART_MspInit+0x9c>)
 80037f2:	f001 fc13 	bl	800501c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2100      	movs	r1, #0
 80037fa:	2025      	movs	r0, #37	@ 0x25
 80037fc:	f000 ffbb 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003800:	2025      	movs	r0, #37	@ 0x25
 8003802:	f000 ffd4 	bl	80047ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	@ 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40011000 	.word	0x40011000
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400

0800381c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003820:	f007 f87e 	bl	800a920 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <NMI_Handler+0x8>

08003828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <HardFault_Handler+0x4>

08003830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <MemManage_Handler+0x4>

08003838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <BusFault_Handler+0x4>

08003840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <UsageFault_Handler+0x4>

08003848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003876:	f000 f943 	bl	8003b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003884:	4802      	ldr	r0, [pc, #8]	@ (8003890 <DMA1_Stream0_IRQHandler+0x10>)
 8003886:	f001 f945 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2000098c 	.word	0x2000098c

08003894 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003898:	4802      	ldr	r0, [pc, #8]	@ (80038a4 <DMA1_Stream1_IRQHandler+0x10>)
 800389a:	f001 f93b 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2000092c 	.word	0x2000092c

080038a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038ac:	4802      	ldr	r0, [pc, #8]	@ (80038b8 <ADC_IRQHandler+0x10>)
 80038ae:	f000 f9ae 	bl	8003c0e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000830 	.word	0x20000830

080038bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 80038c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038c4:	f001 fd7a 	bl	80053bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038d0:	4802      	ldr	r0, [pc, #8]	@ (80038dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038d2:	f007 f9fb 	bl	800accc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200009ec 	.word	0x200009ec

080038e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038e4:	4802      	ldr	r0, [pc, #8]	@ (80038f0 <TIM3_IRQHandler+0x10>)
 80038e6:	f007 f9f1 	bl	800accc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000a34 	.word	0x20000a34

080038f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80038f8:	4802      	ldr	r0, [pc, #8]	@ (8003904 <I2C1_EV_IRQHandler+0x10>)
 80038fa:	f002 ff17 	bl	800672c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200008d8 	.word	0x200008d8

08003908 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800390c:	4802      	ldr	r0, [pc, #8]	@ (8003918 <I2C1_ER_IRQHandler+0x10>)
 800390e:	f003 f87e 	bl	8006a0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200008d8 	.word	0x200008d8

0800391c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003920:	4802      	ldr	r0, [pc, #8]	@ (800392c <USART1_IRQHandler+0x10>)
 8003922:	f008 f845 	bl	800b9b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000a7c 	.word	0x20000a7c

08003930 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8003934:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003938:	f001 fd40 	bl	80053bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}

08003940 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <DMA2_Stream0_IRQHandler+0x10>)
 8003946:	f001 f8e5 	bl	8004b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000878 	.word	0x20000878

08003954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003958:	4802      	ldr	r0, [pc, #8]	@ (8003964 <OTG_FS_IRQHandler+0x10>)
 800395a:	f005 fa6e 	bl	8008e3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20001ac0 	.word	0x20001ac0

08003968 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003980:	4a14      	ldr	r2, [pc, #80]	@ (80039d4 <_sbrk+0x5c>)
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <_sbrk+0x60>)
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003994:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <_sbrk+0x64>)
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <_sbrk+0x68>)
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800399a:	4b10      	ldr	r3, [pc, #64]	@ (80039dc <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d207      	bcs.n	80039b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a8:	f00c ffc0 	bl	801092c <__errno>
 80039ac:	4603      	mov	r3, r0
 80039ae:	220c      	movs	r2, #12
 80039b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	e009      	b.n	80039cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b8:	4b08      	ldr	r3, [pc, #32]	@ (80039dc <_sbrk+0x64>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039be:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <_sbrk+0x64>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	4a05      	ldr	r2, [pc, #20]	@ (80039dc <_sbrk+0x64>)
 80039c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20020000 	.word	0x20020000
 80039d8:	00000400 	.word	0x00000400
 80039dc:	200011d4 	.word	0x200011d4
 80039e0:	20002310 	.word	0x20002310

080039e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <SystemInit+0x20>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	4a05      	ldr	r2, [pc, #20]	@ (8003a04 <SystemInit+0x20>)
 80039f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a0c:	f7ff ffea 	bl	80039e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a10:	480c      	ldr	r0, [pc, #48]	@ (8003a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a12:	490d      	ldr	r1, [pc, #52]	@ (8003a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a14:	4a0d      	ldr	r2, [pc, #52]	@ (8003a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a18:	e002      	b.n	8003a20 <LoopCopyDataInit>

08003a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a1e:	3304      	adds	r3, #4

08003a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a24:	d3f9      	bcc.n	8003a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a28:	4c0a      	ldr	r4, [pc, #40]	@ (8003a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a2c:	e001      	b.n	8003a32 <LoopFillZerobss>

08003a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a30:	3204      	adds	r2, #4

08003a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a34:	d3fb      	bcc.n	8003a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a36:	f00c ff7f 	bl	8010938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a3a:	f7fe fd4d 	bl	80024d8 <main>
  bx  lr    
 8003a3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a48:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003a4c:	0801247c 	.word	0x0801247c
  ldr r2, =_sbss
 8003a50:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003a54:	2000230c 	.word	0x2000230c

08003a58 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a58:	e7fe      	b.n	8003a58 <DMA1_Stream2_IRQHandler>
	...

08003a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a60:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0d      	ldr	r2, [pc, #52]	@ (8003a9c <HAL_Init+0x40>)
 8003a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_Init+0x40>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0a      	ldr	r2, [pc, #40]	@ (8003a9c <HAL_Init+0x40>)
 8003a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a78:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <HAL_Init+0x40>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a07      	ldr	r2, [pc, #28]	@ (8003a9c <HAL_Init+0x40>)
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a84:	2003      	movs	r0, #3
 8003a86:	f000 fe6b 	bl	8004760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a8a:	200f      	movs	r0, #15
 8003a8c:	f000 f808 	bl	8003aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a90:	f7ff fc6c 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00

08003aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003aa8:	4b12      	ldr	r3, [pc, #72]	@ (8003af4 <HAL_InitTick+0x54>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <HAL_InitTick+0x58>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fe83 	bl	80047ca <HAL_SYSTICK_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00e      	b.n	8003aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d80a      	bhi.n	8003aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	f000 fe4b 	bl	8004776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ae0:	4a06      	ldr	r2, [pc, #24]	@ (8003afc <HAL_InitTick+0x5c>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000010 	.word	0x20000010
 8003af8:	20000018 	.word	0x20000018
 8003afc:	20000014 	.word	0x20000014

08003b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_IncTick+0x20>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <HAL_IncTick+0x24>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <HAL_IncTick+0x24>)
 8003b12:	6013      	str	r3, [r2, #0]
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000018 	.word	0x20000018
 8003b24:	200011d8 	.word	0x200011d8

08003b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_GetTick+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	200011d8 	.word	0x200011d8

08003b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff ffee 	bl	8003b28 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d005      	beq.n	8003b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <HAL_Delay+0x44>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b66:	bf00      	nop
 8003b68:	f7ff ffde 	bl	8003b28 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d8f7      	bhi.n	8003b68 <HAL_Delay+0x28>
  {
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000018 	.word	0x20000018

08003b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e033      	b.n	8003c06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff fc0e 	bl	80033c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d118      	bne.n	8003bf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bce:	f023 0302 	bic.w	r3, r3, #2
 8003bd2:	f043 0202 	orr.w	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fb68 	bl	80042b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bf6:	e001      	b.n	8003bfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d049      	beq.n	8003cd8 <HAL_ADC_IRQHandler+0xca>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d046      	beq.n	8003cd8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d12b      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d127      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d119      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0220 	bic.w	r2, r2, #32
 8003ca2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff f951 	bl	8002f70 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0212 	mvn.w	r2, #18
 8003cd6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d057      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x190>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d054      	beq.n	8003d9e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d139      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d006      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d12b      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d124      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11d      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d119      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d68:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fc0c 	bl	80045ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 020c 	mvn.w	r2, #12
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d017      	beq.n	8003de4 <HAL_ADC_IRQHandler+0x1d6>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d014      	beq.n	8003de4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10d      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f925 	bl	8004024 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0201 	mvn.w	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003df2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <HAL_ADC_IRQHandler+0x218>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e04:	f043 0202 	orr.w	r2, r3, #2
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0220 	mvn.w	r2, #32
 8003e14:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f90e 	bl	8004038 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0220 	mvn.w	r2, #32
 8003e24:	601a      	str	r2, [r3, #0]
  }
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_ADC_Start_DMA+0x1e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e0ce      	b.n	8003fec <HAL_ADC_Start_DMA+0x1bc>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d018      	beq.n	8003e96 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e74:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff4 <HAL_ADC_Start_DMA+0x1c4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff8 <HAL_ADC_Start_DMA+0x1c8>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0c9a      	lsrs	r2, r3, #18
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003e88:	e002      	b.n	8003e90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f9      	bne.n	8003e8a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea4:	d107      	bne.n	8003eb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eb4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 8086 	bne.w	8003fd2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ef0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f04:	d106      	bne.n	8003f14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f023 0206 	bic.w	r2, r3, #6
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f12:	e002      	b.n	8003f1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f22:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <HAL_ADC_Start_DMA+0x1cc>)
 8003f24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <HAL_ADC_Start_DMA+0x1d0>)
 8003f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	4a34      	ldr	r2, [pc, #208]	@ (8004004 <HAL_ADC_Start_DMA+0x1d4>)
 8003f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	4a33      	ldr	r2, [pc, #204]	@ (8004008 <HAL_ADC_Start_DMA+0x1d8>)
 8003f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003f46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f56:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f66:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	334c      	adds	r3, #76	@ 0x4c
 8003f72:	4619      	mov	r1, r3
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f000 fce2 	bl	8004940 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10f      	bne.n	8003fa8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d129      	bne.n	8003fea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	e020      	b.n	8003fea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_ADC_Start_DMA+0x1dc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d11b      	bne.n	8003fea <HAL_ADC_Start_DMA+0x1ba>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d114      	bne.n	8003fea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	e00b      	b.n	8003fea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000010 	.word	0x20000010
 8003ff8:	431bde83 	.word	0x431bde83
 8003ffc:	40012300 	.word	0x40012300
 8004000:	080044a9 	.word	0x080044a9
 8004004:	08004563 	.word	0x08004563
 8004008:	0800457f 	.word	0x0800457f
 800400c:	40012000 	.word	0x40012000

08004010 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1c>
 8004064:	2302      	movs	r3, #2
 8004066:	e113      	b.n	8004290 <HAL_ADC_ConfigChannel+0x244>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b09      	cmp	r3, #9
 8004076:	d925      	bls.n	80040c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	3b1e      	subs	r3, #30
 800408e:	2207      	movs	r2, #7
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43da      	mvns	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	400a      	ands	r2, r1
 800409c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4403      	add	r3, r0
 80040b6:	3b1e      	subs	r3, #30
 80040b8:	409a      	lsls	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	e022      	b.n	800410a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	2207      	movs	r2, #7
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	400a      	ands	r2, r1
 80040e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4403      	add	r3, r0
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d824      	bhi.n	800415c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	3b05      	subs	r3, #5
 8004124:	221f      	movs	r2, #31
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	400a      	ands	r2, r1
 8004132:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	3b05      	subs	r3, #5
 800414e:	fa00 f203 	lsl.w	r2, r0, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	@ 0x34
 800415a:	e04c      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d824      	bhi.n	80041ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	3b23      	subs	r3, #35	@ 0x23
 8004176:	221f      	movs	r2, #31
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43da      	mvns	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	400a      	ands	r2, r1
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b23      	subs	r3, #35	@ 0x23
 80041a0:	fa00 f203 	lsl.w	r2, r0, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ac:	e023      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	3b41      	subs	r3, #65	@ 0x41
 80041c0:	221f      	movs	r2, #31
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	400a      	ands	r2, r1
 80041ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4618      	mov	r0, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	3b41      	subs	r3, #65	@ 0x41
 80041ea:	fa00 f203 	lsl.w	r2, r0, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041f6:	4b29      	ldr	r3, [pc, #164]	@ (800429c <HAL_ADC_ConfigChannel+0x250>)
 80041f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a28      	ldr	r2, [pc, #160]	@ (80042a0 <HAL_ADC_ConfigChannel+0x254>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10f      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1d8>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b12      	cmp	r3, #18
 800420a:	d10b      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <HAL_ADC_ConfigChannel+0x254>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12b      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x23a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1c      	ldr	r2, [pc, #112]	@ (80042a4 <HAL_ADC_ConfigChannel+0x258>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <HAL_ADC_ConfigChannel+0x1f4>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b11      	cmp	r3, #17
 800423e:	d122      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <HAL_ADC_ConfigChannel+0x258>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d111      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004262:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <HAL_ADC_ConfigChannel+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a11      	ldr	r2, [pc, #68]	@ (80042ac <HAL_ADC_ConfigChannel+0x260>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0c9a      	lsrs	r2, r3, #18
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004278:	e002      	b.n	8004280 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3b01      	subs	r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f9      	bne.n	800427a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012300 	.word	0x40012300
 80042a0:	40012000 	.word	0x40012000
 80042a4:	10000012 	.word	0x10000012
 80042a8:	20000010 	.word	0x20000010
 80042ac:	431bde83 	.word	0x431bde83

080042b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b8:	4b79      	ldr	r3, [pc, #484]	@ (80044a0 <ADC_Init+0x1f0>)
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	021a      	lsls	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800432a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	4a58      	ldr	r2, [pc, #352]	@ (80044a4 <ADC_Init+0x1f4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004356:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	e00f      	b.n	80043ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800439c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0202 	bic.w	r2, r2, #2
 80043bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6899      	ldr	r1, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7e1b      	ldrb	r3, [r3, #24]
 80043c8:	005a      	lsls	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	3b01      	subs	r3, #1
 8004408:	035a      	lsls	r2, r3, #13
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e007      	b.n	8004424 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004422:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004432:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	3b01      	subs	r3, #1
 8004440:	051a      	lsls	r2, r3, #20
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004466:	025a      	lsls	r2, r3, #9
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	029a      	lsls	r2, r3, #10
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40012300 	.word	0x40012300
 80044a4:	0f000001 	.word	0x0f000001

080044a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d13c      	bne.n	800453c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12b      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d127      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d119      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0220 	bic.w	r2, r2, #32
 800450e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7fe fd1b 	bl	8002f70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800453a:	e00e      	b.n	800455a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fd75 	bl	8004038 <HAL_ADC_ErrorCallback>
}
 800454e:	e004      	b.n	800455a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fd4d 	bl	8004010 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	@ 0x40
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fd4a 	bl	8004038 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f2:	4a04      	ldr	r2, [pc, #16]	@ (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	60d3      	str	r3, [r2, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800460c:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <__NVIC_GetPriorityGrouping+0x18>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 0307 	and.w	r3, r3, #7
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	db0b      	blt.n	800464e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	4907      	ldr	r1, [pc, #28]	@ (800465c <__NVIC_EnableIRQ+0x38>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2001      	movs	r0, #1
 8004646:	fa00 f202 	lsl.w	r2, r0, r2
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000e100 	.word	0xe000e100

08004660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	@ (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	@ (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	@ 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f1c3 0307 	rsb	r3, r3, #7
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf28      	it	cs
 80046d2:	2304      	movcs	r3, #4
 80046d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d902      	bls.n	80046e4 <NVIC_EncodePriority+0x30>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b03      	subs	r3, #3
 80046e2:	e000      	b.n	80046e6 <NVIC_EncodePriority+0x32>
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	43d9      	mvns	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	4313      	orrs	r3, r2
         );
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	@ 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800472c:	d301      	bcc.n	8004732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <SysTick_Config+0x40>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473a:	210f      	movs	r1, #15
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f7ff ff8e 	bl	8004660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <SysTick_Config+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474a:	4b04      	ldr	r3, [pc, #16]	@ (800475c <SysTick_Config+0x40>)
 800474c:	2207      	movs	r2, #7
 800474e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000e010 	.word	0xe000e010

08004760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff29 	bl	80045c0 <__NVIC_SetPriorityGrouping>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004788:	f7ff ff3e 	bl	8004608 <__NVIC_GetPriorityGrouping>
 800478c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff ff8e 	bl	80046b4 <NVIC_EncodePriority>
 8004798:	4602      	mov	r2, r0
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff5d 	bl	8004660 <__NVIC_SetPriority>
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff31 	bl	8004624 <__NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffa2 	bl	800471c <SysTick_Config>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047f0:	f7ff f99a 	bl	8003b28 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e099      	b.n	8004934 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004820:	e00f      	b.n	8004842 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004822:	f7ff f981 	bl	8003b28 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b05      	cmp	r3, #5
 800482e:	d908      	bls.n	8004842 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2203      	movs	r2, #3
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e078      	b.n	8004934 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e8      	bne.n	8004822 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4b38      	ldr	r3, [pc, #224]	@ (800493c <HAL_DMA_Init+0x158>)
 800485c:	4013      	ands	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800486e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	2b04      	cmp	r3, #4
 800489a:	d107      	bne.n	80048ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	4313      	orrs	r3, r2
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d117      	bne.n	8004906 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00e      	beq.n	8004906 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb1b 	bl	8004f24 <DMA_CheckFifoParam>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2240      	movs	r2, #64	@ 0x40
 80048f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004902:	2301      	movs	r3, #1
 8004904:	e016      	b.n	8004934 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fad2 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
 8004914:	4603      	mov	r3, r0
 8004916:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	223f      	movs	r2, #63	@ 0x3f
 800491e:	409a      	lsls	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	f010803f 	.word	0xf010803f

08004940 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_DMA_Start_IT+0x26>
 8004962:	2302      	movs	r3, #2
 8004964:	e040      	b.n	80049e8 <HAL_DMA_Start_IT+0xa8>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d12f      	bne.n	80049da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fa64 	bl	8004e5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004998:	223f      	movs	r2, #63	@ 0x3f
 800499a:	409a      	lsls	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0216 	orr.w	r2, r2, #22
 80049ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e005      	b.n	80049e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7ff f893 	bl	8003b28 <HAL_GetTick>
 8004a02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d008      	beq.n	8004a22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2280      	movs	r2, #128	@ 0x80
 8004a14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e052      	b.n	8004ac8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0216 	bic.w	r2, r2, #22
 8004a30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_DMA_Abort+0x62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0208 	bic.w	r2, r2, #8
 8004a60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a72:	e013      	b.n	8004a9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a74:	f7ff f858 	bl	8003b28 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d90c      	bls.n	8004a9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e015      	b.n	8004ac8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e4      	bne.n	8004a74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	223f      	movs	r2, #63	@ 0x3f
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d004      	beq.n	8004aee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2280      	movs	r2, #128	@ 0x80
 8004ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e00c      	b.n	8004b08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2205      	movs	r2, #5
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b20:	4b8e      	ldr	r3, [pc, #568]	@ (8004d5c <HAL_DMA_IRQHandler+0x248>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a8e      	ldr	r2, [pc, #568]	@ (8004d60 <HAL_DMA_IRQHandler+0x24c>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	2208      	movs	r2, #8
 8004b40:	409a      	lsls	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01a      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0204 	bic.w	r2, r2, #4
 8004b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d012      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	2204      	movs	r2, #4
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd8:	2204      	movs	r2, #4
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d043      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03c      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0e:	2210      	movs	r2, #16
 8004c10:	409a      	lsls	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d018      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d024      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
 8004c42:	e01f      	b.n	8004c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
 8004c54:	e016      	b.n	8004c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0208 	bic.w	r2, r2, #8
 8004c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c88:	2220      	movs	r2, #32
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 808f 	beq.w	8004db4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8087 	beq.w	8004db4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	2220      	movs	r2, #32
 8004cac:	409a      	lsls	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d136      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0216 	bic.w	r2, r2, #22
 8004ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <HAL_DMA_IRQHandler+0x1da>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0208 	bic.w	r2, r2, #8
 8004cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d02:	223f      	movs	r2, #63	@ 0x3f
 8004d04:	409a      	lsls	r2, r3
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d07e      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
        }
        return;
 8004d2a:	e079      	b.n	8004e20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01d      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
 8004d58:	e02c      	b.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
 8004d5a:	bf00      	nop
 8004d5c:	20000010 	.word	0x20000010
 8004d60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d023      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	e01e      	b.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0210 	bic.w	r2, r2, #16
 8004d92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d032      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2205      	movs	r2, #5
 8004dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d307      	bcc.n	8004dfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f2      	bne.n	8004de0 <HAL_DMA_IRQHandler+0x2cc>
 8004dfa:	e000      	b.n	8004dfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004dfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
 8004e1e:	e000      	b.n	8004e22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e20:	bf00      	nop
    }
  }
}
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e36:	b2db      	uxtb	r3, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d108      	bne.n	8004e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e9a:	e007      	b.n	8004eac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3b10      	subs	r3, #16
 8004ec8:	4a14      	ldr	r2, [pc, #80]	@ (8004f1c <DMA_CalcBaseAndBitshift+0x64>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ed2:	4a13      	ldr	r2, [pc, #76]	@ (8004f20 <DMA_CalcBaseAndBitshift+0x68>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d909      	bls.n	8004efa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	1d1a      	adds	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ef8:	e007      	b.n	8004f0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	aaaaaaab 	.word	0xaaaaaaab
 8004f20:	08012430 	.word	0x08012430

08004f24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11f      	bne.n	8004f7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d856      	bhi.n	8004ff2 <DMA_CheckFifoParam+0xce>
 8004f44:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <DMA_CheckFifoParam+0x28>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6f 	.word	0x08004f6f
 8004f54:	08004f5d 	.word	0x08004f5d
 8004f58:	08004ff3 	.word	0x08004ff3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d046      	beq.n	8004ff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6c:	e043      	b.n	8004ff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f76:	d140      	bne.n	8004ffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7c:	e03d      	b.n	8004ffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f86:	d121      	bne.n	8004fcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d837      	bhi.n	8004ffe <DMA_CheckFifoParam+0xda>
 8004f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <DMA_CheckFifoParam+0x70>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fab 	.word	0x08004fab
 8004f9c:	08004fa5 	.word	0x08004fa5
 8004fa0:	08004fbd 	.word	0x08004fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	e030      	b.n	800500c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fba:	e022      	b.n	8005002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fc4:	d11f      	bne.n	8005006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fca:	e01c      	b.n	8005006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d903      	bls.n	8004fda <DMA_CheckFifoParam+0xb6>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d003      	beq.n	8004fe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fd8:	e018      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fde:	e015      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e00b      	b.n	800500a <DMA_CheckFifoParam+0xe6>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e00a      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e008      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e006      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;   
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 800500a:	bf00      	nop
    }
  } 
  
  return status; 
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	@ 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e159      	b.n	80052ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	f040 8148 	bne.w	80052e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d005      	beq.n	800506e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800506a:	2b02      	cmp	r3, #2
 800506c:	d130      	bne.n	80050d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	2203      	movs	r2, #3
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050a4:	2201      	movs	r2, #1
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 0201 	and.w	r2, r3, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d017      	beq.n	800510c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	2203      	movs	r2, #3
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d123      	bne.n	8005160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	08da      	lsrs	r2, r3, #3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3208      	adds	r2, #8
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	220f      	movs	r2, #15
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	08da      	lsrs	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3208      	adds	r2, #8
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2203      	movs	r2, #3
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0203 	and.w	r2, r3, #3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a2 	beq.w	80052e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b57      	ldr	r3, [pc, #348]	@ (8005304 <HAL_GPIO_Init+0x2e8>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	4a56      	ldr	r2, [pc, #344]	@ (8005304 <HAL_GPIO_Init+0x2e8>)
 80051ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80051b2:	4b54      	ldr	r3, [pc, #336]	@ (8005304 <HAL_GPIO_Init+0x2e8>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051be:	4a52      	ldr	r2, [pc, #328]	@ (8005308 <HAL_GPIO_Init+0x2ec>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a49      	ldr	r2, [pc, #292]	@ (800530c <HAL_GPIO_Init+0x2f0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d019      	beq.n	800521e <HAL_GPIO_Init+0x202>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a48      	ldr	r2, [pc, #288]	@ (8005310 <HAL_GPIO_Init+0x2f4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_GPIO_Init+0x1fe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a47      	ldr	r2, [pc, #284]	@ (8005314 <HAL_GPIO_Init+0x2f8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00d      	beq.n	8005216 <HAL_GPIO_Init+0x1fa>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a46      	ldr	r2, [pc, #280]	@ (8005318 <HAL_GPIO_Init+0x2fc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <HAL_GPIO_Init+0x1f6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a45      	ldr	r2, [pc, #276]	@ (800531c <HAL_GPIO_Init+0x300>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_GPIO_Init+0x1f2>
 800520a:	2304      	movs	r3, #4
 800520c:	e008      	b.n	8005220 <HAL_GPIO_Init+0x204>
 800520e:	2307      	movs	r3, #7
 8005210:	e006      	b.n	8005220 <HAL_GPIO_Init+0x204>
 8005212:	2303      	movs	r3, #3
 8005214:	e004      	b.n	8005220 <HAL_GPIO_Init+0x204>
 8005216:	2302      	movs	r3, #2
 8005218:	e002      	b.n	8005220 <HAL_GPIO_Init+0x204>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_GPIO_Init+0x204>
 800521e:	2300      	movs	r3, #0
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	f002 0203 	and.w	r2, r2, #3
 8005226:	0092      	lsls	r2, r2, #2
 8005228:	4093      	lsls	r3, r2
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005230:	4935      	ldr	r1, [pc, #212]	@ (8005308 <HAL_GPIO_Init+0x2ec>)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	3302      	adds	r3, #2
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800523e:	4b38      	ldr	r3, [pc, #224]	@ (8005320 <HAL_GPIO_Init+0x304>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005262:	4a2f      	ldr	r2, [pc, #188]	@ (8005320 <HAL_GPIO_Init+0x304>)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005268:	4b2d      	ldr	r3, [pc, #180]	@ (8005320 <HAL_GPIO_Init+0x304>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	43db      	mvns	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4013      	ands	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800528c:	4a24      	ldr	r2, [pc, #144]	@ (8005320 <HAL_GPIO_Init+0x304>)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005292:	4b23      	ldr	r3, [pc, #140]	@ (8005320 <HAL_GPIO_Init+0x304>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	43db      	mvns	r3, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4013      	ands	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005320 <HAL_GPIO_Init+0x304>)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052bc:	4b18      	ldr	r3, [pc, #96]	@ (8005320 <HAL_GPIO_Init+0x304>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005320 <HAL_GPIO_Init+0x304>)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3301      	adds	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b0f      	cmp	r3, #15
 80052f0:	f67f aea2 	bls.w	8005038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	3724      	adds	r7, #36	@ 0x24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	40013800 	.word	0x40013800
 800530c:	40020000 	.word	0x40020000
 8005310:	40020400 	.word	0x40020400
 8005314:	40020800 	.word	0x40020800
 8005318:	40020c00 	.word	0x40020c00
 800531c:	40021000 	.word	0x40021000
 8005320:	40013c00 	.word	0x40013c00

08005324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	887b      	ldrh	r3, [r7, #2]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e001      	b.n	8005346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
 8005360:	4613      	mov	r3, r2
 8005362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005364:	787b      	ldrb	r3, [r7, #1]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005370:	e003      	b.n	800537a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	041a      	lsls	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	619a      	str	r2, [r3, #24]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005398:	887a      	ldrh	r2, [r7, #2]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4013      	ands	r3, r2
 800539e:	041a      	lsls	r2, r3, #16
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	43d9      	mvns	r1, r3
 80053a4:	887b      	ldrh	r3, [r7, #2]
 80053a6:	400b      	ands	r3, r1
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	619a      	str	r2, [r3, #24]
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053c6:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053d2:	4a05      	ldr	r2, [pc, #20]	@ (80053e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fd fdd8 	bl	8002f90 <HAL_GPIO_EXTI_Callback>
  }
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40013c00 	.word	0x40013c00

080053ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e12b      	b.n	8005656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fe f874 	bl	8003500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	@ 0x24
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800543e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800544e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005450:	f005 fa3e 	bl	800a8d0 <HAL_RCC_GetPCLK1Freq>
 8005454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4a81      	ldr	r2, [pc, #516]	@ (8005660 <HAL_I2C_Init+0x274>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d807      	bhi.n	8005470 <HAL_I2C_Init+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a80      	ldr	r2, [pc, #512]	@ (8005664 <HAL_I2C_Init+0x278>)
 8005464:	4293      	cmp	r3, r2
 8005466:	bf94      	ite	ls
 8005468:	2301      	movls	r3, #1
 800546a:	2300      	movhi	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e006      	b.n	800547e <HAL_I2C_Init+0x92>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a7d      	ldr	r2, [pc, #500]	@ (8005668 <HAL_I2C_Init+0x27c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	bf94      	ite	ls
 8005478:	2301      	movls	r3, #1
 800547a:	2300      	movhi	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e0e7      	b.n	8005656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a78      	ldr	r2, [pc, #480]	@ (800566c <HAL_I2C_Init+0x280>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0c9b      	lsrs	r3, r3, #18
 8005490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005660 <HAL_I2C_Init+0x274>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d802      	bhi.n	80054c0 <HAL_I2C_Init+0xd4>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3301      	adds	r3, #1
 80054be:	e009      	b.n	80054d4 <HAL_I2C_Init+0xe8>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	4a69      	ldr	r2, [pc, #420]	@ (8005670 <HAL_I2C_Init+0x284>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	3301      	adds	r3, #1
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	495c      	ldr	r1, [pc, #368]	@ (8005660 <HAL_I2C_Init+0x274>)
 80054f0:	428b      	cmp	r3, r1
 80054f2:	d819      	bhi.n	8005528 <HAL_I2C_Init+0x13c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1e59      	subs	r1, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005508:	400b      	ands	r3, r1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_I2C_Init+0x138>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1e59      	subs	r1, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fbb1 f3f3 	udiv	r3, r1, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005522:	e051      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005524:	2304      	movs	r3, #4
 8005526:	e04f      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d111      	bne.n	8005554 <HAL_I2C_Init+0x168>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1e58      	subs	r0, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	440b      	add	r3, r1
 800553e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005542:	3301      	adds	r3, #1
 8005544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e012      	b.n	800557a <HAL_I2C_Init+0x18e>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1e58      	subs	r0, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	0099      	lsls	r1, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	fbb0 f3f3 	udiv	r3, r0, r3
 800556a:	3301      	adds	r3, #1
 800556c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Init+0x196>
 800557e:	2301      	movs	r3, #1
 8005580:	e022      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10e      	bne.n	80055a8 <HAL_I2C_Init+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e58      	subs	r0, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	440b      	add	r3, r1
 8005598:	fbb0 f3f3 	udiv	r3, r0, r3
 800559c:	3301      	adds	r3, #1
 800559e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a6:	e00f      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	6809      	ldr	r1, [r1, #0]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6911      	ldr	r1, [r2, #16]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68d2      	ldr	r2, [r2, #12]
 8005602:	4311      	orrs	r1, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	430b      	orrs	r3, r1
 800560a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	000186a0 	.word	0x000186a0
 8005664:	001e847f 	.word	0x001e847f
 8005668:	003d08ff 	.word	0x003d08ff
 800566c:	431bde83 	.word	0x431bde83
 8005670:	10624dd3 	.word	0x10624dd3

08005674 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d103      	bne.n	8005692 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
  }
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	461a      	mov	r2, r3
 80056ac:	460b      	mov	r3, r1
 80056ae:	817b      	strh	r3, [r7, #10]
 80056b0:	4613      	mov	r3, r2
 80056b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056b4:	f7fe fa38 	bl	8003b28 <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	f040 80e0 	bne.w	8005888 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2319      	movs	r3, #25
 80056ce:	2201      	movs	r2, #1
 80056d0:	4970      	ldr	r1, [pc, #448]	@ (8005894 <HAL_I2C_Master_Transmit+0x1f4>)
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f002 ffea 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056de:	2302      	movs	r3, #2
 80056e0:	e0d3      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_I2C_Master_Transmit+0x50>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e0cc      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ea>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d007      	beq.n	8005716 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005724:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2221      	movs	r2, #33	@ 0x21
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2210      	movs	r2, #16
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	893a      	ldrh	r2, [r7, #8]
 8005746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a50      	ldr	r2, [pc, #320]	@ (8005898 <HAL_I2C_Master_Transmit+0x1f8>)
 8005756:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005758:	8979      	ldrh	r1, [r7, #10]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f002 fbe0 	bl	8007f24 <I2C_MasterRequestWrite>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e08d      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005784:	e066      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	6a39      	ldr	r1, [r7, #32]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f003 f8a8 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	2b04      	cmp	r3, #4
 800579c:	d107      	bne.n	80057ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e06b      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d11b      	bne.n	8005828 <HAL_I2C_Master_Transmit+0x188>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d017      	beq.n	8005828 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	6a39      	ldr	r1, [r7, #32]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f003 f89f 	bl	8008970 <I2C_WaitOnBTFFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	2b04      	cmp	r3, #4
 800583e:	d107      	bne.n	8005850 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e01a      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005858:	2b00      	cmp	r3, #0
 800585a:	d194      	bne.n	8005786 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e000      	b.n	800588a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005888:	2302      	movs	r3, #2
  }
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	00100002 	.word	0x00100002
 8005898:	ffff0000 	.word	0xffff0000

0800589c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	817b      	strh	r3, [r7, #10]
 80058ae:	460b      	mov	r3, r1
 80058b0:	813b      	strh	r3, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058b6:	f7fe f937 	bl	8003b28 <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	f040 80d9 	bne.w	8005a7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	2319      	movs	r3, #25
 80058d0:	2201      	movs	r2, #1
 80058d2:	496d      	ldr	r1, [pc, #436]	@ (8005a88 <HAL_I2C_Mem_Write+0x1ec>)
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f002 fee9 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
 80058e2:	e0cc      	b.n	8005a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Mem_Write+0x56>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e0c5      	b.n	8005a7e <HAL_I2C_Mem_Write+0x1e2>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d007      	beq.n	8005918 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2221      	movs	r2, #33	@ 0x21
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2240      	movs	r2, #64	@ 0x40
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a4d      	ldr	r2, [pc, #308]	@ (8005a8c <HAL_I2C_Mem_Write+0x1f0>)
 8005958:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800595a:	88f8      	ldrh	r0, [r7, #6]
 800595c:	893a      	ldrh	r2, [r7, #8]
 800595e:	8979      	ldrh	r1, [r7, #10]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	4603      	mov	r3, r0
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f002 fb5c 	bl	8008028 <I2C_RequestMemoryWrite>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d052      	beq.n	8005a1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e081      	b.n	8005a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f002 ffae 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	2b04      	cmp	r3, #4
 8005990:	d107      	bne.n	80059a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e06b      	b.n	8005a7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d11b      	bne.n	8005a1c <HAL_I2C_Mem_Write+0x180>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d017      	beq.n	8005a1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1aa      	bne.n	800597a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f002 ffa1 	bl	8008970 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d107      	bne.n	8005a4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e016      	b.n	8005a7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e000      	b.n	8005a7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	00100002 	.word	0x00100002
 8005a8c:	ffff0000 	.word	0xffff0000

08005a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08c      	sub	sp, #48	@ 0x30
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	4608      	mov	r0, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	817b      	strh	r3, [r7, #10]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	813b      	strh	r3, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aaa:	f7fe f83d 	bl	8003b28 <HAL_GetTick>
 8005aae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	f040 8214 	bne.w	8005ee6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2319      	movs	r3, #25
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	497b      	ldr	r1, [pc, #492]	@ (8005cb4 <HAL_I2C_Mem_Read+0x224>)
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f002 fdef 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e207      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2C_Mem_Read+0x56>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e200      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d007      	beq.n	8005b0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2222      	movs	r2, #34	@ 0x22
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2240      	movs	r2, #64	@ 0x40
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8005cb8 <HAL_I2C_Mem_Read+0x228>)
 8005b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b4e:	88f8      	ldrh	r0, [r7, #6]
 8005b50:	893a      	ldrh	r2, [r7, #8]
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f002 faf8 	bl	8008154 <I2C_RequestMemoryRead>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e1bc      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d113      	bne.n	8005b9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	623b      	str	r3, [r7, #32]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e190      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d11b      	bne.n	8005bde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e170      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d11b      	bne.n	8005c1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	e150      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c34:	e144      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	f200 80f1 	bhi.w	8005e22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d123      	bne.n	8005c90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f002 ff09 	bl	8008a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e145      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c8e:	e117      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d14e      	bne.n	8005d36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4906      	ldr	r1, [pc, #24]	@ (8005cbc <HAL_I2C_Mem_Read+0x22c>)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f002 fd02 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e11a      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
 8005cb2:	bf00      	nop
 8005cb4:	00100002 	.word	0x00100002
 8005cb8:	ffff0000 	.word	0xffff0000
 8005cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d34:	e0c4      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	496c      	ldr	r1, [pc, #432]	@ (8005ef0 <HAL_I2C_Mem_Read+0x460>)
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f002 fcb3 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0cb      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4955      	ldr	r1, [pc, #340]	@ (8005ef0 <HAL_I2C_Mem_Read+0x460>)
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f002 fc85 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e09d      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e20:	e04e      	b.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f002 fe1c 	bl	8008a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e058      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d124      	bne.n	8005ec0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d107      	bne.n	8005e8e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f aeb6 	bne.w	8005c36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	@ 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	00010004 	.word	0x00010004

08005ef4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08a      	sub	sp, #40	@ 0x28
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	4608      	mov	r0, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	817b      	strh	r3, [r7, #10]
 8005f06:	460b      	mov	r3, r1
 8005f08:	813b      	strh	r3, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f12:	f7fd fe09 	bl	8003b28 <HAL_GetTick>
 8005f16:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	f040 8136 	bne.w	8006192 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f26:	4b9d      	ldr	r3, [pc, #628]	@ (800619c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	4a9c      	ldr	r2, [pc, #624]	@ (80061a0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	0a1a      	lsrs	r2, r3, #8
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	009a      	lsls	r2, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d112      	bne.n	8005f72 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	f043 0220 	orr.w	r2, r3, #32
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e110      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d0df      	beq.n	8005f40 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Mem_Write_DMA+0x9a>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e102      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d007      	beq.n	8005fb4 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2221      	movs	r2, #33	@ 0x21
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2240      	movs	r2, #64	@ 0x40
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a6c      	ldr	r2, [pc, #432]	@ (80061a4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005ff6:	897a      	ldrh	r2, [r7, #10]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005ffc:	893a      	ldrh	r2, [r7, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 80a9 	beq.w	800616a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d02a      	beq.n	8006076 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006024:	4a60      	ldr	r2, [pc, #384]	@ (80061a8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8006026:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602c:	4a5f      	ldr	r2, [pc, #380]	@ (80061ac <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800602e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006034:	2200      	movs	r2, #0
 8006036:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	2200      	movs	r2, #0
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006044:	2200      	movs	r2, #0
 8006046:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604c:	2200      	movs	r2, #0
 800604e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	4619      	mov	r1, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3310      	adds	r3, #16
 8006060:	461a      	mov	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006066:	f7fe fc6b 	bl	8004940 <HAL_DMA_Start_IT>
 800606a:	4603      	mov	r3, r0
 800606c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800606e:	7efb      	ldrb	r3, [r7, #27]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d166      	bne.n	8006142 <HAL_I2C_Mem_Write_DMA+0x24e>
 8006074:	e013      	b.n	800609e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e07a      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800609e:	88f8      	ldrh	r0, [r7, #6]
 80060a0:	893a      	ldrh	r2, [r7, #8]
 80060a2:	8979      	ldrh	r1, [r7, #10]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	2323      	movs	r3, #35	@ 0x23
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f001 ffba 	bl	8008028 <I2C_RequestMemoryWrite>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d022      	beq.n	8006100 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fd06 	bl	8004ad0 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060cc:	2200      	movs	r2, #0
 80060ce:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060de:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e049      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800612c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800613c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e028      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f043 0210 	orr.w	r2, r3, #16
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e014      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000010 	.word	0x20000010
 80061a0:	14f8b589 	.word	0x14f8b589
 80061a4:	ffff0000 	.word	0xffff0000
 80061a8:	08008325 	.word	0x08008325
 80061ac:	080084e3 	.word	0x080084e3

080061b0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	@ 0x30
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	4608      	mov	r0, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	461a      	mov	r2, r3
 80061be:	4603      	mov	r3, r0
 80061c0:	817b      	strh	r3, [r7, #10]
 80061c2:	460b      	mov	r3, r1
 80061c4:	813b      	strh	r3, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061ca:	f7fd fcad 	bl	8003b28 <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b20      	cmp	r3, #32
 80061de:	f040 8172 	bne.w	80064c6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80061e2:	4b93      	ldr	r3, [pc, #588]	@ (8006430 <HAL_I2C_Mem_Read_DMA+0x280>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	08db      	lsrs	r3, r3, #3
 80061e8:	4a92      	ldr	r2, [pc, #584]	@ (8006434 <HAL_I2C_Mem_Read_DMA+0x284>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	0a1a      	lsrs	r2, r3, #8
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009a      	lsls	r2, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3b01      	subs	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d112      	bne.n	800622e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800622a:	2302      	movs	r3, #2
 800622c:	e14c      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b02      	cmp	r3, #2
 800623a:	d0df      	beq.n	80061fc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_I2C_Mem_Read_DMA+0x9a>
 8006246:	2302      	movs	r3, #2
 8006248:	e13e      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b01      	cmp	r3, #1
 800625e:	d007      	beq.n	8006270 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800627e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2222      	movs	r2, #34	@ 0x22
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2240      	movs	r2, #64	@ 0x40
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80062a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4a62      	ldr	r2, [pc, #392]	@ (8006438 <HAL_I2C_Mem_Read_DMA+0x288>)
 80062b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80062b2:	897a      	ldrh	r2, [r7, #10]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80062b8:	893a      	ldrh	r2, [r7, #8]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80cc 	beq.w	800646c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02d      	beq.n	8006338 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	4a56      	ldr	r2, [pc, #344]	@ (800643c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80062e2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	4a55      	ldr	r2, [pc, #340]	@ (8006440 <HAL_I2C_Mem_Read_DMA+0x290>)
 80062ea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f8:	2200      	movs	r2, #0
 80062fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	2200      	movs	r2, #0
 8006302:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	2200      	movs	r2, #0
 800630a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3310      	adds	r3, #16
 8006316:	4619      	mov	r1, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	461a      	mov	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006322:	f7fe fb0d 	bl	8004940 <HAL_DMA_Start_IT>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800632c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006330:	2b00      	cmp	r3, #0
 8006332:	f040 8087 	bne.w	8006444 <HAL_I2C_Mem_Read_DMA+0x294>
 8006336:	e013      	b.n	8006360 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0b3      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006360:	88f8      	ldrh	r0, [r7, #6]
 8006362:	893a      	ldrh	r2, [r7, #8]
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	2323      	movs	r3, #35	@ 0x23
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4603      	mov	r3, r0
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f001 feef 	bl	8008154 <I2C_RequestMemoryRead>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d023      	beq.n	80063c4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fba5 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	2200      	movs	r2, #0
 8006392:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e081      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d108      	bne.n	80063de <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e007      	b.n	80063ee <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800641a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800642a:	605a      	str	r2, [r3, #4]
 800642c:	e049      	b.n	80064c2 <HAL_I2C_Mem_Read_DMA+0x312>
 800642e:	bf00      	nop
 8006430:	20000010 	.word	0x20000010
 8006434:	14f8b589 	.word	0x14f8b589
 8006438:	ffff0000 	.word	0xffff0000
 800643c:	08008325 	.word	0x08008325
 8006440:	080084e3 	.word	0x080084e3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	f043 0210 	orr.w	r2, r3, #16
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e02d      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800646c:	88f8      	ldrh	r0, [r7, #6]
 800646e:	893a      	ldrh	r2, [r7, #8]
 8006470:	8979      	ldrh	r1, [r7, #10]
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	2323      	movs	r3, #35	@ 0x23
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f001 fe69 	bl	8008154 <I2C_RequestMemoryRead>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e01d      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	@ 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	460b      	mov	r3, r1
 80064de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80064e0:	f7fd fb22 	bl	8003b28 <HAL_GetTick>
 80064e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	f040 8111 	bne.w	800671a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	2319      	movs	r3, #25
 80064fe:	2201      	movs	r2, #1
 8006500:	4988      	ldr	r1, [pc, #544]	@ (8006724 <HAL_I2C_IsDeviceReady+0x254>)
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f002 f8d2 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800650e:	2302      	movs	r3, #2
 8006510:	e104      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_I2C_IsDeviceReady+0x50>
 800651c:	2302      	movs	r3, #2
 800651e:	e0fd      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b01      	cmp	r3, #1
 8006534:	d007      	beq.n	8006546 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2224      	movs	r2, #36	@ 0x24
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a70      	ldr	r2, [pc, #448]	@ (8006728 <HAL_I2C_IsDeviceReady+0x258>)
 8006568:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006578:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2200      	movs	r2, #0
 8006582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f002 f890 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a0:	d103      	bne.n	80065aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e0b6      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ae:	897b      	ldrh	r3, [r7, #10]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80065be:	f7fd fab3 	bl	8003b28 <HAL_GetTick>
 80065c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065f2:	e025      	b.n	8006640 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065f4:	f7fd fa98 	bl	8003b28 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <HAL_I2C_IsDeviceReady+0x13a>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	22a0      	movs	r2, #160	@ 0xa0
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2ba0      	cmp	r3, #160	@ 0xa0
 800664a:	d005      	beq.n	8006658 <HAL_I2C_IsDeviceReady+0x188>
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_I2C_IsDeviceReady+0x188>
 8006652:	7dbb      	ldrb	r3, [r7, #22]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0cd      	beq.n	80065f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d129      	bne.n	80066c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800667c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2319      	movs	r3, #25
 800669a:	2201      	movs	r2, #1
 800669c:	4921      	ldr	r1, [pc, #132]	@ (8006724 <HAL_I2C_IsDeviceReady+0x254>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f002 f804 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e036      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e02c      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2319      	movs	r3, #25
 80066e2:	2201      	movs	r2, #1
 80066e4:	490f      	ldr	r1, [pc, #60]	@ (8006724 <HAL_I2C_IsDeviceReady+0x254>)
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f001 ffe0 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e012      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	3301      	adds	r3, #1
 80066fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	f4ff af32 	bcc.w	800656a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	00100002 	.word	0x00100002
 8006728:	ffff0000 	.word	0xffff0000

0800672c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800674c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006754:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b10      	cmp	r3, #16
 800675a:	d003      	beq.n	8006764 <HAL_I2C_EV_IRQHandler+0x38>
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	f040 80c1 	bne.w	80068e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10d      	bne.n	800679a <HAL_I2C_EV_IRQHandler+0x6e>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006784:	d003      	beq.n	800678e <HAL_I2C_EV_IRQHandler+0x62>
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800678c:	d101      	bne.n	8006792 <HAL_I2C_EV_IRQHandler+0x66>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <HAL_I2C_EV_IRQHandler+0x68>
 8006792:	2300      	movs	r3, #0
 8006794:	2b01      	cmp	r3, #1
 8006796:	f000 8132 	beq.w	80069fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00c      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0x92>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	0a5b      	lsrs	r3, r3, #9
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d006      	beq.n	80067be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f9e3 	bl	8008b7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fd95 	bl	80072e6 <I2C_Master_SB>
 80067bc:	e092      	b.n	80068e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_I2C_EV_IRQHandler+0xb2>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	0a5b      	lsrs	r3, r3, #9
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fe0b 	bl	80073f2 <I2C_Master_ADD10>
 80067dc:	e082      	b.n	80068e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <HAL_I2C_EV_IRQHandler+0xd2>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	0a5b      	lsrs	r3, r3, #9
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fe25 	bl	8007446 <I2C_Master_ADDR>
 80067fc:	e072      	b.n	80068e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	089b      	lsrs	r3, r3, #2
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03b      	beq.n	8006882 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006818:	f000 80f3 	beq.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00f      	beq.n	8006848 <HAL_I2C_EV_IRQHandler+0x11c>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	0a9b      	lsrs	r3, r3, #10
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_I2C_EV_IRQHandler+0x11c>
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9e9 	bl	8006c18 <I2C_MasterTransmit_TXE>
 8006846:	e04d      	b.n	80068e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	089b      	lsrs	r3, r3, #2
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80d6 	beq.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	0a5b      	lsrs	r3, r3, #9
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80cf 	beq.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	2b21      	cmp	r3, #33	@ 0x21
 8006868:	d103      	bne.n	8006872 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa70 	bl	8006d50 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006870:	e0c7      	b.n	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	f040 80c4 	bne.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fade 	bl	8006e3c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006880:	e0bf      	b.n	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006890:	f000 80b7 	beq.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00f      	beq.n	80068c0 <HAL_I2C_EV_IRQHandler+0x194>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	0a9b      	lsrs	r3, r3, #10
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <HAL_I2C_EV_IRQHandler+0x194>
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	089b      	lsrs	r3, r3, #2
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb57 	bl	8006f6c <I2C_MasterReceive_RXNE>
 80068be:	e011      	b.n	80068e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	089b      	lsrs	r3, r3, #2
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 809a 	beq.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	0a5b      	lsrs	r3, r3, #9
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8093 	beq.w	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc0d 	bl	80070fc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068e2:	e08e      	b.n	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068e4:	e08d      	b.n	8006a02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	e007      	b.n	8006908 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <HAL_I2C_EV_IRQHandler+0x20e>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	0a5b      	lsrs	r3, r3, #9
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00c      	beq.n	800693a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006930:	69b9      	ldr	r1, [r7, #24]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 ffd6 	bl	80078e4 <I2C_Slave_ADDR>
 8006938:	e066      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	091b      	lsrs	r3, r3, #4
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x22e>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	0a5b      	lsrs	r3, r3, #9
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 f810 	bl	8007978 <I2C_Slave_STOPF>
 8006958:	e056      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b21      	cmp	r3, #33	@ 0x21
 800695e:	d002      	beq.n	8006966 <HAL_I2C_EV_IRQHandler+0x23a>
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2b29      	cmp	r3, #41	@ 0x29
 8006964:	d125      	bne.n	80069b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	09db      	lsrs	r3, r3, #7
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00f      	beq.n	8006992 <HAL_I2C_EV_IRQHandler+0x266>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	0a9b      	lsrs	r3, r3, #10
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <HAL_I2C_EV_IRQHandler+0x266>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	089b      	lsrs	r3, r3, #2
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 feec 	bl	8007768 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006990:	e039      	b.n	8006a06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	089b      	lsrs	r3, r3, #2
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d033      	beq.n	8006a06 <HAL_I2C_EV_IRQHandler+0x2da>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	0a5b      	lsrs	r3, r3, #9
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d02d      	beq.n	8006a06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 ff19 	bl	80077e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069b0:	e029      	b.n	8006a06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	099b      	lsrs	r3, r3, #6
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00f      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x2b2>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	0a9b      	lsrs	r3, r3, #10
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x2b2>
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 ff24 	bl	8007824 <I2C_SlaveReceive_RXNE>
 80069dc:	e014      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	089b      	lsrs	r3, r3, #2
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00e      	beq.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	0a5b      	lsrs	r3, r3, #9
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 ff52 	bl	80078a0 <I2C_SlaveReceive_BTF>
 80069fc:	e004      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069fe:	bf00      	nop
 8006a00:	e002      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08a      	sub	sp, #40	@ 0x28
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <HAL_I2C_ER_IRQHandler+0x4e>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	0a5b      	lsrs	r3, r3, #9
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <HAL_I2C_ER_IRQHandler+0x78>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	f043 0302 	orr.w	r3, r3, #2
 8006a7a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006a84:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	0a9b      	lsrs	r3, r3, #10
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d03f      	beq.n	8006b12 <HAL_I2C_ER_IRQHandler+0x104>
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d039      	beq.n	8006b12 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006a9e:	7efb      	ldrb	r3, [r7, #27]
 8006aa0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ab0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006ab8:	7ebb      	ldrb	r3, [r7, #26]
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d112      	bne.n	8006ae4 <HAL_I2C_ER_IRQHandler+0xd6>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_I2C_ER_IRQHandler+0xd6>
 8006ac4:	7cfb      	ldrb	r3, [r7, #19]
 8006ac6:	2b21      	cmp	r3, #33	@ 0x21
 8006ac8:	d008      	beq.n	8006adc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006aca:	7cfb      	ldrb	r3, [r7, #19]
 8006acc:	2b29      	cmp	r3, #41	@ 0x29
 8006ace:	d005      	beq.n	8006adc <HAL_I2C_ER_IRQHandler+0xce>
 8006ad0:	7cfb      	ldrb	r3, [r7, #19]
 8006ad2:	2b28      	cmp	r3, #40	@ 0x28
 8006ad4:	d106      	bne.n	8006ae4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b21      	cmp	r3, #33	@ 0x21
 8006ada:	d103      	bne.n	8006ae4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f87b 	bl	8007bd8 <I2C_Slave_AF>
 8006ae2:	e016      	b.n	8006b12 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006aec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	f043 0304 	orr.w	r3, r3, #4
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006af6:	7efb      	ldrb	r3, [r7, #27]
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d002      	beq.n	8006b02 <HAL_I2C_ER_IRQHandler+0xf4>
 8006afc:	7efb      	ldrb	r3, [r7, #27]
 8006afe:	2b40      	cmp	r3, #64	@ 0x40
 8006b00:	d107      	bne.n	8006b12 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	0adb      	lsrs	r3, r3, #11
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <HAL_I2C_ER_IRQHandler+0x12e>
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	0a1b      	lsrs	r3, r3, #8
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	f043 0308 	orr.w	r3, r3, #8
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006b3a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f8b6 	bl	8007cc0 <I2C_ITError>
  }
}
 8006b54:	bf00      	nop
 8006b56:	3728      	adds	r7, #40	@ 0x28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c2e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d150      	bne.n	8006ce0 <I2C_MasterTransmit_TXE+0xc8>
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b21      	cmp	r3, #33	@ 0x21
 8006c42:	d14d      	bne.n	8006ce0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d01d      	beq.n	8006c86 <I2C_MasterTransmit_TXE+0x6e>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d01a      	beq.n	8006c86 <I2C_MasterTransmit_TXE+0x6e>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c56:	d016      	beq.n	8006c86 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c66:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2211      	movs	r2, #17
 8006c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff ff6c 	bl	8006b5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c84:	e060      	b.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c94:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ca4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	d107      	bne.n	8006cd0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ff87 	bl	8006bdc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cce:	e03b      	b.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ff3f 	bl	8006b5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cde:	e033      	b.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b21      	cmp	r3, #33	@ 0x21
 8006ce4:	d005      	beq.n	8006cf2 <I2C_MasterTransmit_TXE+0xda>
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d12d      	bne.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	2b22      	cmp	r3, #34	@ 0x22
 8006cf0:	d12a      	bne.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d0c:	e01c      	b.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b40      	cmp	r3, #64	@ 0x40
 8006d18:	d103      	bne.n	8006d22 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f88e 	bl	8006e3c <I2C_MemoryTransmit_TXE_BTF>
}
 8006d20:	e012      	b.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006d46:	e7ff      	b.n	8006d48 <I2C_MasterTransmit_TXE+0x130>
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b21      	cmp	r3, #33	@ 0x21
 8006d68:	d164      	bne.n	8006e34 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d012      	beq.n	8006d9a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	781a      	ldrb	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006d98:	e04c      	b.n	8006e34 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d01d      	beq.n	8006ddc <I2C_MasterTransmit_BTF+0x8c>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d01a      	beq.n	8006ddc <I2C_MasterTransmit_BTF+0x8c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dac:	d016      	beq.n	8006ddc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dbc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2211      	movs	r2, #17
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fec1 	bl	8006b5c <HAL_I2C_MasterTxCpltCallback>
}
 8006dda:	e02b      	b.n	8006e34 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dfa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b40      	cmp	r3, #64	@ 0x40
 8006e14:	d107      	bne.n	8006e26 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff fedc 	bl	8006bdc <HAL_I2C_MemTxCpltCallback>
}
 8006e24:	e006      	b.n	8006e34 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fe94 	bl	8006b5c <HAL_I2C_MasterTxCpltCallback>
}
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11d      	bne.n	8006e90 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10b      	bne.n	8006e74 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6c:	1c9a      	adds	r2, r3, #2
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006e72:	e077      	b.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	121b      	asrs	r3, r3, #8
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006e8e:	e069      	b.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d10b      	bne.n	8006eb0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006eae:	e059      	b.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d152      	bne.n	8006f5e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b22      	cmp	r3, #34	@ 0x22
 8006ebc:	d10d      	bne.n	8006eda <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ecc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006ed8:	e044      	b.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d015      	beq.n	8006f10 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	2b21      	cmp	r3, #33	@ 0x21
 8006ee8:	d112      	bne.n	8006f10 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f0e:	e029      	b.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d124      	bne.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b21      	cmp	r3, #33	@ 0x21
 8006f1e:	d121      	bne.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f2e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fe40 	bl	8006bdc <HAL_I2C_MemTxCpltCallback>
}
 8006f5c:	e002      	b.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fe fb88 	bl	8005674 <I2C_Flush_DR>
}
 8006f64:	bf00      	nop
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b22      	cmp	r3, #34	@ 0x22
 8006f7e:	f040 80b9 	bne.w	80070f4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d921      	bls.n	8006fda <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	f040 8096 	bne.w	80070f4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fd6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006fd8:	e08c      	b.n	80070f4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d07f      	beq.n	80070e2 <I2C_MasterReceive_RXNE+0x176>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d002      	beq.n	8006fee <I2C_MasterReceive_RXNE+0x82>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d179      	bne.n	80070e2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fd06 	bl	8008a00 <I2C_WaitOnSTOPRequestThroughIT>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d14c      	bne.n	8007094 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007008:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007018:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b40      	cmp	r3, #64	@ 0x40
 8007052:	d10a      	bne.n	800706a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fb ff6e 	bl	8002f44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007068:	e044      	b.n	80070f4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d002      	beq.n	800707e <I2C_MasterReceive_RXNE+0x112>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b20      	cmp	r3, #32
 800707c:	d103      	bne.n	8007086 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	@ 0x30
 8007084:	e002      	b.n	800708c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2212      	movs	r2, #18
 800708a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fd6f 	bl	8006b70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007092:	e02f      	b.n	80070f4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80070a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fd88 	bl	8006bf0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070e0:	e008      	b.n	80070f4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070f0:	605a      	str	r2, [r3, #4]
}
 80070f2:	e7ff      	b.n	80070f4 <I2C_MasterReceive_RXNE+0x188>
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b04      	cmp	r3, #4
 8007112:	d11b      	bne.n	800714c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007122:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800714a:	e0c8      	b.n	80072de <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d129      	bne.n	80071aa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007164:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b04      	cmp	r3, #4
 800716a:	d00a      	beq.n	8007182 <I2C_MasterReceive_BTF+0x86>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d007      	beq.n	8007182 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007180:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80071a8:	e099      	b.n	80072de <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f040 8081 	bne.w	80072b8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d002      	beq.n	80071c2 <I2C_MasterReceive_BTF+0xc6>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d108      	bne.n	80071d4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	e019      	b.n	8007208 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d002      	beq.n	80071e0 <I2C_MasterReceive_BTF+0xe4>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d108      	bne.n	80071f2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e00a      	b.n	8007208 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d007      	beq.n	8007208 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007206:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007262:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b40      	cmp	r3, #64	@ 0x40
 8007276:	d10a      	bne.n	800728e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fb fe5c 	bl	8002f44 <HAL_I2C_MemRxCpltCallback>
}
 800728c:	e027      	b.n	80072de <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b08      	cmp	r3, #8
 800729a:	d002      	beq.n	80072a2 <I2C_MasterReceive_BTF+0x1a6>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d103      	bne.n	80072aa <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80072a8:	e002      	b.n	80072b0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2212      	movs	r2, #18
 80072ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fc5d 	bl	8006b70 <HAL_I2C_MasterRxCpltCallback>
}
 80072b6:	e012      	b.n	80072de <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b40      	cmp	r3, #64	@ 0x40
 80072f8:	d117      	bne.n	800732a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007312:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007314:	e067      	b.n	80073e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	611a      	str	r2, [r3, #16]
}
 8007328:	e05d      	b.n	80073e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007332:	d133      	bne.n	800739c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b21      	cmp	r3, #33	@ 0x21
 800733e:	d109      	bne.n	8007354 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007344:	b2db      	uxtb	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007350:	611a      	str	r2, [r3, #16]
 8007352:	e008      	b.n	8007366 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <I2C_Master_SB+0x92>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d108      	bne.n	800738a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d032      	beq.n	80073e6 <I2C_Master_SB+0x100>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d02d      	beq.n	80073e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007398:	605a      	str	r2, [r3, #4]
}
 800739a:	e024      	b.n	80073e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10e      	bne.n	80073c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	11db      	asrs	r3, r3, #7
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0306 	and.w	r3, r3, #6
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f063 030f 	orn	r3, r3, #15
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	611a      	str	r2, [r3, #16]
}
 80073c0:	e011      	b.n	80073e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10d      	bne.n	80073e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	11db      	asrs	r3, r3, #7
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 0306 	and.w	r3, r3, #6
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f063 030e 	orn	r3, r3, #14
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	611a      	str	r2, [r3, #16]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740a:	2b00      	cmp	r3, #0
 800740c:	d004      	beq.n	8007418 <I2C_Master_ADD10+0x26>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d108      	bne.n	800742a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <I2C_Master_ADD10+0x48>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007438:	605a      	str	r2, [r3, #4]
  }
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007446:	b480      	push	{r7}
 8007448:	b091      	sub	sp, #68	@ 0x44
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007454:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007462:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b22      	cmp	r3, #34	@ 0x22
 800746e:	f040 8169 	bne.w	8007744 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10f      	bne.n	800749a <I2C_Master_ADDR+0x54>
 800747a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800747e:	2b40      	cmp	r3, #64	@ 0x40
 8007480:	d10b      	bne.n	800749a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007482:	2300      	movs	r3, #0
 8007484:	633b      	str	r3, [r7, #48]	@ 0x30
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	633b      	str	r3, [r7, #48]	@ 0x30
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	633b      	str	r3, [r7, #48]	@ 0x30
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	e160      	b.n	800775c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11d      	bne.n	80074de <I2C_Master_ADDR+0x98>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80074aa:	d118      	bne.n	80074de <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ac:	2300      	movs	r3, #0
 80074ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074d0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	651a      	str	r2, [r3, #80]	@ 0x50
 80074dc:	e13e      	b.n	800775c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d113      	bne.n	8007510 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074e8:	2300      	movs	r3, #0
 80074ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	e115      	b.n	800773c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	f040 808a 	bne.w	8007630 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007522:	d137      	bne.n	8007594 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007532:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800753e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007542:	d113      	bne.n	800756c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007552:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007554:	2300      	movs	r3, #0
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
 8007568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756a:	e0e7      	b.n	800773c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	623b      	str	r3, [r7, #32]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e0d3      	b.n	800773c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	2b08      	cmp	r3, #8
 8007598:	d02e      	beq.n	80075f8 <I2C_Master_ADDR+0x1b2>
 800759a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759c:	2b20      	cmp	r3, #32
 800759e:	d02b      	beq.n	80075f8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80075a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a2:	2b12      	cmp	r3, #18
 80075a4:	d102      	bne.n	80075ac <I2C_Master_ADDR+0x166>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d125      	bne.n	80075f8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d00e      	beq.n	80075d0 <I2C_Master_ADDR+0x18a>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d00b      	beq.n	80075d0 <I2C_Master_ADDR+0x18a>
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d008      	beq.n	80075d0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e007      	b.n	80075e0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80075de:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	61fb      	str	r3, [r7, #28]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	e0a1      	b.n	800773c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007606:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e085      	b.n	800773c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d14d      	bne.n	80076d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	2b04      	cmp	r3, #4
 800763e:	d016      	beq.n	800766e <I2C_Master_ADDR+0x228>
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	2b02      	cmp	r3, #2
 8007644:	d013      	beq.n	800766e <I2C_Master_ADDR+0x228>
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	2b10      	cmp	r3, #16
 800764a:	d010      	beq.n	800766e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800765a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e007      	b.n	800767e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800767c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800768c:	d117      	bne.n	80076be <I2C_Master_ADDR+0x278>
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007694:	d00b      	beq.n	80076ae <I2C_Master_ADDR+0x268>
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	2b01      	cmp	r3, #1
 800769a:	d008      	beq.n	80076ae <I2C_Master_ADDR+0x268>
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d005      	beq.n	80076ae <I2C_Master_ADDR+0x268>
 80076a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a4:	2b10      	cmp	r3, #16
 80076a6:	d002      	beq.n	80076ae <I2C_Master_ADDR+0x268>
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d107      	bne.n	80076be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	e032      	b.n	800773c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f4:	d117      	bne.n	8007726 <I2C_Master_ADDR+0x2e0>
 80076f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076fc:	d00b      	beq.n	8007716 <I2C_Master_ADDR+0x2d0>
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	2b01      	cmp	r3, #1
 8007702:	d008      	beq.n	8007716 <I2C_Master_ADDR+0x2d0>
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	2b08      	cmp	r3, #8
 8007708:	d005      	beq.n	8007716 <I2C_Master_ADDR+0x2d0>
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	2b10      	cmp	r3, #16
 800770e:	d002      	beq.n	8007716 <I2C_Master_ADDR+0x2d0>
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	2b20      	cmp	r3, #32
 8007714:	d107      	bne.n	8007726 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007724:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007742:	e00b      	b.n	800775c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	e7ff      	b.n	800775c <I2C_Master_ADDR+0x316>
 800775c:	bf00      	nop
 800775e:	3744      	adds	r7, #68	@ 0x44
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02b      	beq.n	80077da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d114      	bne.n	80077da <I2C_SlaveTransmit_TXE+0x72>
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b29      	cmp	r3, #41	@ 0x29
 80077b4:	d111      	bne.n	80077da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2221      	movs	r2, #33	@ 0x21
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2228      	movs	r2, #40	@ 0x28
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff f9d5 	bl	8006b84 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d011      	beq.n	8007818 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007832:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d02c      	beq.n	8007898 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d114      	bne.n	8007898 <I2C_SlaveReceive_RXNE+0x74>
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b2a      	cmp	r3, #42	@ 0x2a
 8007872:	d111      	bne.n	8007898 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007882:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2222      	movs	r2, #34	@ 0x22
 8007888:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2228      	movs	r2, #40	@ 0x28
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff f980 	bl	8006b98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d012      	beq.n	80078d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80078fe:	2b28      	cmp	r3, #40	@ 0x28
 8007900:	d127      	bne.n	8007952 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007910:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	089b      	lsrs	r3, r3, #2
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	09db      	lsrs	r3, r3, #7
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	81bb      	strh	r3, [r7, #12]
 8007934:	e002      	b.n	800793c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007944:	89ba      	ldrh	r2, [r7, #12]
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff f92e 	bl	8006bac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007950:	e00e      	b.n	8007970 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007986:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007996:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007998:	2300      	movs	r3, #0
 800799a:	60bb      	str	r3, [r7, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d4:	d172      	bne.n	8007abc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	2b22      	cmp	r3, #34	@ 0x22
 80079da:	d002      	beq.n	80079e2 <I2C_Slave_STOPF+0x6a>
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e0:	d135      	bne.n	8007a4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fe:	f043 0204 	orr.w	r2, r3, #4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd fa04 	bl	8004e28 <HAL_DMA_GetState>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d049      	beq.n	8007aba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2a:	4a69      	ldr	r2, [pc, #420]	@ (8007bd0 <I2C_Slave_STOPF+0x258>)
 8007a2c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fd f84c 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d03d      	beq.n	8007aba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a48:	4610      	mov	r0, r2
 8007a4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a4c:	e035      	b.n	8007aba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd f9ce 	bl	8004e28 <HAL_DMA_GetState>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d014      	beq.n	8007abc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a96:	4a4e      	ldr	r2, [pc, #312]	@ (8007bd0 <I2C_Slave_STOPF+0x258>)
 8007a98:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd f816 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	e000      	b.n	8007abc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007aba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d03e      	beq.n	8007b44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d112      	bne.n	8007afa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b04:	2b40      	cmp	r3, #64	@ 0x40
 8007b06:	d112      	bne.n	8007b2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	f043 0204 	orr.w	r2, r3, #4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8b7 	bl	8007cc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007b52:	e039      	b.n	8007bc8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b58:	d109      	bne.n	8007b6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2228      	movs	r2, #40	@ 0x28
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff f815 	bl	8006b98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b28      	cmp	r3, #40	@ 0x28
 8007b78:	d111      	bne.n	8007b9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a15      	ldr	r2, [pc, #84]	@ (8007bd4 <I2C_Slave_STOPF+0x25c>)
 8007b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff f816 	bl	8006bc8 <HAL_I2C_ListenCpltCallback>
}
 8007b9c:	e014      	b.n	8007bc8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba2:	2b22      	cmp	r3, #34	@ 0x22
 8007ba4:	d002      	beq.n	8007bac <I2C_Slave_STOPF+0x234>
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b22      	cmp	r3, #34	@ 0x22
 8007baa:	d10d      	bne.n	8007bc8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fe ffe8 	bl	8006b98 <HAL_I2C_SlaveRxCpltCallback>
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	0800855d 	.word	0x0800855d
 8007bd4:	ffff0000 	.word	0xffff0000

08007bd8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d002      	beq.n	8007bfa <I2C_Slave_AF+0x22>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d129      	bne.n	8007c4e <I2C_Slave_AF+0x76>
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	2b28      	cmp	r3, #40	@ 0x28
 8007bfe:	d126      	bne.n	8007c4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a2e      	ldr	r2, [pc, #184]	@ (8007cbc <I2C_Slave_AF+0xe4>)
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fe ffbe 	bl	8006bc8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007c4c:	e031      	b.n	8007cb2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b21      	cmp	r3, #33	@ 0x21
 8007c52:	d129      	bne.n	8007ca8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a19      	ldr	r2, [pc, #100]	@ (8007cbc <I2C_Slave_AF+0xe4>)
 8007c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2221      	movs	r2, #33	@ 0x21
 8007c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c98:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fd fcea 	bl	8005674 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe ff6f 	bl	8006b84 <HAL_I2C_SlaveTxCpltCallback>
}
 8007ca6:	e004      	b.n	8007cb2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007cb0:	615a      	str	r2, [r3, #20]
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	ffff0000 	.word	0xffff0000

08007cc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	d002      	beq.n	8007ce4 <I2C_ITError+0x24>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b40      	cmp	r3, #64	@ 0x40
 8007ce2:	d10a      	bne.n	8007cfa <I2C_ITError+0x3a>
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b22      	cmp	r3, #34	@ 0x22
 8007ce8:	d107      	bne.n	8007cfa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cf8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d00:	2b28      	cmp	r3, #40	@ 0x28
 8007d02:	d107      	bne.n	8007d14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2228      	movs	r2, #40	@ 0x28
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007d12:	e015      	b.n	8007d40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d22:	d00a      	beq.n	8007d3a <I2C_ITError+0x7a>
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b60      	cmp	r3, #96	@ 0x60
 8007d28:	d007      	beq.n	8007d3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d4e:	d162      	bne.n	8007e16 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d020      	beq.n	8007db0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d72:	4a6a      	ldr	r2, [pc, #424]	@ (8007f1c <I2C_ITError+0x25c>)
 8007d74:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc fea8 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 8089 	beq.w	8007e9a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
 8007dae:	e074      	b.n	8007e9a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	4a59      	ldr	r2, [pc, #356]	@ (8007f1c <I2C_ITError+0x25c>)
 8007db6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fe87 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d068      	beq.n	8007e9a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd2:	2b40      	cmp	r3, #64	@ 0x40
 8007dd4:	d10b      	bne.n	8007dee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0201 	bic.w	r2, r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	e041      	b.n	8007e9a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b60      	cmp	r3, #96	@ 0x60
 8007e20:	d125      	bne.n	8007e6e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3a:	2b40      	cmp	r3, #64	@ 0x40
 8007e3c:	d10b      	bne.n	8007e56 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0201 	bic.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fe fecc 	bl	8006c04 <HAL_I2C_AbortCpltCallback>
 8007e6c:	e015      	b.n	8007e9a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e78:	2b40      	cmp	r3, #64	@ 0x40
 8007e7a:	d10b      	bne.n	8007e94 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7fe feab 	bl	8006bf0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10e      	bne.n	8007ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d109      	bne.n	8007ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ed6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ede:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b04      	cmp	r3, #4
 8007eea:	d113      	bne.n	8007f14 <I2C_ITError+0x254>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b28      	cmp	r3, #40	@ 0x28
 8007ef0:	d110      	bne.n	8007f14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f20 <I2C_ITError+0x260>)
 8007ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7fe fe5a 	bl	8006bc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	0800855d 	.word	0x0800855d
 8007f20:	ffff0000 	.word	0xffff0000

08007f24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	460b      	mov	r3, r1
 8007f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d006      	beq.n	8007f4e <I2C_MasterRequestWrite+0x2a>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d003      	beq.n	8007f4e <I2C_MasterRequestWrite+0x2a>
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f4c:	d108      	bne.n	8007f60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e00b      	b.n	8007f78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f64:	2b12      	cmp	r3, #18
 8007f66:	d107      	bne.n	8007f78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fb91 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00d      	beq.n	8007fac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f9e:	d103      	bne.n	8007fa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fa6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e035      	b.n	8008018 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fb4:	d108      	bne.n	8007fc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fb6:	897b      	ldrh	r3, [r7, #10]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fc4:	611a      	str	r2, [r3, #16]
 8007fc6:	e01b      	b.n	8008000 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fc8:	897b      	ldrh	r3, [r7, #10]
 8007fca:	11db      	asrs	r3, r3, #7
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0306 	and.w	r3, r3, #6
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f063 030f 	orn	r3, r3, #15
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	490e      	ldr	r1, [pc, #56]	@ (8008020 <I2C_MasterRequestWrite+0xfc>)
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fbda 	bl	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e010      	b.n	8008018 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ff6:	897b      	ldrh	r3, [r7, #10]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	4907      	ldr	r1, [pc, #28]	@ (8008024 <I2C_MasterRequestWrite+0x100>)
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fbca 	bl	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	00010008 	.word	0x00010008
 8008024:	00010002 	.word	0x00010002

08008028 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	4608      	mov	r0, r1
 8008032:	4611      	mov	r1, r2
 8008034:	461a      	mov	r2, r3
 8008036:	4603      	mov	r3, r0
 8008038:	817b      	strh	r3, [r7, #10]
 800803a:	460b      	mov	r3, r1
 800803c:	813b      	strh	r3, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	2200      	movs	r2, #0
 800805a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fb24 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008078:	d103      	bne.n	8008082 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008080:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e05f      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008086:	897b      	ldrh	r3, [r7, #10]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	492d      	ldr	r1, [pc, #180]	@ (8008150 <I2C_RequestMemoryWrite+0x128>)
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fb7f 	bl	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e04c      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c4:	6a39      	ldr	r1, [r7, #32]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fc0a 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d107      	bne.n	80080ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e02b      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d105      	bne.n	8008100 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080f4:	893b      	ldrh	r3, [r7, #8]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	611a      	str	r2, [r3, #16]
 80080fe:	e021      	b.n	8008144 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008100:	893b      	ldrh	r3, [r7, #8]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800810e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008110:	6a39      	ldr	r1, [r7, #32]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 fbe4 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	2b04      	cmp	r3, #4
 8008124:	d107      	bne.n	8008136 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e005      	b.n	8008146 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800813a:	893b      	ldrh	r3, [r7, #8]
 800813c:	b2da      	uxtb	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	00010002 	.word	0x00010002

08008154 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	4608      	mov	r0, r1
 800815e:	4611      	mov	r1, r2
 8008160:	461a      	mov	r2, r3
 8008162:	4603      	mov	r3, r0
 8008164:	817b      	strh	r3, [r7, #10]
 8008166:	460b      	mov	r3, r1
 8008168:	813b      	strh	r3, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800817c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800818c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2200      	movs	r2, #0
 8008196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fa86 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b4:	d103      	bne.n	80081be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0aa      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081c2:	897b      	ldrh	r3, [r7, #10]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80081d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	4952      	ldr	r1, [pc, #328]	@ (8008320 <I2C_RequestMemoryRead+0x1cc>)
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 fae1 	bl	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e097      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008200:	6a39      	ldr	r1, [r7, #32]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fb6c 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	2b04      	cmp	r3, #4
 8008214:	d107      	bne.n	8008226 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e076      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d105      	bne.n	800823c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008230:	893b      	ldrh	r3, [r7, #8]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	611a      	str	r2, [r3, #16]
 800823a:	e021      	b.n	8008280 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800823c:	893b      	ldrh	r3, [r7, #8]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800824a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824c:	6a39      	ldr	r1, [r7, #32]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fb46 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825e:	2b04      	cmp	r3, #4
 8008260:	d107      	bne.n	8008272 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e050      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008276:	893b      	ldrh	r3, [r7, #8]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008282:	6a39      	ldr	r1, [r7, #32]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fb2b 	bl	80088e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00d      	beq.n	80082ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008294:	2b04      	cmp	r3, #4
 8008296:	d107      	bne.n	80082a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e035      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f9ef 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00d      	beq.n	80082f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e2:	d103      	bne.n	80082ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e013      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082f0:	897b      	ldrh	r3, [r7, #10]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	4906      	ldr	r1, [pc, #24]	@ (8008320 <I2C_RequestMemoryRead+0x1cc>)
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fa4a 	bl	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	00010002 	.word	0x00010002

08008324 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008330:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008338:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008340:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008356:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008364:	2200      	movs	r2, #0
 8008366:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008374:	2200      	movs	r2, #0
 8008376:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008378:	7cfb      	ldrb	r3, [r7, #19]
 800837a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800837e:	2b21      	cmp	r3, #33	@ 0x21
 8008380:	d007      	beq.n	8008392 <I2C_DMAXferCplt+0x6e>
 8008382:	7cfb      	ldrb	r3, [r7, #19]
 8008384:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8008388:	2b22      	cmp	r3, #34	@ 0x22
 800838a:	d131      	bne.n	80083f0 <I2C_DMAXferCplt+0xcc>
 800838c:	7cbb      	ldrb	r3, [r7, #18]
 800838e:	2b20      	cmp	r3, #32
 8008390:	d12e      	bne.n	80083f0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083a0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2200      	movs	r2, #0
 80083a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80083a8:	7cfb      	ldrb	r3, [r7, #19]
 80083aa:	2b29      	cmp	r3, #41	@ 0x29
 80083ac:	d10a      	bne.n	80083c4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2221      	movs	r2, #33	@ 0x21
 80083b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2228      	movs	r2, #40	@ 0x28
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80083bc:	6978      	ldr	r0, [r7, #20]
 80083be:	f7fe fbe1 	bl	8006b84 <HAL_I2C_SlaveTxCpltCallback>
 80083c2:	e00c      	b.n	80083de <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80083c4:	7cfb      	ldrb	r3, [r7, #19]
 80083c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c8:	d109      	bne.n	80083de <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2222      	movs	r2, #34	@ 0x22
 80083ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2228      	movs	r2, #40	@ 0x28
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80083d8:	6978      	ldr	r0, [r7, #20]
 80083da:	f7fe fbdd 	bl	8006b98 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80083ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80083ee:	e074      	b.n	80084da <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d06e      	beq.n	80084da <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b01      	cmp	r3, #1
 8008404:	d107      	bne.n	8008416 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008414:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008424:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800842c:	d009      	beq.n	8008442 <I2C_DMAXferCplt+0x11e>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b08      	cmp	r3, #8
 8008432:	d006      	beq.n	8008442 <I2C_DMAXferCplt+0x11e>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800843a:	d002      	beq.n	8008442 <I2C_DMAXferCplt+0x11e>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b20      	cmp	r3, #32
 8008440:	d107      	bne.n	8008452 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008450:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008460:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008470:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008480:	6978      	ldr	r0, [r7, #20]
 8008482:	f7fe fbb5 	bl	8006bf0 <HAL_I2C_ErrorCallback>
}
 8008486:	e028      	b.n	80084da <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b40      	cmp	r3, #64	@ 0x40
 800849a:	d10a      	bne.n	80084b2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2200      	movs	r2, #0
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	f7fa fd4a 	bl	8002f44 <HAL_I2C_MemRxCpltCallback>
}
 80084b0:	e013      	b.n	80084da <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d002      	beq.n	80084c6 <I2C_DMAXferCplt+0x1a2>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d103      	bne.n	80084ce <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2200      	movs	r2, #0
 80084ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80084cc:	e002      	b.n	80084d4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2212      	movs	r2, #18
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f7fe fb4b 	bl	8006b70 <HAL_I2C_MasterRxCpltCallback>
}
 80084da:	bf00      	nop
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084fc:	2200      	movs	r2, #0
 80084fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	2200      	movs	r2, #0
 800850e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fc fc97 	bl	8004e44 <HAL_DMA_GetError>
 8008516:	4603      	mov	r3, r0
 8008518:	2b02      	cmp	r3, #2
 800851a:	d01b      	beq.n	8008554 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800852a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2220      	movs	r2, #32
 8008536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	f043 0210 	orr.w	r2, r3, #16
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7fe fb4e 	bl	8006bf0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008574:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008576:	4b4b      	ldr	r3, [pc, #300]	@ (80086a4 <I2C_DMAAbort+0x148>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	08db      	lsrs	r3, r3, #3
 800857c:	4a4a      	ldr	r2, [pc, #296]	@ (80086a8 <I2C_DMAAbort+0x14c>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	0a1a      	lsrs	r2, r3, #8
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	00da      	lsls	r2, r3, #3
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80085a2:	e00a      	b.n	80085ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085b8:	d0ea      	beq.n	8008590 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c6:	2200      	movs	r2, #0
 80085c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d6:	2200      	movs	r2, #0
 80085d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2200      	movs	r2, #0
 80085ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fc:	2200      	movs	r2, #0
 80085fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	2200      	movs	r2, #0
 800860e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0201 	bic.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b60      	cmp	r3, #96	@ 0x60
 800862a:	d10e      	bne.n	800864a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008642:	6978      	ldr	r0, [r7, #20]
 8008644:	f7fe fade 	bl	8006c04 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008648:	e027      	b.n	800869a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800864a:	7cfb      	ldrb	r3, [r7, #19]
 800864c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008650:	2b28      	cmp	r3, #40	@ 0x28
 8008652:	d117      	bne.n	8008684 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0201 	orr.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008672:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2200      	movs	r2, #0
 8008678:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2228      	movs	r2, #40	@ 0x28
 800867e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008682:	e007      	b.n	8008694 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008694:	6978      	ldr	r0, [r7, #20]
 8008696:	f7fe faab 	bl	8006bf0 <HAL_I2C_ErrorCallback>
}
 800869a:	bf00      	nop
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000010 	.word	0x20000010
 80086a8:	14f8b589 	.word	0x14f8b589

080086ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	4613      	mov	r3, r2
 80086ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086bc:	e048      	b.n	8008750 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c4:	d044      	beq.n	8008750 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c6:	f7fb fa2f 	bl	8003b28 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d302      	bcc.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d139      	bne.n	8008750 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	0c1b      	lsrs	r3, r3, #16
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d10d      	bne.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x56>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	43da      	mvns	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4013      	ands	r3, r2
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	461a      	mov	r2, r3
 8008700:	e00c      	b.n	800871c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	43da      	mvns	r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4013      	ands	r3, r2
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	429a      	cmp	r2, r3
 8008720:	d116      	bne.n	8008750 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873c:	f043 0220 	orr.w	r2, r3, #32
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e023      	b.n	8008798 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10d      	bne.n	8008776 <I2C_WaitOnFlagUntilTimeout+0xca>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	43da      	mvns	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4013      	ands	r3, r2
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf0c      	ite	eq
 800876c:	2301      	moveq	r3, #1
 800876e:	2300      	movne	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	e00c      	b.n	8008790 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	43da      	mvns	r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	4013      	ands	r3, r2
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	bf0c      	ite	eq
 8008788:	2301      	moveq	r3, #1
 800878a:	2300      	movne	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	429a      	cmp	r2, r3
 8008794:	d093      	beq.n	80086be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087ae:	e071      	b.n	8008894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087be:	d123      	bne.n	8008808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80087d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f4:	f043 0204 	orr.w	r2, r3, #4
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e067      	b.n	80088d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d041      	beq.n	8008894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008810:	f7fb f98a 	bl	8003b28 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d302      	bcc.n	8008826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d136      	bne.n	8008894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d10c      	bne.n	800884a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	43da      	mvns	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4013      	ands	r3, r2
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	bf14      	ite	ne
 8008842:	2301      	movne	r3, #1
 8008844:	2300      	moveq	r3, #0
 8008846:	b2db      	uxtb	r3, r3
 8008848:	e00b      	b.n	8008862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	43da      	mvns	r2, r3
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4013      	ands	r3, r2
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf14      	ite	ne
 800885c:	2301      	movne	r3, #1
 800885e:	2300      	moveq	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008880:	f043 0220 	orr.w	r2, r3, #32
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e021      	b.n	80088d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	0c1b      	lsrs	r3, r3, #16
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	d10c      	bne.n	80088b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	43da      	mvns	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	4013      	ands	r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf14      	ite	ne
 80088b0:	2301      	movne	r3, #1
 80088b2:	2300      	moveq	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	e00b      	b.n	80088d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	43da      	mvns	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4013      	ands	r3, r2
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf14      	ite	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	2300      	moveq	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f47f af6d 	bne.w	80087b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088ec:	e034      	b.n	8008958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f915 	bl	8008b1e <I2C_IsAcknowledgeFailed>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e034      	b.n	8008968 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d028      	beq.n	8008958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008906:	f7fb f90f 	bl	8003b28 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	d302      	bcc.n	800891c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11d      	bne.n	8008958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008926:	2b80      	cmp	r3, #128	@ 0x80
 8008928:	d016      	beq.n	8008958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008944:	f043 0220 	orr.w	r2, r3, #32
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e007      	b.n	8008968 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008962:	2b80      	cmp	r3, #128	@ 0x80
 8008964:	d1c3      	bne.n	80088ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800897c:	e034      	b.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f8cd 	bl	8008b1e <I2C_IsAcknowledgeFailed>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e034      	b.n	80089f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d028      	beq.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008996:	f7fb f8c7 	bl	8003b28 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d302      	bcc.n	80089ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11d      	bne.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d016      	beq.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d4:	f043 0220 	orr.w	r2, r3, #32
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e007      	b.n	80089f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d1c3      	bne.n	800897e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a0c:	4b13      	ldr	r3, [pc, #76]	@ (8008a5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	08db      	lsrs	r3, r3, #3
 8008a12:	4a13      	ldr	r2, [pc, #76]	@ (8008a60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	0a1a      	lsrs	r2, r3, #8
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a32:	f043 0220 	orr.w	r2, r3, #32
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e008      	b.n	8008a50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a4c:	d0e9      	beq.n	8008a22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000010 	.word	0x20000010
 8008a60:	14f8b589 	.word	0x14f8b589

08008a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a70:	e049      	b.n	8008b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d119      	bne.n	8008ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f06f 0210 	mvn.w	r2, #16
 8008a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e030      	b.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab4:	f7fb f838 	bl	8003b28 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d302      	bcc.n	8008aca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d11d      	bne.n	8008b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d016      	beq.n	8008b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af2:	f043 0220 	orr.w	r2, r3, #32
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e007      	b.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b10:	2b40      	cmp	r3, #64	@ 0x40
 8008b12:	d1ae      	bne.n	8008a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b34:	d11b      	bne.n	8008b6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5a:	f043 0204 	orr.w	r2, r3, #4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008b8c:	d103      	bne.n	8008b96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b94:	e007      	b.n	8008ba6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008b9e:	d102      	bne.n	8008ba6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af02      	add	r7, sp, #8
 8008bb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e101      	b.n	8008dc8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f007 fb70 	bl	80102c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2203      	movs	r2, #3
 8008be8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bf2:	d102      	bne.n	8008bfa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f003 feeb 	bl	800c9da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7c1a      	ldrb	r2, [r3, #16]
 8008c0c:	f88d 2000 	strb.w	r2, [sp]
 8008c10:	3304      	adds	r3, #4
 8008c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c14:	f003 fdca 	bl	800c7ac <USB_CoreInit>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e0ce      	b.n	8008dc8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f003 fee3 	bl	800c9fc <USB_SetCurrentMode>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0bf      	b.n	8008dc8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
 8008c4c:	e04a      	b.n	8008ce4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c4e:	7bfa      	ldrb	r2, [r7, #15]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3315      	adds	r3, #21
 8008c5e:	2201      	movs	r2, #1
 8008c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c62:	7bfa      	ldrb	r2, [r7, #15]
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	3314      	adds	r3, #20
 8008c72:	7bfa      	ldrb	r2, [r7, #15]
 8008c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c76:	7bfa      	ldrb	r2, [r7, #15]
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	b298      	uxth	r0, r3
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	332e      	adds	r3, #46	@ 0x2e
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c8e:	7bfa      	ldrb	r2, [r7, #15]
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ca2:	7bfa      	ldrb	r2, [r7, #15]
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	331c      	adds	r3, #28
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008cb6:	7bfa      	ldrb	r2, [r7, #15]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	3320      	adds	r3, #32
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cca:	7bfa      	ldrb	r2, [r7, #15]
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	3324      	adds	r3, #36	@ 0x24
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	791b      	ldrb	r3, [r3, #4]
 8008ce8:	7bfa      	ldrb	r2, [r7, #15]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d3af      	bcc.n	8008c4e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
 8008cf2:	e044      	b.n	8008d7e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008cf4:	7bfa      	ldrb	r2, [r7, #15]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d0a:	7bfa      	ldrb	r2, [r7, #15]
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d4c:	7bfa      	ldrb	r2, [r7, #15]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d62:	7bfa      	ldrb	r2, [r7, #15]
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	73fb      	strb	r3, [r7, #15]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	7bfa      	ldrb	r2, [r7, #15]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d3b5      	bcc.n	8008cf4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7c1a      	ldrb	r2, [r3, #16]
 8008d90:	f88d 2000 	strb.w	r2, [sp]
 8008d94:	3304      	adds	r3, #4
 8008d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d98:	f003 fe7c 	bl	800ca94 <USB_DevInit>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2202      	movs	r2, #2
 8008da6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e00c      	b.n	8008dc8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f004 fec6 	bl	800db52 <USB_DevDisconnect>

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_PCD_Start+0x1c>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e022      	b.n	8008e32 <HAL_PCD_Start+0x62>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d009      	beq.n	8008e14 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d105      	bne.n	8008e14 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f003 fdcd 	bl	800c9b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f004 fe74 	bl	800db10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008e3a:	b590      	push	{r4, r7, lr}
 8008e3c:	b08d      	sub	sp, #52	@ 0x34
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f004 ff32 	bl	800dcba <USB_GetMode>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f040 848c 	bne.w	8009776 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f004 fe96 	bl	800db94 <USB_ReadInterrupts>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8482 	beq.w	8009774 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	0a1b      	lsrs	r3, r3, #8
 8008e7a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f004 fe83 	bl	800db94 <USB_ReadInterrupts>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d107      	bne.n	8008ea8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f002 0202 	and.w	r2, r2, #2
 8008ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f004 fe71 	bl	800db94 <USB_ReadInterrupts>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b10      	cmp	r3, #16
 8008eba:	d161      	bne.n	8008f80 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0210 	bic.w	r2, r2, #16
 8008eca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f003 020f 	and.w	r2, r3, #15
 8008ed8:	4613      	mov	r3, r2
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	3304      	adds	r3, #4
 8008eea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008ef2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ef6:	d124      	bne.n	8008f42 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d035      	beq.n	8008f70 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	091b      	lsrs	r3, r3, #4
 8008f0c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	6a38      	ldr	r0, [r7, #32]
 8008f18:	f004 fca8 	bl	800d86c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	091b      	lsrs	r3, r3, #4
 8008f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f28:	441a      	add	r2, r3
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	091b      	lsrs	r3, r3, #4
 8008f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3a:	441a      	add	r2, r3
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	615a      	str	r2, [r3, #20]
 8008f40:	e016      	b.n	8008f70 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008f48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008f4c:	d110      	bne.n	8008f70 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f54:	2208      	movs	r2, #8
 8008f56:	4619      	mov	r1, r3
 8008f58:	6a38      	ldr	r0, [r7, #32]
 8008f5a:	f004 fc87 	bl	800d86c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	091b      	lsrs	r3, r3, #4
 8008f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f6a:	441a      	add	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0210 	orr.w	r2, r2, #16
 8008f7e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f004 fe05 	bl	800db94 <USB_ReadInterrupts>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008f94:	f040 80a7 	bne.w	80090e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f004 fe0a 	bl	800dbba <USB_ReadDevAllOutEpInterrupt>
 8008fa6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008fa8:	e099      	b.n	80090de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 808e 	beq.w	80090d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f004 fe2e 	bl	800dc22 <USB_ReadDevOutEPInterrupt>
 8008fc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fde:	461a      	mov	r2, r3
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fea4 	bl	8009d34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00c      	beq.n	8009010 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009002:	461a      	mov	r2, r3
 8009004:	2308      	movs	r3, #8
 8009006:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 ff7a 	bl	8009f04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f003 0310 	and.w	r3, r3, #16
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009026:	461a      	mov	r2, r3
 8009028:	2310      	movs	r3, #16
 800902a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d030      	beq.n	8009098 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903e:	2b80      	cmp	r3, #128	@ 0x80
 8009040:	d109      	bne.n	8009056 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009054:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009058:	4613      	mov	r3, r2
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	4413      	add	r3, r2
 8009068:	3304      	adds	r3, #4
 800906a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	78db      	ldrb	r3, [r3, #3]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d108      	bne.n	8009086 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2200      	movs	r2, #0
 8009078:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	b2db      	uxtb	r3, r3
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f007 fa1b 	bl	80104bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009092:	461a      	mov	r2, r3
 8009094:	2302      	movs	r3, #2
 8009096:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ae:	461a      	mov	r2, r3
 80090b0:	2320      	movs	r3, #32
 80090b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ca:	461a      	mov	r2, r3
 80090cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80090d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	3301      	adds	r3, #1
 80090d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80090de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f47f af62 	bne.w	8008faa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f004 fd52 	bl	800db94 <USB_ReadInterrupts>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090fa:	f040 80db 	bne.w	80092b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f004 fd73 	bl	800dbee <USB_ReadDevAllInEpInterrupt>
 8009108:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800910e:	e0cd      	b.n	80092ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 80c2 	beq.w	80092a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f004 fd99 	bl	800dc5e <USB_ReadDevInEPInterrupt>
 800912c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d057      	beq.n	80091e8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	2201      	movs	r2, #1
 8009140:	fa02 f303 	lsl.w	r3, r2, r3
 8009144:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	43db      	mvns	r3, r3
 8009152:	69f9      	ldr	r1, [r7, #28]
 8009154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009158:	4013      	ands	r3, r2
 800915a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009168:	461a      	mov	r2, r3
 800916a:	2301      	movs	r3, #1
 800916c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	799b      	ldrb	r3, [r3, #6]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d132      	bne.n	80091dc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800917a:	4613      	mov	r3, r2
 800917c:	00db      	lsls	r3, r3, #3
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	3320      	adds	r3, #32
 8009186:	6819      	ldr	r1, [r3, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4403      	add	r3, r0
 8009196:	331c      	adds	r3, #28
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4419      	add	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a0:	4613      	mov	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4403      	add	r3, r0
 80091aa:	3320      	adds	r3, #32
 80091ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d113      	bne.n	80091dc <HAL_PCD_IRQHandler+0x3a2>
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b8:	4613      	mov	r3, r2
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	3324      	adds	r3, #36	@ 0x24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d108      	bne.n	80091dc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80091d4:	461a      	mov	r2, r3
 80091d6:	2101      	movs	r1, #1
 80091d8:	f004 fda0 	bl	800dd1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f007 f8ef 	bl	80103c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d008      	beq.n	8009204 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fe:	461a      	mov	r2, r3
 8009200:	2308      	movs	r3, #8
 8009202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b00      	cmp	r3, #0
 800920c:	d008      	beq.n	8009220 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921a:	461a      	mov	r2, r3
 800921c:	2310      	movs	r3, #16
 800921e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009236:	461a      	mov	r2, r3
 8009238:	2340      	movs	r3, #64	@ 0x40
 800923a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d023      	beq.n	800928e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009246:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009248:	6a38      	ldr	r0, [r7, #32]
 800924a:	f003 fd87 	bl	800cd5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009250:	4613      	mov	r3, r2
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	3310      	adds	r3, #16
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	3304      	adds	r3, #4
 8009260:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	78db      	ldrb	r3, [r3, #3]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d108      	bne.n	800927c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2200      	movs	r2, #0
 800926e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	b2db      	uxtb	r3, r3
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f007 f932 	bl	80104e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009288:	461a      	mov	r2, r3
 800928a:	2302      	movs	r3, #2
 800928c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009298:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fcbd 	bl	8009c1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	3301      	adds	r3, #1
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	085b      	lsrs	r3, r3, #1
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f47f af2e 	bne.w	8009110 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f004 fc6b 	bl	800db94 <USB_ReadInterrupts>
 80092be:	4603      	mov	r3, r0
 80092c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092c8:	d122      	bne.n	8009310 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d108      	bne.n	80092fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80092f0:	2100      	movs	r1, #0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fea4 	bl	800a040 <HAL_PCDEx_LPM_Callback>
 80092f8:	e002      	b.n	8009300 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f007 f8d0 	bl	80104a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695a      	ldr	r2, [r3, #20]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800930e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4618      	mov	r0, r3
 8009316:	f004 fc3d 	bl	800db94 <USB_ReadInterrupts>
 800931a:	4603      	mov	r3, r0
 800931c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009324:	d112      	bne.n	800934c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b01      	cmp	r3, #1
 8009334:	d102      	bne.n	800933c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f007 f88c 	bl	8010454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695a      	ldr	r2, [r3, #20]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800934a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	f004 fc1f 	bl	800db94 <USB_ReadInterrupts>
 8009356:	4603      	mov	r3, r0
 8009358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800935c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009360:	f040 80b7 	bne.w	80094d2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009372:	f023 0301 	bic.w	r3, r3, #1
 8009376:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2110      	movs	r1, #16
 800937e:	4618      	mov	r0, r3
 8009380:	f003 fcec 	bl	800cd5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009384:	2300      	movs	r3, #0
 8009386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009388:	e046      	b.n	8009418 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800938a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009396:	461a      	mov	r2, r3
 8009398:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800939c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80093bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ca:	461a      	mov	r2, r3
 80093cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80093d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093e2:	0151      	lsls	r1, r2, #5
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	440a      	add	r2, r1
 80093e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80093f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009402:	0151      	lsls	r1, r2, #5
 8009404:	69fa      	ldr	r2, [r7, #28]
 8009406:	440a      	add	r2, r1
 8009408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800940c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009410:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009414:	3301      	adds	r3, #1
 8009416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	791b      	ldrb	r3, [r3, #4]
 800941c:	461a      	mov	r2, r3
 800941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009420:	4293      	cmp	r3, r2
 8009422:	d3b2      	bcc.n	800938a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009432:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009436:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7bdb      	ldrb	r3, [r3, #15]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d016      	beq.n	800946e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800944a:	69fa      	ldr	r2, [r7, #28]
 800944c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009450:	f043 030b 	orr.w	r3, r3, #11
 8009454:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009466:	f043 030b 	orr.w	r3, r3, #11
 800946a:	6453      	str	r3, [r2, #68]	@ 0x44
 800946c:	e015      	b.n	800949a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	69fa      	ldr	r2, [r7, #28]
 8009478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800947c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009480:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8009484:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	69fa      	ldr	r2, [r7, #28]
 8009490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009494:	f043 030b 	orr.w	r3, r3, #11
 8009498:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094a8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80094ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80094bc:	461a      	mov	r2, r3
 80094be:	f004 fc2d 	bl	800dd1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695a      	ldr	r2, [r3, #20]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80094d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f004 fb5c 	bl	800db94 <USB_ReadInterrupts>
 80094dc:	4603      	mov	r3, r0
 80094de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e6:	d123      	bne.n	8009530 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f004 fbf2 	bl	800dcd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f003 fca9 	bl	800ce4e <USB_GetDevSpeed>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681c      	ldr	r4, [r3, #0]
 8009508:	f001 f9d6 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800950c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009512:	461a      	mov	r2, r3
 8009514:	4620      	mov	r0, r4
 8009516:	f003 f9ad 	bl	800c874 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f006 ff7b 	bl	8010416 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	695a      	ldr	r2, [r3, #20]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800952e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4618      	mov	r0, r3
 8009536:	f004 fb2d 	bl	800db94 <USB_ReadInterrupts>
 800953a:	4603      	mov	r3, r0
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b08      	cmp	r3, #8
 8009542:	d10a      	bne.n	800955a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f006 ff58 	bl	80103fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	695a      	ldr	r2, [r3, #20]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f002 0208 	and.w	r2, r2, #8
 8009558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f004 fb18 	bl	800db94 <USB_ReadInterrupts>
 8009564:	4603      	mov	r3, r0
 8009566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956a:	2b80      	cmp	r3, #128	@ 0x80
 800956c:	d123      	bne.n	80095b6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800957a:	2301      	movs	r3, #1
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
 800957e:	e014      	b.n	80095aa <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009584:	4613      	mov	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d105      	bne.n	80095a4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	b2db      	uxtb	r3, r3
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb0a 	bl	8009bb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	3301      	adds	r3, #1
 80095a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	461a      	mov	r2, r3
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d3e4      	bcc.n	8009580 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f004 faea 	bl	800db94 <USB_ReadInterrupts>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ca:	d13c      	bne.n	8009646 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80095cc:	2301      	movs	r3, #1
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80095d0:	e02b      	b.n	800962a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e6:	4613      	mov	r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	3318      	adds	r3, #24
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d115      	bne.n	8009624 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80095f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da12      	bge.n	8009624 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009602:	4613      	mov	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	3317      	adds	r3, #23
 800960e:	2201      	movs	r2, #1
 8009610:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 faca 	bl	8009bb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	3301      	adds	r3, #1
 8009628:	627b      	str	r3, [r7, #36]	@ 0x24
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	791b      	ldrb	r3, [r3, #4]
 800962e:	461a      	mov	r2, r3
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	4293      	cmp	r3, r2
 8009634:	d3cd      	bcc.n	80095d2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	695a      	ldr	r2, [r3, #20]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f004 faa2 	bl	800db94 <USB_ReadInterrupts>
 8009650:	4603      	mov	r3, r0
 8009652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009656:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800965a:	d156      	bne.n	800970a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800965c:	2301      	movs	r3, #1
 800965e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009660:	e045      	b.n	80096ee <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009676:	4613      	mov	r3, r2
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	440b      	add	r3, r1
 8009680:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d12e      	bne.n	80096e8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800968a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800968c:	2b00      	cmp	r3, #0
 800968e:	da2b      	bge.n	80096e8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800969c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d121      	bne.n	80096e8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a8:	4613      	mov	r3, r2
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80096e4:	6053      	str	r3, [r2, #4]
            break;
 80096e6:	e008      	b.n	80096fa <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ea:	3301      	adds	r3, #1
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	791b      	ldrb	r3, [r3, #4]
 80096f2:	461a      	mov	r2, r3
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d3b3      	bcc.n	8009662 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	695a      	ldr	r2, [r3, #20]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f004 fa40 	bl	800db94 <USB_ReadInterrupts>
 8009714:	4603      	mov	r3, r0
 8009716:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800971a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971e:	d10a      	bne.n	8009736 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f006 feef 	bl	8010504 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	695a      	ldr	r2, [r3, #20]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f004 fa2a 	bl	800db94 <USB_ReadInterrupts>
 8009740:	4603      	mov	r3, r0
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b04      	cmp	r3, #4
 8009748:	d115      	bne.n	8009776 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	f003 0304 	and.w	r3, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f006 fedf 	bl	8010520 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6859      	ldr	r1, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	430a      	orrs	r2, r1
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	e000      	b.n	8009776 <HAL_PCD_IRQHandler+0x93c>
      return;
 8009774:	bf00      	nop
    }
  }
}
 8009776:	3734      	adds	r7, #52	@ 0x34
 8009778:	46bd      	mov	sp, r7
 800977a:	bd90      	pop	{r4, r7, pc}

0800977c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800978e:	2b01      	cmp	r3, #1
 8009790:	d101      	bne.n	8009796 <HAL_PCD_SetAddress+0x1a>
 8009792:	2302      	movs	r3, #2
 8009794:	e012      	b.n	80097bc <HAL_PCD_SetAddress+0x40>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f004 f989 	bl	800dac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	461a      	mov	r2, r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	70fb      	strb	r3, [r7, #3]
 80097d6:	460b      	mov	r3, r1
 80097d8:	803b      	strh	r3, [r7, #0]
 80097da:	4613      	mov	r3, r2
 80097dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80097e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da0f      	bge.n	800980a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	f003 020f 	and.w	r2, r3, #15
 80097f0:	4613      	mov	r3, r2
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	3310      	adds	r3, #16
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	3304      	adds	r3, #4
 8009800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	705a      	strb	r2, [r3, #1]
 8009808:	e00f      	b.n	800982a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	f003 020f 	and.w	r2, r3, #15
 8009810:	4613      	mov	r3, r2
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	3304      	adds	r3, #4
 8009822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	b2da      	uxtb	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009836:	883b      	ldrh	r3, [r7, #0]
 8009838:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	78ba      	ldrb	r2, [r7, #2]
 8009844:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009858:	78bb      	ldrb	r3, [r7, #2]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d102      	bne.n	8009864 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800986a:	2b01      	cmp	r3, #1
 800986c:	d101      	bne.n	8009872 <HAL_PCD_EP_Open+0xae>
 800986e:	2302      	movs	r3, #2
 8009870:	e00e      	b.n	8009890 <HAL_PCD_EP_Open+0xcc>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	4618      	mov	r0, r3
 8009882:	f003 fb09 	bl	800ce98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800988e:	7afb      	ldrb	r3, [r7, #11]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80098a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0f      	bge.n	80098cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	f003 020f 	and.w	r2, r3, #15
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	3310      	adds	r3, #16
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	3304      	adds	r3, #4
 80098c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	705a      	strb	r2, [r3, #1]
 80098ca:	e00f      	b.n	80098ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	f003 020f 	and.w	r2, r3, #15
 80098d2:	4613      	mov	r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	4413      	add	r3, r2
 80098e2:	3304      	adds	r3, #4
 80098e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <HAL_PCD_EP_Close+0x6e>
 8009902:	2302      	movs	r3, #2
 8009904:	e00e      	b.n	8009924 <HAL_PCD_EP_Close+0x8c>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	4618      	mov	r0, r3
 8009916:	f003 fb47 	bl	800cfa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	460b      	mov	r3, r1
 800993a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	f003 020f 	and.w	r2, r3, #15
 8009942:	4613      	mov	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	3304      	adds	r3, #4
 8009954:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2200      	movs	r2, #0
 8009966:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2200      	movs	r2, #0
 800996c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800996e:	7afb      	ldrb	r3, [r7, #11]
 8009970:	f003 030f 	and.w	r3, r3, #15
 8009974:	b2da      	uxtb	r2, r3
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	799b      	ldrb	r3, [r3, #6]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d102      	bne.n	8009988 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	799b      	ldrb	r3, [r3, #6]
 8009990:	461a      	mov	r2, r3
 8009992:	6979      	ldr	r1, [r7, #20]
 8009994:	f003 fbe4 	bl	800d160 <USB_EPStartXfer>

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80099ae:	78fb      	ldrb	r3, [r7, #3]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80099c4:	681b      	ldr	r3, [r3, #0]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b086      	sub	sp, #24
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	607a      	str	r2, [r7, #4]
 80099dc:	603b      	str	r3, [r7, #0]
 80099de:	460b      	mov	r3, r1
 80099e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	4613      	mov	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	3310      	adds	r3, #16
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	3304      	adds	r3, #4
 80099f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	799b      	ldrb	r3, [r3, #6]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d102      	bne.n	8009a2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	799b      	ldrb	r3, [r3, #6]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	f003 fb92 	bl	800d160 <USB_EPStartXfer>

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	7912      	ldrb	r2, [r2, #4]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d901      	bls.n	8009a64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e04f      	b.n	8009b04 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da0f      	bge.n	8009a8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	f003 020f 	and.w	r2, r3, #15
 8009a72:	4613      	mov	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4413      	add	r3, r2
 8009a80:	3304      	adds	r3, #4
 8009a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2201      	movs	r2, #1
 8009a88:	705a      	strb	r2, [r3, #1]
 8009a8a:	e00d      	b.n	8009aa8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009a8c:	78fa      	ldrb	r2, [r7, #3]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_PCD_EP_SetStall+0x82>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e01d      	b.n	8009b04 <HAL_PCD_EP_SetStall+0xbe>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68f9      	ldr	r1, [r7, #12]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f003 ff20 	bl	800d91c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7999      	ldrb	r1, [r3, #6]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009af4:	461a      	mov	r2, r3
 8009af6:	f004 f911 	bl	800dd1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	7912      	ldrb	r2, [r2, #4]
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d901      	bls.n	8009b2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e042      	b.n	8009bb0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da0f      	bge.n	8009b52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	f003 020f 	and.w	r2, r3, #15
 8009b38:	4613      	mov	r3, r2
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	3310      	adds	r3, #16
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	3304      	adds	r3, #4
 8009b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	705a      	strb	r2, [r3, #1]
 8009b50:	e00f      	b.n	8009b72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	f003 020f 	and.w	r2, r3, #15
 8009b58:	4613      	mov	r3, r2
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	4413      	add	r3, r2
 8009b68:	3304      	adds	r3, #4
 8009b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	f003 030f 	and.w	r3, r3, #15
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <HAL_PCD_EP_ClrStall+0x86>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e00e      	b.n	8009bb0 <HAL_PCD_EP_ClrStall+0xa4>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68f9      	ldr	r1, [r7, #12]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 ff29 	bl	800d9f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da0c      	bge.n	8009be6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	f003 020f 	and.w	r2, r3, #15
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	3310      	adds	r3, #16
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	4413      	add	r3, r2
 8009be0:	3304      	adds	r3, #4
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	e00c      	b.n	8009c00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009be6:	78fb      	ldrb	r3, [r7, #3]
 8009be8:	f003 020f 	and.w	r2, r3, #15
 8009bec:	4613      	mov	r3, r2
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68f9      	ldr	r1, [r7, #12]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f003 fd48 	bl	800d69c <USB_EPStopXfer>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009c10:	7afb      	ldrb	r3, [r7, #11]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b08a      	sub	sp, #40	@ 0x28
 8009c1e:	af02      	add	r7, sp, #8
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	3310      	adds	r3, #16
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3304      	adds	r3, #4
 8009c40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d901      	bls.n	8009c52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e06b      	b.n	8009d2a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	691a      	ldr	r2, [r3, #16]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d902      	bls.n	8009c6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3303      	adds	r3, #3
 8009c72:	089b      	lsrs	r3, r3, #2
 8009c74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c76:	e02a      	b.n	8009cce <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d902      	bls.n	8009c94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	3303      	adds	r3, #3
 8009c98:	089b      	lsrs	r3, r3, #2
 8009c9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68d9      	ldr	r1, [r3, #12]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6978      	ldr	r0, [r7, #20]
 8009cb2:	f003 fd9d 	bl	800d7f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	441a      	add	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	695a      	ldr	r2, [r3, #20]
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	441a      	add	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d809      	bhi.n	8009cf8 <PCD_WriteEmptyTxFifo+0xde>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	695a      	ldr	r2, [r3, #20]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d203      	bcs.n	8009cf8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1bf      	bne.n	8009c78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d811      	bhi.n	8009d28 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d10:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	6939      	ldr	r1, [r7, #16]
 8009d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d24:	4013      	ands	r3, r2
 8009d26:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	333c      	adds	r3, #60	@ 0x3c
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	799b      	ldrb	r3, [r3, #6]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d17b      	bne.n	8009e62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d015      	beq.n	8009da0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	4a61      	ldr	r2, [pc, #388]	@ (8009efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	f240 80b9 	bls.w	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80b3 	beq.w	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d96:	461a      	mov	r2, r3
 8009d98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d9c:	6093      	str	r3, [r2, #8]
 8009d9e:	e0a7      	b.n	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db6:	461a      	mov	r2, r3
 8009db8:	2320      	movs	r3, #32
 8009dba:	6093      	str	r3, [r2, #8]
 8009dbc:	e098      	b.n	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 8093 	bne.w	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8009efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d90f      	bls.n	8009df2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00a      	beq.n	8009df2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de8:	461a      	mov	r2, r3
 8009dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dee:	6093      	str	r3, [r2, #8]
 8009df0:	e07e      	b.n	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4613      	mov	r3, r2
 8009df6:	00db      	lsls	r3, r3, #3
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	4413      	add	r3, r2
 8009e04:	3304      	adds	r3, #4
 8009e06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1a      	ldr	r2, [r3, #32]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	0159      	lsls	r1, r3, #5
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	440b      	add	r3, r1
 8009e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d114      	bne.n	8009e54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2101      	movs	r1, #1
 8009e40:	f003 ff6c 	bl	800dd1c <USB_EP0_OutStart>
 8009e44:	e006      	b.n	8009e54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	441a      	add	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f006 fa98 	bl	8010390 <HAL_PCD_DataOutStageCallback>
 8009e60:	e046      	b.n	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	4a26      	ldr	r2, [pc, #152]	@ (8009f00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d124      	bne.n	8009eb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e80:	461a      	mov	r2, r3
 8009e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e86:	6093      	str	r3, [r2, #8]
 8009e88:	e032      	b.n	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	2320      	movs	r3, #32
 8009ea4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f006 fa6f 	bl	8010390 <HAL_PCD_DataOutStageCallback>
 8009eb2:	e01d      	b.n	8009ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d114      	bne.n	8009ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009eba:	6879      	ldr	r1, [r7, #4]
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d108      	bne.n	8009ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009edc:	461a      	mov	r2, r3
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f003 ff1c 	bl	800dd1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f006 fa50 	bl	8010390 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	4f54300a 	.word	0x4f54300a
 8009f00:	4f54310a 	.word	0x4f54310a

08009f04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	333c      	adds	r3, #60	@ 0x3c
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4a15      	ldr	r2, [pc, #84]	@ (8009f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d90e      	bls.n	8009f58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f50:	461a      	mov	r2, r3
 8009f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f006 fa07 	bl	801036c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a0a      	ldr	r2, [pc, #40]	@ (8009f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d90c      	bls.n	8009f80 <PCD_EP_OutSetupPacket_int+0x7c>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	799b      	ldrb	r3, [r3, #6]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d108      	bne.n	8009f80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f78:	461a      	mov	r2, r3
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	f003 fece 	bl	800dd1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	4f54300a 	.word	0x4f54300a

08009f90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d107      	bne.n	8009fbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009fae:	883b      	ldrh	r3, [r7, #0]
 8009fb0:	0419      	lsls	r1, r3, #16
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fbc:	e028      	b.n	800a010 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc4:	0c1b      	lsrs	r3, r3, #16
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4413      	add	r3, r2
 8009fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]
 8009fd0:	e00d      	b.n	8009fee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	3340      	adds	r3, #64	@ 0x40
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	0c1b      	lsrs	r3, r3, #16
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	3301      	adds	r3, #1
 8009fec:	73fb      	strb	r3, [r7, #15]
 8009fee:	7bfa      	ldrb	r2, [r7, #15]
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d3ec      	bcc.n	8009fd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009ff8:	883b      	ldrh	r3, [r7, #0]
 8009ffa:	0418      	lsls	r0, r3, #16
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	3b01      	subs	r3, #1
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	4302      	orrs	r2, r0
 800a008:	3340      	adds	r3, #64	@ 0x40
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	887a      	ldrh	r2, [r7, #2]
 800a030:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e267      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d075      	beq.n	800a162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a076:	4b88      	ldr	r3, [pc, #544]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 030c 	and.w	r3, r3, #12
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d00c      	beq.n	800a09c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a082:	4b85      	ldr	r3, [pc, #532]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a08a:	2b08      	cmp	r3, #8
 800a08c:	d112      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a08e:	4b82      	ldr	r3, [pc, #520]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a09a:	d10b      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a09c:	4b7e      	ldr	r3, [pc, #504]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d05b      	beq.n	800a160 <HAL_RCC_OscConfig+0x108>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d157      	bne.n	800a160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e242      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0bc:	d106      	bne.n	800a0cc <HAL_RCC_OscConfig+0x74>
 800a0be:	4b76      	ldr	r3, [pc, #472]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a75      	ldr	r2, [pc, #468]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	e01d      	b.n	800a108 <HAL_RCC_OscConfig+0xb0>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0d4:	d10c      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x98>
 800a0d6:	4b70      	ldr	r3, [pc, #448]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a6f      	ldr	r2, [pc, #444]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	4b6d      	ldr	r3, [pc, #436]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a6c      	ldr	r2, [pc, #432]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	e00b      	b.n	800a108 <HAL_RCC_OscConfig+0xb0>
 800a0f0:	4b69      	ldr	r3, [pc, #420]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a68      	ldr	r2, [pc, #416]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	4b66      	ldr	r3, [pc, #408]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a65      	ldr	r2, [pc, #404]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d013      	beq.n	800a138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a110:	f7f9 fd0a 	bl	8003b28 <HAL_GetTick>
 800a114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a116:	e008      	b.n	800a12a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a118:	f7f9 fd06 	bl	8003b28 <HAL_GetTick>
 800a11c:	4602      	mov	r2, r0
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	2b64      	cmp	r3, #100	@ 0x64
 800a124:	d901      	bls.n	800a12a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e207      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a12a:	4b5b      	ldr	r3, [pc, #364]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0f0      	beq.n	800a118 <HAL_RCC_OscConfig+0xc0>
 800a136:	e014      	b.n	800a162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a138:	f7f9 fcf6 	bl	8003b28 <HAL_GetTick>
 800a13c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a13e:	e008      	b.n	800a152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a140:	f7f9 fcf2 	bl	8003b28 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b64      	cmp	r3, #100	@ 0x64
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e1f3      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a152:	4b51      	ldr	r3, [pc, #324]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1f0      	bne.n	800a140 <HAL_RCC_OscConfig+0xe8>
 800a15e:	e000      	b.n	800a162 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d063      	beq.n	800a236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a16e:	4b4a      	ldr	r3, [pc, #296]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 030c 	and.w	r3, r3, #12
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a17a:	4b47      	ldr	r3, [pc, #284]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a182:	2b08      	cmp	r3, #8
 800a184:	d11c      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a186:	4b44      	ldr	r3, [pc, #272]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d116      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a192:	4b41      	ldr	r3, [pc, #260]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d005      	beq.n	800a1aa <HAL_RCC_OscConfig+0x152>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d001      	beq.n	800a1aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e1c7      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1aa:	4b3b      	ldr	r3, [pc, #236]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	4937      	ldr	r1, [pc, #220]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1be:	e03a      	b.n	800a236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d020      	beq.n	800a20a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1c8:	4b34      	ldr	r3, [pc, #208]	@ (800a29c <HAL_RCC_OscConfig+0x244>)
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ce:	f7f9 fcab 	bl	8003b28 <HAL_GetTick>
 800a1d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1d4:	e008      	b.n	800a1e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1d6:	f7f9 fca7 	bl	8003b28 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d901      	bls.n	800a1e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e1a8      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e8:	4b2b      	ldr	r3, [pc, #172]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0f0      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1f4:	4b28      	ldr	r3, [pc, #160]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	4925      	ldr	r1, [pc, #148]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a204:	4313      	orrs	r3, r2
 800a206:	600b      	str	r3, [r1, #0]
 800a208:	e015      	b.n	800a236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a20a:	4b24      	ldr	r3, [pc, #144]	@ (800a29c <HAL_RCC_OscConfig+0x244>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a210:	f7f9 fc8a 	bl	8003b28 <HAL_GetTick>
 800a214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a218:	f7f9 fc86 	bl	8003b28 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e187      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a22a:	4b1b      	ldr	r3, [pc, #108]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0302 	and.w	r3, r3, #2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1f0      	bne.n	800a218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0308 	and.w	r3, r3, #8
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d036      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d016      	beq.n	800a278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a24a:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <HAL_RCC_OscConfig+0x248>)
 800a24c:	2201      	movs	r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a250:	f7f9 fc6a 	bl	8003b28 <HAL_GetTick>
 800a254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a258:	f7f9 fc66 	bl	8003b28 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b02      	cmp	r3, #2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e167      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a26a:	4b0b      	ldr	r3, [pc, #44]	@ (800a298 <HAL_RCC_OscConfig+0x240>)
 800a26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0f0      	beq.n	800a258 <HAL_RCC_OscConfig+0x200>
 800a276:	e01b      	b.n	800a2b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a278:	4b09      	ldr	r3, [pc, #36]	@ (800a2a0 <HAL_RCC_OscConfig+0x248>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a27e:	f7f9 fc53 	bl	8003b28 <HAL_GetTick>
 800a282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a284:	e00e      	b.n	800a2a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a286:	f7f9 fc4f 	bl	8003b28 <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	2b02      	cmp	r3, #2
 800a292:	d907      	bls.n	800a2a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	e150      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
 800a298:	40023800 	.word	0x40023800
 800a29c:	42470000 	.word	0x42470000
 800a2a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2a4:	4b88      	ldr	r3, [pc, #544]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a2a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1ea      	bne.n	800a286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 8097 	beq.w	800a3ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2c2:	4b81      	ldr	r3, [pc, #516]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10f      	bne.n	800a2ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	4b7d      	ldr	r3, [pc, #500]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d6:	4a7c      	ldr	r2, [pc, #496]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a2d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2dc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2de:	4b7a      	ldr	r3, [pc, #488]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2e6:	60bb      	str	r3, [r7, #8]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2ee:	4b77      	ldr	r3, [pc, #476]	@ (800a4cc <HAL_RCC_OscConfig+0x474>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d118      	bne.n	800a32c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2fa:	4b74      	ldr	r3, [pc, #464]	@ (800a4cc <HAL_RCC_OscConfig+0x474>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a73      	ldr	r2, [pc, #460]	@ (800a4cc <HAL_RCC_OscConfig+0x474>)
 800a300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a306:	f7f9 fc0f 	bl	8003b28 <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a30c:	e008      	b.n	800a320 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a30e:	f7f9 fc0b 	bl	8003b28 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d901      	bls.n	800a320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e10c      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a320:	4b6a      	ldr	r3, [pc, #424]	@ (800a4cc <HAL_RCC_OscConfig+0x474>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0f0      	beq.n	800a30e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d106      	bne.n	800a342 <HAL_RCC_OscConfig+0x2ea>
 800a334:	4b64      	ldr	r3, [pc, #400]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a338:	4a63      	ldr	r2, [pc, #396]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a33a:	f043 0301 	orr.w	r3, r3, #1
 800a33e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a340:	e01c      	b.n	800a37c <HAL_RCC_OscConfig+0x324>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	2b05      	cmp	r3, #5
 800a348:	d10c      	bne.n	800a364 <HAL_RCC_OscConfig+0x30c>
 800a34a:	4b5f      	ldr	r3, [pc, #380]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a34c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a34e:	4a5e      	ldr	r2, [pc, #376]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a350:	f043 0304 	orr.w	r3, r3, #4
 800a354:	6713      	str	r3, [r2, #112]	@ 0x70
 800a356:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a35a:	4a5b      	ldr	r2, [pc, #364]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a35c:	f043 0301 	orr.w	r3, r3, #1
 800a360:	6713      	str	r3, [r2, #112]	@ 0x70
 800a362:	e00b      	b.n	800a37c <HAL_RCC_OscConfig+0x324>
 800a364:	4b58      	ldr	r3, [pc, #352]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a368:	4a57      	ldr	r2, [pc, #348]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a36a:	f023 0301 	bic.w	r3, r3, #1
 800a36e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a370:	4b55      	ldr	r3, [pc, #340]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a374:	4a54      	ldr	r2, [pc, #336]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a376:	f023 0304 	bic.w	r3, r3, #4
 800a37a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d015      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a384:	f7f9 fbd0 	bl	8003b28 <HAL_GetTick>
 800a388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a38a:	e00a      	b.n	800a3a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a38c:	f7f9 fbcc 	bl	8003b28 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e0cb      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3a2:	4b49      	ldr	r3, [pc, #292]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a3a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0ee      	beq.n	800a38c <HAL_RCC_OscConfig+0x334>
 800a3ae:	e014      	b.n	800a3da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3b0:	f7f9 fbba 	bl	8003b28 <HAL_GetTick>
 800a3b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3b6:	e00a      	b.n	800a3ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3b8:	f7f9 fbb6 	bl	8003b28 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d901      	bls.n	800a3ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e0b5      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3ce:	4b3e      	ldr	r3, [pc, #248]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1ee      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d105      	bne.n	800a3ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3e0:	4b39      	ldr	r3, [pc, #228]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e4:	4a38      	ldr	r2, [pc, #224]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a3e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80a1 	beq.w	800a538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3f6:	4b34      	ldr	r3, [pc, #208]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f003 030c 	and.w	r3, r3, #12
 800a3fe:	2b08      	cmp	r3, #8
 800a400:	d05c      	beq.n	800a4bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	2b02      	cmp	r3, #2
 800a408:	d141      	bne.n	800a48e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a40a:	4b31      	ldr	r3, [pc, #196]	@ (800a4d0 <HAL_RCC_OscConfig+0x478>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a410:	f7f9 fb8a 	bl	8003b28 <HAL_GetTick>
 800a414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a416:	e008      	b.n	800a42a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a418:	f7f9 fb86 	bl	8003b28 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b02      	cmp	r3, #2
 800a424:	d901      	bls.n	800a42a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e087      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a42a:	4b27      	ldr	r3, [pc, #156]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f0      	bne.n	800a418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69da      	ldr	r2, [r3, #28]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a444:	019b      	lsls	r3, r3, #6
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	3b01      	subs	r3, #1
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a458:	061b      	lsls	r3, r3, #24
 800a45a:	491b      	ldr	r1, [pc, #108]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a460:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <HAL_RCC_OscConfig+0x478>)
 800a462:	2201      	movs	r2, #1
 800a464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a466:	f7f9 fb5f 	bl	8003b28 <HAL_GetTick>
 800a46a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a46c:	e008      	b.n	800a480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a46e:	f7f9 fb5b 	bl	8003b28 <HAL_GetTick>
 800a472:	4602      	mov	r2, r0
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d901      	bls.n	800a480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e05c      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a480:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0f0      	beq.n	800a46e <HAL_RCC_OscConfig+0x416>
 800a48c:	e054      	b.n	800a538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a48e:	4b10      	ldr	r3, [pc, #64]	@ (800a4d0 <HAL_RCC_OscConfig+0x478>)
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a494:	f7f9 fb48 	bl	8003b28 <HAL_GetTick>
 800a498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a49a:	e008      	b.n	800a4ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a49c:	f7f9 fb44 	bl	8003b28 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d901      	bls.n	800a4ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e045      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ae:	4b06      	ldr	r3, [pc, #24]	@ (800a4c8 <HAL_RCC_OscConfig+0x470>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1f0      	bne.n	800a49c <HAL_RCC_OscConfig+0x444>
 800a4ba:	e03d      	b.n	800a538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d107      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e038      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
 800a4c8:	40023800 	.word	0x40023800
 800a4cc:	40007000 	.word	0x40007000
 800a4d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a544 <HAL_RCC_OscConfig+0x4ec>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d028      	beq.n	800a534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d121      	bne.n	800a534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d11a      	bne.n	800a534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a504:	4013      	ands	r3, r2
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a50a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d111      	bne.n	800a534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	3b01      	subs	r3, #1
 800a51e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a520:	429a      	cmp	r2, r3
 800a522:	d107      	bne.n	800a534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a530:	429a      	cmp	r2, r3
 800a532:	d001      	beq.n	800a538 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e000      	b.n	800a53a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	40023800 	.word	0x40023800

0800a548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e0cc      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a55c:	4b68      	ldr	r3, [pc, #416]	@ (800a700 <HAL_RCC_ClockConfig+0x1b8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0307 	and.w	r3, r3, #7
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d90c      	bls.n	800a584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a56a:	4b65      	ldr	r3, [pc, #404]	@ (800a700 <HAL_RCC_ClockConfig+0x1b8>)
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a572:	4b63      	ldr	r3, [pc, #396]	@ (800a700 <HAL_RCC_ClockConfig+0x1b8>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d001      	beq.n	800a584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e0b8      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d020      	beq.n	800a5d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a59c:	4b59      	ldr	r3, [pc, #356]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	4a58      	ldr	r2, [pc, #352]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a5a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a5a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0308 	and.w	r3, r3, #8
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5b4:	4b53      	ldr	r3, [pc, #332]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	4a52      	ldr	r2, [pc, #328]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a5be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5c0:	4b50      	ldr	r3, [pc, #320]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	494d      	ldr	r1, [pc, #308]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d044      	beq.n	800a668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d107      	bne.n	800a5f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5e6:	4b47      	ldr	r3, [pc, #284]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d119      	bne.n	800a626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e07f      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d003      	beq.n	800a606 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a602:	2b03      	cmp	r3, #3
 800a604:	d107      	bne.n	800a616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a606:	4b3f      	ldr	r3, [pc, #252]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d109      	bne.n	800a626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e06f      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a616:	4b3b      	ldr	r3, [pc, #236]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e067      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a626:	4b37      	ldr	r3, [pc, #220]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f023 0203 	bic.w	r2, r3, #3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	4934      	ldr	r1, [pc, #208]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a634:	4313      	orrs	r3, r2
 800a636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a638:	f7f9 fa76 	bl	8003b28 <HAL_GetTick>
 800a63c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a63e:	e00a      	b.n	800a656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a640:	f7f9 fa72 	bl	8003b28 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a64e:	4293      	cmp	r3, r2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e04f      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a656:	4b2b      	ldr	r3, [pc, #172]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 020c 	and.w	r2, r3, #12
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	429a      	cmp	r2, r3
 800a666:	d1eb      	bne.n	800a640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a668:	4b25      	ldr	r3, [pc, #148]	@ (800a700 <HAL_RCC_ClockConfig+0x1b8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d20c      	bcs.n	800a690 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a676:	4b22      	ldr	r3, [pc, #136]	@ (800a700 <HAL_RCC_ClockConfig+0x1b8>)
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a67e:	4b20      	ldr	r3, [pc, #128]	@ (800a700 <HAL_RCC_ClockConfig+0x1b8>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d001      	beq.n	800a690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e032      	b.n	800a6f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d008      	beq.n	800a6ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a69c:	4b19      	ldr	r3, [pc, #100]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4916      	ldr	r1, [pc, #88]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d009      	beq.n	800a6ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6ba:	4b12      	ldr	r3, [pc, #72]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	490e      	ldr	r1, [pc, #56]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6ce:	f000 f82d 	bl	800a72c <HAL_RCC_GetSysClockFreq>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a704 <HAL_RCC_ClockConfig+0x1bc>)
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	091b      	lsrs	r3, r3, #4
 800a6da:	f003 030f 	and.w	r3, r3, #15
 800a6de:	490a      	ldr	r1, [pc, #40]	@ (800a708 <HAL_RCC_ClockConfig+0x1c0>)
 800a6e0:	5ccb      	ldrb	r3, [r1, r3]
 800a6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e6:	4a09      	ldr	r2, [pc, #36]	@ (800a70c <HAL_RCC_ClockConfig+0x1c4>)
 800a6e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a6ea:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f9 f9d6 	bl	8003aa0 <HAL_InitTick>

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	40023c00 	.word	0x40023c00
 800a704:	40023800 	.word	0x40023800
 800a708:	08012418 	.word	0x08012418
 800a70c:	20000010 	.word	0x20000010
 800a710:	20000014 	.word	0x20000014

0800a714 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a718:	4b03      	ldr	r3, [pc, #12]	@ (800a728 <HAL_RCC_EnableCSS+0x14>)
 800a71a:	2201      	movs	r2, #1
 800a71c:	601a      	str	r2, [r3, #0]
}
 800a71e:	bf00      	nop
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	4247004c 	.word	0x4247004c

0800a72c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a730:	b090      	sub	sp, #64	@ 0x40
 800a732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a744:	4b59      	ldr	r3, [pc, #356]	@ (800a8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f003 030c 	and.w	r3, r3, #12
 800a74c:	2b08      	cmp	r3, #8
 800a74e:	d00d      	beq.n	800a76c <HAL_RCC_GetSysClockFreq+0x40>
 800a750:	2b08      	cmp	r3, #8
 800a752:	f200 80a1 	bhi.w	800a898 <HAL_RCC_GetSysClockFreq+0x16c>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <HAL_RCC_GetSysClockFreq+0x34>
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	d003      	beq.n	800a766 <HAL_RCC_GetSysClockFreq+0x3a>
 800a75e:	e09b      	b.n	800a898 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a760:	4b53      	ldr	r3, [pc, #332]	@ (800a8b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a764:	e09b      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a766:	4b53      	ldr	r3, [pc, #332]	@ (800a8b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a768:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a76a:	e098      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a76c:	4b4f      	ldr	r3, [pc, #316]	@ (800a8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a776:	4b4d      	ldr	r3, [pc, #308]	@ (800a8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d028      	beq.n	800a7d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a782:	4b4a      	ldr	r3, [pc, #296]	@ (800a8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	099b      	lsrs	r3, r3, #6
 800a788:	2200      	movs	r2, #0
 800a78a:	623b      	str	r3, [r7, #32]
 800a78c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a794:	2100      	movs	r1, #0
 800a796:	4b47      	ldr	r3, [pc, #284]	@ (800a8b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a798:	fb03 f201 	mul.w	r2, r3, r1
 800a79c:	2300      	movs	r3, #0
 800a79e:	fb00 f303 	mul.w	r3, r0, r3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4a43      	ldr	r2, [pc, #268]	@ (800a8b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7a6:	fba0 1202 	umull	r1, r2, r0, r2
 800a7aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7ac:	460a      	mov	r2, r1
 800a7ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a7b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b2:	4413      	add	r3, r2
 800a7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	61fa      	str	r2, [r7, #28]
 800a7be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a7c6:	f7f5 fd5b 	bl	8000280 <__aeabi_uldivmod>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7d2:	e053      	b.n	800a87c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7d4:	4b35      	ldr	r3, [pc, #212]	@ (800a8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	099b      	lsrs	r3, r3, #6
 800a7da:	2200      	movs	r2, #0
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	617a      	str	r2, [r7, #20]
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a7e6:	f04f 0b00 	mov.w	fp, #0
 800a7ea:	4652      	mov	r2, sl
 800a7ec:	465b      	mov	r3, fp
 800a7ee:	f04f 0000 	mov.w	r0, #0
 800a7f2:	f04f 0100 	mov.w	r1, #0
 800a7f6:	0159      	lsls	r1, r3, #5
 800a7f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7fc:	0150      	lsls	r0, r2, #5
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	ebb2 080a 	subs.w	r8, r2, sl
 800a806:	eb63 090b 	sbc.w	r9, r3, fp
 800a80a:	f04f 0200 	mov.w	r2, #0
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a816:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a81a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a81e:	ebb2 0408 	subs.w	r4, r2, r8
 800a822:	eb63 0509 	sbc.w	r5, r3, r9
 800a826:	f04f 0200 	mov.w	r2, #0
 800a82a:	f04f 0300 	mov.w	r3, #0
 800a82e:	00eb      	lsls	r3, r5, #3
 800a830:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a834:	00e2      	lsls	r2, r4, #3
 800a836:	4614      	mov	r4, r2
 800a838:	461d      	mov	r5, r3
 800a83a:	eb14 030a 	adds.w	r3, r4, sl
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	eb45 030b 	adc.w	r3, r5, fp
 800a844:	607b      	str	r3, [r7, #4]
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a852:	4629      	mov	r1, r5
 800a854:	028b      	lsls	r3, r1, #10
 800a856:	4621      	mov	r1, r4
 800a858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a85c:	4621      	mov	r1, r4
 800a85e:	028a      	lsls	r2, r1, #10
 800a860:	4610      	mov	r0, r2
 800a862:	4619      	mov	r1, r3
 800a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a866:	2200      	movs	r2, #0
 800a868:	60bb      	str	r3, [r7, #8]
 800a86a:	60fa      	str	r2, [r7, #12]
 800a86c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a870:	f7f5 fd06 	bl	8000280 <__aeabi_uldivmod>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4613      	mov	r3, r2
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a87c:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	0c1b      	lsrs	r3, r3, #16
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	3301      	adds	r3, #1
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a88c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	fbb2 f3f3 	udiv	r3, r2, r3
 800a894:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a896:	e002      	b.n	800a89e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a898:	4b05      	ldr	r3, [pc, #20]	@ (800a8b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a89a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a89c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3740      	adds	r7, #64	@ 0x40
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8aa:	bf00      	nop
 800a8ac:	40023800 	.word	0x40023800
 800a8b0:	00f42400 	.word	0x00f42400
 800a8b4:	017d7840 	.word	0x017d7840

0800a8b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8bc:	4b03      	ldr	r3, [pc, #12]	@ (800a8cc <HAL_RCC_GetHCLKFreq+0x14>)
 800a8be:	681b      	ldr	r3, [r3, #0]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20000010 	.word	0x20000010

0800a8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8d4:	f7ff fff0 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	4b05      	ldr	r3, [pc, #20]	@ (800a8f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	0a9b      	lsrs	r3, r3, #10
 800a8e0:	f003 0307 	and.w	r3, r3, #7
 800a8e4:	4903      	ldr	r1, [pc, #12]	@ (800a8f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8e6:	5ccb      	ldrb	r3, [r1, r3]
 800a8e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	40023800 	.word	0x40023800
 800a8f4:	08012428 	.word	0x08012428

0800a8f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8fc:	f7ff ffdc 	bl	800a8b8 <HAL_RCC_GetHCLKFreq>
 800a900:	4602      	mov	r2, r0
 800a902:	4b05      	ldr	r3, [pc, #20]	@ (800a918 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	0b5b      	lsrs	r3, r3, #13
 800a908:	f003 0307 	and.w	r3, r3, #7
 800a90c:	4903      	ldr	r1, [pc, #12]	@ (800a91c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a90e:	5ccb      	ldrb	r3, [r1, r3]
 800a910:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a914:	4618      	mov	r0, r3
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40023800 	.word	0x40023800
 800a91c:	08012428 	.word	0x08012428

0800a920 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a924:	4b06      	ldr	r3, [pc, #24]	@ (800a940 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92c:	2b80      	cmp	r3, #128	@ 0x80
 800a92e:	d104      	bne.n	800a93a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a930:	f000 f80a 	bl	800a948 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a934:	4b03      	ldr	r3, [pc, #12]	@ (800a944 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a936:	2280      	movs	r2, #128	@ 0x80
 800a938:	701a      	strb	r2, [r3, #0]
  }
}
 800a93a:	bf00      	nop
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	40023800 	.word	0x40023800
 800a944:	4002380e 	.word	0x4002380e

0800a948 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e041      	b.n	800a9ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	d106      	bne.n	800a982 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7f8 fe7d 	bl	800367c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2202      	movs	r2, #2
 800a986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3304      	adds	r3, #4
 800a992:	4619      	mov	r1, r3
 800a994:	4610      	mov	r0, r2
 800a996:	f000 fc3b 	bl	800b210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d001      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e044      	b.n	800aa96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0201 	orr.w	r2, r2, #1
 800aa22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a1e      	ldr	r2, [pc, #120]	@ (800aaa4 <HAL_TIM_Base_Start_IT+0xb0>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d018      	beq.n	800aa60 <HAL_TIM_Base_Start_IT+0x6c>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa36:	d013      	beq.n	800aa60 <HAL_TIM_Base_Start_IT+0x6c>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aaa8 <HAL_TIM_Base_Start_IT+0xb4>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d00e      	beq.n	800aa60 <HAL_TIM_Base_Start_IT+0x6c>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a19      	ldr	r2, [pc, #100]	@ (800aaac <HAL_TIM_Base_Start_IT+0xb8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d009      	beq.n	800aa60 <HAL_TIM_Base_Start_IT+0x6c>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a17      	ldr	r2, [pc, #92]	@ (800aab0 <HAL_TIM_Base_Start_IT+0xbc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d004      	beq.n	800aa60 <HAL_TIM_Base_Start_IT+0x6c>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a16      	ldr	r2, [pc, #88]	@ (800aab4 <HAL_TIM_Base_Start_IT+0xc0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d111      	bne.n	800aa84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b06      	cmp	r3, #6
 800aa70:	d010      	beq.n	800aa94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0201 	orr.w	r2, r2, #1
 800aa80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa82:	e007      	b.n	800aa94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f042 0201 	orr.w	r2, r2, #1
 800aa92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	40010000 	.word	0x40010000
 800aaa8:	40000400 	.word	0x40000400
 800aaac:	40000800 	.word	0x40000800
 800aab0:	40000c00 	.word	0x40000c00
 800aab4:	40014000 	.word	0x40014000

0800aab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e041      	b.n	800ab4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f839 	bl	800ab56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2202      	movs	r2, #2
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	f000 fb8a 	bl	800b210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d109      	bne.n	800ab90 <HAL_TIM_PWM_Start+0x24>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	bf14      	ite	ne
 800ab88:	2301      	movne	r3, #1
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	e022      	b.n	800abd6 <HAL_TIM_PWM_Start+0x6a>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d109      	bne.n	800abaa <HAL_TIM_PWM_Start+0x3e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	bf14      	ite	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	2300      	moveq	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	e015      	b.n	800abd6 <HAL_TIM_PWM_Start+0x6a>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b08      	cmp	r3, #8
 800abae:	d109      	bne.n	800abc4 <HAL_TIM_PWM_Start+0x58>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b01      	cmp	r3, #1
 800abba:	bf14      	ite	ne
 800abbc:	2301      	movne	r3, #1
 800abbe:	2300      	moveq	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	e008      	b.n	800abd6 <HAL_TIM_PWM_Start+0x6a>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b01      	cmp	r3, #1
 800abce:	bf14      	ite	ne
 800abd0:	2301      	movne	r3, #1
 800abd2:	2300      	moveq	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e068      	b.n	800acb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d104      	bne.n	800abee <HAL_TIM_PWM_Start+0x82>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abec:	e013      	b.n	800ac16 <HAL_TIM_PWM_Start+0xaa>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d104      	bne.n	800abfe <HAL_TIM_PWM_Start+0x92>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abfc:	e00b      	b.n	800ac16 <HAL_TIM_PWM_Start+0xaa>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d104      	bne.n	800ac0e <HAL_TIM_PWM_Start+0xa2>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac0c:	e003      	b.n	800ac16 <HAL_TIM_PWM_Start+0xaa>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2202      	movs	r2, #2
 800ac12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fda8 	bl	800b774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a23      	ldr	r2, [pc, #140]	@ (800acb8 <HAL_TIM_PWM_Start+0x14c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d107      	bne.n	800ac3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a1d      	ldr	r2, [pc, #116]	@ (800acb8 <HAL_TIM_PWM_Start+0x14c>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d018      	beq.n	800ac7a <HAL_TIM_PWM_Start+0x10e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac50:	d013      	beq.n	800ac7a <HAL_TIM_PWM_Start+0x10e>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a19      	ldr	r2, [pc, #100]	@ (800acbc <HAL_TIM_PWM_Start+0x150>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d00e      	beq.n	800ac7a <HAL_TIM_PWM_Start+0x10e>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a17      	ldr	r2, [pc, #92]	@ (800acc0 <HAL_TIM_PWM_Start+0x154>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d009      	beq.n	800ac7a <HAL_TIM_PWM_Start+0x10e>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <HAL_TIM_PWM_Start+0x158>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d004      	beq.n	800ac7a <HAL_TIM_PWM_Start+0x10e>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a14      	ldr	r2, [pc, #80]	@ (800acc8 <HAL_TIM_PWM_Start+0x15c>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d111      	bne.n	800ac9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b06      	cmp	r3, #6
 800ac8a:	d010      	beq.n	800acae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f042 0201 	orr.w	r2, r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac9c:	e007      	b.n	800acae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f042 0201 	orr.w	r2, r2, #1
 800acac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40000400 	.word	0x40000400
 800acc0:	40000800 	.word	0x40000800
 800acc4:	40000c00 	.word	0x40000c00
 800acc8:	40014000 	.word	0x40014000

0800accc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d020      	beq.n	800ad30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01b      	beq.n	800ad30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f06f 0202 	mvn.w	r2, #2
 800ad00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa5b 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ad1c:	e005      	b.n	800ad2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa4d 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa5e 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f003 0304 	and.w	r3, r3, #4
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d020      	beq.n	800ad7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f003 0304 	and.w	r3, r3, #4
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d01b      	beq.n	800ad7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f06f 0204 	mvn.w	r2, #4
 800ad4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2202      	movs	r2, #2
 800ad52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fa35 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ad68:	e005      	b.n	800ad76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa27 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fa38 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f003 0308 	and.w	r3, r3, #8
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d020      	beq.n	800adc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f003 0308 	and.w	r3, r3, #8
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01b      	beq.n	800adc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f06f 0208 	mvn.w	r2, #8
 800ad98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2204      	movs	r2, #4
 800ad9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa0f 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800adb4:	e005      	b.n	800adc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa01 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fa12 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b00      	cmp	r3, #0
 800add0:	d020      	beq.n	800ae14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01b      	beq.n	800ae14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f06f 0210 	mvn.w	r2, #16
 800ade4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2208      	movs	r2, #8
 800adea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f9e9 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ae00:	e005      	b.n	800ae0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f9db 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f9ec 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00c      	beq.n	800ae38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d007      	beq.n	800ae38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f06f 0201 	mvn.w	r2, #1
 800ae30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7f8 f838 	bl	8002ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00c      	beq.n	800ae5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d007      	beq.n	800ae5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ae54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fd2a 	bl	800b8b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00c      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f9bd 	bl	800b1fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00c      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f003 0320 	and.w	r3, r3, #32
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d007      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0220 	mvn.w	r2, #32
 800ae9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fcfc 	bl	800b89c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aea4:	bf00      	nop
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0ae      	b.n	800b028 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b0c      	cmp	r3, #12
 800aed6:	f200 809f 	bhi.w	800b018 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af15 	.word	0x0800af15
 800aee4:	0800b019 	.word	0x0800b019
 800aee8:	0800b019 	.word	0x0800b019
 800aeec:	0800b019 	.word	0x0800b019
 800aef0:	0800af55 	.word	0x0800af55
 800aef4:	0800b019 	.word	0x0800b019
 800aef8:	0800b019 	.word	0x0800b019
 800aefc:	0800b019 	.word	0x0800b019
 800af00:	0800af97 	.word	0x0800af97
 800af04:	0800b019 	.word	0x0800b019
 800af08:	0800b019 	.word	0x0800b019
 800af0c:	0800b019 	.word	0x0800b019
 800af10:	0800afd7 	.word	0x0800afd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fa04 	bl	800b328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699a      	ldr	r2, [r3, #24]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0208 	orr.w	r2, r2, #8
 800af2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 0204 	bic.w	r2, r2, #4
 800af3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6999      	ldr	r1, [r3, #24]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	619a      	str	r2, [r3, #24]
      break;
 800af52:	e064      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68b9      	ldr	r1, [r7, #8]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fa4a 	bl	800b3f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6999      	ldr	r1, [r3, #24]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	021a      	lsls	r2, r3, #8
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	619a      	str	r2, [r3, #24]
      break;
 800af94:	e043      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68b9      	ldr	r1, [r7, #8]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 fa95 	bl	800b4cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	69da      	ldr	r2, [r3, #28]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f042 0208 	orr.w	r2, r2, #8
 800afb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f022 0204 	bic.w	r2, r2, #4
 800afc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69d9      	ldr	r1, [r3, #28]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	691a      	ldr	r2, [r3, #16]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	61da      	str	r2, [r3, #28]
      break;
 800afd4:	e023      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fadf 	bl	800b5a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69da      	ldr	r2, [r3, #28]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69da      	ldr	r2, [r3, #28]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69d9      	ldr	r1, [r3, #28]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	021a      	lsls	r2, r3, #8
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	61da      	str	r2, [r3, #28]
      break;
 800b016:	e002      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	75fb      	strb	r3, [r7, #23]
      break;
 800b01c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b044:	2b01      	cmp	r3, #1
 800b046:	d101      	bne.n	800b04c <HAL_TIM_ConfigClockSource+0x1c>
 800b048:	2302      	movs	r3, #2
 800b04a:	e0b4      	b.n	800b1b6 <HAL_TIM_ConfigClockSource+0x186>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2202      	movs	r2, #2
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b06a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b084:	d03e      	beq.n	800b104 <HAL_TIM_ConfigClockSource+0xd4>
 800b086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b08a:	f200 8087 	bhi.w	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b08e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b092:	f000 8086 	beq.w	800b1a2 <HAL_TIM_ConfigClockSource+0x172>
 800b096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b09a:	d87f      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b09c:	2b70      	cmp	r3, #112	@ 0x70
 800b09e:	d01a      	beq.n	800b0d6 <HAL_TIM_ConfigClockSource+0xa6>
 800b0a0:	2b70      	cmp	r3, #112	@ 0x70
 800b0a2:	d87b      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0a4:	2b60      	cmp	r3, #96	@ 0x60
 800b0a6:	d050      	beq.n	800b14a <HAL_TIM_ConfigClockSource+0x11a>
 800b0a8:	2b60      	cmp	r3, #96	@ 0x60
 800b0aa:	d877      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0ac:	2b50      	cmp	r3, #80	@ 0x50
 800b0ae:	d03c      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0xfa>
 800b0b0:	2b50      	cmp	r3, #80	@ 0x50
 800b0b2:	d873      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0b4:	2b40      	cmp	r3, #64	@ 0x40
 800b0b6:	d058      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x13a>
 800b0b8:	2b40      	cmp	r3, #64	@ 0x40
 800b0ba:	d86f      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0bc:	2b30      	cmp	r3, #48	@ 0x30
 800b0be:	d064      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0c0:	2b30      	cmp	r3, #48	@ 0x30
 800b0c2:	d86b      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d060      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d867      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d05c      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d05a      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0d4:	e062      	b.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0e6:	f000 fb25 	bl	800b734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b0f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	609a      	str	r2, [r3, #8]
      break;
 800b102:	e04f      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b114:	f000 fb0e 	bl	800b734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b126:	609a      	str	r2, [r3, #8]
      break;
 800b128:	e03c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b136:	461a      	mov	r2, r3
 800b138:	f000 fa82 	bl	800b640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2150      	movs	r1, #80	@ 0x50
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fadb 	bl	800b6fe <TIM_ITRx_SetConfig>
      break;
 800b148:	e02c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b156:	461a      	mov	r2, r3
 800b158:	f000 faa1 	bl	800b69e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2160      	movs	r1, #96	@ 0x60
 800b162:	4618      	mov	r0, r3
 800b164:	f000 facb 	bl	800b6fe <TIM_ITRx_SetConfig>
      break;
 800b168:	e01c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b176:	461a      	mov	r2, r3
 800b178:	f000 fa62 	bl	800b640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2140      	movs	r1, #64	@ 0x40
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fabb 	bl	800b6fe <TIM_ITRx_SetConfig>
      break;
 800b188:	e00c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f000 fab2 	bl	800b6fe <TIM_ITRx_SetConfig>
      break;
 800b19a:	e003      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a0:	e000      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
	...

0800b210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a3a      	ldr	r2, [pc, #232]	@ (800b30c <TIM_Base_SetConfig+0xfc>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00f      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b22e:	d00b      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a37      	ldr	r2, [pc, #220]	@ (800b310 <TIM_Base_SetConfig+0x100>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d007      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a36      	ldr	r2, [pc, #216]	@ (800b314 <TIM_Base_SetConfig+0x104>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d003      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a35      	ldr	r2, [pc, #212]	@ (800b318 <TIM_Base_SetConfig+0x108>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d108      	bne.n	800b25a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b24e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4313      	orrs	r3, r2
 800b258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a2b      	ldr	r2, [pc, #172]	@ (800b30c <TIM_Base_SetConfig+0xfc>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d01b      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b268:	d017      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a28      	ldr	r2, [pc, #160]	@ (800b310 <TIM_Base_SetConfig+0x100>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d013      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a27      	ldr	r2, [pc, #156]	@ (800b314 <TIM_Base_SetConfig+0x104>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00f      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a26      	ldr	r2, [pc, #152]	@ (800b318 <TIM_Base_SetConfig+0x108>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d00b      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a25      	ldr	r2, [pc, #148]	@ (800b31c <TIM_Base_SetConfig+0x10c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d007      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a24      	ldr	r2, [pc, #144]	@ (800b320 <TIM_Base_SetConfig+0x110>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d003      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a23      	ldr	r2, [pc, #140]	@ (800b324 <TIM_Base_SetConfig+0x114>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d108      	bne.n	800b2ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b30c <TIM_Base_SetConfig+0xfc>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d103      	bne.n	800b2e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	691a      	ldr	r2, [r3, #16]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d105      	bne.n	800b2fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f023 0201 	bic.w	r2, r3, #1
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	611a      	str	r2, [r3, #16]
  }
}
 800b2fe:	bf00      	nop
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	40010000 	.word	0x40010000
 800b310:	40000400 	.word	0x40000400
 800b314:	40000800 	.word	0x40000800
 800b318:	40000c00 	.word	0x40000c00
 800b31c:	40014000 	.word	0x40014000
 800b320:	40014400 	.word	0x40014400
 800b324:	40014800 	.word	0x40014800

0800b328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	f023 0201 	bic.w	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f023 0303 	bic.w	r3, r3, #3
 800b35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	f023 0302 	bic.w	r3, r3, #2
 800b370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4313      	orrs	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f0 <TIM_OC1_SetConfig+0xc8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d10c      	bne.n	800b39e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f023 0308 	bic.w	r3, r3, #8
 800b38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	4313      	orrs	r3, r2
 800b394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	f023 0304 	bic.w	r3, r3, #4
 800b39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a13      	ldr	r2, [pc, #76]	@ (800b3f0 <TIM_OC1_SetConfig+0xc8>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d111      	bne.n	800b3ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	621a      	str	r2, [r3, #32]
}
 800b3e4:	bf00      	nop
 800b3e6:	371c      	adds	r7, #28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	40010000 	.word	0x40010000

0800b3f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	f023 0210 	bic.w	r2, r3, #16
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	021b      	lsls	r3, r3, #8
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f023 0320 	bic.w	r3, r3, #32
 800b43e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a1e      	ldr	r2, [pc, #120]	@ (800b4c8 <TIM_OC2_SetConfig+0xd4>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d10d      	bne.n	800b470 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b46e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a15      	ldr	r2, [pc, #84]	@ (800b4c8 <TIM_OC2_SetConfig+0xd4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d113      	bne.n	800b4a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b47e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	695b      	ldr	r3, [r3, #20]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	4313      	orrs	r3, r2
 800b492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	621a      	str	r2, [r3, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	371c      	adds	r7, #28
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	40010000 	.word	0x40010000

0800b4cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	021b      	lsls	r3, r3, #8
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a1d      	ldr	r2, [pc, #116]	@ (800b59c <TIM_OC3_SetConfig+0xd0>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d10d      	bne.n	800b546 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a14      	ldr	r2, [pc, #80]	@ (800b59c <TIM_OC3_SetConfig+0xd0>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d113      	bne.n	800b576 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	621a      	str	r2, [r3, #32]
}
 800b590:	bf00      	nop
 800b592:	371c      	adds	r7, #28
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	40010000 	.word	0x40010000

0800b5a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	021b      	lsls	r3, r3, #8
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	031b      	lsls	r3, r3, #12
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a10      	ldr	r2, [pc, #64]	@ (800b63c <TIM_OC4_SetConfig+0x9c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d109      	bne.n	800b614 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	019b      	lsls	r3, r3, #6
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685a      	ldr	r2, [r3, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	621a      	str	r2, [r3, #32]
}
 800b62e:	bf00      	nop
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	40010000 	.word	0x40010000

0800b640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a1b      	ldr	r3, [r3, #32]
 800b650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	f023 0201 	bic.w	r2, r3, #1
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b66a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	4313      	orrs	r3, r2
 800b674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f023 030a 	bic.w	r3, r3, #10
 800b67c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	4313      	orrs	r3, r2
 800b684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	621a      	str	r2, [r3, #32]
}
 800b692:	bf00      	nop
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b087      	sub	sp, #28
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	f023 0210 	bic.w	r2, r3, #16
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	031b      	lsls	r3, r3, #12
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b6da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	621a      	str	r2, [r3, #32]
}
 800b6f2:	bf00      	nop
 800b6f4:	371c      	adds	r7, #28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b085      	sub	sp, #20
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	f043 0307 	orr.w	r3, r3, #7
 800b720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	609a      	str	r2, [r3, #8]
}
 800b728:	bf00      	nop
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b74e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	021a      	lsls	r2, r3, #8
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	431a      	orrs	r2, r3
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	4313      	orrs	r3, r2
 800b760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	609a      	str	r2, [r3, #8]
}
 800b768:	bf00      	nop
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f003 031f 	and.w	r3, r3, #31
 800b786:	2201      	movs	r2, #1
 800b788:	fa02 f303 	lsl.w	r3, r2, r3
 800b78c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6a1a      	ldr	r2, [r3, #32]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	43db      	mvns	r3, r3
 800b796:	401a      	ands	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a1a      	ldr	r2, [r3, #32]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	f003 031f 	and.w	r3, r3, #31
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	621a      	str	r2, [r3, #32]
}
 800b7b2:	bf00      	nop
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d101      	bne.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	e050      	b.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	4313      	orrs	r3, r2
 800b808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a1c      	ldr	r2, [pc, #112]	@ (800b888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d018      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b824:	d013      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a18      	ldr	r2, [pc, #96]	@ (800b88c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00e      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a16      	ldr	r2, [pc, #88]	@ (800b890 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d009      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a15      	ldr	r2, [pc, #84]	@ (800b894 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d004      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a13      	ldr	r2, [pc, #76]	@ (800b898 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d10c      	bne.n	800b868 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	40010000 	.word	0x40010000
 800b88c:	40000400 	.word	0x40000400
 800b890:	40000800 	.word	0x40000800
 800b894:	40000c00 	.word	0x40000c00
 800b898:	40014000 	.word	0x40014000

0800b89c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e042      	b.n	800b95c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7f7 ff46 	bl	800377c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2224      	movs	r2, #36	@ 0x24
 800b8f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fcdb 	bl	800c2c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	691a      	ldr	r2, [r3, #16]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b91c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	695a      	ldr	r2, [r3, #20]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b92c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b93c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2220      	movs	r2, #32
 800b948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2220      	movs	r2, #32
 800b950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	4613      	mov	r3, r2
 800b970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b20      	cmp	r3, #32
 800b97c:	d112      	bne.n	800b9a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <HAL_UART_Receive_IT+0x26>
 800b984:	88fb      	ldrh	r3, [r7, #6]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e00b      	b.n	800b9a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b994:	88fb      	ldrh	r3, [r7, #6]
 800b996:	461a      	mov	r2, r3
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 faba 	bl	800bf14 <UART_Start_Receive_IT>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	e000      	b.n	800b9a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b9a4:	2302      	movs	r3, #2
  }
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b0ba      	sub	sp, #232	@ 0xe8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e6:	f003 030f 	and.w	r3, r3, #15
 800b9ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b9ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10f      	bne.n	800ba16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9fa:	f003 0320 	and.w	r3, r3, #32
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <HAL_UART_IRQHandler+0x66>
 800ba02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fb99 	bl	800c146 <UART_Receive_IT>
      return;
 800ba14:	e25b      	b.n	800bece <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80de 	beq.w	800bbdc <HAL_UART_IRQHandler+0x22c>
 800ba20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 80d1 	beq.w	800bbdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00b      	beq.n	800ba5e <HAL_UART_IRQHandler+0xae>
 800ba46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba56:	f043 0201 	orr.w	r2, r3, #1
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba62:	f003 0304 	and.w	r3, r3, #4
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00b      	beq.n	800ba82 <HAL_UART_IRQHandler+0xd2>
 800ba6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d005      	beq.n	800ba82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba7a:	f043 0202 	orr.w	r2, r3, #2
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00b      	beq.n	800baa6 <HAL_UART_IRQHandler+0xf6>
 800ba8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9e:	f043 0204 	orr.w	r2, r3, #4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baaa:	f003 0308 	and.w	r3, r3, #8
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d011      	beq.n	800bad6 <HAL_UART_IRQHandler+0x126>
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d105      	bne.n	800baca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800babe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bace:	f043 0208 	orr.w	r2, r3, #8
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 81f2 	beq.w	800bec4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae4:	f003 0320 	and.w	r3, r3, #32
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d008      	beq.n	800bafe <HAL_UART_IRQHandler+0x14e>
 800baec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baf0:	f003 0320 	and.w	r3, r3, #32
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fb24 	bl	800c146 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb08:	2b40      	cmp	r3, #64	@ 0x40
 800bb0a:	bf0c      	ite	eq
 800bb0c:	2301      	moveq	r3, #1
 800bb0e:	2300      	movne	r3, #0
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <HAL_UART_IRQHandler+0x17a>
 800bb22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d04f      	beq.n	800bbca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa2c 	bl	800bf88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb3a:	2b40      	cmp	r3, #64	@ 0x40
 800bb3c:	d141      	bne.n	800bbc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3314      	adds	r3, #20
 800bb44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bb54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3314      	adds	r3, #20
 800bb66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bb6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bb6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bb76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bb82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1d9      	bne.n	800bb3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d013      	beq.n	800bbba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb96:	4a7e      	ldr	r2, [pc, #504]	@ (800bd90 <HAL_UART_IRQHandler+0x3e0>)
 800bb98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f8 ff96 	bl	8004ad0 <HAL_DMA_Abort_IT>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d016      	beq.n	800bbd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb8:	e00e      	b.n	800bbd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f994 	bl	800bee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc0:	e00a      	b.n	800bbd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f990 	bl	800bee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc8:	e006      	b.n	800bbd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f98c 	bl	800bee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bbd6:	e175      	b.n	800bec4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd8:	bf00      	nop
    return;
 800bbda:	e173      	b.n	800bec4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	f040 814f 	bne.w	800be84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbea:	f003 0310 	and.w	r3, r3, #16
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 8148 	beq.w	800be84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bbf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 8141 	beq.w	800be84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc02:	2300      	movs	r3, #0
 800bc04:	60bb      	str	r3, [r7, #8]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60bb      	str	r3, [r7, #8]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	60bb      	str	r3, [r7, #8]
 800bc16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc22:	2b40      	cmp	r3, #64	@ 0x40
 800bc24:	f040 80b6 	bne.w	800bd94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 8145 	beq.w	800bec8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc46:	429a      	cmp	r2, r3
 800bc48:	f080 813e 	bcs.w	800bec8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc5e:	f000 8088 	beq.w	800bd72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	330c      	adds	r3, #12
 800bc68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	330c      	adds	r3, #12
 800bc8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bc8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bc92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1d9      	bne.n	800bc62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bcbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcc0:	f023 0301 	bic.w	r3, r3, #1
 800bcc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3314      	adds	r3, #20
 800bcce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bcd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bcd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bcda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e1      	bne.n	800bcae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3314      	adds	r3, #20
 800bcf0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcf4:	e853 3f00 	ldrex	r3, [r3]
 800bcf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bcfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3314      	adds	r3, #20
 800bd0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd16:	e841 2300 	strex	r3, r2, [r1]
 800bd1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1e3      	bne.n	800bcea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2220      	movs	r2, #32
 800bd26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	330c      	adds	r3, #12
 800bd36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd42:	f023 0310 	bic.w	r3, r3, #16
 800bd46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	330c      	adds	r3, #12
 800bd50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bd54:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bd56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd5c:	e841 2300 	strex	r3, r2, [r1]
 800bd60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e3      	bne.n	800bd30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7f8 fe3f 	bl	80049f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2202      	movs	r2, #2
 800bd76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f8b7 	bl	800befc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd8e:	e09b      	b.n	800bec8 <HAL_UART_IRQHandler+0x518>
 800bd90:	0800c04f 	.word	0x0800c04f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 808e 	beq.w	800becc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bdb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 8089 	beq.w	800becc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	330c      	adds	r3, #12
 800bdc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc4:	e853 3f00 	ldrex	r3, [r3]
 800bdc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	330c      	adds	r3, #12
 800bdda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bdde:	647a      	str	r2, [r7, #68]	@ 0x44
 800bde0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bde4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e3      	bne.n	800bdba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3314      	adds	r3, #20
 800bdf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	623b      	str	r3, [r7, #32]
   return(result);
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	f023 0301 	bic.w	r3, r3, #1
 800be08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3314      	adds	r3, #20
 800be12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be16:	633a      	str	r2, [r7, #48]	@ 0x30
 800be18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e3      	bne.n	800bdf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	330c      	adds	r3, #12
 800be3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	e853 3f00 	ldrex	r3, [r3]
 800be46:	60fb      	str	r3, [r7, #12]
   return(result);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 0310 	bic.w	r3, r3, #16
 800be4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	330c      	adds	r3, #12
 800be58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800be5c:	61fa      	str	r2, [r7, #28]
 800be5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be60:	69b9      	ldr	r1, [r7, #24]
 800be62:	69fa      	ldr	r2, [r7, #28]
 800be64:	e841 2300 	strex	r3, r2, [r1]
 800be68:	617b      	str	r3, [r7, #20]
   return(result);
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1e3      	bne.n	800be38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f83d 	bl	800befc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be82:	e023      	b.n	800becc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d009      	beq.n	800bea4 <HAL_UART_IRQHandler+0x4f4>
 800be90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d003      	beq.n	800bea4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f8ea 	bl	800c076 <UART_Transmit_IT>
    return;
 800bea2:	e014      	b.n	800bece <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00e      	beq.n	800bece <HAL_UART_IRQHandler+0x51e>
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d008      	beq.n	800bece <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f92a 	bl	800c116 <UART_EndTransmit_IT>
    return;
 800bec2:	e004      	b.n	800bece <HAL_UART_IRQHandler+0x51e>
    return;
 800bec4:	bf00      	nop
 800bec6:	e002      	b.n	800bece <HAL_UART_IRQHandler+0x51e>
      return;
 800bec8:	bf00      	nop
 800beca:	e000      	b.n	800bece <HAL_UART_IRQHandler+0x51e>
      return;
 800becc:	bf00      	nop
  }
}
 800bece:	37e8      	adds	r7, #232	@ 0xe8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	88fa      	ldrh	r2, [r7, #6]
 800bf2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	88fa      	ldrh	r2, [r7, #6]
 800bf32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2222      	movs	r2, #34	@ 0x22
 800bf3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d007      	beq.n	800bf5a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68da      	ldr	r2, [r3, #12]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	695a      	ldr	r2, [r3, #20]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f042 0201 	orr.w	r2, r2, #1
 800bf68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68da      	ldr	r2, [r3, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f042 0220 	orr.w	r2, r2, #32
 800bf78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b095      	sub	sp, #84	@ 0x54
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	330c      	adds	r3, #12
 800bf96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf9a:	e853 3f00 	ldrex	r3, [r3]
 800bf9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	330c      	adds	r3, #12
 800bfae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfb0:	643a      	str	r2, [r7, #64]	@ 0x40
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bfb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bfb8:	e841 2300 	strex	r3, r2, [r1]
 800bfbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1e5      	bne.n	800bf90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3314      	adds	r3, #20
 800bfca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3314      	adds	r3, #20
 800bfe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e5      	bne.n	800bfc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d119      	bne.n	800c034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	330c      	adds	r3, #12
 800c006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	e853 3f00 	ldrex	r3, [r3]
 800c00e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f023 0310 	bic.w	r3, r3, #16
 800c016:	647b      	str	r3, [r7, #68]	@ 0x44
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	330c      	adds	r3, #12
 800c01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c020:	61ba      	str	r2, [r7, #24]
 800c022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c024:	6979      	ldr	r1, [r7, #20]
 800c026:	69ba      	ldr	r2, [r7, #24]
 800c028:	e841 2300 	strex	r3, r2, [r1]
 800c02c:	613b      	str	r3, [r7, #16]
   return(result);
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e5      	bne.n	800c000 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2220      	movs	r2, #32
 800c038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c042:	bf00      	nop
 800c044:	3754      	adds	r7, #84	@ 0x54
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c05a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2200      	movs	r2, #0
 800c066:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7ff ff3d 	bl	800bee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c06e:	bf00      	nop
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c076:	b480      	push	{r7}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b21      	cmp	r3, #33	@ 0x21
 800c088:	d13e      	bne.n	800c108 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c092:	d114      	bne.n	800c0be <UART_Transmit_IT+0x48>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d110      	bne.n	800c0be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	881b      	ldrh	r3, [r3, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	1c9a      	adds	r2, r3, #2
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	621a      	str	r2, [r3, #32]
 800c0bc:	e008      	b.n	800c0d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	1c59      	adds	r1, r3, #1
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	6211      	str	r1, [r2, #32]
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10f      	bne.n	800c104 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68da      	ldr	r2, [r3, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c102:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	e000      	b.n	800c10a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c108:	2302      	movs	r3, #2
  }
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68da      	ldr	r2, [r3, #12]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c12c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2220      	movs	r2, #32
 800c132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff fecc 	bl	800bed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b08c      	sub	sp, #48	@ 0x30
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b22      	cmp	r3, #34	@ 0x22
 800c158:	f040 80ae 	bne.w	800c2b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c164:	d117      	bne.n	800c196 <UART_Receive_IT+0x50>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d113      	bne.n	800c196 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c176:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c184:	b29a      	uxth	r2, r3
 800c186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18e:	1c9a      	adds	r2, r3, #2
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	629a      	str	r2, [r3, #40]	@ 0x28
 800c194:	e026      	b.n	800c1e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1a8:	d007      	beq.n	800c1ba <UART_Receive_IT+0x74>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <UART_Receive_IT+0x82>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c4:	701a      	strb	r2, [r3, #0]
 800c1c6:	e008      	b.n	800c1da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d15d      	bne.n	800c2b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f022 0220 	bic.w	r2, r2, #32
 800c206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68da      	ldr	r2, [r3, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	695a      	ldr	r2, [r3, #20]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0201 	bic.w	r2, r2, #1
 800c226:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2220      	movs	r2, #32
 800c22c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d135      	bne.n	800c2aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	330c      	adds	r3, #12
 800c24a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	613b      	str	r3, [r7, #16]
   return(result);
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	f023 0310 	bic.w	r3, r3, #16
 800c25a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	330c      	adds	r3, #12
 800c262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c264:	623a      	str	r2, [r7, #32]
 800c266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c268:	69f9      	ldr	r1, [r7, #28]
 800c26a:	6a3a      	ldr	r2, [r7, #32]
 800c26c:	e841 2300 	strex	r3, r2, [r1]
 800c270:	61bb      	str	r3, [r7, #24]
   return(result);
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e5      	bne.n	800c244 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0310 	and.w	r3, r3, #16
 800c282:	2b10      	cmp	r3, #16
 800c284:	d10a      	bne.n	800c29c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	60fb      	str	r3, [r7, #12]
 800c29a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fe2a 	bl	800befc <HAL_UARTEx_RxEventCallback>
 800c2a8:	e002      	b.n	800c2b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7f6 fe8c 	bl	8002fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e002      	b.n	800c2ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	e000      	b.n	800c2ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2b8:	2302      	movs	r3, #2
  }
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3730      	adds	r7, #48	@ 0x30
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2c8:	b0c0      	sub	sp, #256	@ 0x100
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2e0:	68d9      	ldr	r1, [r3, #12]
 800c2e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	ea40 0301 	orr.w	r3, r0, r1
 800c2ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	431a      	orrs	r2, r3
 800c304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c31c:	f021 010c 	bic.w	r1, r1, #12
 800c320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c32a:	430b      	orrs	r3, r1
 800c32c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c32e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c33e:	6999      	ldr	r1, [r3, #24]
 800c340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	ea40 0301 	orr.w	r3, r0, r1
 800c34a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c34c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b8f      	ldr	r3, [pc, #572]	@ (800c590 <UART_SetConfig+0x2cc>)
 800c354:	429a      	cmp	r2, r3
 800c356:	d005      	beq.n	800c364 <UART_SetConfig+0xa0>
 800c358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4b8d      	ldr	r3, [pc, #564]	@ (800c594 <UART_SetConfig+0x2d0>)
 800c360:	429a      	cmp	r2, r3
 800c362:	d104      	bne.n	800c36e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c364:	f7fe fac8 	bl	800a8f8 <HAL_RCC_GetPCLK2Freq>
 800c368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c36c:	e003      	b.n	800c376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c36e:	f7fe faaf 	bl	800a8d0 <HAL_RCC_GetPCLK1Freq>
 800c372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c37a:	69db      	ldr	r3, [r3, #28]
 800c37c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c380:	f040 810c 	bne.w	800c59c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c388:	2200      	movs	r2, #0
 800c38a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c38e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	1891      	adds	r1, r2, r2
 800c39c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c39e:	415b      	adcs	r3, r3
 800c3a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	eb12 0801 	adds.w	r8, r2, r1
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	eb43 0901 	adc.w	r9, r3, r1
 800c3b2:	f04f 0200 	mov.w	r2, #0
 800c3b6:	f04f 0300 	mov.w	r3, #0
 800c3ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c3be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c3c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c3c6:	4690      	mov	r8, r2
 800c3c8:	4699      	mov	r9, r3
 800c3ca:	4623      	mov	r3, r4
 800c3cc:	eb18 0303 	adds.w	r3, r8, r3
 800c3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c3d4:	462b      	mov	r3, r5
 800c3d6:	eb49 0303 	adc.w	r3, r9, r3
 800c3da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c3ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c3ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	18db      	adds	r3, r3, r3
 800c3f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	eb42 0303 	adc.w	r3, r2, r3
 800c3fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800c400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c408:	f7f3 ff3a 	bl	8000280 <__aeabi_uldivmod>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4b61      	ldr	r3, [pc, #388]	@ (800c598 <UART_SetConfig+0x2d4>)
 800c412:	fba3 2302 	umull	r2, r3, r3, r2
 800c416:	095b      	lsrs	r3, r3, #5
 800c418:	011c      	lsls	r4, r3, #4
 800c41a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c41e:	2200      	movs	r2, #0
 800c420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c42c:	4642      	mov	r2, r8
 800c42e:	464b      	mov	r3, r9
 800c430:	1891      	adds	r1, r2, r2
 800c432:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c434:	415b      	adcs	r3, r3
 800c436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c43c:	4641      	mov	r1, r8
 800c43e:	eb12 0a01 	adds.w	sl, r2, r1
 800c442:	4649      	mov	r1, r9
 800c444:	eb43 0b01 	adc.w	fp, r3, r1
 800c448:	f04f 0200 	mov.w	r2, #0
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c45c:	4692      	mov	sl, r2
 800c45e:	469b      	mov	fp, r3
 800c460:	4643      	mov	r3, r8
 800c462:	eb1a 0303 	adds.w	r3, sl, r3
 800c466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c46a:	464b      	mov	r3, r9
 800c46c:	eb4b 0303 	adc.w	r3, fp, r3
 800c470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c488:	460b      	mov	r3, r1
 800c48a:	18db      	adds	r3, r3, r3
 800c48c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c48e:	4613      	mov	r3, r2
 800c490:	eb42 0303 	adc.w	r3, r2, r3
 800c494:	647b      	str	r3, [r7, #68]	@ 0x44
 800c496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c49a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c49e:	f7f3 feef 	bl	8000280 <__aeabi_uldivmod>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4b3b      	ldr	r3, [pc, #236]	@ (800c598 <UART_SetConfig+0x2d4>)
 800c4aa:	fba3 2301 	umull	r2, r3, r3, r1
 800c4ae:	095b      	lsrs	r3, r3, #5
 800c4b0:	2264      	movs	r2, #100	@ 0x64
 800c4b2:	fb02 f303 	mul.w	r3, r2, r3
 800c4b6:	1acb      	subs	r3, r1, r3
 800c4b8:	00db      	lsls	r3, r3, #3
 800c4ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c4be:	4b36      	ldr	r3, [pc, #216]	@ (800c598 <UART_SetConfig+0x2d4>)
 800c4c0:	fba3 2302 	umull	r2, r3, r3, r2
 800c4c4:	095b      	lsrs	r3, r3, #5
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c4cc:	441c      	add	r4, r3
 800c4ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c4d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c4dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c4e0:	4642      	mov	r2, r8
 800c4e2:	464b      	mov	r3, r9
 800c4e4:	1891      	adds	r1, r2, r2
 800c4e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c4e8:	415b      	adcs	r3, r3
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c4f0:	4641      	mov	r1, r8
 800c4f2:	1851      	adds	r1, r2, r1
 800c4f4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c4f6:	4649      	mov	r1, r9
 800c4f8:	414b      	adcs	r3, r1
 800c4fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c508:	4659      	mov	r1, fp
 800c50a:	00cb      	lsls	r3, r1, #3
 800c50c:	4651      	mov	r1, sl
 800c50e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c512:	4651      	mov	r1, sl
 800c514:	00ca      	lsls	r2, r1, #3
 800c516:	4610      	mov	r0, r2
 800c518:	4619      	mov	r1, r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	4642      	mov	r2, r8
 800c51e:	189b      	adds	r3, r3, r2
 800c520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c524:	464b      	mov	r3, r9
 800c526:	460a      	mov	r2, r1
 800c528:	eb42 0303 	adc.w	r3, r2, r3
 800c52c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c53c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c544:	460b      	mov	r3, r1
 800c546:	18db      	adds	r3, r3, r3
 800c548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c54a:	4613      	mov	r3, r2
 800c54c:	eb42 0303 	adc.w	r3, r2, r3
 800c550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c55a:	f7f3 fe91 	bl	8000280 <__aeabi_uldivmod>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4b0d      	ldr	r3, [pc, #52]	@ (800c598 <UART_SetConfig+0x2d4>)
 800c564:	fba3 1302 	umull	r1, r3, r3, r2
 800c568:	095b      	lsrs	r3, r3, #5
 800c56a:	2164      	movs	r1, #100	@ 0x64
 800c56c:	fb01 f303 	mul.w	r3, r1, r3
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	3332      	adds	r3, #50	@ 0x32
 800c576:	4a08      	ldr	r2, [pc, #32]	@ (800c598 <UART_SetConfig+0x2d4>)
 800c578:	fba2 2303 	umull	r2, r3, r2, r3
 800c57c:	095b      	lsrs	r3, r3, #5
 800c57e:	f003 0207 	and.w	r2, r3, #7
 800c582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4422      	add	r2, r4
 800c58a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c58c:	e106      	b.n	800c79c <UART_SetConfig+0x4d8>
 800c58e:	bf00      	nop
 800c590:	40011000 	.word	0x40011000
 800c594:	40011400 	.word	0x40011400
 800c598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c5a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c5aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c5ae:	4642      	mov	r2, r8
 800c5b0:	464b      	mov	r3, r9
 800c5b2:	1891      	adds	r1, r2, r2
 800c5b4:	6239      	str	r1, [r7, #32]
 800c5b6:	415b      	adcs	r3, r3
 800c5b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c5be:	4641      	mov	r1, r8
 800c5c0:	1854      	adds	r4, r2, r1
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	eb43 0501 	adc.w	r5, r3, r1
 800c5c8:	f04f 0200 	mov.w	r2, #0
 800c5cc:	f04f 0300 	mov.w	r3, #0
 800c5d0:	00eb      	lsls	r3, r5, #3
 800c5d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5d6:	00e2      	lsls	r2, r4, #3
 800c5d8:	4614      	mov	r4, r2
 800c5da:	461d      	mov	r5, r3
 800c5dc:	4643      	mov	r3, r8
 800c5de:	18e3      	adds	r3, r4, r3
 800c5e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5e4:	464b      	mov	r3, r9
 800c5e6:	eb45 0303 	adc.w	r3, r5, r3
 800c5ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c5fe:	f04f 0200 	mov.w	r2, #0
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c60a:	4629      	mov	r1, r5
 800c60c:	008b      	lsls	r3, r1, #2
 800c60e:	4621      	mov	r1, r4
 800c610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c614:	4621      	mov	r1, r4
 800c616:	008a      	lsls	r2, r1, #2
 800c618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c61c:	f7f3 fe30 	bl	8000280 <__aeabi_uldivmod>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4b60      	ldr	r3, [pc, #384]	@ (800c7a8 <UART_SetConfig+0x4e4>)
 800c626:	fba3 2302 	umull	r2, r3, r3, r2
 800c62a:	095b      	lsrs	r3, r3, #5
 800c62c:	011c      	lsls	r4, r3, #4
 800c62e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c632:	2200      	movs	r2, #0
 800c634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c63c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c640:	4642      	mov	r2, r8
 800c642:	464b      	mov	r3, r9
 800c644:	1891      	adds	r1, r2, r2
 800c646:	61b9      	str	r1, [r7, #24]
 800c648:	415b      	adcs	r3, r3
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c650:	4641      	mov	r1, r8
 800c652:	1851      	adds	r1, r2, r1
 800c654:	6139      	str	r1, [r7, #16]
 800c656:	4649      	mov	r1, r9
 800c658:	414b      	adcs	r3, r1
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	f04f 0200 	mov.w	r2, #0
 800c660:	f04f 0300 	mov.w	r3, #0
 800c664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c668:	4659      	mov	r1, fp
 800c66a:	00cb      	lsls	r3, r1, #3
 800c66c:	4651      	mov	r1, sl
 800c66e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c672:	4651      	mov	r1, sl
 800c674:	00ca      	lsls	r2, r1, #3
 800c676:	4610      	mov	r0, r2
 800c678:	4619      	mov	r1, r3
 800c67a:	4603      	mov	r3, r0
 800c67c:	4642      	mov	r2, r8
 800c67e:	189b      	adds	r3, r3, r2
 800c680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c684:	464b      	mov	r3, r9
 800c686:	460a      	mov	r2, r1
 800c688:	eb42 0303 	adc.w	r3, r2, r3
 800c68c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c69a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c69c:	f04f 0200 	mov.w	r2, #0
 800c6a0:	f04f 0300 	mov.w	r3, #0
 800c6a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	008b      	lsls	r3, r1, #2
 800c6ac:	4641      	mov	r1, r8
 800c6ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6b2:	4641      	mov	r1, r8
 800c6b4:	008a      	lsls	r2, r1, #2
 800c6b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c6ba:	f7f3 fde1 	bl	8000280 <__aeabi_uldivmod>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	4b38      	ldr	r3, [pc, #224]	@ (800c7a8 <UART_SetConfig+0x4e4>)
 800c6c6:	fba3 2301 	umull	r2, r3, r3, r1
 800c6ca:	095b      	lsrs	r3, r3, #5
 800c6cc:	2264      	movs	r2, #100	@ 0x64
 800c6ce:	fb02 f303 	mul.w	r3, r2, r3
 800c6d2:	1acb      	subs	r3, r1, r3
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	3332      	adds	r3, #50	@ 0x32
 800c6d8:	4a33      	ldr	r2, [pc, #204]	@ (800c7a8 <UART_SetConfig+0x4e4>)
 800c6da:	fba2 2303 	umull	r2, r3, r2, r3
 800c6de:	095b      	lsrs	r3, r3, #5
 800c6e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6e4:	441c      	add	r4, r3
 800c6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800c6ee:	677a      	str	r2, [r7, #116]	@ 0x74
 800c6f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	1891      	adds	r1, r2, r2
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	415b      	adcs	r3, r3
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c704:	4641      	mov	r1, r8
 800c706:	1851      	adds	r1, r2, r1
 800c708:	6039      	str	r1, [r7, #0]
 800c70a:	4649      	mov	r1, r9
 800c70c:	414b      	adcs	r3, r1
 800c70e:	607b      	str	r3, [r7, #4]
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c71c:	4659      	mov	r1, fp
 800c71e:	00cb      	lsls	r3, r1, #3
 800c720:	4651      	mov	r1, sl
 800c722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c726:	4651      	mov	r1, sl
 800c728:	00ca      	lsls	r2, r1, #3
 800c72a:	4610      	mov	r0, r2
 800c72c:	4619      	mov	r1, r3
 800c72e:	4603      	mov	r3, r0
 800c730:	4642      	mov	r2, r8
 800c732:	189b      	adds	r3, r3, r2
 800c734:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c736:	464b      	mov	r3, r9
 800c738:	460a      	mov	r2, r1
 800c73a:	eb42 0303 	adc.w	r3, r2, r3
 800c73e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	663b      	str	r3, [r7, #96]	@ 0x60
 800c74a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c74c:	f04f 0200 	mov.w	r2, #0
 800c750:	f04f 0300 	mov.w	r3, #0
 800c754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c758:	4649      	mov	r1, r9
 800c75a:	008b      	lsls	r3, r1, #2
 800c75c:	4641      	mov	r1, r8
 800c75e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c762:	4641      	mov	r1, r8
 800c764:	008a      	lsls	r2, r1, #2
 800c766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c76a:	f7f3 fd89 	bl	8000280 <__aeabi_uldivmod>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a8 <UART_SetConfig+0x4e4>)
 800c774:	fba3 1302 	umull	r1, r3, r3, r2
 800c778:	095b      	lsrs	r3, r3, #5
 800c77a:	2164      	movs	r1, #100	@ 0x64
 800c77c:	fb01 f303 	mul.w	r3, r1, r3
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	011b      	lsls	r3, r3, #4
 800c784:	3332      	adds	r3, #50	@ 0x32
 800c786:	4a08      	ldr	r2, [pc, #32]	@ (800c7a8 <UART_SetConfig+0x4e4>)
 800c788:	fba2 2303 	umull	r2, r3, r2, r3
 800c78c:	095b      	lsrs	r3, r3, #5
 800c78e:	f003 020f 	and.w	r2, r3, #15
 800c792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4422      	add	r2, r4
 800c79a:	609a      	str	r2, [r3, #8]
}
 800c79c:	bf00      	nop
 800c79e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7a8:	51eb851f 	.word	0x51eb851f

0800c7ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	f107 001c 	add.w	r0, r7, #28
 800c7ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d123      	bne.n	800c80e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c7da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d105      	bne.n	800c802 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fae8 	bl	800ddd8 <USB_CoreReset>
 800c808:	4603      	mov	r3, r0
 800c80a:	73fb      	strb	r3, [r7, #15]
 800c80c:	e01b      	b.n	800c846 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 fadc 	bl	800ddd8 <USB_CoreReset>
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c824:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d106      	bne.n	800c83a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c830:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	639a      	str	r2, [r3, #56]	@ 0x38
 800c838:	e005      	b.n	800c846 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c83e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c846:	7fbb      	ldrb	r3, [r7, #30]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d10b      	bne.n	800c864 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f043 0206 	orr.w	r2, r3, #6
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	f043 0220 	orr.w	r2, r3, #32
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c870:	b004      	add	sp, #16
 800c872:	4770      	bx	lr

0800c874 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c874:	b480      	push	{r7}
 800c876:	b087      	sub	sp, #28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	4613      	mov	r3, r2
 800c880:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	2b02      	cmp	r3, #2
 800c886:	d165      	bne.n	800c954 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4a41      	ldr	r2, [pc, #260]	@ (800c990 <USB_SetTurnaroundTime+0x11c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d906      	bls.n	800c89e <USB_SetTurnaroundTime+0x2a>
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	4a40      	ldr	r2, [pc, #256]	@ (800c994 <USB_SetTurnaroundTime+0x120>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d202      	bcs.n	800c89e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c898:	230f      	movs	r3, #15
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	e062      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4a3c      	ldr	r2, [pc, #240]	@ (800c994 <USB_SetTurnaroundTime+0x120>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d306      	bcc.n	800c8b4 <USB_SetTurnaroundTime+0x40>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	4a3b      	ldr	r2, [pc, #236]	@ (800c998 <USB_SetTurnaroundTime+0x124>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d202      	bcs.n	800c8b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c8ae:	230e      	movs	r3, #14
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e057      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	4a38      	ldr	r2, [pc, #224]	@ (800c998 <USB_SetTurnaroundTime+0x124>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d306      	bcc.n	800c8ca <USB_SetTurnaroundTime+0x56>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	4a37      	ldr	r2, [pc, #220]	@ (800c99c <USB_SetTurnaroundTime+0x128>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d202      	bcs.n	800c8ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c8c4:	230d      	movs	r3, #13
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	e04c      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4a33      	ldr	r2, [pc, #204]	@ (800c99c <USB_SetTurnaroundTime+0x128>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d306      	bcc.n	800c8e0 <USB_SetTurnaroundTime+0x6c>
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	4a32      	ldr	r2, [pc, #200]	@ (800c9a0 <USB_SetTurnaroundTime+0x12c>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d802      	bhi.n	800c8e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c8da:	230c      	movs	r3, #12
 800c8dc:	617b      	str	r3, [r7, #20]
 800c8de:	e041      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4a2f      	ldr	r2, [pc, #188]	@ (800c9a0 <USB_SetTurnaroundTime+0x12c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d906      	bls.n	800c8f6 <USB_SetTurnaroundTime+0x82>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	4a2e      	ldr	r2, [pc, #184]	@ (800c9a4 <USB_SetTurnaroundTime+0x130>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d802      	bhi.n	800c8f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c8f0:	230b      	movs	r3, #11
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	e036      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	4a2a      	ldr	r2, [pc, #168]	@ (800c9a4 <USB_SetTurnaroundTime+0x130>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d906      	bls.n	800c90c <USB_SetTurnaroundTime+0x98>
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	4a29      	ldr	r2, [pc, #164]	@ (800c9a8 <USB_SetTurnaroundTime+0x134>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d802      	bhi.n	800c90c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c906:	230a      	movs	r3, #10
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e02b      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4a26      	ldr	r2, [pc, #152]	@ (800c9a8 <USB_SetTurnaroundTime+0x134>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d906      	bls.n	800c922 <USB_SetTurnaroundTime+0xae>
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	4a25      	ldr	r2, [pc, #148]	@ (800c9ac <USB_SetTurnaroundTime+0x138>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d202      	bcs.n	800c922 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c91c:	2309      	movs	r3, #9
 800c91e:	617b      	str	r3, [r7, #20]
 800c920:	e020      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	4a21      	ldr	r2, [pc, #132]	@ (800c9ac <USB_SetTurnaroundTime+0x138>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d306      	bcc.n	800c938 <USB_SetTurnaroundTime+0xc4>
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	4a20      	ldr	r2, [pc, #128]	@ (800c9b0 <USB_SetTurnaroundTime+0x13c>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d802      	bhi.n	800c938 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c932:	2308      	movs	r3, #8
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	e015      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b0 <USB_SetTurnaroundTime+0x13c>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d906      	bls.n	800c94e <USB_SetTurnaroundTime+0xda>
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	4a1c      	ldr	r2, [pc, #112]	@ (800c9b4 <USB_SetTurnaroundTime+0x140>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d202      	bcs.n	800c94e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c948:	2307      	movs	r3, #7
 800c94a:	617b      	str	r3, [r7, #20]
 800c94c:	e00a      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c94e:	2306      	movs	r3, #6
 800c950:	617b      	str	r3, [r7, #20]
 800c952:	e007      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c954:	79fb      	ldrb	r3, [r7, #7]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c95a:	2309      	movs	r3, #9
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	e001      	b.n	800c964 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c960:	2309      	movs	r3, #9
 800c962:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	029b      	lsls	r3, r3, #10
 800c978:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c97c:	431a      	orrs	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	00d8acbf 	.word	0x00d8acbf
 800c994:	00e4e1c0 	.word	0x00e4e1c0
 800c998:	00f42400 	.word	0x00f42400
 800c99c:	01067380 	.word	0x01067380
 800c9a0:	011a499f 	.word	0x011a499f
 800c9a4:	01312cff 	.word	0x01312cff
 800c9a8:	014ca43f 	.word	0x014ca43f
 800c9ac:	016e3600 	.word	0x016e3600
 800c9b0:	01a6ab1f 	.word	0x01a6ab1f
 800c9b4:	01e84800 	.word	0x01e84800

0800c9b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	f043 0201 	orr.w	r2, r3, #1
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	f023 0201 	bic.w	r2, r3, #1
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca18:	78fb      	ldrb	r3, [r7, #3]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d115      	bne.n	800ca4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca2a:	200a      	movs	r0, #10
 800ca2c:	f7f7 f888 	bl	8003b40 <HAL_Delay>
      ms += 10U;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	330a      	adds	r3, #10
 800ca34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f001 f93f 	bl	800dcba <USB_GetMode>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d01e      	beq.n	800ca80 <USB_SetCurrentMode+0x84>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca46:	d9f0      	bls.n	800ca2a <USB_SetCurrentMode+0x2e>
 800ca48:	e01a      	b.n	800ca80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d115      	bne.n	800ca7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca5c:	200a      	movs	r0, #10
 800ca5e:	f7f7 f86f 	bl	8003b40 <HAL_Delay>
      ms += 10U;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	330a      	adds	r3, #10
 800ca66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 f926 	bl	800dcba <USB_GetMode>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <USB_SetCurrentMode+0x84>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca78:	d9f0      	bls.n	800ca5c <USB_SetCurrentMode+0x60>
 800ca7a:	e001      	b.n	800ca80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e005      	b.n	800ca8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2bc8      	cmp	r3, #200	@ 0xc8
 800ca84:	d101      	bne.n	800ca8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca94:	b084      	sub	sp, #16
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b086      	sub	sp, #24
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800caa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800caae:	2300      	movs	r3, #0
 800cab0:	613b      	str	r3, [r7, #16]
 800cab2:	e009      	b.n	800cac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	3340      	adds	r3, #64	@ 0x40
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	2200      	movs	r2, #0
 800cac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	3301      	adds	r3, #1
 800cac6:	613b      	str	r3, [r7, #16]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b0e      	cmp	r3, #14
 800cacc:	d9f2      	bls.n	800cab4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cace:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d11c      	bne.n	800cb10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cae4:	f043 0302 	orr.w	r3, r3, #2
 800cae8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	639a      	str	r2, [r3, #56]	@ 0x38
 800cb0e:	e00b      	b.n	800cb28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb2e:	461a      	mov	r2, r3
 800cb30:	2300      	movs	r3, #0
 800cb32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d10d      	bne.n	800cb58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d104      	bne.n	800cb4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb44:	2100      	movs	r1, #0
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f968 	bl	800ce1c <USB_SetDevSpeed>
 800cb4c:	e008      	b.n	800cb60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb4e:	2101      	movs	r1, #1
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f963 	bl	800ce1c <USB_SetDevSpeed>
 800cb56:	e003      	b.n	800cb60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb58:	2103      	movs	r1, #3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f95e 	bl	800ce1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb60:	2110      	movs	r1, #16
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f8fa 	bl	800cd5c <USB_FlushTxFifo>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f924 	bl	800cdc0 <USB_FlushRxFifo>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb88:	461a      	mov	r2, r3
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb94:	461a      	mov	r2, r3
 800cb96:	2300      	movs	r3, #0
 800cb98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cba0:	461a      	mov	r2, r3
 800cba2:	2300      	movs	r3, #0
 800cba4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cba6:	2300      	movs	r3, #0
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	e043      	b.n	800cc34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbc2:	d118      	bne.n	800cbf6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	015a      	lsls	r2, r3, #5
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	e013      	b.n	800cc08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbec:	461a      	mov	r2, r3
 800cbee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cbf2:	6013      	str	r3, [r2, #0]
 800cbf4:	e008      	b.n	800cc08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	015a      	lsls	r2, r3, #5
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc02:	461a      	mov	r2, r3
 800cc04:	2300      	movs	r3, #0
 800cc06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc14:	461a      	mov	r2, r3
 800cc16:	2300      	movs	r3, #0
 800cc18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc26:	461a      	mov	r2, r3
 800cc28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	3301      	adds	r3, #1
 800cc32:	613b      	str	r3, [r7, #16]
 800cc34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc38:	461a      	mov	r2, r3
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d3b5      	bcc.n	800cbac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc40:	2300      	movs	r3, #0
 800cc42:	613b      	str	r3, [r7, #16]
 800cc44:	e043      	b.n	800ccce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	015a      	lsls	r2, r3, #5
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc5c:	d118      	bne.n	800cc90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc70:	461a      	mov	r2, r3
 800cc72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	e013      	b.n	800cca2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	015a      	lsls	r2, r3, #5
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	4413      	add	r3, r2
 800cc82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc86:	461a      	mov	r2, r3
 800cc88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	e008      	b.n	800cca2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	015a      	lsls	r2, r3, #5
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4413      	add	r3, r2
 800cc98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	2300      	movs	r3, #0
 800cca0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	015a      	lsls	r2, r3, #5
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4413      	add	r3, r2
 800ccaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccae:	461a      	mov	r2, r3
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ccc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	3301      	adds	r3, #1
 800cccc:	613b      	str	r3, [r7, #16]
 800ccce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d3b5      	bcc.n	800cc46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ccfa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d105      	bne.n	800cd10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	f043 0210 	orr.w	r2, r3, #16
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	699a      	ldr	r2, [r3, #24]
 800cd14:	4b10      	ldr	r3, [pc, #64]	@ (800cd58 <USB_DevInit+0x2c4>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d005      	beq.n	800cd30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	f043 0208 	orr.w	r2, r3, #8
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d107      	bne.n	800cd48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	699b      	ldr	r3, [r3, #24]
 800cd3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd40:	f043 0304 	orr.w	r3, r3, #4
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd54:	b004      	add	sp, #16
 800cd56:	4770      	bx	lr
 800cd58:	803c3800 	.word	0x803c3800

0800cd5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd76:	d901      	bls.n	800cd7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e01b      	b.n	800cdb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	daf2      	bge.n	800cd6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cd84:	2300      	movs	r3, #0
 800cd86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	019b      	lsls	r3, r3, #6
 800cd8c:	f043 0220 	orr.w	r2, r3, #32
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cda0:	d901      	bls.n	800cda6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e006      	b.n	800cdb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	f003 0320 	and.w	r3, r3, #32
 800cdae:	2b20      	cmp	r3, #32
 800cdb0:	d0f0      	beq.n	800cd94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdd8:	d901      	bls.n	800cdde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e018      	b.n	800ce10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	daf2      	bge.n	800cdcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2210      	movs	r2, #16
 800cdee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdfc:	d901      	bls.n	800ce02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e006      	b.n	800ce10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f003 0310 	and.w	r3, r3, #16
 800ce0a:	2b10      	cmp	r3, #16
 800ce0c:	d0f0      	beq.n	800cdf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	68f9      	ldr	r1, [r7, #12]
 800ce38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b087      	sub	sp, #28
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f003 0306 	and.w	r3, r3, #6
 800ce66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d102      	bne.n	800ce74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	75fb      	strb	r3, [r7, #23]
 800ce72:	e00a      	b.n	800ce8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d002      	beq.n	800ce80 <USB_GetDevSpeed+0x32>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b06      	cmp	r3, #6
 800ce7e:	d102      	bne.n	800ce86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ce80:	2302      	movs	r3, #2
 800ce82:	75fb      	strb	r3, [r7, #23]
 800ce84:	e001      	b.n	800ce8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ce86:	230f      	movs	r3, #15
 800ce88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	371c      	adds	r7, #28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	785b      	ldrb	r3, [r3, #1]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d13a      	bne.n	800cf2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceba:	69da      	ldr	r2, [r3, #28]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	f003 030f 	and.w	r3, r3, #15
 800cec4:	2101      	movs	r1, #1
 800cec6:	fa01 f303 	lsl.w	r3, r1, r3
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	68f9      	ldr	r1, [r7, #12]
 800cece:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ced2:	4313      	orrs	r3, r2
 800ced4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	015a      	lsls	r2, r3, #5
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	4413      	add	r3, r2
 800cede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d155      	bne.n	800cf98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	015a      	lsls	r2, r3, #5
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	4413      	add	r3, r2
 800cef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	791b      	ldrb	r3, [r3, #4]
 800cf06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	059b      	lsls	r3, r3, #22
 800cf0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf10:	4313      	orrs	r3, r2
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	0151      	lsls	r1, r2, #5
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	440a      	add	r2, r1
 800cf1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf26:	6013      	str	r3, [r2, #0]
 800cf28:	e036      	b.n	800cf98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf30:	69da      	ldr	r2, [r3, #28]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	f003 030f 	and.w	r3, r3, #15
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf40:	041b      	lsls	r3, r3, #16
 800cf42:	68f9      	ldr	r1, [r7, #12]
 800cf44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d11a      	bne.n	800cf98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	015a      	lsls	r2, r3, #5
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	4413      	add	r3, r2
 800cf6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	791b      	ldrb	r3, [r3, #4]
 800cf7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf7e:	430b      	orrs	r3, r1
 800cf80:	4313      	orrs	r3, r2
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	0151      	lsls	r1, r2, #5
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	440a      	add	r2, r1
 800cf8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
	...

0800cfa8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d161      	bne.n	800d088 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	015a      	lsls	r2, r3, #5
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	4413      	add	r3, r2
 800cfcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cfd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfda:	d11f      	bne.n	800d01c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	015a      	lsls	r2, r3, #5
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	0151      	lsls	r1, r2, #5
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	440a      	add	r2, r1
 800cff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cff6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cffa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	015a      	lsls	r2, r3, #5
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	4413      	add	r3, r2
 800d004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	0151      	lsls	r1, r2, #5
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	440a      	add	r2, r1
 800d012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d016:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d01a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	f003 030f 	and.w	r3, r3, #15
 800d02c:	2101      	movs	r1, #1
 800d02e:	fa01 f303 	lsl.w	r3, r1, r3
 800d032:	b29b      	uxth	r3, r3
 800d034:	43db      	mvns	r3, r3
 800d036:	68f9      	ldr	r1, [r7, #12]
 800d038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d03c:	4013      	ands	r3, r2
 800d03e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d046:	69da      	ldr	r2, [r3, #28]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f003 030f 	and.w	r3, r3, #15
 800d050:	2101      	movs	r1, #1
 800d052:	fa01 f303 	lsl.w	r3, r1, r3
 800d056:	b29b      	uxth	r3, r3
 800d058:	43db      	mvns	r3, r3
 800d05a:	68f9      	ldr	r1, [r7, #12]
 800d05c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d060:	4013      	ands	r3, r2
 800d062:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	0159      	lsls	r1, r3, #5
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	440b      	add	r3, r1
 800d07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d07e:	4619      	mov	r1, r3
 800d080:	4b35      	ldr	r3, [pc, #212]	@ (800d158 <USB_DeactivateEndpoint+0x1b0>)
 800d082:	4013      	ands	r3, r2
 800d084:	600b      	str	r3, [r1, #0]
 800d086:	e060      	b.n	800d14a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	015a      	lsls	r2, r3, #5
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	4413      	add	r3, r2
 800d090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d09a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d09e:	d11f      	bne.n	800d0e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	015a      	lsls	r2, r3, #5
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	0151      	lsls	r1, r2, #5
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	440a      	add	r2, r1
 800d0b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d0be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	015a      	lsls	r2, r3, #5
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	0151      	lsls	r1, r2, #5
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	440a      	add	r2, r1
 800d0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d0de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	f003 030f 	and.w	r3, r3, #15
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f6:	041b      	lsls	r3, r3, #16
 800d0f8:	43db      	mvns	r3, r3
 800d0fa:	68f9      	ldr	r1, [r7, #12]
 800d0fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d100:	4013      	ands	r3, r2
 800d102:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d10a:	69da      	ldr	r2, [r3, #28]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f003 030f 	and.w	r3, r3, #15
 800d114:	2101      	movs	r1, #1
 800d116:	fa01 f303 	lsl.w	r3, r1, r3
 800d11a:	041b      	lsls	r3, r3, #16
 800d11c:	43db      	mvns	r3, r3
 800d11e:	68f9      	ldr	r1, [r7, #12]
 800d120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d124:	4013      	ands	r3, r2
 800d126:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	015a      	lsls	r2, r3, #5
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4413      	add	r3, r2
 800d130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	0159      	lsls	r1, r3, #5
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	440b      	add	r3, r1
 800d13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d142:	4619      	mov	r1, r3
 800d144:	4b05      	ldr	r3, [pc, #20]	@ (800d15c <USB_DeactivateEndpoint+0x1b4>)
 800d146:	4013      	ands	r3, r2
 800d148:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	ec337800 	.word	0xec337800
 800d15c:	eff37800 	.word	0xeff37800

0800d160 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08a      	sub	sp, #40	@ 0x28
 800d164:	af02      	add	r7, sp, #8
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	4613      	mov	r3, r2
 800d16c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	785b      	ldrb	r3, [r3, #1]
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	f040 817f 	bne.w	800d480 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d132      	bne.n	800d1f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	69ba      	ldr	r2, [r7, #24]
 800d19a:	0151      	lsls	r1, r2, #5
 800d19c:	69fa      	ldr	r2, [r7, #28]
 800d19e:	440a      	add	r2, r1
 800d1a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d1a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d1ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	015a      	lsls	r2, r3, #5
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	69ba      	ldr	r2, [r7, #24]
 800d1be:	0151      	lsls	r1, r2, #5
 800d1c0:	69fa      	ldr	r2, [r7, #28]
 800d1c2:	440a      	add	r2, r1
 800d1c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d1cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	015a      	lsls	r2, r3, #5
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	69ba      	ldr	r2, [r7, #24]
 800d1de:	0151      	lsls	r1, r2, #5
 800d1e0:	69fa      	ldr	r2, [r7, #28]
 800d1e2:	440a      	add	r2, r1
 800d1e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1e8:	0cdb      	lsrs	r3, r3, #19
 800d1ea:	04db      	lsls	r3, r3, #19
 800d1ec:	6113      	str	r3, [r2, #16]
 800d1ee:	e097      	b.n	800d320 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	015a      	lsls	r2, r3, #5
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	69ba      	ldr	r2, [r7, #24]
 800d200:	0151      	lsls	r1, r2, #5
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	440a      	add	r2, r1
 800d206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d20a:	0cdb      	lsrs	r3, r3, #19
 800d20c:	04db      	lsls	r3, r3, #19
 800d20e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	015a      	lsls	r2, r3, #5
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	4413      	add	r3, r2
 800d218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	69ba      	ldr	r2, [r7, #24]
 800d220:	0151      	lsls	r1, r2, #5
 800d222:	69fa      	ldr	r2, [r7, #28]
 800d224:	440a      	add	r2, r1
 800d226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d22a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d22e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d232:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d11a      	bne.n	800d270 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	691a      	ldr	r2, [r3, #16]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	429a      	cmp	r2, r3
 800d244:	d903      	bls.n	800d24e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	689a      	ldr	r2, [r3, #8]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	015a      	lsls	r2, r3, #5
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	4413      	add	r3, r2
 800d256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	69ba      	ldr	r2, [r7, #24]
 800d25e:	0151      	lsls	r1, r2, #5
 800d260:	69fa      	ldr	r2, [r7, #28]
 800d262:	440a      	add	r2, r1
 800d264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d26c:	6113      	str	r3, [r2, #16]
 800d26e:	e044      	b.n	800d2fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	691a      	ldr	r2, [r3, #16]
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	4413      	add	r3, r2
 800d27a:	1e5a      	subs	r2, r3, #1
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	fbb2 f3f3 	udiv	r3, r2, r3
 800d284:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	015a      	lsls	r2, r3, #5
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	4413      	add	r3, r2
 800d28e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d292:	691a      	ldr	r2, [r3, #16]
 800d294:	8afb      	ldrh	r3, [r7, #22]
 800d296:	04d9      	lsls	r1, r3, #19
 800d298:	4ba4      	ldr	r3, [pc, #656]	@ (800d52c <USB_EPStartXfer+0x3cc>)
 800d29a:	400b      	ands	r3, r1
 800d29c:	69b9      	ldr	r1, [r7, #24]
 800d29e:	0148      	lsls	r0, r1, #5
 800d2a0:	69f9      	ldr	r1, [r7, #28]
 800d2a2:	4401      	add	r1, r0
 800d2a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	791b      	ldrb	r3, [r3, #4]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d122      	bne.n	800d2fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	69ba      	ldr	r2, [r7, #24]
 800d2c4:	0151      	lsls	r1, r2, #5
 800d2c6:	69fa      	ldr	r2, [r7, #28]
 800d2c8:	440a      	add	r2, r1
 800d2ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d2d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2e0:	691a      	ldr	r2, [r3, #16]
 800d2e2:	8afb      	ldrh	r3, [r7, #22]
 800d2e4:	075b      	lsls	r3, r3, #29
 800d2e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d2ea:	69b9      	ldr	r1, [r7, #24]
 800d2ec:	0148      	lsls	r0, r1, #5
 800d2ee:	69f9      	ldr	r1, [r7, #28]
 800d2f0:	4401      	add	r1, r0
 800d2f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	015a      	lsls	r2, r3, #5
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	4413      	add	r3, r2
 800d302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d306:	691a      	ldr	r2, [r3, #16]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d310:	69b9      	ldr	r1, [r7, #24]
 800d312:	0148      	lsls	r0, r1, #5
 800d314:	69f9      	ldr	r1, [r7, #28]
 800d316:	4401      	add	r1, r0
 800d318:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d31c:	4313      	orrs	r3, r2
 800d31e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d14b      	bne.n	800d3be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d009      	beq.n	800d342 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	015a      	lsls	r2, r3, #5
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	4413      	add	r3, r2
 800d336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d33a:	461a      	mov	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	69db      	ldr	r3, [r3, #28]
 800d340:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	791b      	ldrb	r3, [r3, #4]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d128      	bne.n	800d39c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d356:	2b00      	cmp	r3, #0
 800d358:	d110      	bne.n	800d37c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	015a      	lsls	r2, r3, #5
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	4413      	add	r3, r2
 800d362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	0151      	lsls	r1, r2, #5
 800d36c:	69fa      	ldr	r2, [r7, #28]
 800d36e:	440a      	add	r2, r1
 800d370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	e00f      	b.n	800d39c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	015a      	lsls	r2, r3, #5
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	4413      	add	r3, r2
 800d384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	69ba      	ldr	r2, [r7, #24]
 800d38c:	0151      	lsls	r1, r2, #5
 800d38e:	69fa      	ldr	r2, [r7, #28]
 800d390:	440a      	add	r2, r1
 800d392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d39a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	0151      	lsls	r1, r2, #5
 800d3ae:	69fa      	ldr	r2, [r7, #28]
 800d3b0:	440a      	add	r2, r1
 800d3b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d3ba:	6013      	str	r3, [r2, #0]
 800d3bc:	e166      	b.n	800d68c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	69ba      	ldr	r2, [r7, #24]
 800d3ce:	0151      	lsls	r1, r2, #5
 800d3d0:	69fa      	ldr	r2, [r7, #28]
 800d3d2:	440a      	add	r2, r1
 800d3d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d3dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	791b      	ldrb	r3, [r3, #4]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d015      	beq.n	800d412 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 814e 	beq.w	800d68c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	f003 030f 	and.w	r3, r3, #15
 800d400:	2101      	movs	r1, #1
 800d402:	fa01 f303 	lsl.w	r3, r1, r3
 800d406:	69f9      	ldr	r1, [r7, #28]
 800d408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d40c:	4313      	orrs	r3, r2
 800d40e:	634b      	str	r3, [r1, #52]	@ 0x34
 800d410:	e13c      	b.n	800d68c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d110      	bne.n	800d444 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	0151      	lsls	r1, r2, #5
 800d434:	69fa      	ldr	r2, [r7, #28]
 800d436:	440a      	add	r2, r1
 800d438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d43c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	e00f      	b.n	800d464 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	69ba      	ldr	r2, [r7, #24]
 800d454:	0151      	lsls	r1, r2, #5
 800d456:	69fa      	ldr	r2, [r7, #28]
 800d458:	440a      	add	r2, r1
 800d45a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d45e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d462:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	68d9      	ldr	r1, [r3, #12]
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	781a      	ldrb	r2, [r3, #0]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	b298      	uxth	r0, r3
 800d472:	79fb      	ldrb	r3, [r7, #7]
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	4603      	mov	r3, r0
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 f9b9 	bl	800d7f0 <USB_WritePacket>
 800d47e:	e105      	b.n	800d68c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	015a      	lsls	r2, r3, #5
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	4413      	add	r3, r2
 800d488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	69ba      	ldr	r2, [r7, #24]
 800d490:	0151      	lsls	r1, r2, #5
 800d492:	69fa      	ldr	r2, [r7, #28]
 800d494:	440a      	add	r2, r1
 800d496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d49a:	0cdb      	lsrs	r3, r3, #19
 800d49c:	04db      	lsls	r3, r3, #19
 800d49e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	015a      	lsls	r2, r3, #5
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4ac:	691b      	ldr	r3, [r3, #16]
 800d4ae:	69ba      	ldr	r2, [r7, #24]
 800d4b0:	0151      	lsls	r1, r2, #5
 800d4b2:	69fa      	ldr	r2, [r7, #28]
 800d4b4:	440a      	add	r2, r1
 800d4b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d4be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d4c2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d132      	bne.n	800d530 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	689a      	ldr	r2, [r3, #8]
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	689a      	ldr	r2, [r3, #8]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	015a      	lsls	r2, r3, #5
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4ee:	691a      	ldr	r2, [r3, #16]
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4f8:	69b9      	ldr	r1, [r7, #24]
 800d4fa:	0148      	lsls	r0, r1, #5
 800d4fc:	69f9      	ldr	r1, [r7, #28]
 800d4fe:	4401      	add	r1, r0
 800d500:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d504:	4313      	orrs	r3, r2
 800d506:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	69ba      	ldr	r2, [r7, #24]
 800d518:	0151      	lsls	r1, r2, #5
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	440a      	add	r2, r1
 800d51e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d522:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d526:	6113      	str	r3, [r2, #16]
 800d528:	e062      	b.n	800d5f0 <USB_EPStartXfer+0x490>
 800d52a:	bf00      	nop
 800d52c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d123      	bne.n	800d580 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	015a      	lsls	r2, r3, #5
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	4413      	add	r3, r2
 800d540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d544:	691a      	ldr	r2, [r3, #16]
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d54e:	69b9      	ldr	r1, [r7, #24]
 800d550:	0148      	lsls	r0, r1, #5
 800d552:	69f9      	ldr	r1, [r7, #28]
 800d554:	4401      	add	r1, r0
 800d556:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d55a:	4313      	orrs	r3, r2
 800d55c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	4413      	add	r3, r2
 800d566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	69ba      	ldr	r2, [r7, #24]
 800d56e:	0151      	lsls	r1, r2, #5
 800d570:	69fa      	ldr	r2, [r7, #28]
 800d572:	440a      	add	r2, r1
 800d574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d57c:	6113      	str	r3, [r2, #16]
 800d57e:	e037      	b.n	800d5f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	691a      	ldr	r2, [r3, #16]
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	4413      	add	r3, r2
 800d58a:	1e5a      	subs	r2, r3, #1
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	fbb2 f3f3 	udiv	r3, r2, r3
 800d594:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	8afa      	ldrh	r2, [r7, #22]
 800d59c:	fb03 f202 	mul.w	r2, r3, r2
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	015a      	lsls	r2, r3, #5
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b0:	691a      	ldr	r2, [r3, #16]
 800d5b2:	8afb      	ldrh	r3, [r7, #22]
 800d5b4:	04d9      	lsls	r1, r3, #19
 800d5b6:	4b38      	ldr	r3, [pc, #224]	@ (800d698 <USB_EPStartXfer+0x538>)
 800d5b8:	400b      	ands	r3, r1
 800d5ba:	69b9      	ldr	r1, [r7, #24]
 800d5bc:	0148      	lsls	r0, r1, #5
 800d5be:	69f9      	ldr	r1, [r7, #28]
 800d5c0:	4401      	add	r1, r0
 800d5c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	015a      	lsls	r2, r3, #5
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5d6:	691a      	ldr	r2, [r3, #16]
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	6a1b      	ldr	r3, [r3, #32]
 800d5dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5e0:	69b9      	ldr	r1, [r7, #24]
 800d5e2:	0148      	lsls	r0, r1, #5
 800d5e4:	69f9      	ldr	r1, [r7, #28]
 800d5e6:	4401      	add	r1, r0
 800d5e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d10d      	bne.n	800d612 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	68d9      	ldr	r1, [r3, #12]
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d60e:	460a      	mov	r2, r1
 800d610:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	791b      	ldrb	r3, [r3, #4]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d128      	bne.n	800d66c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d626:	2b00      	cmp	r3, #0
 800d628:	d110      	bne.n	800d64c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	015a      	lsls	r2, r3, #5
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	4413      	add	r3, r2
 800d632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	0151      	lsls	r1, r2, #5
 800d63c:	69fa      	ldr	r2, [r7, #28]
 800d63e:	440a      	add	r2, r1
 800d640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d644:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	e00f      	b.n	800d66c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	015a      	lsls	r2, r3, #5
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	4413      	add	r3, r2
 800d654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	69ba      	ldr	r2, [r7, #24]
 800d65c:	0151      	lsls	r1, r2, #5
 800d65e:	69fa      	ldr	r2, [r7, #28]
 800d660:	440a      	add	r2, r1
 800d662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d66a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	015a      	lsls	r2, r3, #5
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	4413      	add	r3, r2
 800d674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	69ba      	ldr	r2, [r7, #24]
 800d67c:	0151      	lsls	r1, r2, #5
 800d67e:	69fa      	ldr	r2, [r7, #28]
 800d680:	440a      	add	r2, r1
 800d682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d686:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d68a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3720      	adds	r7, #32
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	1ff80000 	.word	0x1ff80000

0800d69c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	785b      	ldrb	r3, [r3, #1]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d14a      	bne.n	800d750 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6d2:	f040 8086 	bne.w	800d7e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	7812      	ldrb	r2, [r2, #0]
 800d6ea:	0151      	lsls	r1, r2, #5
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	440a      	add	r2, r1
 800d6f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d6f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	015a      	lsls	r2, r3, #5
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	4413      	add	r3, r2
 800d704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	683a      	ldr	r2, [r7, #0]
 800d70c:	7812      	ldrb	r2, [r2, #0]
 800d70e:	0151      	lsls	r1, r2, #5
 800d710:	693a      	ldr	r2, [r7, #16]
 800d712:	440a      	add	r2, r1
 800d714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d718:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d71c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3301      	adds	r3, #1
 800d722:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d902      	bls.n	800d734 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	75fb      	strb	r3, [r7, #23]
          break;
 800d732:	e056      	b.n	800d7e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	015a      	lsls	r2, r3, #5
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	4413      	add	r3, r2
 800d73e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d74c:	d0e7      	beq.n	800d71e <USB_EPStopXfer+0x82>
 800d74e:	e048      	b.n	800d7e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	015a      	lsls	r2, r3, #5
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	4413      	add	r3, r2
 800d75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d768:	d13b      	bne.n	800d7e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	015a      	lsls	r2, r3, #5
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	4413      	add	r3, r2
 800d774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	7812      	ldrb	r2, [r2, #0]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	693a      	ldr	r2, [r7, #16]
 800d782:	440a      	add	r2, r1
 800d784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d78c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	4413      	add	r3, r2
 800d798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	7812      	ldrb	r2, [r2, #0]
 800d7a2:	0151      	lsls	r1, r2, #5
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	440a      	add	r2, r1
 800d7a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d7b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d902      	bls.n	800d7c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	75fb      	strb	r3, [r7, #23]
          break;
 800d7c6:	e00c      	b.n	800d7e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	015a      	lsls	r2, r3, #5
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7e0:	d0e7      	beq.n	800d7b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	371c      	adds	r7, #28
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b089      	sub	sp, #36	@ 0x24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	460b      	mov	r3, r1
 800d800:	71fb      	strb	r3, [r7, #7]
 800d802:	4613      	mov	r3, r2
 800d804:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d80e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d812:	2b00      	cmp	r3, #0
 800d814:	d123      	bne.n	800d85e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d816:	88bb      	ldrh	r3, [r7, #4]
 800d818:	3303      	adds	r3, #3
 800d81a:	089b      	lsrs	r3, r3, #2
 800d81c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d81e:	2300      	movs	r3, #0
 800d820:	61bb      	str	r3, [r7, #24]
 800d822:	e018      	b.n	800d856 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d824:	79fb      	ldrb	r3, [r7, #7]
 800d826:	031a      	lsls	r2, r3, #12
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d830:	461a      	mov	r2, r3
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	3301      	adds	r3, #1
 800d83c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	3301      	adds	r3, #1
 800d842:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	3301      	adds	r3, #1
 800d848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	3301      	adds	r3, #1
 800d84e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	3301      	adds	r3, #1
 800d854:	61bb      	str	r3, [r7, #24]
 800d856:	69ba      	ldr	r2, [r7, #24]
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d3e2      	bcc.n	800d824 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3724      	adds	r7, #36	@ 0x24
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b08b      	sub	sp, #44	@ 0x2c
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	4613      	mov	r3, r2
 800d878:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d882:	88fb      	ldrh	r3, [r7, #6]
 800d884:	089b      	lsrs	r3, r3, #2
 800d886:	b29b      	uxth	r3, r3
 800d888:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d88a:	88fb      	ldrh	r3, [r7, #6]
 800d88c:	f003 0303 	and.w	r3, r3, #3
 800d890:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d892:	2300      	movs	r3, #0
 800d894:	623b      	str	r3, [r7, #32]
 800d896:	e014      	b.n	800d8c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	623b      	str	r3, [r7, #32]
 800d8c2:	6a3a      	ldr	r2, [r7, #32]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d3e6      	bcc.n	800d898 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8ca:	8bfb      	ldrh	r3, [r7, #30]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d01e      	beq.n	800d90e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8da:	461a      	mov	r2, r3
 800d8dc:	f107 0310 	add.w	r3, r7, #16
 800d8e0:	6812      	ldr	r2, [r2, #0]
 800d8e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	701a      	strb	r2, [r3, #0]
      i++;
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	623b      	str	r3, [r7, #32]
      pDest++;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	3301      	adds	r3, #1
 800d900:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d902:	8bfb      	ldrh	r3, [r7, #30]
 800d904:	3b01      	subs	r3, #1
 800d906:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d908:	8bfb      	ldrh	r3, [r7, #30]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1ea      	bne.n	800d8e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d910:	4618      	mov	r0, r3
 800d912:	372c      	adds	r7, #44	@ 0x2c
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	785b      	ldrb	r3, [r3, #1]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d12c      	bne.n	800d992 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	015a      	lsls	r2, r3, #5
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	4413      	add	r3, r2
 800d940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	db12      	blt.n	800d970 <USB_EPSetStall+0x54>
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00f      	beq.n	800d970 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	015a      	lsls	r2, r3, #5
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	4413      	add	r3, r2
 800d958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	0151      	lsls	r1, r2, #5
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	440a      	add	r2, r1
 800d966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d96a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d96e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	0151      	lsls	r1, r2, #5
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	440a      	add	r2, r1
 800d986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d98a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	e02b      	b.n	800d9ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	db12      	blt.n	800d9ca <USB_EPSetStall+0xae>
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00f      	beq.n	800d9ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	015a      	lsls	r2, r3, #5
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	0151      	lsls	r1, r2, #5
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	440a      	add	r2, r1
 800d9c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d9c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	015a      	lsls	r2, r3, #5
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	0151      	lsls	r1, r2, #5
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	440a      	add	r2, r1
 800d9e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d9e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	785b      	ldrb	r3, [r3, #1]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d128      	bne.n	800da66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	015a      	lsls	r2, r3, #5
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	4413      	add	r3, r2
 800da1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	0151      	lsls	r1, r2, #5
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	440a      	add	r2, r1
 800da2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	791b      	ldrb	r3, [r3, #4]
 800da38:	2b03      	cmp	r3, #3
 800da3a:	d003      	beq.n	800da44 <USB_EPClearStall+0x4c>
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	791b      	ldrb	r3, [r3, #4]
 800da40:	2b02      	cmp	r3, #2
 800da42:	d138      	bne.n	800dab6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	0151      	lsls	r1, r2, #5
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	440a      	add	r2, r1
 800da5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da62:	6013      	str	r3, [r2, #0]
 800da64:	e027      	b.n	800dab6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	0151      	lsls	r1, r2, #5
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	440a      	add	r2, r1
 800da7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	791b      	ldrb	r3, [r3, #4]
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d003      	beq.n	800da96 <USB_EPClearStall+0x9e>
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	791b      	ldrb	r3, [r3, #4]
 800da92:	2b02      	cmp	r3, #2
 800da94:	d10f      	bne.n	800dab6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	015a      	lsls	r2, r3, #5
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	4413      	add	r3, r2
 800da9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	0151      	lsls	r1, r2, #5
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	440a      	add	r2, r1
 800daac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dab4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dae2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dae6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	78fb      	ldrb	r3, [r7, #3]
 800daf2:	011b      	lsls	r3, r3, #4
 800daf4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800daf8:	68f9      	ldr	r1, [r7, #12]
 800dafa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dafe:	4313      	orrs	r3, r2
 800db00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db2a:	f023 0303 	bic.w	r3, r3, #3
 800db2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db3e:	f023 0302 	bic.w	r3, r3, #2
 800db42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800db52:	b480      	push	{r7}
 800db54:	b085      	sub	sp, #20
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db6c:	f023 0303 	bic.w	r3, r3, #3
 800db70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db80:	f043 0302 	orr.w	r3, r3, #2
 800db84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4013      	ands	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbac:	68fb      	ldr	r3, [r7, #12]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b085      	sub	sp, #20
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbd6:	69db      	ldr	r3, [r3, #28]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	4013      	ands	r3, r2
 800dbdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	0c1b      	lsrs	r3, r3, #16
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b085      	sub	sp, #20
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc0a:	69db      	ldr	r3, [r3, #28]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	4013      	ands	r3, r2
 800dc10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	b29b      	uxth	r3, r3
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3714      	adds	r7, #20
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc22:	b480      	push	{r7}
 800dc24:	b085      	sub	sp, #20
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc32:	78fb      	ldrb	r3, [r7, #3]
 800dc34:	015a      	lsls	r2, r3, #5
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	4413      	add	r3, r2
 800dc3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc48:	695b      	ldr	r3, [r3, #20]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc50:	68bb      	ldr	r3, [r7, #8]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b087      	sub	sp, #28
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dc82:	78fb      	ldrb	r3, [r7, #3]
 800dc84:	f003 030f 	and.w	r3, r3, #15
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc8e:	01db      	lsls	r3, r3, #7
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dc98:	78fb      	ldrb	r3, [r7, #3]
 800dc9a:	015a      	lsls	r2, r3, #5
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	4413      	add	r3, r2
 800dca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	4013      	ands	r3, r2
 800dcaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dcac:	68bb      	ldr	r3, [r7, #8]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	371c      	adds	r7, #28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	f003 0301 	and.w	r3, r3, #1
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b085      	sub	sp, #20
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcf0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800dcf4:	f023 0307 	bic.w	r3, r3, #7
 800dcf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b087      	sub	sp, #28
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	460b      	mov	r3, r1
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	333c      	adds	r3, #60	@ 0x3c
 800dd32:	3304      	adds	r3, #4
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	4a26      	ldr	r2, [pc, #152]	@ (800ddd4 <USB_EP0_OutStart+0xb8>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d90a      	bls.n	800dd56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd50:	d101      	bne.n	800dd56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	e037      	b.n	800ddc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	2300      	movs	r3, #0
 800dd60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd84:	f043 0318 	orr.w	r3, r3, #24
 800dd88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	697a      	ldr	r2, [r7, #20]
 800dd94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800dd9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dd9e:	7afb      	ldrb	r3, [r7, #11]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d10f      	bne.n	800ddc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddaa:	461a      	mov	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ddbe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ddc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	371c      	adds	r7, #28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	4f54300a 	.word	0x4f54300a

0800ddd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3301      	adds	r3, #1
 800dde8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ddf0:	d901      	bls.n	800ddf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ddf2:	2303      	movs	r3, #3
 800ddf4:	e01b      	b.n	800de2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	daf2      	bge.n	800dde4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ddfe:	2300      	movs	r3, #0
 800de00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	f043 0201 	orr.w	r2, r3, #1
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3301      	adds	r3, #1
 800de12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de1a:	d901      	bls.n	800de20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de1c:	2303      	movs	r3, #3
 800de1e:	e006      	b.n	800de2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d0f0      	beq.n	800de0e <USB_CoreReset+0x36>

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
	...

0800de3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800de4c:	f002 fd00 	bl	8010850 <USBD_static_malloc>
 800de50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d109      	bne.n	800de6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	32b0      	adds	r2, #176	@ 0xb0
 800de62:	2100      	movs	r1, #0
 800de64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800de68:	2302      	movs	r3, #2
 800de6a:	e0d4      	b.n	800e016 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800de6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800de70:	2100      	movs	r1, #0
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f002 fd52 	bl	801091c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	32b0      	adds	r2, #176	@ 0xb0
 800de82:	68f9      	ldr	r1, [r7, #12]
 800de84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	32b0      	adds	r2, #176	@ 0xb0
 800de92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	7c1b      	ldrb	r3, [r3, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d138      	bne.n	800df16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dea4:	4b5e      	ldr	r3, [pc, #376]	@ (800e020 <USBD_CDC_Init+0x1e4>)
 800dea6:	7819      	ldrb	r1, [r3, #0]
 800dea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800deac:	2202      	movs	r2, #2
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f002 fbab 	bl	801060a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800deb4:	4b5a      	ldr	r3, [pc, #360]	@ (800e020 <USBD_CDC_Init+0x1e4>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 020f 	and.w	r2, r3, #15
 800debc:	6879      	ldr	r1, [r7, #4]
 800debe:	4613      	mov	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4413      	add	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	440b      	add	r3, r1
 800dec8:	3324      	adds	r3, #36	@ 0x24
 800deca:	2201      	movs	r2, #1
 800decc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dece:	4b55      	ldr	r3, [pc, #340]	@ (800e024 <USBD_CDC_Init+0x1e8>)
 800ded0:	7819      	ldrb	r1, [r3, #0]
 800ded2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ded6:	2202      	movs	r2, #2
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f002 fb96 	bl	801060a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dede:	4b51      	ldr	r3, [pc, #324]	@ (800e024 <USBD_CDC_Init+0x1e8>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 020f 	and.w	r2, r3, #15
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	4613      	mov	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	440b      	add	r3, r1
 800def2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800def6:	2201      	movs	r2, #1
 800def8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800defa:	4b4b      	ldr	r3, [pc, #300]	@ (800e028 <USBD_CDC_Init+0x1ec>)
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	f003 020f 	and.w	r2, r3, #15
 800df02:	6879      	ldr	r1, [r7, #4]
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	440b      	add	r3, r1
 800df0e:	3326      	adds	r3, #38	@ 0x26
 800df10:	2210      	movs	r2, #16
 800df12:	801a      	strh	r2, [r3, #0]
 800df14:	e035      	b.n	800df82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df16:	4b42      	ldr	r3, [pc, #264]	@ (800e020 <USBD_CDC_Init+0x1e4>)
 800df18:	7819      	ldrb	r1, [r3, #0]
 800df1a:	2340      	movs	r3, #64	@ 0x40
 800df1c:	2202      	movs	r2, #2
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f002 fb73 	bl	801060a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df24:	4b3e      	ldr	r3, [pc, #248]	@ (800e020 <USBD_CDC_Init+0x1e4>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	f003 020f 	and.w	r2, r3, #15
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	4613      	mov	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	440b      	add	r3, r1
 800df38:	3324      	adds	r3, #36	@ 0x24
 800df3a:	2201      	movs	r2, #1
 800df3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df3e:	4b39      	ldr	r3, [pc, #228]	@ (800e024 <USBD_CDC_Init+0x1e8>)
 800df40:	7819      	ldrb	r1, [r3, #0]
 800df42:	2340      	movs	r3, #64	@ 0x40
 800df44:	2202      	movs	r2, #2
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f002 fb5f 	bl	801060a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df4c:	4b35      	ldr	r3, [pc, #212]	@ (800e024 <USBD_CDC_Init+0x1e8>)
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	f003 020f 	and.w	r2, r3, #15
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	440b      	add	r3, r1
 800df60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df64:	2201      	movs	r2, #1
 800df66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df68:	4b2f      	ldr	r3, [pc, #188]	@ (800e028 <USBD_CDC_Init+0x1ec>)
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	f003 020f 	and.w	r2, r3, #15
 800df70:	6879      	ldr	r1, [r7, #4]
 800df72:	4613      	mov	r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	440b      	add	r3, r1
 800df7c:	3326      	adds	r3, #38	@ 0x26
 800df7e:	2210      	movs	r2, #16
 800df80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df82:	4b29      	ldr	r3, [pc, #164]	@ (800e028 <USBD_CDC_Init+0x1ec>)
 800df84:	7819      	ldrb	r1, [r3, #0]
 800df86:	2308      	movs	r3, #8
 800df88:	2203      	movs	r2, #3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f002 fb3d 	bl	801060a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df90:	4b25      	ldr	r3, [pc, #148]	@ (800e028 <USBD_CDC_Init+0x1ec>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	f003 020f 	and.w	r2, r3, #15
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	440b      	add	r3, r1
 800dfa4:	3324      	adds	r3, #36	@ 0x24
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	33b0      	adds	r3, #176	@ 0xb0
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	4413      	add	r3, r2
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d101      	bne.n	800dfe4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	e018      	b.n	800e016 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7c1b      	ldrb	r3, [r3, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d10a      	bne.n	800e002 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfec:	4b0d      	ldr	r3, [pc, #52]	@ (800e024 <USBD_CDC_Init+0x1e8>)
 800dfee:	7819      	ldrb	r1, [r3, #0]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dff6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f002 fbf4 	bl	80107e8 <USBD_LL_PrepareReceive>
 800e000:	e008      	b.n	800e014 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e002:	4b08      	ldr	r3, [pc, #32]	@ (800e024 <USBD_CDC_Init+0x1e8>)
 800e004:	7819      	ldrb	r1, [r3, #0]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e00c:	2340      	movs	r3, #64	@ 0x40
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f002 fbea 	bl	80107e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	200000a3 	.word	0x200000a3
 800e024:	200000a4 	.word	0x200000a4
 800e028:	200000a5 	.word	0x200000a5

0800e02c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e038:	4b3a      	ldr	r3, [pc, #232]	@ (800e124 <USBD_CDC_DeInit+0xf8>)
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	4619      	mov	r1, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f002 fb09 	bl	8010656 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e044:	4b37      	ldr	r3, [pc, #220]	@ (800e124 <USBD_CDC_DeInit+0xf8>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	f003 020f 	and.w	r2, r3, #15
 800e04c:	6879      	ldr	r1, [r7, #4]
 800e04e:	4613      	mov	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4413      	add	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	440b      	add	r3, r1
 800e058:	3324      	adds	r3, #36	@ 0x24
 800e05a:	2200      	movs	r2, #0
 800e05c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e05e:	4b32      	ldr	r3, [pc, #200]	@ (800e128 <USBD_CDC_DeInit+0xfc>)
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	4619      	mov	r1, r3
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f002 faf6 	bl	8010656 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e06a:	4b2f      	ldr	r3, [pc, #188]	@ (800e128 <USBD_CDC_DeInit+0xfc>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	f003 020f 	and.w	r2, r3, #15
 800e072:	6879      	ldr	r1, [r7, #4]
 800e074:	4613      	mov	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4413      	add	r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	440b      	add	r3, r1
 800e07e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e082:	2200      	movs	r2, #0
 800e084:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e086:	4b29      	ldr	r3, [pc, #164]	@ (800e12c <USBD_CDC_DeInit+0x100>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f002 fae2 	bl	8010656 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e092:	4b26      	ldr	r3, [pc, #152]	@ (800e12c <USBD_CDC_DeInit+0x100>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	f003 020f 	and.w	r2, r3, #15
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	4613      	mov	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4413      	add	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	440b      	add	r3, r1
 800e0a6:	3324      	adds	r3, #36	@ 0x24
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e0ac:	4b1f      	ldr	r3, [pc, #124]	@ (800e12c <USBD_CDC_DeInit+0x100>)
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	f003 020f 	and.w	r2, r3, #15
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	440b      	add	r3, r1
 800e0c0:	3326      	adds	r3, #38	@ 0x26
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	32b0      	adds	r2, #176	@ 0xb0
 800e0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d01f      	beq.n	800e118 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	33b0      	adds	r3, #176	@ 0xb0
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	32b0      	adds	r2, #176	@ 0xb0
 800e0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fbb6 	bl	801086c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	32b0      	adds	r2, #176	@ 0xb0
 800e10a:	2100      	movs	r1, #0
 800e10c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	200000a3 	.word	0x200000a3
 800e128:	200000a4 	.word	0x200000a4
 800e12c:	200000a5 	.word	0x200000a5

0800e130 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	32b0      	adds	r2, #176	@ 0xb0
 800e144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e148:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e14a:	2300      	movs	r3, #0
 800e14c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e14e:	2300      	movs	r3, #0
 800e150:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e152:	2300      	movs	r3, #0
 800e154:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d101      	bne.n	800e160 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e15c:	2303      	movs	r3, #3
 800e15e:	e0bf      	b.n	800e2e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d050      	beq.n	800e20e <USBD_CDC_Setup+0xde>
 800e16c:	2b20      	cmp	r3, #32
 800e16e:	f040 80af 	bne.w	800e2d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	88db      	ldrh	r3, [r3, #6]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d03a      	beq.n	800e1f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b25b      	sxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	da1b      	bge.n	800e1bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	33b0      	adds	r3, #176	@ 0xb0
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	683a      	ldr	r2, [r7, #0]
 800e198:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e19a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	88d2      	ldrh	r2, [r2, #6]
 800e1a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	88db      	ldrh	r3, [r3, #6]
 800e1a6:	2b07      	cmp	r3, #7
 800e1a8:	bf28      	it	cs
 800e1aa:	2307      	movcs	r3, #7
 800e1ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	89fa      	ldrh	r2, [r7, #14]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 fd93 	bl	800fce0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e1ba:	e090      	b.n	800e2de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	785a      	ldrb	r2, [r3, #1]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	88db      	ldrh	r3, [r3, #6]
 800e1ca:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1cc:	d803      	bhi.n	800e1d6 <USBD_CDC_Setup+0xa6>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	e000      	b.n	800e1d8 <USBD_CDC_Setup+0xa8>
 800e1d6:	2240      	movs	r2, #64	@ 0x40
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e1de:	6939      	ldr	r1, [r7, #16]
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f001 fda5 	bl	800fd38 <USBD_CtlPrepareRx>
      break;
 800e1ee:	e076      	b.n	800e2de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	33b0      	adds	r3, #176	@ 0xb0
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	683a      	ldr	r2, [r7, #0]
 800e204:	7850      	ldrb	r0, [r2, #1]
 800e206:	2200      	movs	r2, #0
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	4798      	blx	r3
      break;
 800e20c:	e067      	b.n	800e2de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	785b      	ldrb	r3, [r3, #1]
 800e212:	2b0b      	cmp	r3, #11
 800e214:	d851      	bhi.n	800e2ba <USBD_CDC_Setup+0x18a>
 800e216:	a201      	add	r2, pc, #4	@ (adr r2, 800e21c <USBD_CDC_Setup+0xec>)
 800e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21c:	0800e24d 	.word	0x0800e24d
 800e220:	0800e2c9 	.word	0x0800e2c9
 800e224:	0800e2bb 	.word	0x0800e2bb
 800e228:	0800e2bb 	.word	0x0800e2bb
 800e22c:	0800e2bb 	.word	0x0800e2bb
 800e230:	0800e2bb 	.word	0x0800e2bb
 800e234:	0800e2bb 	.word	0x0800e2bb
 800e238:	0800e2bb 	.word	0x0800e2bb
 800e23c:	0800e2bb 	.word	0x0800e2bb
 800e240:	0800e2bb 	.word	0x0800e2bb
 800e244:	0800e277 	.word	0x0800e277
 800e248:	0800e2a1 	.word	0x0800e2a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e252:	b2db      	uxtb	r3, r3
 800e254:	2b03      	cmp	r3, #3
 800e256:	d107      	bne.n	800e268 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e258:	f107 030a 	add.w	r3, r7, #10
 800e25c:	2202      	movs	r2, #2
 800e25e:	4619      	mov	r1, r3
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f001 fd3d 	bl	800fce0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e266:	e032      	b.n	800e2ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e268:	6839      	ldr	r1, [r7, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fcbb 	bl	800fbe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e270:	2303      	movs	r3, #3
 800e272:	75fb      	strb	r3, [r7, #23]
          break;
 800e274:	e02b      	b.n	800e2ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d107      	bne.n	800e292 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e282:	f107 030d 	add.w	r3, r7, #13
 800e286:	2201      	movs	r2, #1
 800e288:	4619      	mov	r1, r3
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f001 fd28 	bl	800fce0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e290:	e01d      	b.n	800e2ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f001 fca6 	bl	800fbe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e29a:	2303      	movs	r3, #3
 800e29c:	75fb      	strb	r3, [r7, #23]
          break;
 800e29e:	e016      	b.n	800e2ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	2b03      	cmp	r3, #3
 800e2aa:	d00f      	beq.n	800e2cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f001 fc99 	bl	800fbe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2b8:	e008      	b.n	800e2cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f001 fc92 	bl	800fbe6 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2c2:	2303      	movs	r3, #3
 800e2c4:	75fb      	strb	r3, [r7, #23]
          break;
 800e2c6:	e002      	b.n	800e2ce <USBD_CDC_Setup+0x19e>
          break;
 800e2c8:	bf00      	nop
 800e2ca:	e008      	b.n	800e2de <USBD_CDC_Setup+0x1ae>
          break;
 800e2cc:	bf00      	nop
      }
      break;
 800e2ce:	e006      	b.n	800e2de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f001 fc87 	bl	800fbe6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	75fb      	strb	r3, [r7, #23]
      break;
 800e2dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	32b0      	adds	r2, #176	@ 0xb0
 800e306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e30e:	2303      	movs	r3, #3
 800e310:	e065      	b.n	800e3de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	32b0      	adds	r2, #176	@ 0xb0
 800e31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e320:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e322:	78fb      	ldrb	r3, [r7, #3]
 800e324:	f003 020f 	and.w	r2, r3, #15
 800e328:	6879      	ldr	r1, [r7, #4]
 800e32a:	4613      	mov	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	440b      	add	r3, r1
 800e334:	3318      	adds	r3, #24
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d02f      	beq.n	800e39c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	f003 020f 	and.w	r2, r3, #15
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	4613      	mov	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	440b      	add	r3, r1
 800e34e:	3318      	adds	r3, #24
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	78fb      	ldrb	r3, [r7, #3]
 800e354:	f003 010f 	and.w	r1, r3, #15
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	460b      	mov	r3, r1
 800e35c:	00db      	lsls	r3, r3, #3
 800e35e:	440b      	add	r3, r1
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4403      	add	r3, r0
 800e364:	331c      	adds	r3, #28
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	fbb2 f1f3 	udiv	r1, r2, r3
 800e36c:	fb01 f303 	mul.w	r3, r1, r3
 800e370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e372:	2b00      	cmp	r3, #0
 800e374:	d112      	bne.n	800e39c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	f003 020f 	and.w	r2, r3, #15
 800e37c:	6879      	ldr	r1, [r7, #4]
 800e37e:	4613      	mov	r3, r2
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	4413      	add	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	440b      	add	r3, r1
 800e388:	3318      	adds	r3, #24
 800e38a:	2200      	movs	r2, #0
 800e38c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e38e:	78f9      	ldrb	r1, [r7, #3]
 800e390:	2300      	movs	r3, #0
 800e392:	2200      	movs	r2, #0
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f002 fa06 	bl	80107a6 <USBD_LL_Transmit>
 800e39a:	e01f      	b.n	800e3dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	33b0      	adds	r3, #176	@ 0xb0
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d010      	beq.n	800e3dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	33b0      	adds	r3, #176	@ 0xb0
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e3d8:	78fa      	ldrb	r2, [r7, #3]
 800e3da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b084      	sub	sp, #16
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	32b0      	adds	r2, #176	@ 0xb0
 800e3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	32b0      	adds	r2, #176	@ 0xb0
 800e40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d101      	bne.n	800e418 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e414:	2303      	movs	r3, #3
 800e416:	e01a      	b.n	800e44e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e418:	78fb      	ldrb	r3, [r7, #3]
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f002 fa04 	bl	801082a <USBD_LL_GetRxDataSize>
 800e422:	4602      	mov	r2, r0
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	33b0      	adds	r3, #176	@ 0xb0
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4413      	add	r3, r2
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e448:	4611      	mov	r1, r2
 800e44a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	32b0      	adds	r2, #176	@ 0xb0
 800e468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e46c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e474:	2303      	movs	r3, #3
 800e476:	e024      	b.n	800e4c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	33b0      	adds	r3, #176	@ 0xb0
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d019      	beq.n	800e4c0 <USBD_CDC_EP0_RxReady+0x6a>
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e492:	2bff      	cmp	r3, #255	@ 0xff
 800e494:	d014      	beq.n	800e4c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	33b0      	adds	r3, #176	@ 0xb0
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e4ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	22ff      	movs	r2, #255	@ 0xff
 800e4bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
	...

0800e4cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4d4:	2182      	movs	r1, #130	@ 0x82
 800e4d6:	4818      	ldr	r0, [pc, #96]	@ (800e538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4d8:	f000 fd4f 	bl	800ef7a <USBD_GetEpDesc>
 800e4dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4de:	2101      	movs	r1, #1
 800e4e0:	4815      	ldr	r0, [pc, #84]	@ (800e538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4e2:	f000 fd4a 	bl	800ef7a <USBD_GetEpDesc>
 800e4e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4e8:	2181      	movs	r1, #129	@ 0x81
 800e4ea:	4813      	ldr	r0, [pc, #76]	@ (800e538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4ec:	f000 fd45 	bl	800ef7a <USBD_GetEpDesc>
 800e4f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	2210      	movs	r2, #16
 800e4fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d006      	beq.n	800e512 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	2200      	movs	r2, #0
 800e508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e50c:	711a      	strb	r2, [r3, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d006      	beq.n	800e526 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e520:	711a      	strb	r2, [r3, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2243      	movs	r2, #67	@ 0x43
 800e52a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e52c:	4b02      	ldr	r3, [pc, #8]	@ (800e538 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	20000060 	.word	0x20000060

0800e53c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e544:	2182      	movs	r1, #130	@ 0x82
 800e546:	4818      	ldr	r0, [pc, #96]	@ (800e5a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e548:	f000 fd17 	bl	800ef7a <USBD_GetEpDesc>
 800e54c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e54e:	2101      	movs	r1, #1
 800e550:	4815      	ldr	r0, [pc, #84]	@ (800e5a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e552:	f000 fd12 	bl	800ef7a <USBD_GetEpDesc>
 800e556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e558:	2181      	movs	r1, #129	@ 0x81
 800e55a:	4813      	ldr	r0, [pc, #76]	@ (800e5a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e55c:	f000 fd0d 	bl	800ef7a <USBD_GetEpDesc>
 800e560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	2210      	movs	r2, #16
 800e56c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d006      	beq.n	800e582 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	2200      	movs	r2, #0
 800e578:	711a      	strb	r2, [r3, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f042 0202 	orr.w	r2, r2, #2
 800e580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d006      	beq.n	800e596 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	711a      	strb	r2, [r3, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	f042 0202 	orr.w	r2, r2, #2
 800e594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2243      	movs	r2, #67	@ 0x43
 800e59a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e59c:	4b02      	ldr	r3, [pc, #8]	@ (800e5a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20000060 	.word	0x20000060

0800e5ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b086      	sub	sp, #24
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5b4:	2182      	movs	r1, #130	@ 0x82
 800e5b6:	4818      	ldr	r0, [pc, #96]	@ (800e618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5b8:	f000 fcdf 	bl	800ef7a <USBD_GetEpDesc>
 800e5bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5be:	2101      	movs	r1, #1
 800e5c0:	4815      	ldr	r0, [pc, #84]	@ (800e618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5c2:	f000 fcda 	bl	800ef7a <USBD_GetEpDesc>
 800e5c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5c8:	2181      	movs	r1, #129	@ 0x81
 800e5ca:	4813      	ldr	r0, [pc, #76]	@ (800e618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5cc:	f000 fcd5 	bl	800ef7a <USBD_GetEpDesc>
 800e5d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	2210      	movs	r2, #16
 800e5dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d006      	beq.n	800e5f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5ec:	711a      	strb	r2, [r3, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d006      	beq.n	800e606 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e600:	711a      	strb	r2, [r3, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2243      	movs	r2, #67	@ 0x43
 800e60a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e60c:	4b02      	ldr	r3, [pc, #8]	@ (800e618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20000060 	.word	0x20000060

0800e61c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	220a      	movs	r2, #10
 800e628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e62a:	4b03      	ldr	r3, [pc, #12]	@ (800e638 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	2000001c 	.word	0x2000001c

0800e63c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e009      	b.n	800e664 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	33b0      	adds	r3, #176	@ 0xb0
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4413      	add	r3, r2
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e662:	2300      	movs	r3, #0
}
 800e664:	4618      	mov	r0, r3
 800e666:	370c      	adds	r7, #12
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr

0800e670 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e670:	b480      	push	{r7}
 800e672:	b087      	sub	sp, #28
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	32b0      	adds	r2, #176	@ 0xb0
 800e686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d101      	bne.n	800e696 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e692:	2303      	movs	r3, #3
 800e694:	e008      	b.n	800e6a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	371c      	adds	r7, #28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	32b0      	adds	r2, #176	@ 0xb0
 800e6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	e004      	b.n	800e6e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3714      	adds	r7, #20
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
	...

0800e6f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	32b0      	adds	r2, #176	@ 0xb0
 800e702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e706:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e708:	2301      	movs	r3, #1
 800e70a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d101      	bne.n	800e716 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e712:	2303      	movs	r3, #3
 800e714:	e025      	b.n	800e762 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d11f      	bne.n	800e760 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2201      	movs	r2, #1
 800e724:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e728:	4b10      	ldr	r3, [pc, #64]	@ (800e76c <USBD_CDC_TransmitPacket+0x7c>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	f003 020f 	and.w	r2, r3, #15
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	4613      	mov	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	4413      	add	r3, r2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	4403      	add	r3, r0
 800e742:	3318      	adds	r3, #24
 800e744:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e746:	4b09      	ldr	r3, [pc, #36]	@ (800e76c <USBD_CDC_TransmitPacket+0x7c>)
 800e748:	7819      	ldrb	r1, [r3, #0]
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f002 f825 	bl	80107a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e760:	7bfb      	ldrb	r3, [r7, #15]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	200000a3 	.word	0x200000a3

0800e770 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	32b0      	adds	r2, #176	@ 0xb0
 800e782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e786:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	32b0      	adds	r2, #176	@ 0xb0
 800e792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e79a:	2303      	movs	r3, #3
 800e79c:	e018      	b.n	800e7d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	7c1b      	ldrb	r3, [r3, #16]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10a      	bne.n	800e7bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d8 <USBD_CDC_ReceivePacket+0x68>)
 800e7a8:	7819      	ldrb	r1, [r3, #0]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f002 f817 	bl	80107e8 <USBD_LL_PrepareReceive>
 800e7ba:	e008      	b.n	800e7ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7bc:	4b06      	ldr	r3, [pc, #24]	@ (800e7d8 <USBD_CDC_ReceivePacket+0x68>)
 800e7be:	7819      	ldrb	r1, [r3, #0]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7c6:	2340      	movs	r3, #64	@ 0x40
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f002 f80d 	bl	80107e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	200000a4 	.word	0x200000a4

0800e7dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d101      	bne.n	800e7f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e7f0:	2303      	movs	r3, #3
 800e7f2:	e01f      	b.n	800e834 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	79fa      	ldrb	r2, [r7, #7]
 800e826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f001 fe87 	bl	801053c <USBD_LL_Init>
 800e82e:	4603      	mov	r3, r0
 800e830:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e846:	2300      	movs	r3, #0
 800e848:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d101      	bne.n	800e854 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e850:	2303      	movs	r3, #3
 800e852:	e025      	b.n	800e8a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	32ae      	adds	r2, #174	@ 0xae
 800e866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00f      	beq.n	800e890 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	32ae      	adds	r2, #174	@ 0xae
 800e87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e880:	f107 020e 	add.w	r2, r7, #14
 800e884:	4610      	mov	r0, r2
 800e886:	4798      	blx	r3
 800e888:	4602      	mov	r2, r0
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 fe8f 	bl	80105d4 <USBD_LL_Start>
 800e8b6:	4603      	mov	r3, r0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e8c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	460b      	mov	r3, r1
 800e8e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d009      	beq.n	800e904 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	78fa      	ldrb	r2, [r7, #3]
 800e8fa:	4611      	mov	r1, r2
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	4798      	blx	r3
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e904:	7bfb      	ldrb	r3, [r7, #15]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b084      	sub	sp, #16
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
 800e916:	460b      	mov	r3, r1
 800e918:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e91a:	2300      	movs	r3, #0
 800e91c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	78fa      	ldrb	r2, [r7, #3]
 800e928:	4611      	mov	r1, r2
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	4798      	blx	r3
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e934:	2303      	movs	r3, #3
 800e936:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e938:	7bfb      	ldrb	r3, [r7, #15]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e952:	6839      	ldr	r1, [r7, #0]
 800e954:	4618      	mov	r0, r3
 800e956:	f001 f90c 	bl	800fb72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e968:	461a      	mov	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e976:	f003 031f 	and.w	r3, r3, #31
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d01a      	beq.n	800e9b4 <USBD_LL_SetupStage+0x72>
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d822      	bhi.n	800e9c8 <USBD_LL_SetupStage+0x86>
 800e982:	2b00      	cmp	r3, #0
 800e984:	d002      	beq.n	800e98c <USBD_LL_SetupStage+0x4a>
 800e986:	2b01      	cmp	r3, #1
 800e988:	d00a      	beq.n	800e9a0 <USBD_LL_SetupStage+0x5e>
 800e98a:	e01d      	b.n	800e9c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e992:	4619      	mov	r1, r3
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 fb63 	bl	800f060 <USBD_StdDevReq>
 800e99a:	4603      	mov	r3, r0
 800e99c:	73fb      	strb	r3, [r7, #15]
      break;
 800e99e:	e020      	b.n	800e9e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fbcb 	bl	800f144 <USBD_StdItfReq>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e9b2:	e016      	b.n	800e9e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 fc2d 	bl	800f21c <USBD_StdEPReq>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c6:	e00c      	b.n	800e9e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e9ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f001 fe5c 	bl	8010694 <USBD_LL_StallEP>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e0:	bf00      	nop
  }

  return ret;
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	607a      	str	r2, [r7, #4]
 800e9f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e9fe:	7afb      	ldrb	r3, [r7, #11]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d16e      	bne.n	800eae2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ea0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ea12:	2b03      	cmp	r3, #3
 800ea14:	f040 8098 	bne.w	800eb48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	689a      	ldr	r2, [r3, #8]
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d913      	bls.n	800ea4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	689a      	ldr	r2, [r3, #8]
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	1ad2      	subs	r2, r2, r3
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	68da      	ldr	r2, [r3, #12]
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	bf28      	it	cs
 800ea3e:	4613      	movcs	r3, r2
 800ea40:	461a      	mov	r2, r3
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f001 f994 	bl	800fd72 <USBD_CtlContinueRx>
 800ea4a:	e07d      	b.n	800eb48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ea52:	f003 031f 	and.w	r3, r3, #31
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d014      	beq.n	800ea84 <USBD_LL_DataOutStage+0x98>
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	d81d      	bhi.n	800ea9a <USBD_LL_DataOutStage+0xae>
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <USBD_LL_DataOutStage+0x7c>
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d003      	beq.n	800ea6e <USBD_LL_DataOutStage+0x82>
 800ea66:	e018      	b.n	800ea9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	75bb      	strb	r3, [r7, #22]
            break;
 800ea6c:	e018      	b.n	800eaa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	4619      	mov	r1, r3
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f000 fa64 	bl	800ef46 <USBD_CoreFindIF>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	75bb      	strb	r3, [r7, #22]
            break;
 800ea82:	e00d      	b.n	800eaa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	68f8      	ldr	r0, [r7, #12]
 800ea90:	f000 fa66 	bl	800ef60 <USBD_CoreFindEP>
 800ea94:	4603      	mov	r3, r0
 800ea96:	75bb      	strb	r3, [r7, #22]
            break;
 800ea98:	e002      	b.n	800eaa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	75bb      	strb	r3, [r7, #22]
            break;
 800ea9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eaa0:	7dbb      	ldrb	r3, [r7, #22]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d119      	bne.n	800eada <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	d113      	bne.n	800eada <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eab2:	7dba      	ldrb	r2, [r7, #22]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	32ae      	adds	r2, #174	@ 0xae
 800eab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00b      	beq.n	800eada <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eac2:	7dba      	ldrb	r2, [r7, #22]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eaca:	7dba      	ldrb	r2, [r7, #22]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	32ae      	adds	r2, #174	@ 0xae
 800ead0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f001 f95a 	bl	800fd94 <USBD_CtlSendStatus>
 800eae0:	e032      	b.n	800eb48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eae2:	7afb      	ldrb	r3, [r7, #11]
 800eae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	4619      	mov	r1, r3
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f000 fa37 	bl	800ef60 <USBD_CoreFindEP>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eaf6:	7dbb      	ldrb	r3, [r7, #22]
 800eaf8:	2bff      	cmp	r3, #255	@ 0xff
 800eafa:	d025      	beq.n	800eb48 <USBD_LL_DataOutStage+0x15c>
 800eafc:	7dbb      	ldrb	r3, [r7, #22]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d122      	bne.n	800eb48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d117      	bne.n	800eb3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eb0e:	7dba      	ldrb	r2, [r7, #22]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	32ae      	adds	r2, #174	@ 0xae
 800eb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb18:	699b      	ldr	r3, [r3, #24]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00f      	beq.n	800eb3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eb1e:	7dba      	ldrb	r2, [r7, #22]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eb26:	7dba      	ldrb	r2, [r7, #22]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	32ae      	adds	r2, #174	@ 0xae
 800eb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	7afa      	ldrb	r2, [r7, #11]
 800eb34:	4611      	mov	r1, r2
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	4798      	blx	r3
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	e000      	b.n	800eb4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3718      	adds	r7, #24
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b086      	sub	sp, #24
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	607a      	str	r2, [r7, #4]
 800eb5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eb60:	7afb      	ldrb	r3, [r7, #11]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d16f      	bne.n	800ec46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	3314      	adds	r3, #20
 800eb6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d15a      	bne.n	800ec2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	689a      	ldr	r2, [r3, #8]
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d914      	bls.n	800ebac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	689a      	ldr	r2, [r3, #8]
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	1ad2      	subs	r2, r2, r3
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	461a      	mov	r2, r3
 800eb96:	6879      	ldr	r1, [r7, #4]
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f001 f8bc 	bl	800fd16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb9e:	2300      	movs	r3, #0
 800eba0:	2200      	movs	r2, #0
 800eba2:	2100      	movs	r1, #0
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f001 fe1f 	bl	80107e8 <USBD_LL_PrepareReceive>
 800ebaa:	e03f      	b.n	800ec2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	68da      	ldr	r2, [r3, #12]
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d11c      	bne.n	800ebf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d316      	bcc.n	800ebf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d20f      	bcs.n	800ebf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f001 f89d 	bl	800fd16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2100      	movs	r1, #0
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f001 fdfc 	bl	80107e8 <USBD_LL_PrepareReceive>
 800ebf0:	e01c      	b.n	800ec2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d10f      	bne.n	800ec1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d009      	beq.n	800ec1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec1e:	2180      	movs	r1, #128	@ 0x80
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f001 fd37 	bl	8010694 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f001 f8c7 	bl	800fdba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d03a      	beq.n	800ecac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f7ff fe42 	bl	800e8c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ec44:	e032      	b.n	800ecac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ec46:	7afb      	ldrb	r3, [r7, #11]
 800ec48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	4619      	mov	r1, r3
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 f985 	bl	800ef60 <USBD_CoreFindEP>
 800ec56:	4603      	mov	r3, r0
 800ec58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	2bff      	cmp	r3, #255	@ 0xff
 800ec5e:	d025      	beq.n	800ecac <USBD_LL_DataInStage+0x15a>
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d122      	bne.n	800ecac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d11c      	bne.n	800ecac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ec72:	7dfa      	ldrb	r2, [r7, #23]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	32ae      	adds	r2, #174	@ 0xae
 800ec78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec7c:	695b      	ldr	r3, [r3, #20]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d014      	beq.n	800ecac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ec82:	7dfa      	ldrb	r2, [r7, #23]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ec8a:	7dfa      	ldrb	r2, [r7, #23]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	32ae      	adds	r2, #174	@ 0xae
 800ec90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	7afa      	ldrb	r2, [r7, #11]
 800ec98:	4611      	mov	r1, r2
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	4798      	blx	r3
 800ec9e:	4603      	mov	r3, r0
 800eca0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800eca2:	7dbb      	ldrb	r3, [r7, #22]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d001      	beq.n	800ecac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eca8:	7dbb      	ldrb	r3, [r7, #22]
 800ecaa:	e000      	b.n	800ecae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3718      	adds	r7, #24
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d014      	beq.n	800ed1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00e      	beq.n	800ed1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	6852      	ldr	r2, [r2, #4]
 800ed0a:	b2d2      	uxtb	r2, r2
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	4798      	blx	r3
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ed18:	2303      	movs	r3, #3
 800ed1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed1c:	2340      	movs	r3, #64	@ 0x40
 800ed1e:	2200      	movs	r2, #0
 800ed20:	2100      	movs	r1, #0
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f001 fc71 	bl	801060a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2240      	movs	r2, #64	@ 0x40
 800ed34:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed38:	2340      	movs	r3, #64	@ 0x40
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	2180      	movs	r1, #128	@ 0x80
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f001 fc63 	bl	801060a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2240      	movs	r2, #64	@ 0x40
 800ed4e:	621a      	str	r2, [r3, #32]

  return ret;
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}

0800ed5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ed5a:	b480      	push	{r7}
 800ed5c:	b083      	sub	sp, #12
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
 800ed62:	460b      	mov	r3, r1
 800ed64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	78fa      	ldrb	r2, [r7, #3]
 800ed6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	370c      	adds	r7, #12
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr

0800ed7a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ed7a:	b480      	push	{r7}
 800ed7c:	b083      	sub	sp, #12
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	2b04      	cmp	r3, #4
 800ed8c:	d006      	beq.n	800ed9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed94:	b2da      	uxtb	r2, r3
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2204      	movs	r2, #4
 800eda0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b04      	cmp	r3, #4
 800edc4:	d106      	bne.n	800edd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800edcc:	b2da      	uxtb	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	d110      	bne.n	800ee18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00b      	beq.n	800ee18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee06:	69db      	ldr	r3, [r3, #28]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ee18:	2300      	movs	r3, #0
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b082      	sub	sp, #8
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	460b      	mov	r3, r1
 800ee2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	32ae      	adds	r2, #174	@ 0xae
 800ee38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d101      	bne.n	800ee44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee40:	2303      	movs	r3, #3
 800ee42:	e01c      	b.n	800ee7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d115      	bne.n	800ee7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	32ae      	adds	r2, #174	@ 0xae
 800ee5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00b      	beq.n	800ee7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	32ae      	adds	r2, #174	@ 0xae
 800ee6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	78fa      	ldrb	r2, [r7, #3]
 800ee76:	4611      	mov	r1, r2
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b082      	sub	sp, #8
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	460b      	mov	r3, r1
 800ee90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	32ae      	adds	r2, #174	@ 0xae
 800ee9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d101      	bne.n	800eea8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eea4:	2303      	movs	r3, #3
 800eea6:	e01c      	b.n	800eee2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	d115      	bne.n	800eee0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	32ae      	adds	r2, #174	@ 0xae
 800eebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	32ae      	adds	r2, #174	@ 0xae
 800eed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed8:	78fa      	ldrb	r2, [r7, #3]
 800eeda:	4611      	mov	r1, r2
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00e      	beq.n	800ef3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	6852      	ldr	r2, [r2, #4]
 800ef2a:	b2d2      	uxtb	r2, r2
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	4798      	blx	r3
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef46:	b480      	push	{r7}
 800ef48:	b083      	sub	sp, #12
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
 800ef4e:	460b      	mov	r3, r1
 800ef50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	370c      	adds	r7, #12
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b086      	sub	sp, #24
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	460b      	mov	r3, r1
 800ef84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	885b      	ldrh	r3, [r3, #2]
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	7812      	ldrb	r2, [r2, #0]
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d91f      	bls.n	800efe0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800efa6:	e013      	b.n	800efd0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800efa8:	f107 030a 	add.w	r3, r7, #10
 800efac:	4619      	mov	r1, r3
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f000 f81b 	bl	800efea <USBD_GetNextDesc>
 800efb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	785b      	ldrb	r3, [r3, #1]
 800efba:	2b05      	cmp	r3, #5
 800efbc:	d108      	bne.n	800efd0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	789b      	ldrb	r3, [r3, #2]
 800efc6:	78fa      	ldrb	r2, [r7, #3]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d008      	beq.n	800efde <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800efcc:	2300      	movs	r3, #0
 800efce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	885b      	ldrh	r3, [r3, #2]
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	897b      	ldrh	r3, [r7, #10]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d8e5      	bhi.n	800efa8 <USBD_GetEpDesc+0x2e>
 800efdc:	e000      	b.n	800efe0 <USBD_GetEpDesc+0x66>
          break;
 800efde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800efe0:	693b      	ldr	r3, [r7, #16]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3718      	adds	r7, #24
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800efea:	b480      	push	{r7}
 800efec:	b085      	sub	sp, #20
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
 800eff2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	7812      	ldrb	r2, [r2, #0]
 800f000:	4413      	add	r3, r2
 800f002:	b29a      	uxth	r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	461a      	mov	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4413      	add	r3, r2
 800f012:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f014:	68fb      	ldr	r3, [r7, #12]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3714      	adds	r7, #20
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f022:	b480      	push	{r7}
 800f024:	b087      	sub	sp, #28
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	3301      	adds	r3, #1
 800f038:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f040:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	b21a      	sxth	r2, r3
 800f048:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f04c:	4313      	orrs	r3, r2
 800f04e:	b21b      	sxth	r3, r3
 800f050:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f052:	89fb      	ldrh	r3, [r7, #14]
}
 800f054:	4618      	mov	r0, r3
 800f056:	371c      	adds	r7, #28
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f076:	2b40      	cmp	r3, #64	@ 0x40
 800f078:	d005      	beq.n	800f086 <USBD_StdDevReq+0x26>
 800f07a:	2b40      	cmp	r3, #64	@ 0x40
 800f07c:	d857      	bhi.n	800f12e <USBD_StdDevReq+0xce>
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00f      	beq.n	800f0a2 <USBD_StdDevReq+0x42>
 800f082:	2b20      	cmp	r3, #32
 800f084:	d153      	bne.n	800f12e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	32ae      	adds	r2, #174	@ 0xae
 800f090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	4798      	blx	r3
 800f09c:	4603      	mov	r3, r0
 800f09e:	73fb      	strb	r3, [r7, #15]
      break;
 800f0a0:	e04a      	b.n	800f138 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	785b      	ldrb	r3, [r3, #1]
 800f0a6:	2b09      	cmp	r3, #9
 800f0a8:	d83b      	bhi.n	800f122 <USBD_StdDevReq+0xc2>
 800f0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f0b0 <USBD_StdDevReq+0x50>)
 800f0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b0:	0800f105 	.word	0x0800f105
 800f0b4:	0800f119 	.word	0x0800f119
 800f0b8:	0800f123 	.word	0x0800f123
 800f0bc:	0800f10f 	.word	0x0800f10f
 800f0c0:	0800f123 	.word	0x0800f123
 800f0c4:	0800f0e3 	.word	0x0800f0e3
 800f0c8:	0800f0d9 	.word	0x0800f0d9
 800f0cc:	0800f123 	.word	0x0800f123
 800f0d0:	0800f0fb 	.word	0x0800f0fb
 800f0d4:	0800f0ed 	.word	0x0800f0ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f0d8:	6839      	ldr	r1, [r7, #0]
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fa3c 	bl	800f558 <USBD_GetDescriptor>
          break;
 800f0e0:	e024      	b.n	800f12c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 fba1 	bl	800f82c <USBD_SetAddress>
          break;
 800f0ea:	e01f      	b.n	800f12c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 fbe0 	bl	800f8b4 <USBD_SetConfig>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	73fb      	strb	r3, [r7, #15]
          break;
 800f0f8:	e018      	b.n	800f12c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f0fa:	6839      	ldr	r1, [r7, #0]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 fc83 	bl	800fa08 <USBD_GetConfig>
          break;
 800f102:	e013      	b.n	800f12c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fcb4 	bl	800fa74 <USBD_GetStatus>
          break;
 800f10c:	e00e      	b.n	800f12c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fce3 	bl	800fadc <USBD_SetFeature>
          break;
 800f116:	e009      	b.n	800f12c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f118:	6839      	ldr	r1, [r7, #0]
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fd07 	bl	800fb2e <USBD_ClrFeature>
          break;
 800f120:	e004      	b.n	800f12c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f122:	6839      	ldr	r1, [r7, #0]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 fd5e 	bl	800fbe6 <USBD_CtlError>
          break;
 800f12a:	bf00      	nop
      }
      break;
 800f12c:	e004      	b.n	800f138 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f12e:	6839      	ldr	r1, [r7, #0]
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 fd58 	bl	800fbe6 <USBD_CtlError>
      break;
 800f136:	bf00      	nop
  }

  return ret;
 800f138:	7bfb      	ldrb	r3, [r7, #15]
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop

0800f144 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f15a:	2b40      	cmp	r3, #64	@ 0x40
 800f15c:	d005      	beq.n	800f16a <USBD_StdItfReq+0x26>
 800f15e:	2b40      	cmp	r3, #64	@ 0x40
 800f160:	d852      	bhi.n	800f208 <USBD_StdItfReq+0xc4>
 800f162:	2b00      	cmp	r3, #0
 800f164:	d001      	beq.n	800f16a <USBD_StdItfReq+0x26>
 800f166:	2b20      	cmp	r3, #32
 800f168:	d14e      	bne.n	800f208 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f170:	b2db      	uxtb	r3, r3
 800f172:	3b01      	subs	r3, #1
 800f174:	2b02      	cmp	r3, #2
 800f176:	d840      	bhi.n	800f1fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	889b      	ldrh	r3, [r3, #4]
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d836      	bhi.n	800f1f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	889b      	ldrh	r3, [r3, #4]
 800f186:	b2db      	uxtb	r3, r3
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff fedb 	bl	800ef46 <USBD_CoreFindIF>
 800f190:	4603      	mov	r3, r0
 800f192:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f194:	7bbb      	ldrb	r3, [r7, #14]
 800f196:	2bff      	cmp	r3, #255	@ 0xff
 800f198:	d01d      	beq.n	800f1d6 <USBD_StdItfReq+0x92>
 800f19a:	7bbb      	ldrb	r3, [r7, #14]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d11a      	bne.n	800f1d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f1a0:	7bba      	ldrb	r2, [r7, #14]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	32ae      	adds	r2, #174	@ 0xae
 800f1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00f      	beq.n	800f1d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f1b0:	7bba      	ldrb	r2, [r7, #14]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1b8:	7bba      	ldrb	r2, [r7, #14]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	32ae      	adds	r2, #174	@ 0xae
 800f1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	4798      	blx	r3
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f1ce:	e004      	b.n	800f1da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f1d4:	e001      	b.n	800f1da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f1d6:	2303      	movs	r3, #3
 800f1d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	88db      	ldrh	r3, [r3, #6]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d110      	bne.n	800f204 <USBD_StdItfReq+0xc0>
 800f1e2:	7bfb      	ldrb	r3, [r7, #15]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d10d      	bne.n	800f204 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 fdd3 	bl	800fd94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f1ee:	e009      	b.n	800f204 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fcf7 	bl	800fbe6 <USBD_CtlError>
          break;
 800f1f8:	e004      	b.n	800f204 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fcf2 	bl	800fbe6 <USBD_CtlError>
          break;
 800f202:	e000      	b.n	800f206 <USBD_StdItfReq+0xc2>
          break;
 800f204:	bf00      	nop
      }
      break;
 800f206:	e004      	b.n	800f212 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fceb 	bl	800fbe6 <USBD_CtlError>
      break;
 800f210:	bf00      	nop
  }

  return ret;
 800f212:	7bfb      	ldrb	r3, [r7, #15]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3710      	adds	r7, #16
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f226:	2300      	movs	r3, #0
 800f228:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	889b      	ldrh	r3, [r3, #4]
 800f22e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f238:	2b40      	cmp	r3, #64	@ 0x40
 800f23a:	d007      	beq.n	800f24c <USBD_StdEPReq+0x30>
 800f23c:	2b40      	cmp	r3, #64	@ 0x40
 800f23e:	f200 817f 	bhi.w	800f540 <USBD_StdEPReq+0x324>
 800f242:	2b00      	cmp	r3, #0
 800f244:	d02a      	beq.n	800f29c <USBD_StdEPReq+0x80>
 800f246:	2b20      	cmp	r3, #32
 800f248:	f040 817a 	bne.w	800f540 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f24c:	7bbb      	ldrb	r3, [r7, #14]
 800f24e:	4619      	mov	r1, r3
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff fe85 	bl	800ef60 <USBD_CoreFindEP>
 800f256:	4603      	mov	r3, r0
 800f258:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f25a:	7b7b      	ldrb	r3, [r7, #13]
 800f25c:	2bff      	cmp	r3, #255	@ 0xff
 800f25e:	f000 8174 	beq.w	800f54a <USBD_StdEPReq+0x32e>
 800f262:	7b7b      	ldrb	r3, [r7, #13]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f040 8170 	bne.w	800f54a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f26a:	7b7a      	ldrb	r2, [r7, #13]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f272:	7b7a      	ldrb	r2, [r7, #13]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	32ae      	adds	r2, #174	@ 0xae
 800f278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f000 8163 	beq.w	800f54a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f284:	7b7a      	ldrb	r2, [r7, #13]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	32ae      	adds	r2, #174	@ 0xae
 800f28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	4798      	blx	r3
 800f296:	4603      	mov	r3, r0
 800f298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f29a:	e156      	b.n	800f54a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	785b      	ldrb	r3, [r3, #1]
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	d008      	beq.n	800f2b6 <USBD_StdEPReq+0x9a>
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	f300 8145 	bgt.w	800f534 <USBD_StdEPReq+0x318>
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 809b 	beq.w	800f3e6 <USBD_StdEPReq+0x1ca>
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d03c      	beq.n	800f32e <USBD_StdEPReq+0x112>
 800f2b4:	e13e      	b.n	800f534 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d002      	beq.n	800f2c8 <USBD_StdEPReq+0xac>
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	d016      	beq.n	800f2f4 <USBD_StdEPReq+0xd8>
 800f2c6:	e02c      	b.n	800f322 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00d      	beq.n	800f2ea <USBD_StdEPReq+0xce>
 800f2ce:	7bbb      	ldrb	r3, [r7, #14]
 800f2d0:	2b80      	cmp	r3, #128	@ 0x80
 800f2d2:	d00a      	beq.n	800f2ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f001 f9db 	bl	8010694 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2de:	2180      	movs	r1, #128	@ 0x80
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f001 f9d7 	bl	8010694 <USBD_LL_StallEP>
 800f2e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2e8:	e020      	b.n	800f32c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 fc7a 	bl	800fbe6 <USBD_CtlError>
              break;
 800f2f2:	e01b      	b.n	800f32c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	885b      	ldrh	r3, [r3, #2]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10e      	bne.n	800f31a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f2fc:	7bbb      	ldrb	r3, [r7, #14]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00b      	beq.n	800f31a <USBD_StdEPReq+0xfe>
 800f302:	7bbb      	ldrb	r3, [r7, #14]
 800f304:	2b80      	cmp	r3, #128	@ 0x80
 800f306:	d008      	beq.n	800f31a <USBD_StdEPReq+0xfe>
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	88db      	ldrh	r3, [r3, #6]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d104      	bne.n	800f31a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f001 f9bd 	bl	8010694 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fd3a 	bl	800fd94 <USBD_CtlSendStatus>

              break;
 800f320:	e004      	b.n	800f32c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 fc5e 	bl	800fbe6 <USBD_CtlError>
              break;
 800f32a:	bf00      	nop
          }
          break;
 800f32c:	e107      	b.n	800f53e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f334:	b2db      	uxtb	r3, r3
 800f336:	2b02      	cmp	r3, #2
 800f338:	d002      	beq.n	800f340 <USBD_StdEPReq+0x124>
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	d016      	beq.n	800f36c <USBD_StdEPReq+0x150>
 800f33e:	e04b      	b.n	800f3d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f340:	7bbb      	ldrb	r3, [r7, #14]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00d      	beq.n	800f362 <USBD_StdEPReq+0x146>
 800f346:	7bbb      	ldrb	r3, [r7, #14]
 800f348:	2b80      	cmp	r3, #128	@ 0x80
 800f34a:	d00a      	beq.n	800f362 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 f99f 	bl	8010694 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f356:	2180      	movs	r1, #128	@ 0x80
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f001 f99b 	bl	8010694 <USBD_LL_StallEP>
 800f35e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f360:	e040      	b.n	800f3e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f362:	6839      	ldr	r1, [r7, #0]
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 fc3e 	bl	800fbe6 <USBD_CtlError>
              break;
 800f36a:	e03b      	b.n	800f3e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	885b      	ldrh	r3, [r3, #2]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d136      	bne.n	800f3e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f374:	7bbb      	ldrb	r3, [r7, #14]
 800f376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d004      	beq.n	800f388 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f37e:	7bbb      	ldrb	r3, [r7, #14]
 800f380:	4619      	mov	r1, r3
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f001 f9a5 	bl	80106d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fd03 	bl	800fd94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f38e:	7bbb      	ldrb	r3, [r7, #14]
 800f390:	4619      	mov	r1, r3
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fde4 	bl	800ef60 <USBD_CoreFindEP>
 800f398:	4603      	mov	r3, r0
 800f39a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f39c:	7b7b      	ldrb	r3, [r7, #13]
 800f39e:	2bff      	cmp	r3, #255	@ 0xff
 800f3a0:	d01f      	beq.n	800f3e2 <USBD_StdEPReq+0x1c6>
 800f3a2:	7b7b      	ldrb	r3, [r7, #13]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d11c      	bne.n	800f3e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f3a8:	7b7a      	ldrb	r2, [r7, #13]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f3b0:	7b7a      	ldrb	r2, [r7, #13]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	32ae      	adds	r2, #174	@ 0xae
 800f3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d010      	beq.n	800f3e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f3c0:	7b7a      	ldrb	r2, [r7, #13]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	32ae      	adds	r2, #174	@ 0xae
 800f3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	6839      	ldr	r1, [r7, #0]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	4798      	blx	r3
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f3d6:	e004      	b.n	800f3e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f3d8:	6839      	ldr	r1, [r7, #0]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fc03 	bl	800fbe6 <USBD_CtlError>
              break;
 800f3e0:	e000      	b.n	800f3e4 <USBD_StdEPReq+0x1c8>
              break;
 800f3e2:	bf00      	nop
          }
          break;
 800f3e4:	e0ab      	b.n	800f53e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d002      	beq.n	800f3f8 <USBD_StdEPReq+0x1dc>
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d032      	beq.n	800f45c <USBD_StdEPReq+0x240>
 800f3f6:	e097      	b.n	800f528 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3f8:	7bbb      	ldrb	r3, [r7, #14]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d007      	beq.n	800f40e <USBD_StdEPReq+0x1f2>
 800f3fe:	7bbb      	ldrb	r3, [r7, #14]
 800f400:	2b80      	cmp	r3, #128	@ 0x80
 800f402:	d004      	beq.n	800f40e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 fbed 	bl	800fbe6 <USBD_CtlError>
                break;
 800f40c:	e091      	b.n	800f532 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f40e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f412:	2b00      	cmp	r3, #0
 800f414:	da0b      	bge.n	800f42e <USBD_StdEPReq+0x212>
 800f416:	7bbb      	ldrb	r3, [r7, #14]
 800f418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f41c:	4613      	mov	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	3310      	adds	r3, #16
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	4413      	add	r3, r2
 800f42a:	3304      	adds	r3, #4
 800f42c:	e00b      	b.n	800f446 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f434:	4613      	mov	r3, r2
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	4413      	add	r3, r2
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	4413      	add	r3, r2
 800f444:	3304      	adds	r3, #4
 800f446:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2200      	movs	r2, #0
 800f44c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2202      	movs	r2, #2
 800f452:	4619      	mov	r1, r3
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fc43 	bl	800fce0 <USBD_CtlSendData>
              break;
 800f45a:	e06a      	b.n	800f532 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f45c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f460:	2b00      	cmp	r3, #0
 800f462:	da11      	bge.n	800f488 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	f003 020f 	and.w	r2, r3, #15
 800f46a:	6879      	ldr	r1, [r7, #4]
 800f46c:	4613      	mov	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	440b      	add	r3, r1
 800f476:	3324      	adds	r3, #36	@ 0x24
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d117      	bne.n	800f4ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f47e:	6839      	ldr	r1, [r7, #0]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fbb0 	bl	800fbe6 <USBD_CtlError>
                  break;
 800f486:	e054      	b.n	800f532 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f488:	7bbb      	ldrb	r3, [r7, #14]
 800f48a:	f003 020f 	and.w	r2, r3, #15
 800f48e:	6879      	ldr	r1, [r7, #4]
 800f490:	4613      	mov	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	440b      	add	r3, r1
 800f49a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d104      	bne.n	800f4ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fb9d 	bl	800fbe6 <USBD_CtlError>
                  break;
 800f4ac:	e041      	b.n	800f532 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	da0b      	bge.n	800f4ce <USBD_StdEPReq+0x2b2>
 800f4b6:	7bbb      	ldrb	r3, [r7, #14]
 800f4b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f4bc:	4613      	mov	r3, r2
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4413      	add	r3, r2
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	3310      	adds	r3, #16
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	e00b      	b.n	800f4e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
 800f4d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d002      	beq.n	800f4f4 <USBD_StdEPReq+0x2d8>
 800f4ee:	7bbb      	ldrb	r3, [r7, #14]
 800f4f0:	2b80      	cmp	r3, #128	@ 0x80
 800f4f2:	d103      	bne.n	800f4fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	601a      	str	r2, [r3, #0]
 800f4fa:	e00e      	b.n	800f51a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f4fc:	7bbb      	ldrb	r3, [r7, #14]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f001 f905 	bl	8010710 <USBD_LL_IsStallEP>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	2201      	movs	r2, #1
 800f510:	601a      	str	r2, [r3, #0]
 800f512:	e002      	b.n	800f51a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2200      	movs	r2, #0
 800f518:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2202      	movs	r2, #2
 800f51e:	4619      	mov	r1, r3
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 fbdd 	bl	800fce0 <USBD_CtlSendData>
              break;
 800f526:	e004      	b.n	800f532 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fb5b 	bl	800fbe6 <USBD_CtlError>
              break;
 800f530:	bf00      	nop
          }
          break;
 800f532:	e004      	b.n	800f53e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f534:	6839      	ldr	r1, [r7, #0]
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 fb55 	bl	800fbe6 <USBD_CtlError>
          break;
 800f53c:	bf00      	nop
      }
      break;
 800f53e:	e005      	b.n	800f54c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fb4f 	bl	800fbe6 <USBD_CtlError>
      break;
 800f548:	e000      	b.n	800f54c <USBD_StdEPReq+0x330>
      break;
 800f54a:	bf00      	nop
  }

  return ret;
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
	...

0800f558 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f562:	2300      	movs	r3, #0
 800f564:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f566:	2300      	movs	r3, #0
 800f568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f56a:	2300      	movs	r3, #0
 800f56c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	885b      	ldrh	r3, [r3, #2]
 800f572:	0a1b      	lsrs	r3, r3, #8
 800f574:	b29b      	uxth	r3, r3
 800f576:	3b01      	subs	r3, #1
 800f578:	2b06      	cmp	r3, #6
 800f57a:	f200 8128 	bhi.w	800f7ce <USBD_GetDescriptor+0x276>
 800f57e:	a201      	add	r2, pc, #4	@ (adr r2, 800f584 <USBD_GetDescriptor+0x2c>)
 800f580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f584:	0800f5a1 	.word	0x0800f5a1
 800f588:	0800f5b9 	.word	0x0800f5b9
 800f58c:	0800f5f9 	.word	0x0800f5f9
 800f590:	0800f7cf 	.word	0x0800f7cf
 800f594:	0800f7cf 	.word	0x0800f7cf
 800f598:	0800f76f 	.word	0x0800f76f
 800f59c:	0800f79b 	.word	0x0800f79b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	7c12      	ldrb	r2, [r2, #16]
 800f5ac:	f107 0108 	add.w	r1, r7, #8
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	4798      	blx	r3
 800f5b4:	60f8      	str	r0, [r7, #12]
      break;
 800f5b6:	e112      	b.n	800f7de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	7c1b      	ldrb	r3, [r3, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10d      	bne.n	800f5dc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c8:	f107 0208 	add.w	r2, r7, #8
 800f5cc:	4610      	mov	r0, r2
 800f5ce:	4798      	blx	r3
 800f5d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	2202      	movs	r2, #2
 800f5d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f5da:	e100      	b.n	800f7de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5e4:	f107 0208 	add.w	r2, r7, #8
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	4798      	blx	r3
 800f5ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	701a      	strb	r2, [r3, #0]
      break;
 800f5f6:	e0f2      	b.n	800f7de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	885b      	ldrh	r3, [r3, #2]
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	2b05      	cmp	r3, #5
 800f600:	f200 80ac 	bhi.w	800f75c <USBD_GetDescriptor+0x204>
 800f604:	a201      	add	r2, pc, #4	@ (adr r2, 800f60c <USBD_GetDescriptor+0xb4>)
 800f606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60a:	bf00      	nop
 800f60c:	0800f625 	.word	0x0800f625
 800f610:	0800f659 	.word	0x0800f659
 800f614:	0800f68d 	.word	0x0800f68d
 800f618:	0800f6c1 	.word	0x0800f6c1
 800f61c:	0800f6f5 	.word	0x0800f6f5
 800f620:	0800f729 	.word	0x0800f729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00b      	beq.n	800f648 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	7c12      	ldrb	r2, [r2, #16]
 800f63c:	f107 0108 	add.w	r1, r7, #8
 800f640:	4610      	mov	r0, r2
 800f642:	4798      	blx	r3
 800f644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f646:	e091      	b.n	800f76c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f648:	6839      	ldr	r1, [r7, #0]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 facb 	bl	800fbe6 <USBD_CtlError>
            err++;
 800f650:	7afb      	ldrb	r3, [r7, #11]
 800f652:	3301      	adds	r3, #1
 800f654:	72fb      	strb	r3, [r7, #11]
          break;
 800f656:	e089      	b.n	800f76c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00b      	beq.n	800f67c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	7c12      	ldrb	r2, [r2, #16]
 800f670:	f107 0108 	add.w	r1, r7, #8
 800f674:	4610      	mov	r0, r2
 800f676:	4798      	blx	r3
 800f678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f67a:	e077      	b.n	800f76c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fab1 	bl	800fbe6 <USBD_CtlError>
            err++;
 800f684:	7afb      	ldrb	r3, [r7, #11]
 800f686:	3301      	adds	r3, #1
 800f688:	72fb      	strb	r3, [r7, #11]
          break;
 800f68a:	e06f      	b.n	800f76c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d00b      	beq.n	800f6b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	7c12      	ldrb	r2, [r2, #16]
 800f6a4:	f107 0108 	add.w	r1, r7, #8
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	4798      	blx	r3
 800f6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ae:	e05d      	b.n	800f76c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6b0:	6839      	ldr	r1, [r7, #0]
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 fa97 	bl	800fbe6 <USBD_CtlError>
            err++;
 800f6b8:	7afb      	ldrb	r3, [r7, #11]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f6be:	e055      	b.n	800f76c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6c6:	691b      	ldr	r3, [r3, #16]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00b      	beq.n	800f6e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6d2:	691b      	ldr	r3, [r3, #16]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	7c12      	ldrb	r2, [r2, #16]
 800f6d8:	f107 0108 	add.w	r1, r7, #8
 800f6dc:	4610      	mov	r0, r2
 800f6de:	4798      	blx	r3
 800f6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6e2:	e043      	b.n	800f76c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fa7d 	bl	800fbe6 <USBD_CtlError>
            err++;
 800f6ec:	7afb      	ldrb	r3, [r7, #11]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6f2:	e03b      	b.n	800f76c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6fa:	695b      	ldr	r3, [r3, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00b      	beq.n	800f718 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f706:	695b      	ldr	r3, [r3, #20]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	7c12      	ldrb	r2, [r2, #16]
 800f70c:	f107 0108 	add.w	r1, r7, #8
 800f710:	4610      	mov	r0, r2
 800f712:	4798      	blx	r3
 800f714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f716:	e029      	b.n	800f76c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fa63 	bl	800fbe6 <USBD_CtlError>
            err++;
 800f720:	7afb      	ldrb	r3, [r7, #11]
 800f722:	3301      	adds	r3, #1
 800f724:	72fb      	strb	r3, [r7, #11]
          break;
 800f726:	e021      	b.n	800f76c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f72e:	699b      	ldr	r3, [r3, #24]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	7c12      	ldrb	r2, [r2, #16]
 800f740:	f107 0108 	add.w	r1, r7, #8
 800f744:	4610      	mov	r0, r2
 800f746:	4798      	blx	r3
 800f748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74a:	e00f      	b.n	800f76c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fa49 	bl	800fbe6 <USBD_CtlError>
            err++;
 800f754:	7afb      	ldrb	r3, [r7, #11]
 800f756:	3301      	adds	r3, #1
 800f758:	72fb      	strb	r3, [r7, #11]
          break;
 800f75a:	e007      	b.n	800f76c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fa41 	bl	800fbe6 <USBD_CtlError>
          err++;
 800f764:	7afb      	ldrb	r3, [r7, #11]
 800f766:	3301      	adds	r3, #1
 800f768:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f76a:	bf00      	nop
      }
      break;
 800f76c:	e037      	b.n	800f7de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	7c1b      	ldrb	r3, [r3, #16]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d109      	bne.n	800f78a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f77c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f77e:	f107 0208 	add.w	r2, r7, #8
 800f782:	4610      	mov	r0, r2
 800f784:	4798      	blx	r3
 800f786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f788:	e029      	b.n	800f7de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 fa2a 	bl	800fbe6 <USBD_CtlError>
        err++;
 800f792:	7afb      	ldrb	r3, [r7, #11]
 800f794:	3301      	adds	r3, #1
 800f796:	72fb      	strb	r3, [r7, #11]
      break;
 800f798:	e021      	b.n	800f7de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	7c1b      	ldrb	r3, [r3, #16]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10d      	bne.n	800f7be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7aa:	f107 0208 	add.w	r2, r7, #8
 800f7ae:	4610      	mov	r0, r2
 800f7b0:	4798      	blx	r3
 800f7b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	2207      	movs	r2, #7
 800f7ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7bc:	e00f      	b.n	800f7de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7be:	6839      	ldr	r1, [r7, #0]
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fa10 	bl	800fbe6 <USBD_CtlError>
        err++;
 800f7c6:	7afb      	ldrb	r3, [r7, #11]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	72fb      	strb	r3, [r7, #11]
      break;
 800f7cc:	e007      	b.n	800f7de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f7ce:	6839      	ldr	r1, [r7, #0]
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 fa08 	bl	800fbe6 <USBD_CtlError>
      err++;
 800f7d6:	7afb      	ldrb	r3, [r7, #11]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	72fb      	strb	r3, [r7, #11]
      break;
 800f7dc:	bf00      	nop
  }

  if (err != 0U)
 800f7de:	7afb      	ldrb	r3, [r7, #11]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d11e      	bne.n	800f822 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	88db      	ldrh	r3, [r3, #6]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d016      	beq.n	800f81a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f7ec:	893b      	ldrh	r3, [r7, #8]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00e      	beq.n	800f810 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	88da      	ldrh	r2, [r3, #6]
 800f7f6:	893b      	ldrh	r3, [r7, #8]
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	bf28      	it	cs
 800f7fc:	4613      	movcs	r3, r2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f802:	893b      	ldrh	r3, [r7, #8]
 800f804:	461a      	mov	r2, r3
 800f806:	68f9      	ldr	r1, [r7, #12]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fa69 	bl	800fce0 <USBD_CtlSendData>
 800f80e:	e009      	b.n	800f824 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 f9e7 	bl	800fbe6 <USBD_CtlError>
 800f818:	e004      	b.n	800f824 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 faba 	bl	800fd94 <USBD_CtlSendStatus>
 800f820:	e000      	b.n	800f824 <USBD_GetDescriptor+0x2cc>
    return;
 800f822:	bf00      	nop
  }
}
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop

0800f82c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	889b      	ldrh	r3, [r3, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d131      	bne.n	800f8a2 <USBD_SetAddress+0x76>
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	88db      	ldrh	r3, [r3, #6]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d12d      	bne.n	800f8a2 <USBD_SetAddress+0x76>
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	885b      	ldrh	r3, [r3, #2]
 800f84a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f84c:	d829      	bhi.n	800f8a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	885b      	ldrh	r3, [r3, #2]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b03      	cmp	r3, #3
 800f864:	d104      	bne.n	800f870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f9bc 	bl	800fbe6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f86e:	e01d      	b.n	800f8ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	7bfa      	ldrb	r2, [r7, #15]
 800f874:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f878:	7bfb      	ldrb	r3, [r7, #15]
 800f87a:	4619      	mov	r1, r3
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 ff73 	bl	8010768 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fa86 	bl	800fd94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f888:	7bfb      	ldrb	r3, [r7, #15]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d004      	beq.n	800f898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2202      	movs	r2, #2
 800f892:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f896:	e009      	b.n	800f8ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2201      	movs	r2, #1
 800f89c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8a0:	e004      	b.n	800f8ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8a2:	6839      	ldr	r1, [r7, #0]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f99e 	bl	800fbe6 <USBD_CtlError>
  }
}
 800f8aa:	bf00      	nop
 800f8ac:	bf00      	nop
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	885b      	ldrh	r3, [r3, #2]
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	4b4e      	ldr	r3, [pc, #312]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f8ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8cc:	4b4d      	ldr	r3, [pc, #308]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d905      	bls.n	800f8e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 f985 	bl	800fbe6 <USBD_CtlError>
    return USBD_FAIL;
 800f8dc:	2303      	movs	r3, #3
 800f8de:	e08c      	b.n	800f9fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	d002      	beq.n	800f8f2 <USBD_SetConfig+0x3e>
 800f8ec:	2b03      	cmp	r3, #3
 800f8ee:	d029      	beq.n	800f944 <USBD_SetConfig+0x90>
 800f8f0:	e075      	b.n	800f9de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8f2:	4b44      	ldr	r3, [pc, #272]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d020      	beq.n	800f93c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f8fa:	4b42      	ldr	r3, [pc, #264]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f904:	4b3f      	ldr	r3, [pc, #252]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	4619      	mov	r1, r3
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7fe ffe3 	bl	800e8d6 <USBD_SetClassConfig>
 800f910:	4603      	mov	r3, r0
 800f912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f914:	7bfb      	ldrb	r3, [r7, #15]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 f962 	bl	800fbe6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2202      	movs	r2, #2
 800f926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f92a:	e065      	b.n	800f9f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fa31 	bl	800fd94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2203      	movs	r2, #3
 800f936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f93a:	e05d      	b.n	800f9f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 fa29 	bl	800fd94 <USBD_CtlSendStatus>
      break;
 800f942:	e059      	b.n	800f9f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f944:	4b2f      	ldr	r3, [pc, #188]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d112      	bne.n	800f972 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2202      	movs	r2, #2
 800f950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f954:	4b2b      	ldr	r3, [pc, #172]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	461a      	mov	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f95e:	4b29      	ldr	r3, [pc, #164]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7fe ffd2 	bl	800e90e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 fa12 	bl	800fd94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f970:	e042      	b.n	800f9f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f972:	4b24      	ldr	r3, [pc, #144]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d02a      	beq.n	800f9d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	b2db      	uxtb	r3, r3
 800f986:	4619      	mov	r1, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7fe ffc0 	bl	800e90e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f98e:	4b1d      	ldr	r3, [pc, #116]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f998:	4b1a      	ldr	r3, [pc, #104]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	4619      	mov	r1, r3
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7fe ff99 	bl	800e8d6 <USBD_SetClassConfig>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00f      	beq.n	800f9ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 f918 	bl	800fbe6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	4619      	mov	r1, r3
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7fe ffa5 	bl	800e90e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9cc:	e014      	b.n	800f9f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f9e0 	bl	800fd94 <USBD_CtlSendStatus>
      break;
 800f9d4:	e010      	b.n	800f9f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f9dc 	bl	800fd94 <USBD_CtlSendStatus>
      break;
 800f9dc:	e00c      	b.n	800f9f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 f900 	bl	800fbe6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9e6:	4b07      	ldr	r3, [pc, #28]	@ (800fa04 <USBD_SetConfig+0x150>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7fe ff8e 	bl	800e90e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9f2:	2303      	movs	r3, #3
 800f9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f6:	bf00      	nop
  }

  return ret;
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	200011dc 	.word	0x200011dc

0800fa08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	88db      	ldrh	r3, [r3, #6]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d004      	beq.n	800fa24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f8e2 	bl	800fbe6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa22:	e023      	b.n	800fa6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b02      	cmp	r3, #2
 800fa2e:	dc02      	bgt.n	800fa36 <USBD_GetConfig+0x2e>
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	dc03      	bgt.n	800fa3c <USBD_GetConfig+0x34>
 800fa34:	e015      	b.n	800fa62 <USBD_GetConfig+0x5a>
 800fa36:	2b03      	cmp	r3, #3
 800fa38:	d00b      	beq.n	800fa52 <USBD_GetConfig+0x4a>
 800fa3a:	e012      	b.n	800fa62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3308      	adds	r3, #8
 800fa46:	2201      	movs	r2, #1
 800fa48:	4619      	mov	r1, r3
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f948 	bl	800fce0 <USBD_CtlSendData>
        break;
 800fa50:	e00c      	b.n	800fa6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3304      	adds	r3, #4
 800fa56:	2201      	movs	r2, #1
 800fa58:	4619      	mov	r1, r3
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 f940 	bl	800fce0 <USBD_CtlSendData>
        break;
 800fa60:	e004      	b.n	800fa6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa62:	6839      	ldr	r1, [r7, #0]
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f8be 	bl	800fbe6 <USBD_CtlError>
        break;
 800fa6a:	bf00      	nop
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa84:	b2db      	uxtb	r3, r3
 800fa86:	3b01      	subs	r3, #1
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d81e      	bhi.n	800faca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	88db      	ldrh	r3, [r3, #6]
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d004      	beq.n	800fa9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa94:	6839      	ldr	r1, [r7, #0]
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f8a5 	bl	800fbe6 <USBD_CtlError>
        break;
 800fa9c:	e01a      	b.n	800fad4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d005      	beq.n	800faba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	f043 0202 	orr.w	r2, r3, #2
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	330c      	adds	r3, #12
 800fabe:	2202      	movs	r2, #2
 800fac0:	4619      	mov	r1, r3
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f90c 	bl	800fce0 <USBD_CtlSendData>
      break;
 800fac8:	e004      	b.n	800fad4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800faca:	6839      	ldr	r1, [r7, #0]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 f88a 	bl	800fbe6 <USBD_CtlError>
      break;
 800fad2:	bf00      	nop
  }
}
 800fad4:	bf00      	nop
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	885b      	ldrh	r3, [r3, #2]
 800faea:	2b01      	cmp	r3, #1
 800faec:	d107      	bne.n	800fafe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 f94c 	bl	800fd94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fafc:	e013      	b.n	800fb26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	885b      	ldrh	r3, [r3, #2]
 800fb02:	2b02      	cmp	r3, #2
 800fb04:	d10b      	bne.n	800fb1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	889b      	ldrh	r3, [r3, #4]
 800fb0a:	0a1b      	lsrs	r3, r3, #8
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f93c 	bl	800fd94 <USBD_CtlSendStatus>
}
 800fb1c:	e003      	b.n	800fb26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 f860 	bl	800fbe6 <USBD_CtlError>
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	3b01      	subs	r3, #1
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d80b      	bhi.n	800fb5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	885b      	ldrh	r3, [r3, #2]
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d10c      	bne.n	800fb68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 f91c 	bl	800fd94 <USBD_CtlSendStatus>
      }
      break;
 800fb5c:	e004      	b.n	800fb68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f840 	bl	800fbe6 <USBD_CtlError>
      break;
 800fb66:	e000      	b.n	800fb6a <USBD_ClrFeature+0x3c>
      break;
 800fb68:	bf00      	nop
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b084      	sub	sp, #16
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	781a      	ldrb	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	781a      	ldrb	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff fa40 	bl	800f022 <SWAPBYTE>
 800fba2:	4603      	mov	r3, r0
 800fba4:	461a      	mov	r2, r3
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3301      	adds	r3, #1
 800fbae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f7ff fa33 	bl	800f022 <SWAPBYTE>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f7ff fa26 	bl	800f022 <SWAPBYTE>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	461a      	mov	r2, r3
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	80da      	strh	r2, [r3, #6]
}
 800fbde:	bf00      	nop
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b082      	sub	sp, #8
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbf0:	2180      	movs	r1, #128	@ 0x80
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fd4e 	bl	8010694 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fd4a 	bl	8010694 <USBD_LL_StallEP>
}
 800fc00:	bf00      	nop
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc14:	2300      	movs	r3, #0
 800fc16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d042      	beq.n	800fca4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fc22:	6938      	ldr	r0, [r7, #16]
 800fc24:	f000 f842 	bl	800fcac <USBD_GetLen>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	005b      	lsls	r3, r3, #1
 800fc2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc32:	d808      	bhi.n	800fc46 <USBD_GetString+0x3e>
 800fc34:	6938      	ldr	r0, [r7, #16]
 800fc36:	f000 f839 	bl	800fcac <USBD_GetLen>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	e001      	b.n	800fc4a <USBD_GetString+0x42>
 800fc46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
 800fc50:	68ba      	ldr	r2, [r7, #8]
 800fc52:	4413      	add	r3, r2
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	7812      	ldrb	r2, [r2, #0]
 800fc58:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc5a:	7dfb      	ldrb	r3, [r7, #23]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	4413      	add	r3, r2
 800fc66:	2203      	movs	r2, #3
 800fc68:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc6a:	7dfb      	ldrb	r3, [r7, #23]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc70:	e013      	b.n	800fc9a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	4413      	add	r3, r2
 800fc78:	693a      	ldr	r2, [r7, #16]
 800fc7a:	7812      	ldrb	r2, [r2, #0]
 800fc7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	3301      	adds	r3, #1
 800fc82:	613b      	str	r3, [r7, #16]
    idx++;
 800fc84:	7dfb      	ldrb	r3, [r7, #23]
 800fc86:	3301      	adds	r3, #1
 800fc88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	4413      	add	r3, r2
 800fc90:	2200      	movs	r2, #0
 800fc92:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	3301      	adds	r3, #1
 800fc98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1e7      	bne.n	800fc72 <USBD_GetString+0x6a>
 800fca2:	e000      	b.n	800fca6 <USBD_GetString+0x9e>
    return;
 800fca4:	bf00      	nop
  }
}
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fcbc:	e005      	b.n	800fcca <USBD_GetLen+0x1e>
  {
    len++;
 800fcbe:	7bfb      	ldrb	r3, [r7, #15]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d1f5      	bne.n	800fcbe <USBD_GetLen+0x12>
  }

  return len;
 800fcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2202      	movs	r2, #2
 800fcf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	68ba      	ldr	r2, [r7, #8]
 800fd04:	2100      	movs	r1, #0
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f000 fd4d 	bl	80107a6 <USBD_LL_Transmit>

  return USBD_OK;
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b084      	sub	sp, #16
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	60f8      	str	r0, [r7, #12]
 800fd1e:	60b9      	str	r1, [r7, #8]
 800fd20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	68ba      	ldr	r2, [r7, #8]
 800fd26:	2100      	movs	r1, #0
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f000 fd3c 	bl	80107a6 <USBD_LL_Transmit>

  return USBD_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2203      	movs	r2, #3
 800fd48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	2100      	movs	r1, #0
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f000 fd40 	bl	80107e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b084      	sub	sp, #16
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	60f8      	str	r0, [r7, #12]
 800fd7a:	60b9      	str	r1, [r7, #8]
 800fd7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	2100      	movs	r1, #0
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f000 fd2f 	bl	80107e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2204      	movs	r2, #4
 800fda0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fda4:	2300      	movs	r3, #0
 800fda6:	2200      	movs	r2, #0
 800fda8:	2100      	movs	r1, #0
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fcfb 	bl	80107a6 <USBD_LL_Transmit>

  return USBD_OK;
 800fdb0:	2300      	movs	r3, #0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2205      	movs	r2, #5
 800fdc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdca:	2300      	movs	r3, #0
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2100      	movs	r1, #0
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fd09 	bl	80107e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fde4:	2200      	movs	r2, #0
 800fde6:	4912      	ldr	r1, [pc, #72]	@ (800fe30 <MX_USB_DEVICE_Init+0x50>)
 800fde8:	4812      	ldr	r0, [pc, #72]	@ (800fe34 <MX_USB_DEVICE_Init+0x54>)
 800fdea:	f7fe fcf7 	bl	800e7dc <USBD_Init>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d001      	beq.n	800fdf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fdf4:	f7f3 fab4 	bl	8003360 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fdf8:	490f      	ldr	r1, [pc, #60]	@ (800fe38 <MX_USB_DEVICE_Init+0x58>)
 800fdfa:	480e      	ldr	r0, [pc, #56]	@ (800fe34 <MX_USB_DEVICE_Init+0x54>)
 800fdfc:	f7fe fd1e 	bl	800e83c <USBD_RegisterClass>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d001      	beq.n	800fe0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fe06:	f7f3 faab 	bl	8003360 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fe0a:	490c      	ldr	r1, [pc, #48]	@ (800fe3c <MX_USB_DEVICE_Init+0x5c>)
 800fe0c:	4809      	ldr	r0, [pc, #36]	@ (800fe34 <MX_USB_DEVICE_Init+0x54>)
 800fe0e:	f7fe fc15 	bl	800e63c <USBD_CDC_RegisterInterface>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fe18:	f7f3 faa2 	bl	8003360 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe1c:	4805      	ldr	r0, [pc, #20]	@ (800fe34 <MX_USB_DEVICE_Init+0x54>)
 800fe1e:	f7fe fd43 	bl	800e8a8 <USBD_Start>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe28:	f7f3 fa9a 	bl	8003360 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe2c:	bf00      	nop
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	200000c4 	.word	0x200000c4
 800fe34:	200011e0 	.word	0x200011e0
 800fe38:	20000028 	.word	0x20000028
 800fe3c:	200000b0 	.word	0x200000b0

0800fe40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe44:	2200      	movs	r2, #0
 800fe46:	4905      	ldr	r1, [pc, #20]	@ (800fe5c <CDC_Init_FS+0x1c>)
 800fe48:	4805      	ldr	r0, [pc, #20]	@ (800fe60 <CDC_Init_FS+0x20>)
 800fe4a:	f7fe fc11 	bl	800e670 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe4e:	4905      	ldr	r1, [pc, #20]	@ (800fe64 <CDC_Init_FS+0x24>)
 800fe50:	4803      	ldr	r0, [pc, #12]	@ (800fe60 <CDC_Init_FS+0x20>)
 800fe52:	f7fe fc2f 	bl	800e6b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	200016bc 	.word	0x200016bc
 800fe60:	200011e0 	.word	0x200011e0
 800fe64:	200014bc 	.word	0x200014bc

0800fe68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	4603      	mov	r3, r0
 800fe80:	6039      	str	r1, [r7, #0]
 800fe82:	71fb      	strb	r3, [r7, #7]
 800fe84:	4613      	mov	r3, r2
 800fe86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe88:	79fb      	ldrb	r3, [r7, #7]
 800fe8a:	2b23      	cmp	r3, #35	@ 0x23
 800fe8c:	f200 8097 	bhi.w	800ffbe <CDC_Control_FS+0x146>
 800fe90:	a201      	add	r2, pc, #4	@ (adr r2, 800fe98 <CDC_Control_FS+0x20>)
 800fe92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe96:	bf00      	nop
 800fe98:	0800ffbf 	.word	0x0800ffbf
 800fe9c:	0800ffbf 	.word	0x0800ffbf
 800fea0:	0800ffbf 	.word	0x0800ffbf
 800fea4:	0800ffbf 	.word	0x0800ffbf
 800fea8:	0800ffbf 	.word	0x0800ffbf
 800feac:	0800ffbf 	.word	0x0800ffbf
 800feb0:	0800ffbf 	.word	0x0800ffbf
 800feb4:	0800ffbf 	.word	0x0800ffbf
 800feb8:	0800ffbf 	.word	0x0800ffbf
 800febc:	0800ffbf 	.word	0x0800ffbf
 800fec0:	0800ffbf 	.word	0x0800ffbf
 800fec4:	0800ffbf 	.word	0x0800ffbf
 800fec8:	0800ffbf 	.word	0x0800ffbf
 800fecc:	0800ffbf 	.word	0x0800ffbf
 800fed0:	0800ffbf 	.word	0x0800ffbf
 800fed4:	0800ffbf 	.word	0x0800ffbf
 800fed8:	0800ffbf 	.word	0x0800ffbf
 800fedc:	0800ffbf 	.word	0x0800ffbf
 800fee0:	0800ffbf 	.word	0x0800ffbf
 800fee4:	0800ffbf 	.word	0x0800ffbf
 800fee8:	0800ffbf 	.word	0x0800ffbf
 800feec:	0800ffbf 	.word	0x0800ffbf
 800fef0:	0800ffbf 	.word	0x0800ffbf
 800fef4:	0800ffbf 	.word	0x0800ffbf
 800fef8:	0800ffbf 	.word	0x0800ffbf
 800fefc:	0800ffbf 	.word	0x0800ffbf
 800ff00:	0800ffbf 	.word	0x0800ffbf
 800ff04:	0800ffbf 	.word	0x0800ffbf
 800ff08:	0800ffbf 	.word	0x0800ffbf
 800ff0c:	0800ffbf 	.word	0x0800ffbf
 800ff10:	0800ffbf 	.word	0x0800ffbf
 800ff14:	0800ffbf 	.word	0x0800ffbf
 800ff18:	0800ff29 	.word	0x0800ff29
 800ff1c:	0800ff6b 	.word	0x0800ff6b
 800ff20:	0800ffbf 	.word	0x0800ffbf
 800ff24:	0800ffbf 	.word	0x0800ffbf
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	3301      	adds	r3, #1
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	021b      	lsls	r3, r3, #8
 800ff36:	431a      	orrs	r2, r3
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	3302      	adds	r3, #2
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	041b      	lsls	r3, r3, #16
 800ff40:	431a      	orrs	r2, r3
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	3303      	adds	r3, #3
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	061b      	lsls	r3, r3, #24
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	4a20      	ldr	r2, [pc, #128]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff4e:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	791a      	ldrb	r2, [r3, #4]
 800ff54:	4b1e      	ldr	r3, [pc, #120]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff56:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	795a      	ldrb	r2, [r3, #5]
 800ff5c:	4b1c      	ldr	r3, [pc, #112]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff5e:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	799a      	ldrb	r2, [r3, #6]
 800ff64:	4b1a      	ldr	r3, [pc, #104]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff66:	719a      	strb	r2, [r3, #6]
    break;
 800ff68:	e02a      	b.n	800ffc0 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ff6a:	4b19      	ldr	r3, [pc, #100]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ff74:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	0a1a      	lsrs	r2, r3, #8
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	b2d2      	uxtb	r2, r2
 800ff80:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ff82:	4b13      	ldr	r3, [pc, #76]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	0c1a      	lsrs	r2, r3, #16
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	3302      	adds	r3, #2
 800ff8c:	b2d2      	uxtb	r2, r2
 800ff8e:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800ff90:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	0e1a      	lsrs	r2, r3, #24
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	3303      	adds	r3, #3
 800ff9a:	b2d2      	uxtb	r2, r2
 800ff9c:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4a0b      	ldr	r2, [pc, #44]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ffa4:	7912      	ldrb	r2, [r2, #4]
 800ffa6:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	3305      	adds	r3, #5
 800ffac:	4a08      	ldr	r2, [pc, #32]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ffae:	7952      	ldrb	r2, [r2, #5]
 800ffb0:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	3306      	adds	r3, #6
 800ffb6:	4a06      	ldr	r2, [pc, #24]	@ (800ffd0 <CDC_Control_FS+0x158>)
 800ffb8:	7992      	ldrb	r2, [r2, #6]
 800ffba:	701a      	strb	r2, [r3, #0]
	break;
 800ffbc:	e000      	b.n	800ffc0 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ffbe:	bf00      	nop
  }

  return (USBD_OK);
 800ffc0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	370c      	adds	r7, #12
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	200000a8 	.word	0x200000a8

0800ffd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 800ffde:	4b0b      	ldr	r3, [pc, #44]	@ (801000c <CDC_Receive_FS+0x38>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d006      	beq.n	800fff4 <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 800ffe6:	4b09      	ldr	r3, [pc, #36]	@ (801000c <CDC_Receive_FS+0x38>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	6812      	ldr	r2, [r2, #0]
 800ffee:	4611      	mov	r1, r2
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fff4:	6879      	ldr	r1, [r7, #4]
 800fff6:	4806      	ldr	r0, [pc, #24]	@ (8010010 <CDC_Receive_FS+0x3c>)
 800fff8:	f7fe fb5c 	bl	800e6b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fffc:	4804      	ldr	r0, [pc, #16]	@ (8010010 <CDC_Receive_FS+0x3c>)
 800fffe:	f7fe fbb7 	bl	800e770 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010002:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	200018bc 	.word	0x200018bc
 8010010:	200011e0 	.word	0x200011e0

08010014 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010020:	2300      	movs	r3, #0
 8010022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010024:	4b0d      	ldr	r3, [pc, #52]	@ (801005c <CDC_Transmit_FS+0x48>)
 8010026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801002a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010032:	2b00      	cmp	r3, #0
 8010034:	d001      	beq.n	801003a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010036:	2301      	movs	r3, #1
 8010038:	e00b      	b.n	8010052 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801003a:	887b      	ldrh	r3, [r7, #2]
 801003c:	461a      	mov	r2, r3
 801003e:	6879      	ldr	r1, [r7, #4]
 8010040:	4806      	ldr	r0, [pc, #24]	@ (801005c <CDC_Transmit_FS+0x48>)
 8010042:	f7fe fb15 	bl	800e670 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010046:	4805      	ldr	r0, [pc, #20]	@ (801005c <CDC_Transmit_FS+0x48>)
 8010048:	f7fe fb52 	bl	800e6f0 <USBD_CDC_TransmitPacket>
 801004c:	4603      	mov	r3, r0
 801004e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010050:	7bfb      	ldrb	r3, [r7, #15]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	200011e0 	.word	0x200011e0

08010060 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010060:	b480      	push	{r7}
 8010062:	b087      	sub	sp, #28
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	4613      	mov	r3, r2
 801006c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801006e:	2300      	movs	r3, #0
 8010070:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010076:	4618      	mov	r0, r3
 8010078:	371c      	adds	r7, #28
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
	...

08010084 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 801008c:	4a04      	ldr	r2, [pc, #16]	@ (80100a0 <CDC_Attach_Rx+0x1c>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6013      	str	r3, [r2, #0]
}
 8010092:	bf00      	nop
 8010094:	370c      	adds	r7, #12
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	200018bc 	.word	0x200018bc

080100a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	4603      	mov	r3, r0
 80100ac:	6039      	str	r1, [r7, #0]
 80100ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	2212      	movs	r2, #18
 80100b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100b6:	4b03      	ldr	r3, [pc, #12]	@ (80100c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	200000e0 	.word	0x200000e0

080100c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b083      	sub	sp, #12
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	4603      	mov	r3, r0
 80100d0:	6039      	str	r1, [r7, #0]
 80100d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2204      	movs	r2, #4
 80100d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100da:	4b03      	ldr	r3, [pc, #12]	@ (80100e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80100dc:	4618      	mov	r0, r3
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr
 80100e8:	200000f4 	.word	0x200000f4

080100ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	4603      	mov	r3, r0
 80100f4:	6039      	str	r1, [r7, #0]
 80100f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100f8:	79fb      	ldrb	r3, [r7, #7]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d105      	bne.n	801010a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80100fe:	683a      	ldr	r2, [r7, #0]
 8010100:	4907      	ldr	r1, [pc, #28]	@ (8010120 <USBD_FS_ProductStrDescriptor+0x34>)
 8010102:	4808      	ldr	r0, [pc, #32]	@ (8010124 <USBD_FS_ProductStrDescriptor+0x38>)
 8010104:	f7ff fd80 	bl	800fc08 <USBD_GetString>
 8010108:	e004      	b.n	8010114 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801010a:	683a      	ldr	r2, [r7, #0]
 801010c:	4904      	ldr	r1, [pc, #16]	@ (8010120 <USBD_FS_ProductStrDescriptor+0x34>)
 801010e:	4805      	ldr	r0, [pc, #20]	@ (8010124 <USBD_FS_ProductStrDescriptor+0x38>)
 8010110:	f7ff fd7a 	bl	800fc08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010114:	4b02      	ldr	r3, [pc, #8]	@ (8010120 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010116:	4618      	mov	r0, r3
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	200018c0 	.word	0x200018c0
 8010124:	080112fc 	.word	0x080112fc

08010128 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	4603      	mov	r3, r0
 8010130:	6039      	str	r1, [r7, #0]
 8010132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010134:	683a      	ldr	r2, [r7, #0]
 8010136:	4904      	ldr	r1, [pc, #16]	@ (8010148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010138:	4804      	ldr	r0, [pc, #16]	@ (801014c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801013a:	f7ff fd65 	bl	800fc08 <USBD_GetString>
  return USBD_StrDesc;
 801013e:	4b02      	ldr	r3, [pc, #8]	@ (8010148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	200018c0 	.word	0x200018c0
 801014c:	08011314 	.word	0x08011314

08010150 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	4603      	mov	r3, r0
 8010158:	6039      	str	r1, [r7, #0]
 801015a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	221a      	movs	r2, #26
 8010160:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010162:	f000 f843 	bl	80101ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010166:	4b02      	ldr	r3, [pc, #8]	@ (8010170 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010168:	4618      	mov	r0, r3
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	200000f8 	.word	0x200000f8

08010174 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d105      	bne.n	8010192 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	4907      	ldr	r1, [pc, #28]	@ (80101a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801018a:	4808      	ldr	r0, [pc, #32]	@ (80101ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801018c:	f7ff fd3c 	bl	800fc08 <USBD_GetString>
 8010190:	e004      	b.n	801019c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	4904      	ldr	r1, [pc, #16]	@ (80101a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010196:	4805      	ldr	r0, [pc, #20]	@ (80101ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8010198:	f7ff fd36 	bl	800fc08 <USBD_GetString>
  }
  return USBD_StrDesc;
 801019c:	4b02      	ldr	r3, [pc, #8]	@ (80101a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	200018c0 	.word	0x200018c0
 80101ac:	08011328 	.word	0x08011328

080101b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	6039      	str	r1, [r7, #0]
 80101ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d105      	bne.n	80101ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	4907      	ldr	r1, [pc, #28]	@ (80101e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101c6:	4808      	ldr	r0, [pc, #32]	@ (80101e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101c8:	f7ff fd1e 	bl	800fc08 <USBD_GetString>
 80101cc:	e004      	b.n	80101d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101ce:	683a      	ldr	r2, [r7, #0]
 80101d0:	4904      	ldr	r1, [pc, #16]	@ (80101e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101d2:	4805      	ldr	r0, [pc, #20]	@ (80101e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101d4:	f7ff fd18 	bl	800fc08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101d8:	4b02      	ldr	r3, [pc, #8]	@ (80101e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	200018c0 	.word	0x200018c0
 80101e8:	08011334 	.word	0x08011334

080101ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80101f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010230 <Get_SerialNum+0x44>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80101f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010234 <Get_SerialNum+0x48>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80101fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010238 <Get_SerialNum+0x4c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4413      	add	r3, r2
 801020a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d009      	beq.n	8010226 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010212:	2208      	movs	r2, #8
 8010214:	4909      	ldr	r1, [pc, #36]	@ (801023c <Get_SerialNum+0x50>)
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f000 f814 	bl	8010244 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801021c:	2204      	movs	r2, #4
 801021e:	4908      	ldr	r1, [pc, #32]	@ (8010240 <Get_SerialNum+0x54>)
 8010220:	68b8      	ldr	r0, [r7, #8]
 8010222:	f000 f80f 	bl	8010244 <IntToUnicode>
  }
}
 8010226:	bf00      	nop
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	1fff7a10 	.word	0x1fff7a10
 8010234:	1fff7a14 	.word	0x1fff7a14
 8010238:	1fff7a18 	.word	0x1fff7a18
 801023c:	200000fa 	.word	0x200000fa
 8010240:	2000010a 	.word	0x2000010a

08010244 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010244:	b480      	push	{r7}
 8010246:	b087      	sub	sp, #28
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	4613      	mov	r3, r2
 8010250:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010252:	2300      	movs	r3, #0
 8010254:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010256:	2300      	movs	r3, #0
 8010258:	75fb      	strb	r3, [r7, #23]
 801025a:	e027      	b.n	80102ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	0f1b      	lsrs	r3, r3, #28
 8010260:	2b09      	cmp	r3, #9
 8010262:	d80b      	bhi.n	801027c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	0f1b      	lsrs	r3, r3, #28
 8010268:	b2da      	uxtb	r2, r3
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	005b      	lsls	r3, r3, #1
 801026e:	4619      	mov	r1, r3
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	440b      	add	r3, r1
 8010274:	3230      	adds	r2, #48	@ 0x30
 8010276:	b2d2      	uxtb	r2, r2
 8010278:	701a      	strb	r2, [r3, #0]
 801027a:	e00a      	b.n	8010292 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	0f1b      	lsrs	r3, r3, #28
 8010280:	b2da      	uxtb	r2, r3
 8010282:	7dfb      	ldrb	r3, [r7, #23]
 8010284:	005b      	lsls	r3, r3, #1
 8010286:	4619      	mov	r1, r3
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	440b      	add	r3, r1
 801028c:	3237      	adds	r2, #55	@ 0x37
 801028e:	b2d2      	uxtb	r2, r2
 8010290:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	011b      	lsls	r3, r3, #4
 8010296:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010298:	7dfb      	ldrb	r3, [r7, #23]
 801029a:	005b      	lsls	r3, r3, #1
 801029c:	3301      	adds	r3, #1
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	4413      	add	r3, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102a6:	7dfb      	ldrb	r3, [r7, #23]
 80102a8:	3301      	adds	r3, #1
 80102aa:	75fb      	strb	r3, [r7, #23]
 80102ac:	7dfa      	ldrb	r2, [r7, #23]
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d3d3      	bcc.n	801025c <IntToUnicode+0x18>
  }
}
 80102b4:	bf00      	nop
 80102b6:	bf00      	nop
 80102b8:	371c      	adds	r7, #28
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr
	...

080102c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08a      	sub	sp, #40	@ 0x28
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102cc:	f107 0314 	add.w	r3, r7, #20
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
 80102d4:	605a      	str	r2, [r3, #4]
 80102d6:	609a      	str	r2, [r3, #8]
 80102d8:	60da      	str	r2, [r3, #12]
 80102da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80102e4:	d13a      	bne.n	801035c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102e6:	2300      	movs	r3, #0
 80102e8:	613b      	str	r3, [r7, #16]
 80102ea:	4b1e      	ldr	r3, [pc, #120]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 80102ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ee:	4a1d      	ldr	r2, [pc, #116]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 80102f0:	f043 0301 	orr.w	r3, r3, #1
 80102f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80102f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 80102f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102fa:	f003 0301 	and.w	r3, r3, #1
 80102fe:	613b      	str	r3, [r7, #16]
 8010300:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010302:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010308:	2302      	movs	r3, #2
 801030a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801030c:	2300      	movs	r3, #0
 801030e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010310:	2303      	movs	r3, #3
 8010312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010314:	230a      	movs	r3, #10
 8010316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010318:	f107 0314 	add.w	r3, r7, #20
 801031c:	4619      	mov	r1, r3
 801031e:	4812      	ldr	r0, [pc, #72]	@ (8010368 <HAL_PCD_MspInit+0xa4>)
 8010320:	f7f4 fe7c 	bl	800501c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010324:	4b0f      	ldr	r3, [pc, #60]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 8010326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010328:	4a0e      	ldr	r2, [pc, #56]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 801032a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801032e:	6353      	str	r3, [r2, #52]	@ 0x34
 8010330:	2300      	movs	r3, #0
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	4b0b      	ldr	r3, [pc, #44]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 8010336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010338:	4a0a      	ldr	r2, [pc, #40]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 801033a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801033e:	6453      	str	r3, [r2, #68]	@ 0x44
 8010340:	4b08      	ldr	r3, [pc, #32]	@ (8010364 <HAL_PCD_MspInit+0xa0>)
 8010342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801034c:	2200      	movs	r2, #0
 801034e:	2100      	movs	r1, #0
 8010350:	2043      	movs	r0, #67	@ 0x43
 8010352:	f7f4 fa10 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010356:	2043      	movs	r0, #67	@ 0x43
 8010358:	f7f4 fa29 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801035c:	bf00      	nop
 801035e:	3728      	adds	r7, #40	@ 0x28
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	40023800 	.word	0x40023800
 8010368:	40020000 	.word	0x40020000

0801036c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010380:	4619      	mov	r1, r3
 8010382:	4610      	mov	r0, r2
 8010384:	f7fe fadd 	bl	800e942 <USBD_LL_SetupStage>
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103a2:	78fa      	ldrb	r2, [r7, #3]
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	4613      	mov	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	4413      	add	r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	440b      	add	r3, r1
 80103b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	78fb      	ldrb	r3, [r7, #3]
 80103b8:	4619      	mov	r1, r3
 80103ba:	f7fe fb17 	bl	800e9ec <USBD_LL_DataOutStage>
}
 80103be:	bf00      	nop
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b082      	sub	sp, #8
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
 80103ce:	460b      	mov	r3, r1
 80103d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103d8:	78fa      	ldrb	r2, [r7, #3]
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	4613      	mov	r3, r2
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	4413      	add	r3, r2
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	440b      	add	r3, r1
 80103e6:	3320      	adds	r3, #32
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	78fb      	ldrb	r3, [r7, #3]
 80103ec:	4619      	mov	r1, r3
 80103ee:	f7fe fbb0 	bl	800eb52 <USBD_LL_DataInStage>
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010408:	4618      	mov	r0, r3
 801040a:	f7fe fcea 	bl	800ede2 <USBD_LL_SOF>
}
 801040e:	bf00      	nop
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010416:	b580      	push	{r7, lr}
 8010418:	b084      	sub	sp, #16
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801041e:	2301      	movs	r3, #1
 8010420:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	79db      	ldrb	r3, [r3, #7]
 8010426:	2b02      	cmp	r3, #2
 8010428:	d001      	beq.n	801042e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801042a:	f7f2 ff99 	bl	8003360 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010434:	7bfa      	ldrb	r2, [r7, #15]
 8010436:	4611      	mov	r1, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f7fe fc8e 	bl	800ed5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010444:	4618      	mov	r0, r3
 8010446:	f7fe fc36 	bl	800ecb6 <USBD_LL_Reset>
}
 801044a:	bf00      	nop
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
	...

08010454 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010462:	4618      	mov	r0, r3
 8010464:	f7fe fc89 	bl	800ed7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	6812      	ldr	r2, [r2, #0]
 8010476:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801047a:	f043 0301 	orr.w	r3, r3, #1
 801047e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	7adb      	ldrb	r3, [r3, #11]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d005      	beq.n	8010494 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010488:	4b04      	ldr	r3, [pc, #16]	@ (801049c <HAL_PCD_SuspendCallback+0x48>)
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	4a03      	ldr	r2, [pc, #12]	@ (801049c <HAL_PCD_SuspendCallback+0x48>)
 801048e:	f043 0306 	orr.w	r3, r3, #6
 8010492:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010494:	bf00      	nop
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	e000ed00 	.word	0xe000ed00

080104a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe fc7f 	bl	800edb2 <USBD_LL_Resume>
}
 80104b4:	bf00      	nop
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	460b      	mov	r3, r1
 80104c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104ce:	78fa      	ldrb	r2, [r7, #3]
 80104d0:	4611      	mov	r1, r2
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fe fcd7 	bl	800ee86 <USBD_LL_IsoOUTIncomplete>
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	460b      	mov	r3, r1
 80104ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104f2:	78fa      	ldrb	r2, [r7, #3]
 80104f4:	4611      	mov	r1, r2
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fe fc93 	bl	800ee22 <USBD_LL_IsoINIncomplete>
}
 80104fc:	bf00      	nop
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe fce9 	bl	800eeea <USBD_LL_DevConnected>
}
 8010518:	bf00      	nop
 801051a:	3708      	adds	r7, #8
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe fce6 	bl	800ef00 <USBD_LL_DevDisconnected>
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d13c      	bne.n	80105c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801054c:	4a20      	ldr	r2, [pc, #128]	@ (80105d0 <USBD_LL_Init+0x94>)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4a1e      	ldr	r2, [pc, #120]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010558:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801055c:	4b1c      	ldr	r3, [pc, #112]	@ (80105d0 <USBD_LL_Init+0x94>)
 801055e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8010562:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010564:	4b1a      	ldr	r3, [pc, #104]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010566:	2204      	movs	r2, #4
 8010568:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801056a:	4b19      	ldr	r3, [pc, #100]	@ (80105d0 <USBD_LL_Init+0x94>)
 801056c:	2202      	movs	r2, #2
 801056e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010570:	4b17      	ldr	r3, [pc, #92]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010572:	2200      	movs	r2, #0
 8010574:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010576:	4b16      	ldr	r3, [pc, #88]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010578:	2202      	movs	r2, #2
 801057a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801057c:	4b14      	ldr	r3, [pc, #80]	@ (80105d0 <USBD_LL_Init+0x94>)
 801057e:	2200      	movs	r2, #0
 8010580:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010582:	4b13      	ldr	r3, [pc, #76]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010584:	2200      	movs	r2, #0
 8010586:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010588:	4b11      	ldr	r3, [pc, #68]	@ (80105d0 <USBD_LL_Init+0x94>)
 801058a:	2200      	movs	r2, #0
 801058c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801058e:	4b10      	ldr	r3, [pc, #64]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010590:	2200      	movs	r2, #0
 8010592:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010594:	4b0e      	ldr	r3, [pc, #56]	@ (80105d0 <USBD_LL_Init+0x94>)
 8010596:	2200      	movs	r2, #0
 8010598:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801059a:	480d      	ldr	r0, [pc, #52]	@ (80105d0 <USBD_LL_Init+0x94>)
 801059c:	f7f8 fb09 	bl	8008bb2 <HAL_PCD_Init>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d001      	beq.n	80105aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80105a6:	f7f2 fedb 	bl	8003360 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105aa:	2180      	movs	r1, #128	@ 0x80
 80105ac:	4808      	ldr	r0, [pc, #32]	@ (80105d0 <USBD_LL_Init+0x94>)
 80105ae:	f7f9 fd36 	bl	800a01e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80105b2:	2240      	movs	r2, #64	@ 0x40
 80105b4:	2100      	movs	r1, #0
 80105b6:	4806      	ldr	r0, [pc, #24]	@ (80105d0 <USBD_LL_Init+0x94>)
 80105b8:	f7f9 fcea 	bl	8009f90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80105bc:	2280      	movs	r2, #128	@ 0x80
 80105be:	2101      	movs	r1, #1
 80105c0:	4803      	ldr	r0, [pc, #12]	@ (80105d0 <USBD_LL_Init+0x94>)
 80105c2:	f7f9 fce5 	bl	8009f90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	20001ac0 	.word	0x20001ac0

080105d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105dc:	2300      	movs	r3, #0
 80105de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7f8 fbf0 	bl	8008dd0 <HAL_PCD_Start>
 80105f0:	4603      	mov	r3, r0
 80105f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f942 	bl	8010880 <USBD_Get_USB_Status>
 80105fc:	4603      	mov	r3, r0
 80105fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010600:	7bbb      	ldrb	r3, [r7, #14]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b084      	sub	sp, #16
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	4608      	mov	r0, r1
 8010614:	4611      	mov	r1, r2
 8010616:	461a      	mov	r2, r3
 8010618:	4603      	mov	r3, r0
 801061a:	70fb      	strb	r3, [r7, #3]
 801061c:	460b      	mov	r3, r1
 801061e:	70bb      	strb	r3, [r7, #2]
 8010620:	4613      	mov	r3, r2
 8010622:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010624:	2300      	movs	r3, #0
 8010626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010632:	78bb      	ldrb	r3, [r7, #2]
 8010634:	883a      	ldrh	r2, [r7, #0]
 8010636:	78f9      	ldrb	r1, [r7, #3]
 8010638:	f7f9 f8c4 	bl	80097c4 <HAL_PCD_EP_Open>
 801063c:	4603      	mov	r3, r0
 801063e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010640:	7bfb      	ldrb	r3, [r7, #15]
 8010642:	4618      	mov	r0, r3
 8010644:	f000 f91c 	bl	8010880 <USBD_Get_USB_Status>
 8010648:	4603      	mov	r3, r0
 801064a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801064c:	7bbb      	ldrb	r3, [r7, #14]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b084      	sub	sp, #16
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	460b      	mov	r3, r1
 8010660:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010662:	2300      	movs	r3, #0
 8010664:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010666:	2300      	movs	r3, #0
 8010668:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010670:	78fa      	ldrb	r2, [r7, #3]
 8010672:	4611      	mov	r1, r2
 8010674:	4618      	mov	r0, r3
 8010676:	f7f9 f90f 	bl	8009898 <HAL_PCD_EP_Close>
 801067a:	4603      	mov	r3, r0
 801067c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801067e:	7bfb      	ldrb	r3, [r7, #15]
 8010680:	4618      	mov	r0, r3
 8010682:	f000 f8fd 	bl	8010880 <USBD_Get_USB_Status>
 8010686:	4603      	mov	r3, r0
 8010688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801068a:	7bbb      	ldrb	r3, [r7, #14]
}
 801068c:	4618      	mov	r0, r3
 801068e:	3710      	adds	r7, #16
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106a0:	2300      	movs	r3, #0
 80106a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106ae:	78fa      	ldrb	r2, [r7, #3]
 80106b0:	4611      	mov	r1, r2
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f9 f9c7 	bl	8009a46 <HAL_PCD_EP_SetStall>
 80106b8:	4603      	mov	r3, r0
 80106ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
 80106be:	4618      	mov	r0, r3
 80106c0:	f000 f8de 	bl	8010880 <USBD_Get_USB_Status>
 80106c4:	4603      	mov	r3, r0
 80106c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b084      	sub	sp, #16
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
 80106da:	460b      	mov	r3, r1
 80106dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106e2:	2300      	movs	r3, #0
 80106e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106ec:	78fa      	ldrb	r2, [r7, #3]
 80106ee:	4611      	mov	r1, r2
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f9 fa0b 	bl	8009b0c <HAL_PCD_EP_ClrStall>
 80106f6:	4603      	mov	r3, r0
 80106f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 f8bf 	bl	8010880 <USBD_Get_USB_Status>
 8010702:	4603      	mov	r3, r0
 8010704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010706:	7bbb      	ldrb	r3, [r7, #14]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	460b      	mov	r3, r1
 801071a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010722:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010728:	2b00      	cmp	r3, #0
 801072a:	da0b      	bge.n	8010744 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801072c:	78fb      	ldrb	r3, [r7, #3]
 801072e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010732:	68f9      	ldr	r1, [r7, #12]
 8010734:	4613      	mov	r3, r2
 8010736:	00db      	lsls	r3, r3, #3
 8010738:	4413      	add	r3, r2
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	440b      	add	r3, r1
 801073e:	3316      	adds	r3, #22
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	e00b      	b.n	801075c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010744:	78fb      	ldrb	r3, [r7, #3]
 8010746:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801074a:	68f9      	ldr	r1, [r7, #12]
 801074c:	4613      	mov	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	4413      	add	r3, r2
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	440b      	add	r3, r1
 8010756:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801075a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801075c:	4618      	mov	r0, r3
 801075e:	3714      	adds	r7, #20
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	460b      	mov	r3, r1
 8010772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010778:	2300      	movs	r3, #0
 801077a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010782:	78fa      	ldrb	r2, [r7, #3]
 8010784:	4611      	mov	r1, r2
 8010786:	4618      	mov	r0, r3
 8010788:	f7f8 fff8 	bl	800977c <HAL_PCD_SetAddress>
 801078c:	4603      	mov	r3, r0
 801078e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010790:	7bfb      	ldrb	r3, [r7, #15]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 f874 	bl	8010880 <USBD_Get_USB_Status>
 8010798:	4603      	mov	r3, r0
 801079a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801079c:	7bbb      	ldrb	r3, [r7, #14]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b086      	sub	sp, #24
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	60f8      	str	r0, [r7, #12]
 80107ae:	607a      	str	r2, [r7, #4]
 80107b0:	603b      	str	r3, [r7, #0]
 80107b2:	460b      	mov	r3, r1
 80107b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107b6:	2300      	movs	r3, #0
 80107b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80107c4:	7af9      	ldrb	r1, [r7, #11]
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	f7f9 f902 	bl	80099d2 <HAL_PCD_EP_Transmit>
 80107ce:	4603      	mov	r3, r0
 80107d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f000 f853 	bl	8010880 <USBD_Get_USB_Status>
 80107da:	4603      	mov	r3, r0
 80107dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107de:	7dbb      	ldrb	r3, [r7, #22]
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3718      	adds	r7, #24
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b086      	sub	sp, #24
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	607a      	str	r2, [r7, #4]
 80107f2:	603b      	str	r3, [r7, #0]
 80107f4:	460b      	mov	r3, r1
 80107f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107f8:	2300      	movs	r3, #0
 80107fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010806:	7af9      	ldrb	r1, [r7, #11]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	f7f9 f88e 	bl	800992c <HAL_PCD_EP_Receive>
 8010810:	4603      	mov	r3, r0
 8010812:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010814:	7dfb      	ldrb	r3, [r7, #23]
 8010816:	4618      	mov	r0, r3
 8010818:	f000 f832 	bl	8010880 <USBD_Get_USB_Status>
 801081c:	4603      	mov	r3, r0
 801081e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010820:	7dbb      	ldrb	r3, [r7, #22]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b082      	sub	sp, #8
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
 8010832:	460b      	mov	r3, r1
 8010834:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801083c:	78fa      	ldrb	r2, [r7, #3]
 801083e:	4611      	mov	r1, r2
 8010840:	4618      	mov	r0, r3
 8010842:	f7f9 f8ae 	bl	80099a2 <HAL_PCD_EP_GetRxCount>
 8010846:	4603      	mov	r3, r0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010858:	4b03      	ldr	r3, [pc, #12]	@ (8010868 <USBD_static_malloc+0x18>)
}
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	20001fa4 	.word	0x20001fa4

0801086c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]

}
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	4603      	mov	r3, r0
 8010888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801088a:	2300      	movs	r3, #0
 801088c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2b03      	cmp	r3, #3
 8010892:	d817      	bhi.n	80108c4 <USBD_Get_USB_Status+0x44>
 8010894:	a201      	add	r2, pc, #4	@ (adr r2, 801089c <USBD_Get_USB_Status+0x1c>)
 8010896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089a:	bf00      	nop
 801089c:	080108ad 	.word	0x080108ad
 80108a0:	080108b3 	.word	0x080108b3
 80108a4:	080108b9 	.word	0x080108b9
 80108a8:	080108bf 	.word	0x080108bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108ac:	2300      	movs	r3, #0
 80108ae:	73fb      	strb	r3, [r7, #15]
    break;
 80108b0:	e00b      	b.n	80108ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108b2:	2303      	movs	r3, #3
 80108b4:	73fb      	strb	r3, [r7, #15]
    break;
 80108b6:	e008      	b.n	80108ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108b8:	2301      	movs	r3, #1
 80108ba:	73fb      	strb	r3, [r7, #15]
    break;
 80108bc:	e005      	b.n	80108ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108be:	2303      	movs	r3, #3
 80108c0:	73fb      	strb	r3, [r7, #15]
    break;
 80108c2:	e002      	b.n	80108ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108c4:	2303      	movs	r3, #3
 80108c6:	73fb      	strb	r3, [r7, #15]
    break;
 80108c8:	bf00      	nop
  }
  return usb_status;
 80108ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3714      	adds	r7, #20
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <siprintf>:
 80108d8:	b40e      	push	{r1, r2, r3}
 80108da:	b510      	push	{r4, lr}
 80108dc:	b09d      	sub	sp, #116	@ 0x74
 80108de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80108e0:	9002      	str	r0, [sp, #8]
 80108e2:	9006      	str	r0, [sp, #24]
 80108e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80108e8:	480a      	ldr	r0, [pc, #40]	@ (8010914 <siprintf+0x3c>)
 80108ea:	9107      	str	r1, [sp, #28]
 80108ec:	9104      	str	r1, [sp, #16]
 80108ee:	490a      	ldr	r1, [pc, #40]	@ (8010918 <siprintf+0x40>)
 80108f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108f4:	9105      	str	r1, [sp, #20]
 80108f6:	2400      	movs	r4, #0
 80108f8:	a902      	add	r1, sp, #8
 80108fa:	6800      	ldr	r0, [r0, #0]
 80108fc:	9301      	str	r3, [sp, #4]
 80108fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010900:	f000 f9a2 	bl	8010c48 <_svfiprintf_r>
 8010904:	9b02      	ldr	r3, [sp, #8]
 8010906:	701c      	strb	r4, [r3, #0]
 8010908:	b01d      	add	sp, #116	@ 0x74
 801090a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801090e:	b003      	add	sp, #12
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	20000114 	.word	0x20000114
 8010918:	ffff0208 	.word	0xffff0208

0801091c <memset>:
 801091c:	4402      	add	r2, r0
 801091e:	4603      	mov	r3, r0
 8010920:	4293      	cmp	r3, r2
 8010922:	d100      	bne.n	8010926 <memset+0xa>
 8010924:	4770      	bx	lr
 8010926:	f803 1b01 	strb.w	r1, [r3], #1
 801092a:	e7f9      	b.n	8010920 <memset+0x4>

0801092c <__errno>:
 801092c:	4b01      	ldr	r3, [pc, #4]	@ (8010934 <__errno+0x8>)
 801092e:	6818      	ldr	r0, [r3, #0]
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	20000114 	.word	0x20000114

08010938 <__libc_init_array>:
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	4d0d      	ldr	r5, [pc, #52]	@ (8010970 <__libc_init_array+0x38>)
 801093c:	4c0d      	ldr	r4, [pc, #52]	@ (8010974 <__libc_init_array+0x3c>)
 801093e:	1b64      	subs	r4, r4, r5
 8010940:	10a4      	asrs	r4, r4, #2
 8010942:	2600      	movs	r6, #0
 8010944:	42a6      	cmp	r6, r4
 8010946:	d109      	bne.n	801095c <__libc_init_array+0x24>
 8010948:	4d0b      	ldr	r5, [pc, #44]	@ (8010978 <__libc_init_array+0x40>)
 801094a:	4c0c      	ldr	r4, [pc, #48]	@ (801097c <__libc_init_array+0x44>)
 801094c:	f000 fc64 	bl	8011218 <_init>
 8010950:	1b64      	subs	r4, r4, r5
 8010952:	10a4      	asrs	r4, r4, #2
 8010954:	2600      	movs	r6, #0
 8010956:	42a6      	cmp	r6, r4
 8010958:	d105      	bne.n	8010966 <__libc_init_array+0x2e>
 801095a:	bd70      	pop	{r4, r5, r6, pc}
 801095c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010960:	4798      	blx	r3
 8010962:	3601      	adds	r6, #1
 8010964:	e7ee      	b.n	8010944 <__libc_init_array+0xc>
 8010966:	f855 3b04 	ldr.w	r3, [r5], #4
 801096a:	4798      	blx	r3
 801096c:	3601      	adds	r6, #1
 801096e:	e7f2      	b.n	8010956 <__libc_init_array+0x1e>
 8010970:	08012474 	.word	0x08012474
 8010974:	08012474 	.word	0x08012474
 8010978:	08012474 	.word	0x08012474
 801097c:	08012478 	.word	0x08012478

08010980 <__retarget_lock_acquire_recursive>:
 8010980:	4770      	bx	lr

08010982 <__retarget_lock_release_recursive>:
 8010982:	4770      	bx	lr

08010984 <memcpy>:
 8010984:	440a      	add	r2, r1
 8010986:	4291      	cmp	r1, r2
 8010988:	f100 33ff 	add.w	r3, r0, #4294967295
 801098c:	d100      	bne.n	8010990 <memcpy+0xc>
 801098e:	4770      	bx	lr
 8010990:	b510      	push	{r4, lr}
 8010992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010996:	f803 4f01 	strb.w	r4, [r3, #1]!
 801099a:	4291      	cmp	r1, r2
 801099c:	d1f9      	bne.n	8010992 <memcpy+0xe>
 801099e:	bd10      	pop	{r4, pc}

080109a0 <_free_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4605      	mov	r5, r0
 80109a4:	2900      	cmp	r1, #0
 80109a6:	d041      	beq.n	8010a2c <_free_r+0x8c>
 80109a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109ac:	1f0c      	subs	r4, r1, #4
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	bfb8      	it	lt
 80109b2:	18e4      	addlt	r4, r4, r3
 80109b4:	f000 f8e0 	bl	8010b78 <__malloc_lock>
 80109b8:	4a1d      	ldr	r2, [pc, #116]	@ (8010a30 <_free_r+0x90>)
 80109ba:	6813      	ldr	r3, [r2, #0]
 80109bc:	b933      	cbnz	r3, 80109cc <_free_r+0x2c>
 80109be:	6063      	str	r3, [r4, #4]
 80109c0:	6014      	str	r4, [r2, #0]
 80109c2:	4628      	mov	r0, r5
 80109c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109c8:	f000 b8dc 	b.w	8010b84 <__malloc_unlock>
 80109cc:	42a3      	cmp	r3, r4
 80109ce:	d908      	bls.n	80109e2 <_free_r+0x42>
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	1821      	adds	r1, r4, r0
 80109d4:	428b      	cmp	r3, r1
 80109d6:	bf01      	itttt	eq
 80109d8:	6819      	ldreq	r1, [r3, #0]
 80109da:	685b      	ldreq	r3, [r3, #4]
 80109dc:	1809      	addeq	r1, r1, r0
 80109de:	6021      	streq	r1, [r4, #0]
 80109e0:	e7ed      	b.n	80109be <_free_r+0x1e>
 80109e2:	461a      	mov	r2, r3
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	b10b      	cbz	r3, 80109ec <_free_r+0x4c>
 80109e8:	42a3      	cmp	r3, r4
 80109ea:	d9fa      	bls.n	80109e2 <_free_r+0x42>
 80109ec:	6811      	ldr	r1, [r2, #0]
 80109ee:	1850      	adds	r0, r2, r1
 80109f0:	42a0      	cmp	r0, r4
 80109f2:	d10b      	bne.n	8010a0c <_free_r+0x6c>
 80109f4:	6820      	ldr	r0, [r4, #0]
 80109f6:	4401      	add	r1, r0
 80109f8:	1850      	adds	r0, r2, r1
 80109fa:	4283      	cmp	r3, r0
 80109fc:	6011      	str	r1, [r2, #0]
 80109fe:	d1e0      	bne.n	80109c2 <_free_r+0x22>
 8010a00:	6818      	ldr	r0, [r3, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	6053      	str	r3, [r2, #4]
 8010a06:	4408      	add	r0, r1
 8010a08:	6010      	str	r0, [r2, #0]
 8010a0a:	e7da      	b.n	80109c2 <_free_r+0x22>
 8010a0c:	d902      	bls.n	8010a14 <_free_r+0x74>
 8010a0e:	230c      	movs	r3, #12
 8010a10:	602b      	str	r3, [r5, #0]
 8010a12:	e7d6      	b.n	80109c2 <_free_r+0x22>
 8010a14:	6820      	ldr	r0, [r4, #0]
 8010a16:	1821      	adds	r1, r4, r0
 8010a18:	428b      	cmp	r3, r1
 8010a1a:	bf04      	itt	eq
 8010a1c:	6819      	ldreq	r1, [r3, #0]
 8010a1e:	685b      	ldreq	r3, [r3, #4]
 8010a20:	6063      	str	r3, [r4, #4]
 8010a22:	bf04      	itt	eq
 8010a24:	1809      	addeq	r1, r1, r0
 8010a26:	6021      	streq	r1, [r4, #0]
 8010a28:	6054      	str	r4, [r2, #4]
 8010a2a:	e7ca      	b.n	80109c2 <_free_r+0x22>
 8010a2c:	bd38      	pop	{r3, r4, r5, pc}
 8010a2e:	bf00      	nop
 8010a30:	20002308 	.word	0x20002308

08010a34 <sbrk_aligned>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4e0f      	ldr	r6, [pc, #60]	@ (8010a74 <sbrk_aligned+0x40>)
 8010a38:	460c      	mov	r4, r1
 8010a3a:	6831      	ldr	r1, [r6, #0]
 8010a3c:	4605      	mov	r5, r0
 8010a3e:	b911      	cbnz	r1, 8010a46 <sbrk_aligned+0x12>
 8010a40:	f000 fba4 	bl	801118c <_sbrk_r>
 8010a44:	6030      	str	r0, [r6, #0]
 8010a46:	4621      	mov	r1, r4
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f000 fb9f 	bl	801118c <_sbrk_r>
 8010a4e:	1c43      	adds	r3, r0, #1
 8010a50:	d103      	bne.n	8010a5a <sbrk_aligned+0x26>
 8010a52:	f04f 34ff 	mov.w	r4, #4294967295
 8010a56:	4620      	mov	r0, r4
 8010a58:	bd70      	pop	{r4, r5, r6, pc}
 8010a5a:	1cc4      	adds	r4, r0, #3
 8010a5c:	f024 0403 	bic.w	r4, r4, #3
 8010a60:	42a0      	cmp	r0, r4
 8010a62:	d0f8      	beq.n	8010a56 <sbrk_aligned+0x22>
 8010a64:	1a21      	subs	r1, r4, r0
 8010a66:	4628      	mov	r0, r5
 8010a68:	f000 fb90 	bl	801118c <_sbrk_r>
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	d1f2      	bne.n	8010a56 <sbrk_aligned+0x22>
 8010a70:	e7ef      	b.n	8010a52 <sbrk_aligned+0x1e>
 8010a72:	bf00      	nop
 8010a74:	20002304 	.word	0x20002304

08010a78 <_malloc_r>:
 8010a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a7c:	1ccd      	adds	r5, r1, #3
 8010a7e:	f025 0503 	bic.w	r5, r5, #3
 8010a82:	3508      	adds	r5, #8
 8010a84:	2d0c      	cmp	r5, #12
 8010a86:	bf38      	it	cc
 8010a88:	250c      	movcc	r5, #12
 8010a8a:	2d00      	cmp	r5, #0
 8010a8c:	4606      	mov	r6, r0
 8010a8e:	db01      	blt.n	8010a94 <_malloc_r+0x1c>
 8010a90:	42a9      	cmp	r1, r5
 8010a92:	d904      	bls.n	8010a9e <_malloc_r+0x26>
 8010a94:	230c      	movs	r3, #12
 8010a96:	6033      	str	r3, [r6, #0]
 8010a98:	2000      	movs	r0, #0
 8010a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b74 <_malloc_r+0xfc>
 8010aa2:	f000 f869 	bl	8010b78 <__malloc_lock>
 8010aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8010aaa:	461c      	mov	r4, r3
 8010aac:	bb44      	cbnz	r4, 8010b00 <_malloc_r+0x88>
 8010aae:	4629      	mov	r1, r5
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	f7ff ffbf 	bl	8010a34 <sbrk_aligned>
 8010ab6:	1c43      	adds	r3, r0, #1
 8010ab8:	4604      	mov	r4, r0
 8010aba:	d158      	bne.n	8010b6e <_malloc_r+0xf6>
 8010abc:	f8d8 4000 	ldr.w	r4, [r8]
 8010ac0:	4627      	mov	r7, r4
 8010ac2:	2f00      	cmp	r7, #0
 8010ac4:	d143      	bne.n	8010b4e <_malloc_r+0xd6>
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	d04b      	beq.n	8010b62 <_malloc_r+0xea>
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	4639      	mov	r1, r7
 8010ace:	4630      	mov	r0, r6
 8010ad0:	eb04 0903 	add.w	r9, r4, r3
 8010ad4:	f000 fb5a 	bl	801118c <_sbrk_r>
 8010ad8:	4581      	cmp	r9, r0
 8010ada:	d142      	bne.n	8010b62 <_malloc_r+0xea>
 8010adc:	6821      	ldr	r1, [r4, #0]
 8010ade:	1a6d      	subs	r5, r5, r1
 8010ae0:	4629      	mov	r1, r5
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	f7ff ffa6 	bl	8010a34 <sbrk_aligned>
 8010ae8:	3001      	adds	r0, #1
 8010aea:	d03a      	beq.n	8010b62 <_malloc_r+0xea>
 8010aec:	6823      	ldr	r3, [r4, #0]
 8010aee:	442b      	add	r3, r5
 8010af0:	6023      	str	r3, [r4, #0]
 8010af2:	f8d8 3000 	ldr.w	r3, [r8]
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	bb62      	cbnz	r2, 8010b54 <_malloc_r+0xdc>
 8010afa:	f8c8 7000 	str.w	r7, [r8]
 8010afe:	e00f      	b.n	8010b20 <_malloc_r+0xa8>
 8010b00:	6822      	ldr	r2, [r4, #0]
 8010b02:	1b52      	subs	r2, r2, r5
 8010b04:	d420      	bmi.n	8010b48 <_malloc_r+0xd0>
 8010b06:	2a0b      	cmp	r2, #11
 8010b08:	d917      	bls.n	8010b3a <_malloc_r+0xc2>
 8010b0a:	1961      	adds	r1, r4, r5
 8010b0c:	42a3      	cmp	r3, r4
 8010b0e:	6025      	str	r5, [r4, #0]
 8010b10:	bf18      	it	ne
 8010b12:	6059      	strne	r1, [r3, #4]
 8010b14:	6863      	ldr	r3, [r4, #4]
 8010b16:	bf08      	it	eq
 8010b18:	f8c8 1000 	streq.w	r1, [r8]
 8010b1c:	5162      	str	r2, [r4, r5]
 8010b1e:	604b      	str	r3, [r1, #4]
 8010b20:	4630      	mov	r0, r6
 8010b22:	f000 f82f 	bl	8010b84 <__malloc_unlock>
 8010b26:	f104 000b 	add.w	r0, r4, #11
 8010b2a:	1d23      	adds	r3, r4, #4
 8010b2c:	f020 0007 	bic.w	r0, r0, #7
 8010b30:	1ac2      	subs	r2, r0, r3
 8010b32:	bf1c      	itt	ne
 8010b34:	1a1b      	subne	r3, r3, r0
 8010b36:	50a3      	strne	r3, [r4, r2]
 8010b38:	e7af      	b.n	8010a9a <_malloc_r+0x22>
 8010b3a:	6862      	ldr	r2, [r4, #4]
 8010b3c:	42a3      	cmp	r3, r4
 8010b3e:	bf0c      	ite	eq
 8010b40:	f8c8 2000 	streq.w	r2, [r8]
 8010b44:	605a      	strne	r2, [r3, #4]
 8010b46:	e7eb      	b.n	8010b20 <_malloc_r+0xa8>
 8010b48:	4623      	mov	r3, r4
 8010b4a:	6864      	ldr	r4, [r4, #4]
 8010b4c:	e7ae      	b.n	8010aac <_malloc_r+0x34>
 8010b4e:	463c      	mov	r4, r7
 8010b50:	687f      	ldr	r7, [r7, #4]
 8010b52:	e7b6      	b.n	8010ac2 <_malloc_r+0x4a>
 8010b54:	461a      	mov	r2, r3
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	42a3      	cmp	r3, r4
 8010b5a:	d1fb      	bne.n	8010b54 <_malloc_r+0xdc>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	6053      	str	r3, [r2, #4]
 8010b60:	e7de      	b.n	8010b20 <_malloc_r+0xa8>
 8010b62:	230c      	movs	r3, #12
 8010b64:	6033      	str	r3, [r6, #0]
 8010b66:	4630      	mov	r0, r6
 8010b68:	f000 f80c 	bl	8010b84 <__malloc_unlock>
 8010b6c:	e794      	b.n	8010a98 <_malloc_r+0x20>
 8010b6e:	6005      	str	r5, [r0, #0]
 8010b70:	e7d6      	b.n	8010b20 <_malloc_r+0xa8>
 8010b72:	bf00      	nop
 8010b74:	20002308 	.word	0x20002308

08010b78 <__malloc_lock>:
 8010b78:	4801      	ldr	r0, [pc, #4]	@ (8010b80 <__malloc_lock+0x8>)
 8010b7a:	f7ff bf01 	b.w	8010980 <__retarget_lock_acquire_recursive>
 8010b7e:	bf00      	nop
 8010b80:	20002300 	.word	0x20002300

08010b84 <__malloc_unlock>:
 8010b84:	4801      	ldr	r0, [pc, #4]	@ (8010b8c <__malloc_unlock+0x8>)
 8010b86:	f7ff befc 	b.w	8010982 <__retarget_lock_release_recursive>
 8010b8a:	bf00      	nop
 8010b8c:	20002300 	.word	0x20002300

08010b90 <__ssputs_r>:
 8010b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b94:	688e      	ldr	r6, [r1, #8]
 8010b96:	461f      	mov	r7, r3
 8010b98:	42be      	cmp	r6, r7
 8010b9a:	680b      	ldr	r3, [r1, #0]
 8010b9c:	4682      	mov	sl, r0
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	4690      	mov	r8, r2
 8010ba2:	d82d      	bhi.n	8010c00 <__ssputs_r+0x70>
 8010ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010bac:	d026      	beq.n	8010bfc <__ssputs_r+0x6c>
 8010bae:	6965      	ldr	r5, [r4, #20]
 8010bb0:	6909      	ldr	r1, [r1, #16]
 8010bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bb6:	eba3 0901 	sub.w	r9, r3, r1
 8010bba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bbe:	1c7b      	adds	r3, r7, #1
 8010bc0:	444b      	add	r3, r9
 8010bc2:	106d      	asrs	r5, r5, #1
 8010bc4:	429d      	cmp	r5, r3
 8010bc6:	bf38      	it	cc
 8010bc8:	461d      	movcc	r5, r3
 8010bca:	0553      	lsls	r3, r2, #21
 8010bcc:	d527      	bpl.n	8010c1e <__ssputs_r+0x8e>
 8010bce:	4629      	mov	r1, r5
 8010bd0:	f7ff ff52 	bl	8010a78 <_malloc_r>
 8010bd4:	4606      	mov	r6, r0
 8010bd6:	b360      	cbz	r0, 8010c32 <__ssputs_r+0xa2>
 8010bd8:	6921      	ldr	r1, [r4, #16]
 8010bda:	464a      	mov	r2, r9
 8010bdc:	f7ff fed2 	bl	8010984 <memcpy>
 8010be0:	89a3      	ldrh	r3, [r4, #12]
 8010be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bea:	81a3      	strh	r3, [r4, #12]
 8010bec:	6126      	str	r6, [r4, #16]
 8010bee:	6165      	str	r5, [r4, #20]
 8010bf0:	444e      	add	r6, r9
 8010bf2:	eba5 0509 	sub.w	r5, r5, r9
 8010bf6:	6026      	str	r6, [r4, #0]
 8010bf8:	60a5      	str	r5, [r4, #8]
 8010bfa:	463e      	mov	r6, r7
 8010bfc:	42be      	cmp	r6, r7
 8010bfe:	d900      	bls.n	8010c02 <__ssputs_r+0x72>
 8010c00:	463e      	mov	r6, r7
 8010c02:	6820      	ldr	r0, [r4, #0]
 8010c04:	4632      	mov	r2, r6
 8010c06:	4641      	mov	r1, r8
 8010c08:	f000 faa6 	bl	8011158 <memmove>
 8010c0c:	68a3      	ldr	r3, [r4, #8]
 8010c0e:	1b9b      	subs	r3, r3, r6
 8010c10:	60a3      	str	r3, [r4, #8]
 8010c12:	6823      	ldr	r3, [r4, #0]
 8010c14:	4433      	add	r3, r6
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	2000      	movs	r0, #0
 8010c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c1e:	462a      	mov	r2, r5
 8010c20:	f000 fac4 	bl	80111ac <_realloc_r>
 8010c24:	4606      	mov	r6, r0
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d1e0      	bne.n	8010bec <__ssputs_r+0x5c>
 8010c2a:	6921      	ldr	r1, [r4, #16]
 8010c2c:	4650      	mov	r0, sl
 8010c2e:	f7ff feb7 	bl	80109a0 <_free_r>
 8010c32:	230c      	movs	r3, #12
 8010c34:	f8ca 3000 	str.w	r3, [sl]
 8010c38:	89a3      	ldrh	r3, [r4, #12]
 8010c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c3e:	81a3      	strh	r3, [r4, #12]
 8010c40:	f04f 30ff 	mov.w	r0, #4294967295
 8010c44:	e7e9      	b.n	8010c1a <__ssputs_r+0x8a>
	...

08010c48 <_svfiprintf_r>:
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	4698      	mov	r8, r3
 8010c4e:	898b      	ldrh	r3, [r1, #12]
 8010c50:	061b      	lsls	r3, r3, #24
 8010c52:	b09d      	sub	sp, #116	@ 0x74
 8010c54:	4607      	mov	r7, r0
 8010c56:	460d      	mov	r5, r1
 8010c58:	4614      	mov	r4, r2
 8010c5a:	d510      	bpl.n	8010c7e <_svfiprintf_r+0x36>
 8010c5c:	690b      	ldr	r3, [r1, #16]
 8010c5e:	b973      	cbnz	r3, 8010c7e <_svfiprintf_r+0x36>
 8010c60:	2140      	movs	r1, #64	@ 0x40
 8010c62:	f7ff ff09 	bl	8010a78 <_malloc_r>
 8010c66:	6028      	str	r0, [r5, #0]
 8010c68:	6128      	str	r0, [r5, #16]
 8010c6a:	b930      	cbnz	r0, 8010c7a <_svfiprintf_r+0x32>
 8010c6c:	230c      	movs	r3, #12
 8010c6e:	603b      	str	r3, [r7, #0]
 8010c70:	f04f 30ff 	mov.w	r0, #4294967295
 8010c74:	b01d      	add	sp, #116	@ 0x74
 8010c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7a:	2340      	movs	r3, #64	@ 0x40
 8010c7c:	616b      	str	r3, [r5, #20]
 8010c7e:	2300      	movs	r3, #0
 8010c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c82:	2320      	movs	r3, #32
 8010c84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c8c:	2330      	movs	r3, #48	@ 0x30
 8010c8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e2c <_svfiprintf_r+0x1e4>
 8010c92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c96:	f04f 0901 	mov.w	r9, #1
 8010c9a:	4623      	mov	r3, r4
 8010c9c:	469a      	mov	sl, r3
 8010c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ca2:	b10a      	cbz	r2, 8010ca8 <_svfiprintf_r+0x60>
 8010ca4:	2a25      	cmp	r2, #37	@ 0x25
 8010ca6:	d1f9      	bne.n	8010c9c <_svfiprintf_r+0x54>
 8010ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8010cac:	d00b      	beq.n	8010cc6 <_svfiprintf_r+0x7e>
 8010cae:	465b      	mov	r3, fp
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	4629      	mov	r1, r5
 8010cb4:	4638      	mov	r0, r7
 8010cb6:	f7ff ff6b 	bl	8010b90 <__ssputs_r>
 8010cba:	3001      	adds	r0, #1
 8010cbc:	f000 80a7 	beq.w	8010e0e <_svfiprintf_r+0x1c6>
 8010cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cc2:	445a      	add	r2, fp
 8010cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f000 809f 	beq.w	8010e0e <_svfiprintf_r+0x1c6>
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8010cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cda:	f10a 0a01 	add.w	sl, sl, #1
 8010cde:	9304      	str	r3, [sp, #16]
 8010ce0:	9307      	str	r3, [sp, #28]
 8010ce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ce8:	4654      	mov	r4, sl
 8010cea:	2205      	movs	r2, #5
 8010cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cf0:	484e      	ldr	r0, [pc, #312]	@ (8010e2c <_svfiprintf_r+0x1e4>)
 8010cf2:	f7ef fa75 	bl	80001e0 <memchr>
 8010cf6:	9a04      	ldr	r2, [sp, #16]
 8010cf8:	b9d8      	cbnz	r0, 8010d32 <_svfiprintf_r+0xea>
 8010cfa:	06d0      	lsls	r0, r2, #27
 8010cfc:	bf44      	itt	mi
 8010cfe:	2320      	movmi	r3, #32
 8010d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d04:	0711      	lsls	r1, r2, #28
 8010d06:	bf44      	itt	mi
 8010d08:	232b      	movmi	r3, #43	@ 0x2b
 8010d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8010d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d14:	d015      	beq.n	8010d42 <_svfiprintf_r+0xfa>
 8010d16:	9a07      	ldr	r2, [sp, #28]
 8010d18:	4654      	mov	r4, sl
 8010d1a:	2000      	movs	r0, #0
 8010d1c:	f04f 0c0a 	mov.w	ip, #10
 8010d20:	4621      	mov	r1, r4
 8010d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d26:	3b30      	subs	r3, #48	@ 0x30
 8010d28:	2b09      	cmp	r3, #9
 8010d2a:	d94b      	bls.n	8010dc4 <_svfiprintf_r+0x17c>
 8010d2c:	b1b0      	cbz	r0, 8010d5c <_svfiprintf_r+0x114>
 8010d2e:	9207      	str	r2, [sp, #28]
 8010d30:	e014      	b.n	8010d5c <_svfiprintf_r+0x114>
 8010d32:	eba0 0308 	sub.w	r3, r0, r8
 8010d36:	fa09 f303 	lsl.w	r3, r9, r3
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	46a2      	mov	sl, r4
 8010d40:	e7d2      	b.n	8010ce8 <_svfiprintf_r+0xa0>
 8010d42:	9b03      	ldr	r3, [sp, #12]
 8010d44:	1d19      	adds	r1, r3, #4
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	9103      	str	r1, [sp, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	bfbb      	ittet	lt
 8010d4e:	425b      	neglt	r3, r3
 8010d50:	f042 0202 	orrlt.w	r2, r2, #2
 8010d54:	9307      	strge	r3, [sp, #28]
 8010d56:	9307      	strlt	r3, [sp, #28]
 8010d58:	bfb8      	it	lt
 8010d5a:	9204      	strlt	r2, [sp, #16]
 8010d5c:	7823      	ldrb	r3, [r4, #0]
 8010d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d60:	d10a      	bne.n	8010d78 <_svfiprintf_r+0x130>
 8010d62:	7863      	ldrb	r3, [r4, #1]
 8010d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d66:	d132      	bne.n	8010dce <_svfiprintf_r+0x186>
 8010d68:	9b03      	ldr	r3, [sp, #12]
 8010d6a:	1d1a      	adds	r2, r3, #4
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	9203      	str	r2, [sp, #12]
 8010d70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d74:	3402      	adds	r4, #2
 8010d76:	9305      	str	r3, [sp, #20]
 8010d78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010e3c <_svfiprintf_r+0x1f4>
 8010d7c:	7821      	ldrb	r1, [r4, #0]
 8010d7e:	2203      	movs	r2, #3
 8010d80:	4650      	mov	r0, sl
 8010d82:	f7ef fa2d 	bl	80001e0 <memchr>
 8010d86:	b138      	cbz	r0, 8010d98 <_svfiprintf_r+0x150>
 8010d88:	9b04      	ldr	r3, [sp, #16]
 8010d8a:	eba0 000a 	sub.w	r0, r0, sl
 8010d8e:	2240      	movs	r2, #64	@ 0x40
 8010d90:	4082      	lsls	r2, r0
 8010d92:	4313      	orrs	r3, r2
 8010d94:	3401      	adds	r4, #1
 8010d96:	9304      	str	r3, [sp, #16]
 8010d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d9c:	4824      	ldr	r0, [pc, #144]	@ (8010e30 <_svfiprintf_r+0x1e8>)
 8010d9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010da2:	2206      	movs	r2, #6
 8010da4:	f7ef fa1c 	bl	80001e0 <memchr>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d036      	beq.n	8010e1a <_svfiprintf_r+0x1d2>
 8010dac:	4b21      	ldr	r3, [pc, #132]	@ (8010e34 <_svfiprintf_r+0x1ec>)
 8010dae:	bb1b      	cbnz	r3, 8010df8 <_svfiprintf_r+0x1b0>
 8010db0:	9b03      	ldr	r3, [sp, #12]
 8010db2:	3307      	adds	r3, #7
 8010db4:	f023 0307 	bic.w	r3, r3, #7
 8010db8:	3308      	adds	r3, #8
 8010dba:	9303      	str	r3, [sp, #12]
 8010dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dbe:	4433      	add	r3, r6
 8010dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dc2:	e76a      	b.n	8010c9a <_svfiprintf_r+0x52>
 8010dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dc8:	460c      	mov	r4, r1
 8010dca:	2001      	movs	r0, #1
 8010dcc:	e7a8      	b.n	8010d20 <_svfiprintf_r+0xd8>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	3401      	adds	r4, #1
 8010dd2:	9305      	str	r3, [sp, #20]
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	f04f 0c0a 	mov.w	ip, #10
 8010dda:	4620      	mov	r0, r4
 8010ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010de0:	3a30      	subs	r2, #48	@ 0x30
 8010de2:	2a09      	cmp	r2, #9
 8010de4:	d903      	bls.n	8010dee <_svfiprintf_r+0x1a6>
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d0c6      	beq.n	8010d78 <_svfiprintf_r+0x130>
 8010dea:	9105      	str	r1, [sp, #20]
 8010dec:	e7c4      	b.n	8010d78 <_svfiprintf_r+0x130>
 8010dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8010df2:	4604      	mov	r4, r0
 8010df4:	2301      	movs	r3, #1
 8010df6:	e7f0      	b.n	8010dda <_svfiprintf_r+0x192>
 8010df8:	ab03      	add	r3, sp, #12
 8010dfa:	9300      	str	r3, [sp, #0]
 8010dfc:	462a      	mov	r2, r5
 8010dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8010e38 <_svfiprintf_r+0x1f0>)
 8010e00:	a904      	add	r1, sp, #16
 8010e02:	4638      	mov	r0, r7
 8010e04:	f3af 8000 	nop.w
 8010e08:	1c42      	adds	r2, r0, #1
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	d1d6      	bne.n	8010dbc <_svfiprintf_r+0x174>
 8010e0e:	89ab      	ldrh	r3, [r5, #12]
 8010e10:	065b      	lsls	r3, r3, #25
 8010e12:	f53f af2d 	bmi.w	8010c70 <_svfiprintf_r+0x28>
 8010e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e18:	e72c      	b.n	8010c74 <_svfiprintf_r+0x2c>
 8010e1a:	ab03      	add	r3, sp, #12
 8010e1c:	9300      	str	r3, [sp, #0]
 8010e1e:	462a      	mov	r2, r5
 8010e20:	4b05      	ldr	r3, [pc, #20]	@ (8010e38 <_svfiprintf_r+0x1f0>)
 8010e22:	a904      	add	r1, sp, #16
 8010e24:	4638      	mov	r0, r7
 8010e26:	f000 f879 	bl	8010f1c <_printf_i>
 8010e2a:	e7ed      	b.n	8010e08 <_svfiprintf_r+0x1c0>
 8010e2c:	08012438 	.word	0x08012438
 8010e30:	08012442 	.word	0x08012442
 8010e34:	00000000 	.word	0x00000000
 8010e38:	08010b91 	.word	0x08010b91
 8010e3c:	0801243e 	.word	0x0801243e

08010e40 <_printf_common>:
 8010e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e44:	4616      	mov	r6, r2
 8010e46:	4698      	mov	r8, r3
 8010e48:	688a      	ldr	r2, [r1, #8]
 8010e4a:	690b      	ldr	r3, [r1, #16]
 8010e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e50:	4293      	cmp	r3, r2
 8010e52:	bfb8      	it	lt
 8010e54:	4613      	movlt	r3, r2
 8010e56:	6033      	str	r3, [r6, #0]
 8010e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e5c:	4607      	mov	r7, r0
 8010e5e:	460c      	mov	r4, r1
 8010e60:	b10a      	cbz	r2, 8010e66 <_printf_common+0x26>
 8010e62:	3301      	adds	r3, #1
 8010e64:	6033      	str	r3, [r6, #0]
 8010e66:	6823      	ldr	r3, [r4, #0]
 8010e68:	0699      	lsls	r1, r3, #26
 8010e6a:	bf42      	ittt	mi
 8010e6c:	6833      	ldrmi	r3, [r6, #0]
 8010e6e:	3302      	addmi	r3, #2
 8010e70:	6033      	strmi	r3, [r6, #0]
 8010e72:	6825      	ldr	r5, [r4, #0]
 8010e74:	f015 0506 	ands.w	r5, r5, #6
 8010e78:	d106      	bne.n	8010e88 <_printf_common+0x48>
 8010e7a:	f104 0a19 	add.w	sl, r4, #25
 8010e7e:	68e3      	ldr	r3, [r4, #12]
 8010e80:	6832      	ldr	r2, [r6, #0]
 8010e82:	1a9b      	subs	r3, r3, r2
 8010e84:	42ab      	cmp	r3, r5
 8010e86:	dc26      	bgt.n	8010ed6 <_printf_common+0x96>
 8010e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e8c:	6822      	ldr	r2, [r4, #0]
 8010e8e:	3b00      	subs	r3, #0
 8010e90:	bf18      	it	ne
 8010e92:	2301      	movne	r3, #1
 8010e94:	0692      	lsls	r2, r2, #26
 8010e96:	d42b      	bmi.n	8010ef0 <_printf_common+0xb0>
 8010e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e9c:	4641      	mov	r1, r8
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	47c8      	blx	r9
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	d01e      	beq.n	8010ee4 <_printf_common+0xa4>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	6922      	ldr	r2, [r4, #16]
 8010eaa:	f003 0306 	and.w	r3, r3, #6
 8010eae:	2b04      	cmp	r3, #4
 8010eb0:	bf02      	ittt	eq
 8010eb2:	68e5      	ldreq	r5, [r4, #12]
 8010eb4:	6833      	ldreq	r3, [r6, #0]
 8010eb6:	1aed      	subeq	r5, r5, r3
 8010eb8:	68a3      	ldr	r3, [r4, #8]
 8010eba:	bf0c      	ite	eq
 8010ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ec0:	2500      	movne	r5, #0
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	bfc4      	itt	gt
 8010ec6:	1a9b      	subgt	r3, r3, r2
 8010ec8:	18ed      	addgt	r5, r5, r3
 8010eca:	2600      	movs	r6, #0
 8010ecc:	341a      	adds	r4, #26
 8010ece:	42b5      	cmp	r5, r6
 8010ed0:	d11a      	bne.n	8010f08 <_printf_common+0xc8>
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	e008      	b.n	8010ee8 <_printf_common+0xa8>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	4652      	mov	r2, sl
 8010eda:	4641      	mov	r1, r8
 8010edc:	4638      	mov	r0, r7
 8010ede:	47c8      	blx	r9
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	d103      	bne.n	8010eec <_printf_common+0xac>
 8010ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eec:	3501      	adds	r5, #1
 8010eee:	e7c6      	b.n	8010e7e <_printf_common+0x3e>
 8010ef0:	18e1      	adds	r1, r4, r3
 8010ef2:	1c5a      	adds	r2, r3, #1
 8010ef4:	2030      	movs	r0, #48	@ 0x30
 8010ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010efa:	4422      	add	r2, r4
 8010efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f04:	3302      	adds	r3, #2
 8010f06:	e7c7      	b.n	8010e98 <_printf_common+0x58>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	4622      	mov	r2, r4
 8010f0c:	4641      	mov	r1, r8
 8010f0e:	4638      	mov	r0, r7
 8010f10:	47c8      	blx	r9
 8010f12:	3001      	adds	r0, #1
 8010f14:	d0e6      	beq.n	8010ee4 <_printf_common+0xa4>
 8010f16:	3601      	adds	r6, #1
 8010f18:	e7d9      	b.n	8010ece <_printf_common+0x8e>
	...

08010f1c <_printf_i>:
 8010f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f20:	7e0f      	ldrb	r7, [r1, #24]
 8010f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f24:	2f78      	cmp	r7, #120	@ 0x78
 8010f26:	4691      	mov	r9, r2
 8010f28:	4680      	mov	r8, r0
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	469a      	mov	sl, r3
 8010f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f32:	d807      	bhi.n	8010f44 <_printf_i+0x28>
 8010f34:	2f62      	cmp	r7, #98	@ 0x62
 8010f36:	d80a      	bhi.n	8010f4e <_printf_i+0x32>
 8010f38:	2f00      	cmp	r7, #0
 8010f3a:	f000 80d1 	beq.w	80110e0 <_printf_i+0x1c4>
 8010f3e:	2f58      	cmp	r7, #88	@ 0x58
 8010f40:	f000 80b8 	beq.w	80110b4 <_printf_i+0x198>
 8010f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010f4c:	e03a      	b.n	8010fc4 <_printf_i+0xa8>
 8010f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010f52:	2b15      	cmp	r3, #21
 8010f54:	d8f6      	bhi.n	8010f44 <_printf_i+0x28>
 8010f56:	a101      	add	r1, pc, #4	@ (adr r1, 8010f5c <_printf_i+0x40>)
 8010f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f5c:	08010fb5 	.word	0x08010fb5
 8010f60:	08010fc9 	.word	0x08010fc9
 8010f64:	08010f45 	.word	0x08010f45
 8010f68:	08010f45 	.word	0x08010f45
 8010f6c:	08010f45 	.word	0x08010f45
 8010f70:	08010f45 	.word	0x08010f45
 8010f74:	08010fc9 	.word	0x08010fc9
 8010f78:	08010f45 	.word	0x08010f45
 8010f7c:	08010f45 	.word	0x08010f45
 8010f80:	08010f45 	.word	0x08010f45
 8010f84:	08010f45 	.word	0x08010f45
 8010f88:	080110c7 	.word	0x080110c7
 8010f8c:	08010ff3 	.word	0x08010ff3
 8010f90:	08011081 	.word	0x08011081
 8010f94:	08010f45 	.word	0x08010f45
 8010f98:	08010f45 	.word	0x08010f45
 8010f9c:	080110e9 	.word	0x080110e9
 8010fa0:	08010f45 	.word	0x08010f45
 8010fa4:	08010ff3 	.word	0x08010ff3
 8010fa8:	08010f45 	.word	0x08010f45
 8010fac:	08010f45 	.word	0x08010f45
 8010fb0:	08011089 	.word	0x08011089
 8010fb4:	6833      	ldr	r3, [r6, #0]
 8010fb6:	1d1a      	adds	r2, r3, #4
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	6032      	str	r2, [r6, #0]
 8010fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	e09c      	b.n	8011102 <_printf_i+0x1e6>
 8010fc8:	6833      	ldr	r3, [r6, #0]
 8010fca:	6820      	ldr	r0, [r4, #0]
 8010fcc:	1d19      	adds	r1, r3, #4
 8010fce:	6031      	str	r1, [r6, #0]
 8010fd0:	0606      	lsls	r6, r0, #24
 8010fd2:	d501      	bpl.n	8010fd8 <_printf_i+0xbc>
 8010fd4:	681d      	ldr	r5, [r3, #0]
 8010fd6:	e003      	b.n	8010fe0 <_printf_i+0xc4>
 8010fd8:	0645      	lsls	r5, r0, #25
 8010fda:	d5fb      	bpl.n	8010fd4 <_printf_i+0xb8>
 8010fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010fe0:	2d00      	cmp	r5, #0
 8010fe2:	da03      	bge.n	8010fec <_printf_i+0xd0>
 8010fe4:	232d      	movs	r3, #45	@ 0x2d
 8010fe6:	426d      	negs	r5, r5
 8010fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010fec:	4858      	ldr	r0, [pc, #352]	@ (8011150 <_printf_i+0x234>)
 8010fee:	230a      	movs	r3, #10
 8010ff0:	e011      	b.n	8011016 <_printf_i+0xfa>
 8010ff2:	6821      	ldr	r1, [r4, #0]
 8010ff4:	6833      	ldr	r3, [r6, #0]
 8010ff6:	0608      	lsls	r0, r1, #24
 8010ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ffc:	d402      	bmi.n	8011004 <_printf_i+0xe8>
 8010ffe:	0649      	lsls	r1, r1, #25
 8011000:	bf48      	it	mi
 8011002:	b2ad      	uxthmi	r5, r5
 8011004:	2f6f      	cmp	r7, #111	@ 0x6f
 8011006:	4852      	ldr	r0, [pc, #328]	@ (8011150 <_printf_i+0x234>)
 8011008:	6033      	str	r3, [r6, #0]
 801100a:	bf14      	ite	ne
 801100c:	230a      	movne	r3, #10
 801100e:	2308      	moveq	r3, #8
 8011010:	2100      	movs	r1, #0
 8011012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011016:	6866      	ldr	r6, [r4, #4]
 8011018:	60a6      	str	r6, [r4, #8]
 801101a:	2e00      	cmp	r6, #0
 801101c:	db05      	blt.n	801102a <_printf_i+0x10e>
 801101e:	6821      	ldr	r1, [r4, #0]
 8011020:	432e      	orrs	r6, r5
 8011022:	f021 0104 	bic.w	r1, r1, #4
 8011026:	6021      	str	r1, [r4, #0]
 8011028:	d04b      	beq.n	80110c2 <_printf_i+0x1a6>
 801102a:	4616      	mov	r6, r2
 801102c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011030:	fb03 5711 	mls	r7, r3, r1, r5
 8011034:	5dc7      	ldrb	r7, [r0, r7]
 8011036:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801103a:	462f      	mov	r7, r5
 801103c:	42bb      	cmp	r3, r7
 801103e:	460d      	mov	r5, r1
 8011040:	d9f4      	bls.n	801102c <_printf_i+0x110>
 8011042:	2b08      	cmp	r3, #8
 8011044:	d10b      	bne.n	801105e <_printf_i+0x142>
 8011046:	6823      	ldr	r3, [r4, #0]
 8011048:	07df      	lsls	r7, r3, #31
 801104a:	d508      	bpl.n	801105e <_printf_i+0x142>
 801104c:	6923      	ldr	r3, [r4, #16]
 801104e:	6861      	ldr	r1, [r4, #4]
 8011050:	4299      	cmp	r1, r3
 8011052:	bfde      	ittt	le
 8011054:	2330      	movle	r3, #48	@ 0x30
 8011056:	f806 3c01 	strble.w	r3, [r6, #-1]
 801105a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801105e:	1b92      	subs	r2, r2, r6
 8011060:	6122      	str	r2, [r4, #16]
 8011062:	f8cd a000 	str.w	sl, [sp]
 8011066:	464b      	mov	r3, r9
 8011068:	aa03      	add	r2, sp, #12
 801106a:	4621      	mov	r1, r4
 801106c:	4640      	mov	r0, r8
 801106e:	f7ff fee7 	bl	8010e40 <_printf_common>
 8011072:	3001      	adds	r0, #1
 8011074:	d14a      	bne.n	801110c <_printf_i+0x1f0>
 8011076:	f04f 30ff 	mov.w	r0, #4294967295
 801107a:	b004      	add	sp, #16
 801107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	f043 0320 	orr.w	r3, r3, #32
 8011086:	6023      	str	r3, [r4, #0]
 8011088:	4832      	ldr	r0, [pc, #200]	@ (8011154 <_printf_i+0x238>)
 801108a:	2778      	movs	r7, #120	@ 0x78
 801108c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011090:	6823      	ldr	r3, [r4, #0]
 8011092:	6831      	ldr	r1, [r6, #0]
 8011094:	061f      	lsls	r7, r3, #24
 8011096:	f851 5b04 	ldr.w	r5, [r1], #4
 801109a:	d402      	bmi.n	80110a2 <_printf_i+0x186>
 801109c:	065f      	lsls	r7, r3, #25
 801109e:	bf48      	it	mi
 80110a0:	b2ad      	uxthmi	r5, r5
 80110a2:	6031      	str	r1, [r6, #0]
 80110a4:	07d9      	lsls	r1, r3, #31
 80110a6:	bf44      	itt	mi
 80110a8:	f043 0320 	orrmi.w	r3, r3, #32
 80110ac:	6023      	strmi	r3, [r4, #0]
 80110ae:	b11d      	cbz	r5, 80110b8 <_printf_i+0x19c>
 80110b0:	2310      	movs	r3, #16
 80110b2:	e7ad      	b.n	8011010 <_printf_i+0xf4>
 80110b4:	4826      	ldr	r0, [pc, #152]	@ (8011150 <_printf_i+0x234>)
 80110b6:	e7e9      	b.n	801108c <_printf_i+0x170>
 80110b8:	6823      	ldr	r3, [r4, #0]
 80110ba:	f023 0320 	bic.w	r3, r3, #32
 80110be:	6023      	str	r3, [r4, #0]
 80110c0:	e7f6      	b.n	80110b0 <_printf_i+0x194>
 80110c2:	4616      	mov	r6, r2
 80110c4:	e7bd      	b.n	8011042 <_printf_i+0x126>
 80110c6:	6833      	ldr	r3, [r6, #0]
 80110c8:	6825      	ldr	r5, [r4, #0]
 80110ca:	6961      	ldr	r1, [r4, #20]
 80110cc:	1d18      	adds	r0, r3, #4
 80110ce:	6030      	str	r0, [r6, #0]
 80110d0:	062e      	lsls	r6, r5, #24
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	d501      	bpl.n	80110da <_printf_i+0x1be>
 80110d6:	6019      	str	r1, [r3, #0]
 80110d8:	e002      	b.n	80110e0 <_printf_i+0x1c4>
 80110da:	0668      	lsls	r0, r5, #25
 80110dc:	d5fb      	bpl.n	80110d6 <_printf_i+0x1ba>
 80110de:	8019      	strh	r1, [r3, #0]
 80110e0:	2300      	movs	r3, #0
 80110e2:	6123      	str	r3, [r4, #16]
 80110e4:	4616      	mov	r6, r2
 80110e6:	e7bc      	b.n	8011062 <_printf_i+0x146>
 80110e8:	6833      	ldr	r3, [r6, #0]
 80110ea:	1d1a      	adds	r2, r3, #4
 80110ec:	6032      	str	r2, [r6, #0]
 80110ee:	681e      	ldr	r6, [r3, #0]
 80110f0:	6862      	ldr	r2, [r4, #4]
 80110f2:	2100      	movs	r1, #0
 80110f4:	4630      	mov	r0, r6
 80110f6:	f7ef f873 	bl	80001e0 <memchr>
 80110fa:	b108      	cbz	r0, 8011100 <_printf_i+0x1e4>
 80110fc:	1b80      	subs	r0, r0, r6
 80110fe:	6060      	str	r0, [r4, #4]
 8011100:	6863      	ldr	r3, [r4, #4]
 8011102:	6123      	str	r3, [r4, #16]
 8011104:	2300      	movs	r3, #0
 8011106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801110a:	e7aa      	b.n	8011062 <_printf_i+0x146>
 801110c:	6923      	ldr	r3, [r4, #16]
 801110e:	4632      	mov	r2, r6
 8011110:	4649      	mov	r1, r9
 8011112:	4640      	mov	r0, r8
 8011114:	47d0      	blx	sl
 8011116:	3001      	adds	r0, #1
 8011118:	d0ad      	beq.n	8011076 <_printf_i+0x15a>
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	079b      	lsls	r3, r3, #30
 801111e:	d413      	bmi.n	8011148 <_printf_i+0x22c>
 8011120:	68e0      	ldr	r0, [r4, #12]
 8011122:	9b03      	ldr	r3, [sp, #12]
 8011124:	4298      	cmp	r0, r3
 8011126:	bfb8      	it	lt
 8011128:	4618      	movlt	r0, r3
 801112a:	e7a6      	b.n	801107a <_printf_i+0x15e>
 801112c:	2301      	movs	r3, #1
 801112e:	4632      	mov	r2, r6
 8011130:	4649      	mov	r1, r9
 8011132:	4640      	mov	r0, r8
 8011134:	47d0      	blx	sl
 8011136:	3001      	adds	r0, #1
 8011138:	d09d      	beq.n	8011076 <_printf_i+0x15a>
 801113a:	3501      	adds	r5, #1
 801113c:	68e3      	ldr	r3, [r4, #12]
 801113e:	9903      	ldr	r1, [sp, #12]
 8011140:	1a5b      	subs	r3, r3, r1
 8011142:	42ab      	cmp	r3, r5
 8011144:	dcf2      	bgt.n	801112c <_printf_i+0x210>
 8011146:	e7eb      	b.n	8011120 <_printf_i+0x204>
 8011148:	2500      	movs	r5, #0
 801114a:	f104 0619 	add.w	r6, r4, #25
 801114e:	e7f5      	b.n	801113c <_printf_i+0x220>
 8011150:	08012449 	.word	0x08012449
 8011154:	0801245a 	.word	0x0801245a

08011158 <memmove>:
 8011158:	4288      	cmp	r0, r1
 801115a:	b510      	push	{r4, lr}
 801115c:	eb01 0402 	add.w	r4, r1, r2
 8011160:	d902      	bls.n	8011168 <memmove+0x10>
 8011162:	4284      	cmp	r4, r0
 8011164:	4623      	mov	r3, r4
 8011166:	d807      	bhi.n	8011178 <memmove+0x20>
 8011168:	1e43      	subs	r3, r0, #1
 801116a:	42a1      	cmp	r1, r4
 801116c:	d008      	beq.n	8011180 <memmove+0x28>
 801116e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011176:	e7f8      	b.n	801116a <memmove+0x12>
 8011178:	4402      	add	r2, r0
 801117a:	4601      	mov	r1, r0
 801117c:	428a      	cmp	r2, r1
 801117e:	d100      	bne.n	8011182 <memmove+0x2a>
 8011180:	bd10      	pop	{r4, pc}
 8011182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801118a:	e7f7      	b.n	801117c <memmove+0x24>

0801118c <_sbrk_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d06      	ldr	r5, [pc, #24]	@ (80111a8 <_sbrk_r+0x1c>)
 8011190:	2300      	movs	r3, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	602b      	str	r3, [r5, #0]
 8011198:	f7f2 fbee 	bl	8003978 <_sbrk>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d102      	bne.n	80111a6 <_sbrk_r+0x1a>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	b103      	cbz	r3, 80111a6 <_sbrk_r+0x1a>
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	200022fc 	.word	0x200022fc

080111ac <_realloc_r>:
 80111ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b0:	4607      	mov	r7, r0
 80111b2:	4614      	mov	r4, r2
 80111b4:	460d      	mov	r5, r1
 80111b6:	b921      	cbnz	r1, 80111c2 <_realloc_r+0x16>
 80111b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111bc:	4611      	mov	r1, r2
 80111be:	f7ff bc5b 	b.w	8010a78 <_malloc_r>
 80111c2:	b92a      	cbnz	r2, 80111d0 <_realloc_r+0x24>
 80111c4:	f7ff fbec 	bl	80109a0 <_free_r>
 80111c8:	4625      	mov	r5, r4
 80111ca:	4628      	mov	r0, r5
 80111cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d0:	f000 f81a 	bl	8011208 <_malloc_usable_size_r>
 80111d4:	4284      	cmp	r4, r0
 80111d6:	4606      	mov	r6, r0
 80111d8:	d802      	bhi.n	80111e0 <_realloc_r+0x34>
 80111da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111de:	d8f4      	bhi.n	80111ca <_realloc_r+0x1e>
 80111e0:	4621      	mov	r1, r4
 80111e2:	4638      	mov	r0, r7
 80111e4:	f7ff fc48 	bl	8010a78 <_malloc_r>
 80111e8:	4680      	mov	r8, r0
 80111ea:	b908      	cbnz	r0, 80111f0 <_realloc_r+0x44>
 80111ec:	4645      	mov	r5, r8
 80111ee:	e7ec      	b.n	80111ca <_realloc_r+0x1e>
 80111f0:	42b4      	cmp	r4, r6
 80111f2:	4622      	mov	r2, r4
 80111f4:	4629      	mov	r1, r5
 80111f6:	bf28      	it	cs
 80111f8:	4632      	movcs	r2, r6
 80111fa:	f7ff fbc3 	bl	8010984 <memcpy>
 80111fe:	4629      	mov	r1, r5
 8011200:	4638      	mov	r0, r7
 8011202:	f7ff fbcd 	bl	80109a0 <_free_r>
 8011206:	e7f1      	b.n	80111ec <_realloc_r+0x40>

08011208 <_malloc_usable_size_r>:
 8011208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801120c:	1f18      	subs	r0, r3, #4
 801120e:	2b00      	cmp	r3, #0
 8011210:	bfbc      	itt	lt
 8011212:	580b      	ldrlt	r3, [r1, r0]
 8011214:	18c0      	addlt	r0, r0, r3
 8011216:	4770      	bx	lr

08011218 <_init>:
 8011218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801121a:	bf00      	nop
 801121c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801121e:	bc08      	pop	{r3}
 8011220:	469e      	mov	lr, r3
 8011222:	4770      	bx	lr

08011224 <_fini>:
 8011224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011226:	bf00      	nop
 8011228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801122a:	bc08      	pop	{r3}
 801122c:	469e      	mov	lr, r3
 801122e:	4770      	bx	lr
