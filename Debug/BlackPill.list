
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001894  0801335c  0801335c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bf0  08014bf0  00016164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014bf0  08014bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bf8  08014bf8  00016164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bf8  08014bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014bfc  08014bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08014c00  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026fc  20000164  08014d64  00016164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002860  08014d64  00016860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fdb1  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0b  00000000  00000000  00035f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  0003ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cb  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c87a  00000000  00000000  0003df4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000250ce  00000000  00000000  0005a7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3838  00000000  00000000  0007f893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001230cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc0  00000000  00000000  00123110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013344 	.word	0x08013344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	08013344 	.word	0x08013344

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <ADC_Conversion_Cplt>:
static uint16_t mediaBuffer[ADC_MEDIA_SIZE][ADC_NUM_SENSORS] = {0};
static uint16_t sumData[ADC_NUM_SENSORS]= {0};
static uint8_t index = 0;


void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 8000da8:	b490      	push	{r4, r7}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e042      	b.n	8000e3e <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dbc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	4829      	ldr	r0, [pc, #164]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000dca:	4623      	mov	r3, r4
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4423      	add	r3, r4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4a20      	ldr	r2, [pc, #128]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000de6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	440a      	add	r2, r1
 8000df8:	b291      	uxth	r1, r2
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	881c      	ldrh	r4, [r3, #0]
 8000e12:	4917      	ldr	r1, [pc, #92]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4403      	add	r3, r0
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	440b      	add	r3, r1
 8000e32:	0952      	lsrs	r2, r2, #5
 8000e34:	b292      	uxth	r2, r2
 8000e36:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d9b9      	bls.n	8000db8 <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc90      	pop	{r4, r7}
 8000e66:	4770      	bx	lr
 8000e68:	200003c0 	.word	0x200003c0
 8000e6c:	200003d2 	.word	0x200003d2
 8000e70:	20000180 	.word	0x20000180

08000e74 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d849      	bhi.n	8000f18 <inputState+0xa4>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <inputState+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000ead 	.word	0x08000ead
 8000e90:	08000e9d 	.word	0x08000e9d
 8000e94:	08000eeb 	.word	0x08000eeb
 8000e98:	08000ebd 	.word	0x08000ebd
		case UP:
			if(stateInput->value == DOWN)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d13d      	bne.n	8000f20 <inputState+0xac>
				stateInput->state = FALLING;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	705a      	strb	r2, [r3, #1]
		break;
 8000eaa:	e039      	b.n	8000f20 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d137      	bne.n	8000f24 <inputState+0xb0>
				stateInput->state = RISING;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	705a      	strb	r2, [r3, #1]
		break;
 8000eba:	e033      	b.n	8000f24 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10e      	bne.n	8000ee2 <inputState+0x6e>
				stateInput->state = UP;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d027      	beq.n	8000f28 <inputState+0xb4>
					stateInput->stateChanged(RISING);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2003      	movs	r0, #3
 8000ede:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 8000ee0:	e022      	b.n	8000f28 <inputState+0xb4>
				stateInput->state = DOWN;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
		break;
 8000ee8:	e01e      	b.n	8000f28 <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <inputState+0x9c>
				stateInput->state = DOWN;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000f0e:	e00d      	b.n	8000f2c <inputState+0xb8>
				stateInput->state = UP;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	705a      	strb	r2, [r3, #1]
		break;
 8000f16:	e009      	b.n	8000f2c <inputState+0xb8>
		default:
		stateInput->state = UP;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	705a      	strb	r2, [r3, #1]
	}
}
 8000f1e:	e006      	b.n	8000f2e <inputState+0xba>
		break;
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <inputState+0xba>
		break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <inputState+0xba>
		break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <inputState+0xba>
		break;
 8000f2c:	bf00      	nop
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop

08000f38 <Debounce_Init>:

void Debounce_Init(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <Debounce_Init+0x60>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e01d      	b.n	8000f80 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <Debounce_Init+0x60>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <Debounce_Init+0x64>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3308      	adds	r3, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <Debounce_Init+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <Debounce_Init+0x64>)
 8000f64:	460b      	mov	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	440b      	add	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3304      	adds	r3, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <Debounce_Init+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <Debounce_Init+0x60>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <Debounce_Init+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0dd      	beq.n	8000f44 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <Debounce_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	200003e0 	.word	0x200003e0
 8000f9c:	200003d4 	.word	0x200003d4

08000fa0 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <Debounce_Add+0x60>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <Debounce_Add+0x16>
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e01d      	b.n	8000ff2 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <Debounce_Add+0x60>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <Debounce_Add+0x64>)
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	440b      	add	r3, r1
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Debounce_Add+0x60>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <Debounce_Add+0x64>)
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	440b      	add	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <Debounce_Add+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <Debounce_Add+0x60>)
 8000ff0:	7011      	strb	r1, [r2, #0]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200003e0 	.word	0x200003e0
 8001004:	200003d4 	.word	0x200003d4

08001008 <Debouncer_Task>:

void Debouncer_Task(){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e021      	b.n	8001058 <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	4914      	ldr	r1, [pc, #80]	@ (8001068 <Debouncer_Task+0x60>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	79fc      	ldrb	r4, [r7, #7]
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <Debouncer_Task+0x60>)
 8001030:	4623      	mov	r3, r4
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4423      	add	r3, r4
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <Debouncer_Task+0x60>)
 800104a:	4413      	add	r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff11 	bl	8000e74 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0da      	beq.n	8001014 <Debouncer_Task+0xc>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	200003d4 	.word	0x200003d4

0800106c <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 8001076:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <MPU6050_Set_I2C_Communication+0x24>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <MPU6050_Set_I2C_Communication+0x28>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200003e4 	.word	0x200003e4
 8001094:	200003e8 	.word	0x200003e8

08001098 <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b0b7      	sub	sp, #220	@ 0xdc
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <MPU6050_Init+0x15c>)
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	2175      	movs	r1, #117	@ 0x75
 80010c2:	20d0      	movs	r0, #208	@ 0xd0
 80010c4:	47a0      	blx	r4
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80010ce:	4413      	add	r3, r2
 80010d0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80010d4:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80010d8:	2b68      	cmp	r3, #104	@ 0x68
 80010da:	f040 8084 	bne.w	80011e6 <MPU6050_Init+0x14e>
		data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80010e4:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <MPU6050_Init+0x160>)
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	216b      	movs	r1, #107	@ 0x6b
 80010fa:	20d0      	movs	r0, #208	@ 0xd0
 80010fc:	47a0      	blx	r4
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001106:	4413      	add	r3, r2
 8001108:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <MPU6050_Init+0x160>)
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800111a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	2119      	movs	r1, #25
 8001128:	20d0      	movs	r0, #208	@ 0xd0
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001134:	4413      	add	r3, r2
 8001136:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MPU6050_Init+0x160>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	211c      	movs	r1, #28
 8001156:	20d0      	movs	r0, #208	@ 0xd0
 8001158:	47a0      	blx	r4
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001162:	4413      	add	r3, r2
 8001164:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MPU6050_Init+0x160>)
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	211b      	movs	r1, #27
 8001184:	20d0      	movs	r0, #208	@ 0xd0
 8001186:	47a0      	blx	r4
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001190:	4413      	add	r3, r2
 8001192:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 8001196:	2303      	movs	r3, #3
 8001198:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MPU6050_Init+0x160>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80011a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	211a      	movs	r1, #26
 80011b2:	20d0      	movs	r0, #208	@ 0xd0
 80011b4:	47a0      	blx	r4
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011be:	4413      	add	r3, r2
 80011c0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	23c4      	movs	r3, #196	@ 0xc4
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f011 fc27 	bl	8012a20 <memset>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80011da:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <MPU6050_Init+0x152>
			return SYS_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e002      	b.n	80011ec <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	37d4      	adds	r7, #212	@ 0xd4
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	200003e8 	.word	0x200003e8
 80011f8:	200003e4 	.word	0x200003e4

080011fc <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b08d      	sub	sp, #52	@ 0x34
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8001216:	2300      	movs	r3, #0
 8001218:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800121a:	e069      	b.n	80012f0 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 800121c:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <MPU6050_Calibrate+0x148>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	33b4      	adds	r3, #180	@ 0xb4
 8001224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	220e      	movs	r2, #14
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	213b      	movs	r1, #59	@ 0x3b
 8001232:	20d0      	movs	r0, #208	@ 0xd0
 8001234:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800123e:	b212      	sxth	r2, r2
 8001240:	0212      	lsls	r2, r2, #8
 8001242:	b211      	sxth	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 800124a:	b212      	sxth	r2, r2
 800124c:	430a      	orrs	r2, r1
 800124e:	b212      	sxth	r2, r2
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 800125c:	b212      	sxth	r2, r2
 800125e:	0212      	lsls	r2, r2, #8
 8001260:	b211      	sxth	r1, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8001268:	b212      	sxth	r2, r2
 800126a:	430a      	orrs	r2, r1
 800126c:	b212      	sxth	r2, r2
 800126e:	4413      	add	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 800127a:	b212      	sxth	r2, r2
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	b211      	sxth	r1, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8001286:	b212      	sxth	r2, r2
 8001288:	430a      	orrs	r2, r1
 800128a:	b212      	sxth	r2, r2
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8001298:	b212      	sxth	r2, r2
 800129a:	0212      	lsls	r2, r2, #8
 800129c:	b211      	sxth	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 80012a4:	b212      	sxth	r2, r2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	b212      	sxth	r2, r2
 80012aa:	4413      	add	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 80012b6:	b212      	sxth	r2, r2
 80012b8:	0212      	lsls	r2, r2, #8
 80012ba:	b211      	sxth	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 80012c2:	b212      	sxth	r2, r2
 80012c4:	430a      	orrs	r2, r1
 80012c6:	b212      	sxth	r2, r2
 80012c8:	4413      	add	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 80012d4:	b212      	sxth	r2, r2
 80012d6:	0212      	lsls	r2, r2, #8
 80012d8:	b211      	sxth	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 80012e0:	b212      	sxth	r2, r2
 80012e2:	430a      	orrs	r2, r1
 80012e4:	b212      	sxth	r2, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80012ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ec:	3301      	adds	r3, #1
 80012ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f6:	d391      	bcc.n	800121c <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	131b      	asrs	r3, r3, #12
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	131b      	asrs	r3, r3, #12
 8001306:	b21a      	sxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	131b      	asrs	r3, r3, #12
 8001310:	b29b      	uxth	r3, r3
 8001312:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001316:	b29b      	uxth	r3, r3
 8001318:	b21a      	sxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	131b      	asrs	r3, r3, #12
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	131b      	asrs	r3, r3, #12
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	131b      	asrs	r3, r3, #12
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 800133c:	bf00      	nop
 800133e:	372c      	adds	r7, #44	@ 0x2c
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	200003e8 	.word	0x200003e8

08001348 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001392:	b21b      	sxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8001418:	b490      	push	{r4, r7}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b8 	beq.w	800159c <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e04e      	b.n	80014d8 <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[axis] -= mpu->MAF.mediaBuffer[mpu->MAF.index][axis];
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800144a:	461c      	mov	r4, r3
 800144c:	7bf8      	ldrb	r0, [r7, #15]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4623      	mov	r3, r4
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4423      	add	r3, r4
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	331c      	adds	r3, #28
 800145c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	1ac9      	subs	r1, r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[axis] += mpu->MAF.rawData[axis];
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	7bf9      	ldrb	r1, [r7, #15]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	314c      	adds	r1, #76	@ 0x4c
 800147c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001480:	4611      	mov	r1, r2
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	4419      	add	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][axis] = mpu->MAF.rawData[axis];
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8001496:	4618      	mov	r0, r3
 8001498:	7bf9      	ldrb	r1, [r7, #15]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	324c      	adds	r2, #76	@ 0x4c
 800149e:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4603      	mov	r3, r0
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4403      	add	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	331c      	adds	r3, #28
 80014b0:	4621      	mov	r1, r4
 80014b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[axis] = (mpu->MAF.sumData[axis] >> NUM_MAF_BITS);
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	10da      	asrs	r2, r3, #3
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	b211      	sxth	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3350      	adds	r3, #80	@ 0x50
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	809a      	strh	r2, [r3, #4]
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d9ad      	bls.n	800143a <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001528:	b29b      	uxth	r3, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001542:	b29b      	uxth	r3, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	b21a      	sxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001590:	b29b      	uxth	r3, r3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	821a      	strh	r2, [r3, #16]
	}
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc90      	pop	{r4, r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <Display_Set_I2C_Master_Transmit+0x24>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <Display_Set_I2C_Master_Transmit+0x28>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200003f4 	.word	0x200003f4
 80015d0:	200003f8 	.word	0x200003f8

080015d4 <Display_Init>:

e_system Display_Init(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 80015de:	22ae      	movs	r2, #174	@ 0xae
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	@ 0x78
 80015e4:	f000 f94a 	bl	800187c <ssd1306_I2C_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	f000 f940 	bl	800187c <ssd1306_I2C_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4413      	add	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001606:	2210      	movs	r2, #16
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f000 f936 	bl	800187c <ssd1306_I2C_Write>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4413      	add	r3, r2
 8001618:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800161a:	22b0      	movs	r2, #176	@ 0xb0
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	@ 0x78
 8001620:	f000 f92c 	bl	800187c <ssd1306_I2C_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4413      	add	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 800162e:	22c8      	movs	r2, #200	@ 0xc8
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	@ 0x78
 8001634:	f000 f922 	bl	800187c <ssd1306_I2C_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4413      	add	r3, r2
 8001640:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	@ 0x78
 8001648:	f000 f918 	bl	800187c <ssd1306_I2C_Write>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4413      	add	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8001656:	2210      	movs	r2, #16
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	@ 0x78
 800165c:	f000 f90e 	bl	800187c <ssd1306_I2C_Write>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4413      	add	r3, r2
 8001668:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	@ 0x78
 8001670:	f000 f904 	bl	800187c <ssd1306_I2C_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4413      	add	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 800167e:	2281      	movs	r2, #129	@ 0x81
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	@ 0x78
 8001684:	f000 f8fa 	bl	800187c <ssd1306_I2C_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	@ 0x78
 8001698:	f000 f8f0 	bl	800187c <ssd1306_I2C_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4413      	add	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 80016a6:	22a1      	movs	r2, #161	@ 0xa1
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	@ 0x78
 80016ac:	f000 f8e6 	bl	800187c <ssd1306_I2C_Write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4413      	add	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 80016ba:	22a6      	movs	r2, #166	@ 0xa6
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	@ 0x78
 80016c0:	f000 f8dc 	bl	800187c <ssd1306_I2C_Write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4413      	add	r3, r2
 80016cc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 80016ce:	22a8      	movs	r2, #168	@ 0xa8
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	@ 0x78
 80016d4:	f000 f8d2 	bl	800187c <ssd1306_I2C_Write>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4413      	add	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 80016e2:	223f      	movs	r2, #63	@ 0x3f
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	@ 0x78
 80016e8:	f000 f8c8 	bl	800187c <ssd1306_I2C_Write>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4413      	add	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016f6:	22a4      	movs	r2, #164	@ 0xa4
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	@ 0x78
 80016fc:	f000 f8be 	bl	800187c <ssd1306_I2C_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4413      	add	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 800170a:	22d3      	movs	r2, #211	@ 0xd3
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	@ 0x78
 8001710:	f000 f8b4 	bl	800187c <ssd1306_I2C_Write>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4413      	add	r3, r2
 800171c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 f8aa 	bl	800187c <ssd1306_I2C_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4413      	add	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001732:	22d5      	movs	r2, #213	@ 0xd5
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 f8a0 	bl	800187c <ssd1306_I2C_Write>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4413      	add	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8001746:	22f0      	movs	r2, #240	@ 0xf0
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	@ 0x78
 800174c:	f000 f896 	bl	800187c <ssd1306_I2C_Write>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4413      	add	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 800175a:	22d9      	movs	r2, #217	@ 0xd9
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	@ 0x78
 8001760:	f000 f88c 	bl	800187c <ssd1306_I2C_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4413      	add	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 800176e:	2222      	movs	r2, #34	@ 0x22
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	@ 0x78
 8001774:	f000 f882 	bl	800187c <ssd1306_I2C_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4413      	add	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8001782:	22da      	movs	r2, #218	@ 0xda
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	f000 f878 	bl	800187c <ssd1306_I2C_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4413      	add	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8001796:	2212      	movs	r2, #18
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	@ 0x78
 800179c:	f000 f86e 	bl	800187c <ssd1306_I2C_Write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4413      	add	r3, r2
 80017a8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 80017aa:	22db      	movs	r2, #219	@ 0xdb
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f000 f864 	bl	800187c <ssd1306_I2C_Write>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4413      	add	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	@ 0x78
 80017c4:	f000 f85a 	bl	800187c <ssd1306_I2C_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4413      	add	r3, r2
 80017d0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 80017d2:	228d      	movs	r2, #141	@ 0x8d
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	@ 0x78
 80017d8:	f000 f850 	bl	800187c <ssd1306_I2C_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4413      	add	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 80017e6:	2214      	movs	r2, #20
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	@ 0x78
 80017ec:	f000 f846 	bl	800187c <ssd1306_I2C_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4413      	add	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 80017fa:	22af      	movs	r2, #175	@ 0xaf
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	@ 0x78
 8001800:	f000 f83c 	bl	800187c <ssd1306_I2C_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4413      	add	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800180e:	222e      	movs	r2, #46	@ 0x2e
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	@ 0x78
 8001814:	f000 f832 	bl	800187c <ssd1306_I2C_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4413      	add	r3, r2
 8001820:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8e8 	bl	80019f8 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <Display_Init+0x2a0>)
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <Display_Init+0x2a0>)
 8001830:	2200      	movs	r2, #0
 8001832:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <Display_Init+0x2a0>)
 8001836:	2201      	movs	r2, #1
 8001838:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <Display_Init+0x2a4>)
 800183c:	2200      	movs	r2, #0
 800183e:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <Display_Init+0x2a4>)
 8001842:	2200      	movs	r2, #0
 8001844:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <Display_Init+0x2a4>)
 8001848:	2201      	movs	r2, #1
 800184a:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <Display_Init+0x2a4>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <Display_Init+0x2a4>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	3b50      	subs	r3, #80	@ 0x50
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <Display_Init+0x2a4>)
 800185c:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <Display_Init+0x2a4>)
 8001860:	2200      	movs	r2, #0
 8001862:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <Display_Init+0x2a4>)
 8001866:	2210      	movs	r2, #16
 8001868:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200003ec 	.word	0x200003ec
 8001878:	200007fc 	.word	0x200007fc

0800187c <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	460b      	mov	r3, r1
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	4613      	mov	r3, r2
 800188c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <ssd1306_I2C_Write+0x38>)
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	b298      	uxth	r0, r3
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	230a      	movs	r3, #10
 80018a4:	2202      	movs	r2, #2
 80018a6:	47a0      	blx	r4
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200003f8 	.word	0x200003f8

080018b8 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80018b8:	b598      	push	{r3, r4, r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d054      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d050      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <Display_UpdateScreen_Task+0xc0>)
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d04c      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <Display_UpdateScreen_Task+0x2a>
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d01c      	beq.n	800191a <Display_UpdateScreen_Task+0x62>
 80018e0:	e038      	b.n	8001954 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	3b50      	subs	r3, #80	@ 0x50
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018ec:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 80018fc:	681c      	ldr	r4, [r3, #0]
 80018fe:	2303      	movs	r3, #3
 8001900:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <Display_UpdateScreen_Task+0xc8>)
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	@ 0x78
 8001906:	47a0      	blx	r4
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001910:	2201      	movs	r2, #1
 8001912:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001914:	e021      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e02a      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 800191c:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <Display_UpdateScreen_Task+0xcc>)
 8001926:	441a      	add	r2, r3
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	2140      	movs	r1, #64	@ 0x40
 800192c:	2078      	movs	r0, #120	@ 0x78
 800192e:	47a0      	blx	r4
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001940:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001944:	2200      	movs	r2, #0
 8001946:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 800194e:	e004      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00d      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001956:	2208      	movs	r2, #8
 8001958:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d905      	bls.n	800196e <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001968:	4b02      	ldr	r3, [pc, #8]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd98      	pop	{r3, r4, r7, pc}
 8001974:	200007fc 	.word	0x200007fc
 8001978:	200003ec 	.word	0x200003ec
 800197c:	200003f4 	.word	0x200003f4
 8001980:	20000800 	.word	0x20000800
 8001984:	200003fc 	.word	0x200003fc

08001988 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <Display_I2C_DMA_Ready+0x1c>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	7053      	strb	r3, [r2, #1]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	200007fc 	.word	0x200007fc

080019a8 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <Display_I2C_Refresh_Ready+0x1c>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	7013      	strb	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	200007fc 	.word	0x200007fc

080019c8 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019e6:	805a      	strh	r2, [r3, #2]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	200003ec 	.word	0x200003ec

080019f8 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e00d      	b.n	8001a24 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <Display_Fill+0x1a>
 8001a0e:	2100      	movs	r1, #0
 8001a10:	e000      	b.n	8001a14 <Display_Fill+0x1c>
 8001a12:	21ff      	movs	r1, #255	@ 0xff
 8001a14:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <Display_Fill+0x44>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2a:	d3ed      	bcc.n	8001a08 <Display_Fill+0x10>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200003fc 	.word	0x200003fc

08001a40 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
	if (
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a56:	d848      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5c:	d845      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <Display_DrawPixel+0xb8>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11a      	bne.n	8001ab0 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e01d      	b.n	8001aec <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b259      	sxtb	r1, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	4603      	mov	r3, r0
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
 8001ae8:	e000      	b.n	8001aec <Display_DrawPixel+0xac>
		return;
 8001aea:	bf00      	nop
	}
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200003ec 	.word	0x200003ec
 8001afc:	200003fc 	.word	0x200003fc

08001b00 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	81bb      	strh	r3, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <Display_DrawBitmap+0x22>
 8001b20:	3307      	adds	r3, #7
 8001b22:	10db      	asrs	r3, r3, #3
 8001b24:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	82bb      	strh	r3, [r7, #20]
 8001b2e:	e044      	b.n	8001bba <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	827b      	strh	r3, [r7, #18]
 8001b34:	e02f      	b.n	8001b96 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001b36:	8a7b      	ldrh	r3, [r7, #18]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	e012      	b.n	8001b6e <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001b48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b50:	fb03 f202 	mul.w	r2, r3, r2
 8001b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	da00      	bge.n	8001b5e <Display_DrawBitmap+0x5e>
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	10db      	asrs	r3, r3, #3
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da09      	bge.n	8001b8a <Display_DrawBitmap+0x8a>
 8001b76:	89fa      	ldrh	r2, [r7, #14]
 8001b78:	8a7b      	ldrh	r3, [r7, #18]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	89b9      	ldrh	r1, [r7, #12]
 8001b80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5b 	bl	8001a40 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	827b      	strh	r3, [r7, #18]
 8001b96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbc9      	blt.n	8001b36 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001ba2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	82bb      	strh	r3, [r7, #20]
 8001bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	81bb      	strh	r3, [r7, #12]
 8001bba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbb4      	blt.n	8001b30 <Display_DrawBitmap+0x30>
        }
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	1d38      	adds	r0, r7, #4
 8001bda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bde:	461a      	mov	r2, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	4613      	mov	r3, r2
 8001be6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bf4:	dc06      	bgt.n	8001c04 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bf8:	885b      	ldrh	r3, [r3, #2]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c02:	dd01      	ble.n	8001c08 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001c04:	2300      	movs	r3, #0
 8001c06:	e058      	b.n	8001cba <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e048      	b.n	8001ca0 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3b20      	subs	r3, #32
 8001c14:	7979      	ldrb	r1, [r7, #5]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	440b      	add	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e030      	b.n	8001c90 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c3e:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c4c:	885a      	ldrh	r2, [r3, #2]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7ff fef1 	bl	8001a40 <Display_DrawPixel>
 8001c5e:	e014      	b.n	8001c8a <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c6e:	885a      	ldrh	r2, [r3, #2]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b299      	uxth	r1, r3
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	f7ff fedb 	bl	8001a40 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	793b      	ldrb	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d3c9      	bcc.n	8001c2e <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d3b1      	bcc.n	8001c0e <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	793a      	ldrb	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cb6:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200003ec 	.word	0x200003ec

08001cc8 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	1d38      	adds	r0, r7, #4
 8001cd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001cd6:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001cd8:	e012      	b.n	8001d00 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	1d3a      	adds	r2, r7, #4
 8001ce2:	ca06      	ldmia	r2, {r1, r2}
 8001ce4:	f7ff ff74 	bl	8001bd0 <Display_WriteChar>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d002      	beq.n	8001cfa <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	e008      	b.n	8001d0c <Display_WriteString+0x44>

        str++;	// Next char
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
    while (*str){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d004      	beq.n	8001d44 <Display_DrawLine+0x30>
 8001d3a:	88ba      	ldrh	r2, [r7, #4]
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	f040 8090 	bne.w	8001e64 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d48:	d901      	bls.n	8001d4e <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001d4a:	237f      	movs	r3, #127	@ 0x7f
 8001d4c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d52:	d901      	bls.n	8001d58 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001d54:	237f      	movs	r3, #127	@ 0x7f
 8001d56:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d5c:	d901      	bls.n	8001d62 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001d5e:	233f      	movs	r3, #63	@ 0x3f
 8001d60:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d66:	d901      	bls.n	8001d6c <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001d68:	233f      	movs	r3, #63	@ 0x3f
 8001d6a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d205      	bcs.n	8001d80 <Display_DrawLine+0x6c>
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	e004      	b.n	8001d8a <Display_DrawLine+0x76>
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d205      	bcs.n	8001da0 <Display_DrawLine+0x8c>
 8001d94:	883a      	ldrh	r2, [r7, #0]
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	e004      	b.n	8001daa <Display_DrawLine+0x96>
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d129      	bne.n	8001e08 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d205      	bcs.n	8001dc8 <Display_DrawLine+0xb4>
			tmp = y1;
 8001dbc:	883b      	ldrh	r3, [r7, #0]
 8001dbe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dc0:	88bb      	ldrh	r3, [r7, #4]
 8001dc2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d205      	bcs.n	8001ddc <Display_DrawLine+0xc8>
			tmp = x1;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	e00c      	b.n	8001dfc <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 8001de2:	89f9      	ldrh	r1, [r7, #14]
 8001de4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe28 	bl	8001a40 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001df0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	81fb      	strh	r3, [r7, #14]
 8001dfc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dded      	ble.n	8001de2 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 8001e06:	e030      	b.n	8001e6a <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 8001e08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12b      	bne.n	8001e68 <Display_DrawLine+0x154>
		if (y1 < y0) {
 8001e10:	883a      	ldrh	r2, [r7, #0]
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d205      	bcs.n	8001e24 <Display_DrawLine+0x110>
			tmp = y1;
 8001e18:	883b      	ldrh	r3, [r7, #0]
 8001e1a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d205      	bcs.n	8001e38 <Display_DrawLine+0x124>
			tmp = x1;
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	e00c      	b.n	8001e58 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e44:	88b9      	ldrh	r1, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdfa 	bl	8001a40 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	81fb      	strh	r3, [r7, #14]
 8001e58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dded      	ble.n	8001e3e <Display_DrawLine+0x12a>
		}
	}
	return;
 8001e62:	e001      	b.n	8001e68 <Display_DrawLine+0x154>
		return;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <Display_DrawLine+0x156>
	return;
 8001e68:	bf00      	nop
}
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	4603      	mov	r3, r0
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e92:	d836      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d833      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea2:	dd03      	ble.n	8001eac <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001eaa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001eac:	88ba      	ldrh	r2, [r7, #4]
 8001eae:	883b      	ldrh	r3, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb4:	dd03      	ble.n	8001ebe <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001ebc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e018      	b.n	8001ef6 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	88f8      	ldrh	r0, [r7, #6]
 8001ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	4622      	mov	r2, r4
 8001eec:	f7ff ff12 	bl	8001d14 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d2e1      	bcs.n	8001ec4 <Display_DrawFilledRectangle+0x54>
 8001f00:	e000      	b.n	8001f04 <Display_DrawFilledRectangle+0x94>
		return;
 8001f02:	bf00      	nop
	}
}
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	729a      	strb	r2, [r3, #10]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	885b      	ldrh	r3, [r3, #2]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	88da      	ldrh	r2, [r3, #6]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a9b      	ldrb	r3, [r3, #10]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <Encoder_Task+0x54>
		enc->pps = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	811a      	strh	r2, [r3, #8]
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	809a      	strh	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	88da      	ldrh	r2, [r3, #6]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	80da      	strh	r2, [r3, #6]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value / 100;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <Motor_Init+0x4c>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	819a      	strh	r2, [r3, #12]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d04f      	beq.n	80020f0 <Motor_Set_Speed+0xb4>
		return;
	if(speed > 100)
 8002050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002054:	2b64      	cmp	r3, #100	@ 0x64
 8002056:	dd01      	ble.n	800205c <Motor_Set_Speed+0x20>
		speed = 100;
 8002058:	2364      	movs	r3, #100	@ 0x64
 800205a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002064:	da01      	bge.n	800206a <Motor_Set_Speed+0x2e>
		speed = -100;
 8002066:	239c      	movs	r3, #156	@ 0x9c
 8002068:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800206a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d03e      	beq.n	80020f4 <Motor_Set_Speed+0xb8>
		return;

	motor->vel = speed * motor->maxValue;
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6852      	ldr	r2, [r2, #4]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd0e      	ble.n	80020ae <Motor_Set_Speed+0x72>
		motor->direction = FORWARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 8002096:	2102      	movs	r1, #2
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f82f 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	b292      	uxth	r2, r2
 80020a8:	4610      	mov	r0, r2
 80020aa:	4798      	blx	r3
 80020ac:	e023      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else if(speed < 0){
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da10      	bge.n	80020d8 <Motor_Set_Speed+0x9c>
		motor->direction = BACKWARD;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80020bc:	2103      	movs	r1, #3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f81c 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6892      	ldr	r2, [r2, #8]
 80020cc:	b292      	uxth	r2, r2
 80020ce:	4252      	negs	r2, r2
 80020d0:	b292      	uxth	r2, r2
 80020d2:	4610      	mov	r0, r2
 80020d4:	4798      	blx	r3
 80020d6:	e00e      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else{
		motor->direction = FREE_WHEEL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80020de:	2101      	movs	r1, #1
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f80b 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM(0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2000      	movs	r0, #0
 80020ec:	4798      	blx	r3
 80020ee:	e002      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f4:	bf00      	nop
	}
}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d027      	beq.n	8002160 <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d825      	bhi.n	8002162 <Motor_Set_Direction+0x66>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <Motor_Set_Direction+0x20>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002163 	.word	0x08002163
 8002120:	08002131 	.word	0x08002131
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002149 	.word	0x08002149
 800212c:	08002155 	.word	0x08002155
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	4798      	blx	r3
			break;
 800213a:	e012      	b.n	8002162 <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	4798      	blx	r3
			break;
 8002146:	e00c      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2101      	movs	r1, #1
 800214e:	2000      	movs	r0, #0
 8002150:	4798      	blx	r3
			break;
 8002152:	e006      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2101      	movs	r1, #1
 800215a:	2001      	movs	r0, #1
 800215c:	4798      	blx	r3
			break;
 800215e:	e000      	b.n	8002162 <Motor_Set_Direction+0x66>
		return;
 8002160:	bf00      	nop
	}
}
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d10c      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	899b      	ldrh	r3, [r3, #12]
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	899b      	ldrh	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
	}
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <Motor_Set_MaxValue>:

void Motor_Set_MaxValue(s_motor *motor, uint32_t value){
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	motor->maxValue = value / 100;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <Motor_Set_MaxValue+0x24>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095a      	lsrs	r2, r3, #5
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	51eb851f 	.word	0x51eb851f

080021c8 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <Comm_Task>:

void Comm_Task(s_commData* comm){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <Comm_Task+0x1e>
		decodeProtocol(comm);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f815 	bl	8002278 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	789a      	ldrb	r2, [r3, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	429a      	cmp	r2, r3
 8002258:	d009      	beq.n	800226e <Comm_Task+0x3e>
		if(comm->dataWriter != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <Comm_Task+0x3e>
			comm->dataWriter(comm);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
	}
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002286:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8002288:	e11b      	b.n	80024c2 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8002290:	2b06      	cmp	r3, #6
 8002292:	f200 810e 	bhi.w	80024b2 <decodeProtocol+0x23a>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <decodeProtocol+0x24>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	0800232d 	.word	0x0800232d
 80022a8:	0800236f 	.word	0x0800236f
 80022ac:	080023b1 	.word	0x080023b1
 80022b0:	080023e3 	.word	0x080023e3
 80022b4:	08002435 	.word	0x08002435
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	b2d1      	uxtb	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022d2:	2b55      	cmp	r3, #85	@ 0x55
 80022d4:	f040 80f2 	bne.w	80024bc <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 80022e8:	e0e8      	b.n	80024bc <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	b2d1      	uxtb	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002304:	2b4e      	cmp	r3, #78	@ 0x4e
 8002306:	d104      	bne.n	8002312 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002310:	e0d7      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002318:	3b01      	subs	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800232a:	e0ca      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	b2d1      	uxtb	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002346:	2b45      	cmp	r3, #69	@ 0x45
 8002348:	d104      	bne.n	8002354 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002352:	e0b6      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800236c:	e0a9      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	b2d1      	uxtb	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002388:	2b52      	cmp	r3, #82	@ 0x52
 800238a:	d104      	bne.n	8002396 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2204      	movs	r2, #4
 8002390:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002394:	e095      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800239c:	3b01      	subs	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023ae:	e088      	b.n	80024c2 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	b2d1      	uxtb	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80023d4:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <decodeProtocol+0x264>)
 80023d6:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2205      	movs	r2, #5
 80023dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023e0:	e06f      	b.n	80024c2 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	b2d1      	uxtb	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80023fe:	d10c      	bne.n	800241a <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2206      	movs	r2, #6
 8002404:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <decodeProtocol+0x264>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002418:	e053      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002420:	3b01      	subs	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8002432:	e046      	b.n	80024c2 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <decodeProtocol+0x264>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d914      	bls.n	8002466 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	b2d1      	uxtb	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800245c:	4053      	eors	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <decodeProtocol+0x264>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <decodeProtocol+0x264>)
 8002470:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <decodeProtocol+0x264>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d122      	bne.n	80024c0 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	440b      	add	r3, r1
 8002494:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002498:	429a      	cmp	r2, r3
 800249a:	d111      	bne.n	80024c0 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
				}
			}
			break;
 80024b0:	e006      	b.n	80024c0 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80024ba:	e002      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024c0:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	f47f aedd 	bne.w	800228a <decodeProtocol+0x12>
		}
	}
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000829 	.word	0x20000829

080024e0 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
 80024f0:	4613      	mov	r3, r2
 80024f2:	72bb      	strb	r3, [r7, #10]
    i = 0;
 80024f4:	4b62      	ldr	r3, [pc, #392]	@ (8002680 <comm_sendCMD+0x1a0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 80024fa:	4b62      	ldr	r3, [pc, #392]	@ (8002684 <comm_sendCMD+0x1a4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8002500:	4b60      	ldr	r3, [pc, #384]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <comm_sendCMD+0x1a4>)
 800250a:	7011      	strb	r1, [r2, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002510:	2155      	movs	r1, #85	@ 0x55
 8002512:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8002514:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	b2d1      	uxtb	r1, r2
 800251c:	4a59      	ldr	r2, [pc, #356]	@ (8002684 <comm_sendCMD+0x1a4>)
 800251e:	7011      	strb	r1, [r2, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002524:	214e      	movs	r1, #78	@ 0x4e
 8002526:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8002528:	4b56      	ldr	r3, [pc, #344]	@ (8002684 <comm_sendCMD+0x1a4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	b2d1      	uxtb	r1, r2
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002532:	7011      	strb	r1, [r2, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002538:	2145      	movs	r1, #69	@ 0x45
 800253a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <comm_sendCMD+0x1a4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	b2d1      	uxtb	r1, r2
 8002544:	4a4f      	ldr	r2, [pc, #316]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002546:	7011      	strb	r1, [r2, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <comm_sendCMD+0x1a8>)
 800254c:	2152      	movs	r1, #82	@ 0x52
 800254e:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	4b4d      	ldr	r3, [pc, #308]	@ (800268c <comm_sendCMD+0x1ac>)
 8002556:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <comm_sendCMD+0x1a4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	b2d1      	uxtb	r1, r2
 8002560:	4a48      	ldr	r2, [pc, #288]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002562:	7011      	strb	r1, [r2, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 800256c:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <comm_sendCMD+0x1a4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	b2d1      	uxtb	r1, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002576:	7011      	strb	r1, [r2, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <comm_sendCMD+0x1a8>)
 800257c:	213a      	movs	r1, #58	@ 0x3a
 800257e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	b2d1      	uxtb	r1, r2
 8002588:	4a3e      	ldr	r2, [pc, #248]	@ (8002684 <comm_sendCMD+0x1a4>)
 800258a:	7011      	strb	r1, [r2, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	2bb1      	cmp	r3, #177	@ 0xb1
 8002598:	d002      	beq.n	80025a0 <comm_sendCMD+0xc0>
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	2bee      	cmp	r3, #238	@ 0xee
 800259e:	d109      	bne.n	80025b4 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 80025a0:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	4a36      	ldr	r2, [pc, #216]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025aa:	7011      	strb	r1, [r2, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a36      	ldr	r2, [pc, #216]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025b0:	7abb      	ldrb	r3, [r7, #10]
 80025b2:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <comm_sendCMD+0x102>
 80025ba:	7abb      	ldrb	r3, [r7, #10]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 80025c0:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025c8:	4413      	add	r3, r2
 80025ca:	7aba      	ldrb	r2, [r7, #10]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fa6e 	bl	8012ab0 <memcpy>
        auxIndex += len;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	7abb      	ldrb	r3, [r7, #10]
 80025da:	4413      	add	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e0:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 80025e2:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <comm_sendCMD+0x1ac>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025f4:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 80025f6:	4b25      	ldr	r3, [pc, #148]	@ (800268c <comm_sendCMD+0x1ac>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025fe:	7819      	ldrb	r1, [r3, #0]
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002602:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <comm_sendCMD+0x1a0>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e01f      	b.n	8002652 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <comm_sendCMD+0x1a8>)
 800261a:	5c9a      	ldrb	r2, [r3, r2]
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <comm_sendCMD+0x1b4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4053      	eors	r3, r2
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002626:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <comm_sendCMD+0x1a0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	b2d1      	uxtb	r1, r2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	70d1      	strb	r1, [r2, #3]
 800263a:	4619      	mov	r1, r3
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <comm_sendCMD+0x1a8>)
 800263e:	5c1a      	ldrb	r2, [r3, r0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	440b      	add	r3, r1
 8002644:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3d9      	bcc.n	8002612 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	b2d1      	uxtb	r1, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	70d1      	strb	r1, [r2, #3]
 800266a:	4619      	mov	r1, r3
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <comm_sendCMD+0x1b4>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	440b      	add	r3, r1
 8002674:	711a      	strb	r2, [r3, #4]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000806 	.word	0x20000806
 8002684:	20000807 	.word	0x20000807
 8002688:	20000808 	.word	0x20000808
 800268c:	20000826 	.word	0x20000826
 8002690:	20000827 	.word	0x20000827
 8002694:	20000828 	.word	0x20000828

08002698 <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 80026a2:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <ESP01_SetWIFI+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026b4:	f010 f9bc 	bl	8012a30 <strncpy>
	esp01SSID[63] = '\0';
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 80026c0:	2220      	movs	r2, #32
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026c6:	f010 f9b3 	bl	8012a30 <strncpy>
	esp01PASSWORD[31] = '\0';
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <ESP01_SetWIFI+0x64>)
 80026d2:	2232      	movs	r2, #50	@ 0x32
 80026d4:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026d8:	2218      	movs	r2, #24
 80026da:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <ESP01_SetWIFI+0x68>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000082a 	.word	0x2000082a
 80026f0:	2000082c 	.word	0x2000082c
 80026f4:	20000844 	.word	0x20000844
 80026f8:	20000884 	.word	0x20000884
 80026fc:	20000830 	.word	0x20000830
 8002700:	20000a60 	.word	0x20000a60

08002704 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <ESP01_StartUDP+0x88>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	e02f      	b.n	8002782 <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8002728:	f247 5330 	movw	r3, #30000	@ 0x7530
 800272c:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 800272e:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <ESP01_StartUDP+0x8c>)
 8002730:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <ESP01_StartUDP+0x90>)
 8002732:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 8002734:	220f      	movs	r2, #15
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4817      	ldr	r0, [pc, #92]	@ (8002798 <ESP01_StartUDP+0x94>)
 800273a:	f010 f979 	bl	8012a30 <strncpy>
	esp01RemoteIP[15] = '\0';
 800273e:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <ESP01_StartUDP+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	220a      	movs	r2, #10
 8002748:	4914      	ldr	r1, [pc, #80]	@ (800279c <ESP01_StartUDP+0x98>)
 800274a:	4618      	mov	r0, r3
 800274c:	f010 f902 	bl	8012954 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8002750:	883b      	ldrh	r3, [r7, #0]
 8002752:	220a      	movs	r2, #10
 8002754:	4912      	ldr	r1, [pc, #72]	@ (80027a0 <ESP01_StartUDP+0x9c>)
 8002756:	4618      	mov	r0, r3
 8002758:	f010 f8fc 	bl	8012954 <itoa>

	if(esp01SSID[0] == '\0')
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <ESP01_StartUDP+0xa0>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8002764:	2301      	movs	r3, #1
 8002766:	e00c      	b.n	8002782 <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <ESP01_StartUDP+0xa4>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 8002776:	2300      	movs	r3, #0
 8002778:	e003      	b.n	8002782 <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 800277a:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <ESP01_StartUDP+0xa8>)
 800277c:	220a      	movs	r2, #10
 800277e:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8002780:	2306      	movs	r3, #6
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000a64 	.word	0x20000a64
 8002790:	20000008 	.word	0x20000008
 8002794:	00504455 	.word	0x00504455
 8002798:	200008a4 	.word	0x200008a4
 800279c:	200008b4 	.word	0x200008b4
 80027a0:	200008cc 	.word	0x200008cc
 80027a4:	20000844 	.word	0x20000844
 80027a8:	2000082c 	.word	0x2000082c
 80027ac:	2000082a 	.word	0x2000082a

080027b0 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	b291      	uxth	r1, r2
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027c4:	8011      	strh	r1, [r2, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <ESP01_WriteRX+0x3c>)
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d102      	bne.n	80027dc <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <ESP01_WriteRX+0x38>)
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000a58 	.word	0x20000a58
 80027ec:	200008d8 	.word	0x200008d8

080027f0 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 800280a:	4b46      	ldr	r3, [pc, #280]	@ (8002924 <ESP01_Send+0x134>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e081      	b.n	800291c <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 8002818:	4b43      	ldr	r3, [pc, #268]	@ (8002928 <ESP01_Send+0x138>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 8002826:	2305      	movs	r3, #5
 8002828:	e078      	b.n	800291c <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800282a:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <ESP01_Send+0x138>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d168      	bne.n	800290a <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	f107 0110 	add.w	r1, r7, #16
 8002842:	220a      	movs	r2, #10
 8002844:	4618      	mov	r0, r3
 8002846:	f010 f885 	bl	8012954 <itoa>
		l = strlen(strInt);
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fcc6 	bl	80001e0 <strlen>
 8002854:	4603      	mov	r3, r0
 8002856:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 8002858:	7f7b      	ldrb	r3, [r7, #29]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d802      	bhi.n	8002864 <ESP01_Send+0x74>
 800285e:	7f7b      	ldrb	r3, [r7, #29]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8002864:	230b      	movs	r3, #11
 8002866:	e059      	b.n	800291c <ESP01_Send+0x12c>
		ESP01StrToBufTX(ATCIPSEND);
 8002868:	4830      	ldr	r0, [pc, #192]	@ (800292c <ESP01_Send+0x13c>)
 800286a:	f001 f91d 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f918 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 8002878:	482d      	ldr	r0, [pc, #180]	@ (8002930 <ESP01_Send+0x140>)
 800287a:	f001 f915 	bl	8003aa8 <ESP01StrToBufTX>
		for(uint16_t i=0; i<length; i++){
 800287e:	2300      	movs	r3, #0
 8002880:	83fb      	strh	r3, [r7, #30]
 8002882:	e020      	b.n	80028c6 <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	817a      	strh	r2, [r7, #10]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	441a      	add	r2, r3
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <ESP01_Send+0x144>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	b288      	uxth	r0, r1
 8002898:	4926      	ldr	r1, [pc, #152]	@ (8002934 <ESP01_Send+0x144>)
 800289a:	8008      	strh	r0, [r1, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	4b25      	ldr	r3, [pc, #148]	@ (8002938 <ESP01_Send+0x148>)
 80028a2:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <ESP01_Send+0x144>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028ac:	d102      	bne.n	80028b4 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80028ae:	4b21      	ldr	r3, [pc, #132]	@ (8002934 <ESP01_Send+0x144>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80028b4:	897a      	ldrh	r2, [r7, #10]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d101      	bne.n	80028c0 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	3301      	adds	r3, #1
 80028c4:	83fb      	strh	r3, [r7, #30]
 80028c6:	8bfa      	ldrh	r2, [r7, #30]
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3da      	bcc.n	8002884 <ESP01_Send+0x94>
		}
		esp01Flags.bit.TXCIPSEND = 1;
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <ESP01_Send+0x138>)
 80028d0:	7813      	ldrb	r3, [r2, #0]
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80028d8:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <ESP01_Send+0x138>)
 80028da:	7813      	ldrb	r3, [r2, #0]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	7013      	strb	r3, [r2, #0]
		if(ESP01DbgStr != NULL){
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <ESP01_Send+0x14c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <ESP01_Send+0x14c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4814      	ldr	r0, [pc, #80]	@ (8002940 <ESP01_Send+0x150>)
 80028f0:	4798      	blx	r3
			ESP01DbgStr(strInt);
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <ESP01_Send+0x14c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f107 0210 	add.w	r2, r7, #16
 80028fa:	4610      	mov	r0, r2
 80028fc:	4798      	blx	r3
			ESP01DbgStr("\n");
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <ESP01_Send+0x14c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4810      	ldr	r0, [pc, #64]	@ (8002944 <ESP01_Send+0x154>)
 8002904:	4798      	blx	r3
		}
		return ESP01_SEND_READY;
 8002906:	2309      	movs	r3, #9
 8002908:	e008      	b.n	800291c <ESP01_Send+0x12c>
	}
	if(ESP01DbgStr != NULL)
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <ESP01_Send+0x14c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <ESP01_Send+0x14c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	480c      	ldr	r0, [pc, #48]	@ (8002948 <ESP01_Send+0x158>)
 8002918:	4798      	blx	r3
	return ESP01_SEND_BUSY;
 800291a:	2308      	movs	r3, #8
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000a64 	.word	0x20000a64
 8002928:	2000082c 	.word	0x2000082c
 800292c:	080148dc 	.word	0x080148dc
 8002930:	0801335c 	.word	0x0801335c
 8002934:	20000a5e 	.word	0x20000a5e
 8002938:	20000958 	.word	0x20000958
 800293c:	20000840 	.word	0x20000840
 8002940:	08013360 	.word	0x08013360
 8002944:	08013374 	.word	0x08013374
 8002948:	08013378 	.word	0x08013378

0800294c <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002954:	220c      	movs	r2, #12
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4810      	ldr	r0, [pc, #64]	@ (800299c <ESP01_Init+0x50>)
 800295a:	f010 f8a9 	bl	8012ab0 <memcpy>

	esp01ATSate = ESP01ATIDLE;
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <ESP01_Init+0x54>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <ESP01_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <ESP01_Init+0x5c>)
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <ESP01_Init+0x60>)
 8002972:	2200      	movs	r2, #0
 8002974:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 8002976:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <ESP01_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 800297c:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <ESP01_Init+0x68>)
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <ESP01_Init+0x6c>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <ESP01_Init+0x70>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <ESP01_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000a64 	.word	0x20000a64
 80029a0:	2000082a 	.word	0x2000082a
 80029a4:	200008d2 	.word	0x200008d2
 80029a8:	20000a5c 	.word	0x20000a5c
 80029ac:	20000a5e 	.word	0x20000a5e
 80029b0:	20000a5a 	.word	0x20000a5a
 80029b4:	20000a58 	.word	0x20000a58
 80029b8:	2000082c 	.word	0x2000082c
 80029bc:	2000083c 	.word	0x2000083c
 80029c0:	20000840 	.word	0x20000840

080029c4 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80029c8:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <ESP01_Timeout10ms+0x54>)
 80029d8:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029ea:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <ESP01_Timeout10ms+0x58>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <ESP01_Timeout10ms+0x5c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <ESP01_Timeout10ms+0x60>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000830 	.word	0x20000830
 8002a1c:	20000834 	.word	0x20000834
 8002a20:	200008d2 	.word	0x200008d2
 8002a24:	20000838 	.word	0x20000838

08002a28 <ESP01_Task>:

void ESP01_Task(){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	if(esp01irRXAT != esp01iwRXAT)
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <ESP01_Task+0x28>)
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <ESP01_Task+0x2c>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <ESP01_Task+0x14>
		ESP01ATDecode();
 8002a38:	f000 f820 	bl	8002a7c <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <ESP01_Task+0x30>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <ESP01_Task+0x20>
		ESP01DOConnection();
 8002a44:	f000 fc66 	bl	8003314 <ESP01DOConnection>

	ESP01SENDData();
 8002a48:	f000 ffb2 	bl	80039b0 <ESP01SENDData>
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000a5a 	.word	0x20000a5a
 8002a54:	20000a58 	.word	0x20000a58
 8002a58:	20000830 	.word	0x20000830

08002a5c <ESP01_AttachDebugStr>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
	ESP01ChangeState = aESP01ChangeState;
}

void ESP01_AttachDebugStr(void (*aESP01DbgStr)(const char *dbgStr)){
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	ESP01DbgStr = aESP01DbgStr;
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <ESP01_AttachDebugStr+0x1c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000840 	.word	0x20000840

08002a7c <ESP01ATDecode>:
		return 1;
	return 0;
}

/* Private Functions */
static void ESP01ATDecode(){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002a82:	4b89      	ldr	r3, [pc, #548]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b18      	cmp	r3, #24
 8002a88:	d007      	beq.n	8002a9a <ESP01ATDecode+0x1e>
 8002a8a:	4b87      	ldr	r3, [pc, #540]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b19      	cmp	r3, #25
 8002a90:	d003      	beq.n	8002a9a <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 8002a92:	4b85      	ldr	r3, [pc, #532]	@ (8002ca8 <ESP01ATDecode+0x22c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002a96:	2b1a      	cmp	r3, #26
 8002a98:	d105      	bne.n	8002aa6 <ESP01ATDecode+0x2a>
		esp01irRXAT = esp01iwRXAT;
 8002a9a:	4b84      	ldr	r3, [pc, #528]	@ (8002cac <ESP01ATDecode+0x230>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	4b84      	ldr	r3, [pc, #528]	@ (8002cb0 <ESP01ATDecode+0x234>)
 8002aa0:	801a      	strh	r2, [r3, #0]
		return;
 8002aa2:	f000 bc1f 	b.w	80032e4 <ESP01ATDecode+0x868>
	}
	i = esp01iwRXAT;
 8002aa6:	4b81      	ldr	r3, [pc, #516]	@ (8002cac <ESP01ATDecode+0x230>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 8002aac:	4b81      	ldr	r3, [pc, #516]	@ (8002cb4 <ESP01ATDecode+0x238>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 8002ab2:	f000 bc11 	b.w	80032d8 <ESP01ATDecode+0x85c>
		value = esp01RXATBuf[esp01irRXAT];
 8002ab6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <ESP01ATDecode+0x234>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <ESP01ATDecode+0x23c>)
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 8002ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b15      	cmp	r3, #21
 8002ac8:	f200 83e5 	bhi.w	8003296 <ESP01ATDecode+0x81a>
 8002acc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <ESP01ATDecode+0x58>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002b2d 	.word	0x08002b2d
 8002ad8:	08002c1d 	.word	0x08002c1d
 8002adc:	08002dff 	.word	0x08002dff
 8002ae0:	08003297 	.word	0x08003297
 8002ae4:	08003297 	.word	0x08003297
 8002ae8:	08003007 	.word	0x08003007
 8002aec:	0800304d 	.word	0x0800304d
 8002af0:	08003063 	.word	0x08003063
 8002af4:	0800308f 	.word	0x0800308f
 8002af8:	08003297 	.word	0x08003297
 8002afc:	080030dd 	.word	0x080030dd
 8002b00:	08003105 	.word	0x08003105
 8002b04:	0800316b 	.word	0x0800316b
 8002b08:	08003297 	.word	0x08003297
 8002b0c:	08003297 	.word	0x08003297
 8002b10:	08003297 	.word	0x08003297
 8002b14:	08003297 	.word	0x08003297
 8002b18:	08003297 	.word	0x08003297
 8002b1c:	08003297 	.word	0x08003297
 8002b20:	08003297 	.word	0x08003297
 8002b24:	080031e9 	.word	0x080031e9
 8002b28:	0800323d 	.word	0x0800323d
		case 0:
            indexResponse = 0;
 8002b2c:	4b64      	ldr	r3, [pc, #400]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 8002b32:	4b64      	ldr	r3, [pc, #400]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002b34:	2204      	movs	r2, #4
 8002b36:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002b38:	e03e      	b.n	8002bb8 <ESP01ATDecode+0x13c>
                if(value == responses[indexResponse][indexResponseChar]){ // todos los ocmandos de respuesta tienen una cabecer
 8002b3a:	4b61      	ldr	r3, [pc, #388]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b61      	ldr	r3, [pc, #388]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	4a5f      	ldr	r2, [pc, #380]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	797a      	ldrb	r2, [r7, #5]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d12b      	bne.n	8002bac <ESP01ATDecode+0x130>
                    esp01nBytes = (responses[indexResponse][0] - '0');			// aca saca los primeros dos numero que guarda la cantidad de bytes de la cabecera hace el *10 pq pone el primer byte en las decenas  y al otro lo suma así nomas
 8002b54:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3b30      	subs	r3, #48	@ 0x30
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b68:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002b6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b7a:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002b7c:	4b50      	ldr	r3, [pc, #320]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b30      	subs	r3, #48	@ 0x30
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002b9c:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002ba8:	801a      	strh	r2, [r3, #0]
                    break;
 8002baa:	e00d      	b.n	8002bc8 <ESP01ATDecode+0x14c>
                }
                indexResponse++;
 8002bac:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bb6:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002bb8:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b42      	ldr	r3, [pc, #264]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1b8      	bne.n	8002b3a <ESP01ATDecode+0xbe>
            }
            if(responses[indexResponse] != NULL){
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <ESP01ATDecode+0x170>
                esp01HState = 1;
 8002bd8:	4b38      	ldr	r3, [pc, #224]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 8002bde:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002be8:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 8002bea:	e35b      	b.n	80032a4 <ESP01ATDecode+0x828>
				esp01TimeoutDataRx = 0;
 8002bec:	4b31      	ldr	r3, [pc, #196]	@ (8002cb4 <ESP01ATDecode+0x238>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <ESP01ATDecode+0x254>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8351 	beq.w	80032a4 <ESP01ATDecode+0x828>
					if(value == '>'){
 8002c02:	797b      	ldrb	r3, [r7, #5]
 8002c04:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c06:	f040 834d 	bne.w	80032a4 <ESP01ATDecode+0x828>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 8002c0a:	4a31      	ldr	r2, [pc, #196]	@ (8002cd0 <ESP01ATDecode+0x254>)
 8002c0c:	7813      	ldrb	r3, [r2, #0]
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 8002c14:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <ESP01ATDecode+0x258>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
			break;
 8002c1a:	e343      	b.n	80032a4 <ESP01ATDecode+0x828>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 8002c1c:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	4a26      	ldr	r2, [pc, #152]	@ (8002cc4 <ESP01ATDecode+0x248>)
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	797a      	ldrb	r2, [r7, #5]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d133      	bne.n	8002c9e <ESP01ATDecode+0x222>
                esp01nBytes--;
 8002c36:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002c40:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <ESP01ATDecode+0x250>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <ESP01ATDecode+0x1d6>
 8002c4a:	797b      	ldrb	r3, [r7, #5]
 8002c4c:	2b0d      	cmp	r3, #13
 8002c4e:	f040 80cf 	bne.w	8002df0 <ESP01ATDecode+0x374>
                    esp01HState = (responses[indexResponse][2] - '0');
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3b30      	subs	r3, #48	@ 0x30
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c68:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c7a:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <ESP01ATDecode+0x24c>)
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	3303      	adds	r3, #3
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3b30      	subs	r3, #48	@ 0x30
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <ESP01ATDecode+0x240>)
 8002c9a:	701a      	strb	r2, [r3, #0]
                    break;
 8002c9c:	e30f      	b.n	80032be <ESP01ATDecode+0x842>
                }
            }
            else{
                indexResponse = 0;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <ESP01ATDecode+0x244>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002ca4:	e088      	b.n	8002db8 <ESP01ATDecode+0x33c>
 8002ca6:	bf00      	nop
 8002ca8:	2000082a 	.word	0x2000082a
 8002cac:	20000a58 	.word	0x20000a58
 8002cb0:	20000a5a 	.word	0x20000a5a
 8002cb4:	20000834 	.word	0x20000834
 8002cb8:	200008d8 	.word	0x200008d8
 8002cbc:	200008d2 	.word	0x200008d2
 8002cc0:	20000a70 	.word	0x20000a70
 8002cc4:	20000a71 	.word	0x20000a71
 8002cc8:	08014b24 	.word	0x08014b24
 8002ccc:	200008d4 	.word	0x200008d4
 8002cd0:	2000082c 	.word	0x2000082c
 8002cd4:	20000838 	.word	0x20000838
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8002cd8:	4b99      	ldr	r3, [pc, #612]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b99      	ldr	r3, [pc, #612]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	3b30      	subs	r3, #48	@ 0x30
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b97      	ldr	r3, [pc, #604]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002cec:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002cee:	4b96      	ldr	r3, [pc, #600]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b92      	ldr	r3, [pc, #584]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002cfe:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002d00:	4b8f      	ldr	r3, [pc, #572]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b8f      	ldr	r3, [pc, #572]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b30      	subs	r3, #48	@ 0x30
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d20:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 8002d22:	4b89      	ldr	r3, [pc, #548]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	4a89      	ldr	r2, [pc, #548]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3303      	adds	r3, #3
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d34:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 8002d36:	4b84      	ldr	r3, [pc, #528]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d3c:	d836      	bhi.n	8002dac <ESP01ATDecode+0x330>
 8002d3e:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b7f      	ldr	r3, [pc, #508]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	4a80      	ldr	r2, [pc, #512]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	797a      	ldrb	r2, [r7, #5]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d129      	bne.n	8002dac <ESP01ATDecode+0x330>
                        if(esp01nBytes == 0){
 8002d58:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <ESP01ATDecode+0x4cc>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d134      	bne.n	8002dca <ESP01ATDecode+0x34e>
                            esp01HState = (responses[indexResponse][2] - '0');
 8002d60:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b77      	ldr	r3, [pc, #476]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b30      	subs	r3, #48	@ 0x30
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b76      	ldr	r3, [pc, #472]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d76:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8002d78:	4b75      	ldr	r3, [pc, #468]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b72      	ldr	r3, [pc, #456]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d88:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b6c      	ldr	r3, [pc, #432]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d96:	3303      	adds	r3, #3
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3b30      	subs	r3, #48	@ 0x30
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002da8:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8002daa:	e00e      	b.n	8002dca <ESP01ATDecode+0x34e>
                    }
                    indexResponse++;
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	4b62      	ldr	r3, [pc, #392]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002db6:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002db8:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d187      	bne.n	8002cd8 <ESP01ATDecode+0x25c>
 8002dc8:	e000      	b.n	8002dcc <ESP01ATDecode+0x350>
                        break;
 8002dca:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 8002dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <ESP01ATDecode+0x4c8>)
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <ESP01ATDecode+0x374>
                    esp01HState = 0;
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 8002de2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f54 <ESP01ATDecode+0x4d8>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	4b5a      	ldr	r3, [pc, #360]	@ (8002f54 <ESP01ATDecode+0x4d8>)
 8002dec:	801a      	strh	r2, [r3, #0]
                    break;
 8002dee:	e266      	b.n	80032be <ESP01ATDecode+0x842>
                }
            }
			indexResponseChar++;
 8002df0:	4b56      	ldr	r3, [pc, #344]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <ESP01ATDecode+0x4d0>)
 8002dfa:	701a      	strb	r2, [r3, #0]
			break;
 8002dfc:	e25f      	b.n	80032be <ESP01ATDecode+0x842>
		case 2:
			if(value == '\n'){
 8002dfe:	797b      	ldrb	r3, [r7, #5]
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	f040 8251 	bne.w	80032a8 <ESP01ATDecode+0x82c>
				esp01HState = 0;
 8002e06:	4b52      	ldr	r3, [pc, #328]	@ (8002f50 <ESP01ATDecode+0x4d4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 8002e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f40 <ESP01ATDecode+0x4c4>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b11      	cmp	r3, #17
 8002e12:	f200 8249 	bhi.w	80032a8 <ESP01ATDecode+0x82c>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <ESP01ATDecode+0x3a0>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002feb 	.word	0x08002feb
 8002e20:	08002feb 	.word	0x08002feb
 8002e24:	08002e65 	.word	0x08002e65
 8002e28:	08002e81 	.word	0x08002e81
 8002e2c:	08002eaf 	.word	0x08002eaf
 8002e30:	08002feb 	.word	0x08002feb
 8002e34:	08002ee5 	.word	0x08002ee5
 8002e38:	08002ee5 	.word	0x08002ee5
 8002e3c:	08002f19 	.word	0x08002f19
 8002e40:	08002f25 	.word	0x08002f25
 8002e44:	08002f71 	.word	0x08002f71
 8002e48:	08002fad 	.word	0x08002fad
 8002e4c:	080032a9 	.word	0x080032a9
 8002e50:	08002fb9 	.word	0x08002fb9
 8002e54:	080032a9 	.word	0x080032a9
 8002e58:	08002fcf 	.word	0x08002fcf
 8002e5c:	08002feb 	.word	0x08002feb
 8002e60:	08002feb 	.word	0x08002feb
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 8002e64:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	f040 80c0 	bne.w	8002fee <ESP01ATDecode+0x572>
						esp01TimeoutTask = 0;
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <ESP01ATDecode+0x4e0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002e74:	4a3a      	ldr	r2, [pc, #232]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e76:	7813      	ldrb	r3, [r2, #0]
 8002e78:	f043 0320 	orr.w	r3, r3, #32
 8002e7c:	7013      	strb	r3, [r2, #0]
					}
					break;
 8002e7e:	e0b6      	b.n	8002fee <ESP01ATDecode+0x572>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8002e80:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80b1 	beq.w	8002ff2 <ESP01ATDecode+0x576>
						esp01Flags.bit.SENDINGDATA = 0;
 8002e90:	4a33      	ldr	r2, [pc, #204]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e92:	7813      	ldrb	r3, [r2, #0]
 8002e94:	f023 0308 	bic.w	r3, r3, #8
 8002e98:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002e9a:	4a31      	ldr	r2, [pc, #196]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002e9c:	7813      	ldrb	r3, [r2, #0]
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea2:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f64 <ESP01ATDecode+0x4e8>)
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f68 <ESP01ATDecode+0x4ec>)
 8002eaa:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002eac:	e0a1      	b.n	8002ff2 <ESP01ATDecode+0x576>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8002eae:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <ESP01ATDecode+0x4e0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002eb4:	4b28      	ldr	r3, [pc, #160]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d104      	bne.n	8002ec6 <ESP01ATDecode+0x44a>
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002ebc:	4a28      	ldr	r2, [pc, #160]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ebe:	7813      	ldrb	r3, [r2, #0]
 8002ec0:	f043 0320 	orr.w	r3, r3, #32
 8002ec4:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 8002ec6:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ec8:	7813      	ldrb	r3, [r2, #0]
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002ed0:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 808e 	beq.w	8002ff6 <ESP01ATDecode+0x57a>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 8002eda:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2003      	movs	r0, #3
 8002ee0:	4798      	blx	r3
					break;
 8002ee2:	e088      	b.n	8002ff6 <ESP01ATDecode+0x57a>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ee6:	7813      	ldrb	r3, [r2, #0]
 8002ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eec:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002eee:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002ef0:	7813      	ldrb	r3, [r2, #0]
 8002ef2:	f023 0302 	bic.w	r3, r3, #2
 8002ef6:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <ESP01ATDecode+0x48c>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b07      	cmp	r3, #7
 8002f0e:	d074      	beq.n	8002ffa <ESP01ATDecode+0x57e>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <ESP01ATDecode+0x4dc>)
 8002f12:	221a      	movs	r2, #26
 8002f14:	701a      	strb	r2, [r3, #0]
					break;
 8002f16:	e075      	b.n	8003004 <ESP01ATDecode+0x588>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f18:	4a11      	ldr	r2, [pc, #68]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002f1a:	7813      	ldrb	r3, [r2, #0]
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f20:	7013      	strb	r3, [r2, #0]
					break;
 8002f22:	e06f      	b.n	8003004 <ESP01ATDecode+0x588>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 8002f24:	4a0e      	ldr	r2, [pc, #56]	@ (8002f60 <ESP01ATDecode+0x4e4>)
 8002f26:	7813      	ldrb	r3, [r2, #0]
 8002f28:	f023 0308 	bic.w	r3, r3, #8
 8002f2c:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <ESP01ATDecode+0x582>
						ESP01ChangeState(ESP01_SEND_OK);
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <ESP01ATDecode+0x4f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	200a      	movs	r0, #10
 8002f3c:	4798      	blx	r3
					break;
 8002f3e:	e05e      	b.n	8002ffe <ESP01ATDecode+0x582>
 8002f40:	20000a70 	.word	0x20000a70
 8002f44:	08014b24 	.word	0x08014b24
 8002f48:	200008d4 	.word	0x200008d4
 8002f4c:	20000a71 	.word	0x20000a71
 8002f50:	200008d2 	.word	0x200008d2
 8002f54:	20000a5a 	.word	0x20000a5a
 8002f58:	2000082a 	.word	0x2000082a
 8002f5c:	20000830 	.word	0x20000830
 8002f60:	2000082c 	.word	0x2000082c
 8002f64:	20000a5e 	.word	0x20000a5e
 8002f68:	20000a5c 	.word	0x20000a5c
 8002f6c:	2000083c 	.word	0x2000083c
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8002f70:	4b8e      	ldr	r3, [pc, #568]	@ (80031ac <ESP01ATDecode+0x730>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8002f76:	4a8e      	ldr	r2, [pc, #568]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002f78:	7813      	ldrb	r3, [r2, #0]
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8002f80:	4a8b      	ldr	r2, [pc, #556]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002f82:	7813      	ldrb	r3, [r2, #0]
 8002f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f88:	7013      	strb	r3, [r2, #0]
					if(ESP01DbgStr != NULL)
 8002f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80031b4 <ESP01ATDecode+0x738>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <ESP01ATDecode+0x51e>
							ESP01DbgStr("+&UDPTCPCONNECTED=1\n");
 8002f92:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <ESP01ATDecode+0x738>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4888      	ldr	r0, [pc, #544]	@ (80031b8 <ESP01ATDecode+0x73c>)
 8002f98:	4798      	blx	r3
					if(ESP01ChangeState != NULL)
 8002f9a:	4b88      	ldr	r3, [pc, #544]	@ (80031bc <ESP01ATDecode+0x740>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02f      	beq.n	8003002 <ESP01ATDecode+0x586>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8002fa2:	4b86      	ldr	r3, [pc, #536]	@ (80031bc <ESP01ATDecode+0x740>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2007      	movs	r0, #7
 8002fa8:	4798      	blx	r3
					break;
 8002faa:	e02a      	b.n	8003002 <ESP01ATDecode+0x586>
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fac:	4a80      	ldr	r2, [pc, #512]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002fae:	7813      	ldrb	r3, [r2, #0]
 8002fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fb4:	7013      	strb	r3, [r2, #0]
					break;
 8002fb6:	e025      	b.n	8003004 <ESP01ATDecode+0x588>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002fba:	7813      	ldrb	r3, [r2, #0]
 8002fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fc0:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002fc2:	4a7b      	ldr	r2, [pc, #492]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002fc4:	7813      	ldrb	r3, [r2, #0]
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	7013      	strb	r3, [r2, #0]
					break;
 8002fcc:	e01a      	b.n	8003004 <ESP01ATDecode+0x588>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fce:	4a78      	ldr	r2, [pc, #480]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002fd0:	7813      	ldrb	r3, [r2, #0]
 8002fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd6:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002fd8:	4a75      	ldr	r2, [pc, #468]	@ (80031b0 <ESP01ATDecode+0x734>)
 8002fda:	7813      	ldrb	r3, [r2, #0]
 8002fdc:	f023 0302 	bic.w	r3, r3, #2
 8002fe0:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 8002fe2:	4b77      	ldr	r3, [pc, #476]	@ (80031c0 <ESP01ATDecode+0x744>)
 8002fe4:	221a      	movs	r2, #26
 8002fe6:	701a      	strb	r2, [r3, #0]
					break;
 8002fe8:	e00c      	b.n	8003004 <ESP01ATDecode+0x588>
					break;
 8002fea:	bf00      	nop
 8002fec:	e15c      	b.n	80032a8 <ESP01ATDecode+0x82c>
					break;
 8002fee:	bf00      	nop
 8002ff0:	e15a      	b.n	80032a8 <ESP01ATDecode+0x82c>
					break;
 8002ff2:	bf00      	nop
 8002ff4:	e158      	b.n	80032a8 <ESP01ATDecode+0x82c>
					break;
 8002ff6:	bf00      	nop
 8002ff8:	e156      	b.n	80032a8 <ESP01ATDecode+0x82c>
						break;
 8002ffa:	bf00      	nop
 8002ffc:	e154      	b.n	80032a8 <ESP01ATDecode+0x82c>
					break;
 8002ffe:	bf00      	nop
 8003000:	e152      	b.n	80032a8 <ESP01ATDecode+0x82c>
					break;
 8003002:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 8003004:	e150      	b.n	80032a8 <ESP01ATDecode+0x82c>
		case 5://CIFR,STAIP
			if(value == ','){
 8003006:	797b      	ldrb	r3, [r7, #5]
 8003008:	2b2c      	cmp	r3, #44	@ 0x2c
 800300a:	d10c      	bne.n	8003026 <ESP01ATDecode+0x5aa>
				esp01HState = 6;
 800300c:	4b6d      	ldr	r3, [pc, #436]	@ (80031c4 <ESP01ATDecode+0x748>)
 800300e:	2206      	movs	r2, #6
 8003010:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003012:	4b68      	ldr	r3, [pc, #416]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8148 	beq.w	80032ac <ESP01ATDecode+0x830>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 800301c:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <ESP01ATDecode+0x738>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4869      	ldr	r0, [pc, #420]	@ (80031c8 <ESP01ATDecode+0x74c>)
 8003022:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8003024:	e142      	b.n	80032ac <ESP01ATDecode+0x830>
				esp01HState = 0;
 8003026:	4b67      	ldr	r3, [pc, #412]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 800302c:	4b67      	ldr	r3, [pc, #412]	@ (80031cc <ESP01ATDecode+0x750>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	4b65      	ldr	r3, [pc, #404]	@ (80031cc <ESP01ATDecode+0x750>)
 8003036:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003038:	4b5e      	ldr	r3, [pc, #376]	@ (80031b4 <ESP01ATDecode+0x738>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8135 	beq.w	80032ac <ESP01ATDecode+0x830>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 8003042:	4b5c      	ldr	r3, [pc, #368]	@ (80031b4 <ESP01ATDecode+0x738>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4862      	ldr	r0, [pc, #392]	@ (80031d0 <ESP01ATDecode+0x754>)
 8003048:	4798      	blx	r3
			break;
 800304a:	e12f      	b.n	80032ac <ESP01ATDecode+0x830>
		case 6:
			if(value == '\"'){
 800304c:	797b      	ldrb	r3, [r7, #5]
 800304e:	2b22      	cmp	r3, #34	@ 0x22
 8003050:	f040 812e 	bne.w	80032b0 <ESP01ATDecode+0x834>
				esp01HState = 7;
 8003054:	4b5b      	ldr	r3, [pc, #364]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003056:	2207      	movs	r2, #7
 8003058:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 800305a:	4b5e      	ldr	r3, [pc, #376]	@ (80031d4 <ESP01ATDecode+0x758>)
 800305c:	2200      	movs	r2, #0
 800305e:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003060:	e126      	b.n	80032b0 <ESP01ATDecode+0x834>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	2b22      	cmp	r3, #34	@ 0x22
 8003066:	d003      	beq.n	8003070 <ESP01ATDecode+0x5f4>
 8003068:	4b5a      	ldr	r3, [pc, #360]	@ (80031d4 <ESP01ATDecode+0x758>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d103      	bne.n	8003078 <ESP01ATDecode+0x5fc>
				esp01HState = 8;
 8003070:	4b54      	ldr	r3, [pc, #336]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003072:	2208      	movs	r2, #8
 8003074:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8003076:	e122      	b.n	80032be <ESP01ATDecode+0x842>
				esp01LocalIP[esp01nBytes++] = value;
 8003078:	4b56      	ldr	r3, [pc, #344]	@ (80031d4 <ESP01ATDecode+0x758>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	b291      	uxth	r1, r2
 8003080:	4a54      	ldr	r2, [pc, #336]	@ (80031d4 <ESP01ATDecode+0x758>)
 8003082:	8011      	strh	r1, [r2, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	4a54      	ldr	r2, [pc, #336]	@ (80031d8 <ESP01ATDecode+0x75c>)
 8003088:	797b      	ldrb	r3, [r7, #5]
 800308a:	5453      	strb	r3, [r2, r1]
			break;
 800308c:	e117      	b.n	80032be <ESP01ATDecode+0x842>
		case 8:
			if(value == '\n'){
 800308e:	797b      	ldrb	r3, [r7, #5]
 8003090:	2b0a      	cmp	r3, #10
 8003092:	f040 810f 	bne.w	80032b4 <ESP01ATDecode+0x838>
				esp01HState = 0;
 8003096:	4b4b      	ldr	r3, [pc, #300]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <ESP01ATDecode+0x758>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d80e      	bhi.n	80030c2 <ESP01ATDecode+0x646>
					esp01LocalIP[esp01nBytes] = '\0';
 80030a4:	4b4b      	ldr	r3, [pc, #300]	@ (80031d4 <ESP01ATDecode+0x758>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <ESP01ATDecode+0x75c>)
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 80030b0:	4a3f      	ldr	r2, [pc, #252]	@ (80031b0 <ESP01ATDecode+0x734>)
 80030b2:	7813      	ldrb	r3, [r2, #0]
 80030b4:	f043 0320 	orr.w	r3, r3, #32
 80030b8:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 80030ba:	4b3c      	ldr	r3, [pc, #240]	@ (80031ac <ESP01ATDecode+0x730>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e002      	b.n	80030c8 <ESP01ATDecode+0x64c>
				}
				else
					esp01LocalIP[0] = '\0';
 80030c2:	4b45      	ldr	r3, [pc, #276]	@ (80031d8 <ESP01ATDecode+0x75c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 80030c8:	4b3c      	ldr	r3, [pc, #240]	@ (80031bc <ESP01ATDecode+0x740>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80f1 	beq.w	80032b4 <ESP01ATDecode+0x838>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 80030d2:	4b3a      	ldr	r3, [pc, #232]	@ (80031bc <ESP01ATDecode+0x740>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2004      	movs	r0, #4
 80030d8:	4798      	blx	r3
			}
			break;
 80030da:	e0eb      	b.n	80032b4 <ESP01ATDecode+0x838>
		case 10://IPD
			if(value == ','){
 80030dc:	797b      	ldrb	r3, [r7, #5]
 80030de:	2b2c      	cmp	r3, #44	@ 0x2c
 80030e0:	d106      	bne.n	80030f0 <ESP01ATDecode+0x674>
				esp01HState = 11;
 80030e2:	4b38      	ldr	r3, [pc, #224]	@ (80031c4 <ESP01ATDecode+0x748>)
 80030e4:	220b      	movs	r2, #11
 80030e6:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80030e8:	4b3a      	ldr	r3, [pc, #232]	@ (80031d4 <ESP01ATDecode+0x758>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80030ee:	e0e6      	b.n	80032be <ESP01ATDecode+0x842>
				esp01HState = 0;
 80030f0:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <ESP01ATDecode+0x748>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80030f6:	4b35      	ldr	r3, [pc, #212]	@ (80031cc <ESP01ATDecode+0x750>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b33      	ldr	r3, [pc, #204]	@ (80031cc <ESP01ATDecode+0x750>)
 8003100:	801a      	strh	r2, [r3, #0]
			break;
 8003102:	e0dc      	b.n	80032be <ESP01ATDecode+0x842>
		case 11:
			if(value == ':')
 8003104:	797b      	ldrb	r3, [r7, #5]
 8003106:	2b3a      	cmp	r3, #58	@ 0x3a
 8003108:	d103      	bne.n	8003112 <ESP01ATDecode+0x696>
				esp01HState = 12;
 800310a:	4b2e      	ldr	r3, [pc, #184]	@ (80031c4 <ESP01ATDecode+0x748>)
 800310c:	220c      	movs	r2, #12
 800310e:	701a      	strb	r2, [r3, #0]
					if(esp01ATSate == ESP01_WAITING_CONNECTION){
						esp01Link = value;
					}
				}
			}
			break;
 8003110:	e0d2      	b.n	80032b8 <ESP01ATDecode+0x83c>
				if(value<'0' || value>'9'){
 8003112:	797b      	ldrb	r3, [r7, #5]
 8003114:	2b2f      	cmp	r3, #47	@ 0x2f
 8003116:	d902      	bls.n	800311e <ESP01ATDecode+0x6a2>
 8003118:	797b      	ldrb	r3, [r7, #5]
 800311a:	2b39      	cmp	r3, #57	@ 0x39
 800311c:	d909      	bls.n	8003132 <ESP01ATDecode+0x6b6>
					esp01HState = 0;
 800311e:	4b29      	ldr	r3, [pc, #164]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 8003124:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <ESP01ATDecode+0x750>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b27      	ldr	r3, [pc, #156]	@ (80031cc <ESP01ATDecode+0x750>)
 800312e:	801a      	strh	r2, [r3, #0]
			break;
 8003130:	e0c2      	b.n	80032b8 <ESP01ATDecode+0x83c>
					esp01nBytes *= 10;
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <ESP01ATDecode+0x758>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	4413      	add	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <ESP01ATDecode+0x758>)
 8003142:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 8003144:	797b      	ldrb	r3, [r7, #5]
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <ESP01ATDecode+0x758>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	4413      	add	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b30      	subs	r3, #48	@ 0x30
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b1f      	ldr	r3, [pc, #124]	@ (80031d4 <ESP01ATDecode+0x758>)
 8003156:	801a      	strh	r2, [r3, #0]
					if(esp01ATSate == ESP01_WAITING_CONNECTION){
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <ESP01ATDecode+0x744>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b12      	cmp	r3, #18
 800315e:	f040 80ab 	bne.w	80032b8 <ESP01ATDecode+0x83c>
						esp01Link = value;
 8003162:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <ESP01ATDecode+0x760>)
 8003164:	797b      	ldrb	r3, [r7, #5]
 8003166:	7013      	strb	r3, [r2, #0]
			break;
 8003168:	e0a6      	b.n	80032b8 <ESP01ATDecode+0x83c>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 800316a:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <ESP01ATDecode+0x764>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <ESP01ATDecode+0x700>
				esp01Handle.WriteByteToBufRX(value);
 8003172:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <ESP01ATDecode+0x764>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	797a      	ldrb	r2, [r7, #5]
 8003178:	4610      	mov	r0, r2
 800317a:	4798      	blx	r3
			esp01nBytes--;
 800317c:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <ESP01ATDecode+0x758>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <ESP01ATDecode+0x758>)
 8003186:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 8003188:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <ESP01ATDecode+0x758>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 8095 	bne.w	80032bc <ESP01ATDecode+0x840>
				esp01HState = 0;
 8003192:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <ESP01ATDecode+0x748>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <ESP01ATDecode+0x738>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 808d 	beq.w	80032bc <ESP01ATDecode+0x840>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 80031a2:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <ESP01ATDecode+0x738>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	480f      	ldr	r0, [pc, #60]	@ (80031e4 <ESP01ATDecode+0x768>)
 80031a8:	4798      	blx	r3
			}
			break;
 80031aa:	e087      	b.n	80032bc <ESP01ATDecode+0x840>
 80031ac:	20000830 	.word	0x20000830
 80031b0:	2000082c 	.word	0x2000082c
 80031b4:	20000840 	.word	0x20000840
 80031b8:	08013390 	.word	0x08013390
 80031bc:	2000083c 	.word	0x2000083c
 80031c0:	2000082a 	.word	0x2000082a
 80031c4:	200008d2 	.word	0x200008d2
 80031c8:	080133a8 	.word	0x080133a8
 80031cc:	20000a5a 	.word	0x20000a5a
 80031d0:	080133c0 	.word	0x080133c0
 80031d4:	200008d4 	.word	0x200008d4
 80031d8:	200008bc 	.word	0x200008bc
 80031dc:	20000a74 	.word	0x20000a74
 80031e0:	20000a64 	.word	0x20000a64
 80031e4:	080133d4 	.word	0x080133d4
		case 20:
			if (value == '&' || value == '\r' || ssid_idx >= MAX_SSID_LEN-1) {
 80031e8:	797b      	ldrb	r3, [r7, #5]
 80031ea:	2b26      	cmp	r3, #38	@ 0x26
 80031ec:	d006      	beq.n	80031fc <ESP01ATDecode+0x780>
 80031ee:	797b      	ldrb	r3, [r7, #5]
 80031f0:	2b0d      	cmp	r3, #13
 80031f2:	d003      	beq.n	80031fc <ESP01ATDecode+0x780>
 80031f4:	4b3d      	ldr	r3, [pc, #244]	@ (80032ec <ESP01ATDecode+0x870>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b1e      	cmp	r3, #30
 80031fa:	d914      	bls.n	8003226 <ESP01ATDecode+0x7aa>
				// fin de SSID
				ssid_buffer[ssid_idx] = '\0';
 80031fc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <ESP01ATDecode+0x870>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <ESP01ATDecode+0x874>)
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]
				ssid_idx = 0;
 8003208:	4b38      	ldr	r3, [pc, #224]	@ (80032ec <ESP01ATDecode+0x870>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 800320e:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <ESP01ATDecode+0x878>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
				// aquí puedes, por ejemplo:
				ESP01DbgStr("SSID:");
 8003214:	4b38      	ldr	r3, [pc, #224]	@ (80032f8 <ESP01ATDecode+0x87c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4838      	ldr	r0, [pc, #224]	@ (80032fc <ESP01ATDecode+0x880>)
 800321a:	4798      	blx	r3
				ESP01DbgStr(&ssid_buffer[0]);
 800321c:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <ESP01ATDecode+0x87c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4833      	ldr	r0, [pc, #204]	@ (80032f0 <ESP01ATDecode+0x874>)
 8003222:	4798      	blx	r3
			} else {
				ssid_buffer[ssid_idx++] = value;
			}
			break;
 8003224:	e04b      	b.n	80032be <ESP01ATDecode+0x842>
				ssid_buffer[ssid_idx++] = value;
 8003226:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <ESP01ATDecode+0x870>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	b2d1      	uxtb	r1, r2
 800322e:	4a2f      	ldr	r2, [pc, #188]	@ (80032ec <ESP01ATDecode+0x870>)
 8003230:	7011      	strb	r1, [r2, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	4a2e      	ldr	r2, [pc, #184]	@ (80032f0 <ESP01ATDecode+0x874>)
 8003236:	797b      	ldrb	r3, [r7, #5]
 8003238:	5453      	strb	r3, [r2, r1]
			break;
 800323a:	e040      	b.n	80032be <ESP01ATDecode+0x842>
		case 21:
			if (value == '&' || value == ' ' || value == '\r' || pass_idx >= MAX_PASS_LEN-1) {
 800323c:	797b      	ldrb	r3, [r7, #5]
 800323e:	2b26      	cmp	r3, #38	@ 0x26
 8003240:	d009      	beq.n	8003256 <ESP01ATDecode+0x7da>
 8003242:	797b      	ldrb	r3, [r7, #5]
 8003244:	2b20      	cmp	r3, #32
 8003246:	d006      	beq.n	8003256 <ESP01ATDecode+0x7da>
 8003248:	797b      	ldrb	r3, [r7, #5]
 800324a:	2b0d      	cmp	r3, #13
 800324c:	d003      	beq.n	8003256 <ESP01ATDecode+0x7da>
 800324e:	4b2c      	ldr	r3, [pc, #176]	@ (8003300 <ESP01ATDecode+0x884>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b1e      	cmp	r3, #30
 8003254:	d914      	bls.n	8003280 <ESP01ATDecode+0x804>
				// fin de PASS
				pass_buffer[pass_idx] = '\0';
 8003256:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <ESP01ATDecode+0x884>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <ESP01ATDecode+0x888>)
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]
				pass_idx = 0;
 8003262:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <ESP01ATDecode+0x884>)
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 8003268:	4b22      	ldr	r3, [pc, #136]	@ (80032f4 <ESP01ATDecode+0x878>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
				ESP01DbgStr("PASS:");
 800326e:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <ESP01ATDecode+0x87c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4825      	ldr	r0, [pc, #148]	@ (8003308 <ESP01ATDecode+0x88c>)
 8003274:	4798      	blx	r3
				ESP01DbgStr(&pass_buffer[0]);
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <ESP01ATDecode+0x87c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4822      	ldr	r0, [pc, #136]	@ (8003304 <ESP01ATDecode+0x888>)
 800327c:	4798      	blx	r3
			} else {
				pass_buffer[pass_idx++] = value;
			}
			break;
 800327e:	e01e      	b.n	80032be <ESP01ATDecode+0x842>
				pass_buffer[pass_idx++] = value;
 8003280:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <ESP01ATDecode+0x884>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	b2d1      	uxtb	r1, r2
 8003288:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <ESP01ATDecode+0x884>)
 800328a:	7011      	strb	r1, [r2, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <ESP01ATDecode+0x888>)
 8003290:	797b      	ldrb	r3, [r7, #5]
 8003292:	5453      	strb	r3, [r2, r1]
			break;
 8003294:	e013      	b.n	80032be <ESP01ATDecode+0x842>
		default:
			esp01HState = 0;
 8003296:	4b17      	ldr	r3, [pc, #92]	@ (80032f4 <ESP01ATDecode+0x878>)
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <ESP01ATDecode+0x890>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e00c      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032a4:	bf00      	nop
 80032a6:	e00a      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032a8:	bf00      	nop
 80032aa:	e008      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032ac:	bf00      	nop
 80032ae:	e006      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032b0:	bf00      	nop
 80032b2:	e004      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <ESP01ATDecode+0x842>
			break;
 80032bc:	bf00      	nop
		}

		esp01irRXAT++;
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <ESP01ATDecode+0x894>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <ESP01ATDecode+0x894>)
 80032c8:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <ESP01ATDecode+0x894>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	2b80      	cmp	r3, #128	@ 0x80
 80032d0:	d102      	bne.n	80032d8 <ESP01ATDecode+0x85c>
			esp01irRXAT = 0;
 80032d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <ESP01ATDecode+0x894>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 80032d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <ESP01ATDecode+0x894>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	429a      	cmp	r2, r3
 80032e0:	f47f abe9 	bne.w	8002ab6 <ESP01ATDecode+0x3a>
	}
}
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000ab8 	.word	0x20000ab8
 80032f0:	20000a78 	.word	0x20000a78
 80032f4:	200008d2 	.word	0x200008d2
 80032f8:	20000840 	.word	0x20000840
 80032fc:	080133e8 	.word	0x080133e8
 8003300:	20000ab9 	.word	0x20000ab9
 8003304:	20000a98 	.word	0x20000a98
 8003308:	080133f0 	.word	0x080133f0
 800330c:	20000834 	.word	0x20000834
 8003310:	20000a5a 	.word	0x20000a5a

08003314 <ESP01DOConnection>:

static void ESP01DOConnection(){
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 8003318:	4ba0      	ldr	r3, [pc, #640]	@ (800359c <ESP01DOConnection+0x288>)
 800331a:	2264      	movs	r2, #100	@ 0x64
 800331c:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 800331e:	4ba0      	ldr	r3, [pc, #640]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b1a      	cmp	r3, #26
 8003324:	f200 831b 	bhi.w	800395e <ESP01DOConnection+0x64a>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <ESP01DOConnection+0x1c>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	0800339d 	.word	0x0800339d
 8003334:	080033fb 	.word	0x080033fb
 8003338:	0800344d 	.word	0x0800344d
 800333c:	0800346b 	.word	0x0800346b
 8003340:	08003499 	.word	0x08003499
 8003344:	080034b7 	.word	0x080034b7
 8003348:	080034f3 	.word	0x080034f3
 800334c:	08003579 	.word	0x08003579
 8003350:	080035f9 	.word	0x080035f9
 8003354:	08003627 	.word	0x08003627
 8003358:	08003661 	.word	0x08003661
 800335c:	08003689 	.word	0x08003689
 8003360:	0800371d 	.word	0x0800371d
 8003364:	0800373b 	.word	0x0800373b
 8003368:	0800376f 	.word	0x0800376f
 800336c:	08003793 	.word	0x08003793
 8003370:	080037bf 	.word	0x080037bf
 8003374:	080037dd 	.word	0x080037dd
 8003378:	08003803 	.word	0x08003803
 800337c:	08003815 	.word	0x08003815
 8003380:	08003845 	.word	0x08003845
 8003384:	080038c9 	.word	0x080038c9
 8003388:	0800391b 	.word	0x0800391b
 800338c:	0800394d 	.word	0x0800394d
 8003390:	080033a5 	.word	0x080033a5
 8003394:	080033c5 	.word	0x080033c5
 8003398:	080033ed 	.word	0x080033ed
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 800339c:	4b7f      	ldr	r3, [pc, #508]	@ (800359c <ESP01DOConnection+0x288>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
		break;
 80033a2:	e2dc      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 80033a4:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <ESP01DOConnection+0x290>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2000      	movs	r0, #0
 80033aa:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 80033ac:	4b7e      	ldr	r3, [pc, #504]	@ (80035a8 <ESP01DOConnection+0x294>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <ESP01DOConnection+0xa8>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 80033b4:	4b7c      	ldr	r3, [pc, #496]	@ (80035a8 <ESP01DOConnection+0x294>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	487c      	ldr	r0, [pc, #496]	@ (80035ac <ESP01DOConnection+0x298>)
 80033ba:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 80033bc:	4b78      	ldr	r3, [pc, #480]	@ (80035a0 <ESP01DOConnection+0x28c>)
 80033be:	2219      	movs	r2, #25
 80033c0:	701a      	strb	r2, [r3, #0]
		break;
 80033c2:	e2cc      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 80033c4:	4b77      	ldr	r3, [pc, #476]	@ (80035a4 <ESP01DOConnection+0x290>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2001      	movs	r0, #1
 80033ca:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 80033cc:	4b76      	ldr	r3, [pc, #472]	@ (80035a8 <ESP01DOConnection+0x294>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <ESP01DOConnection+0xc8>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 80033d4:	4b74      	ldr	r3, [pc, #464]	@ (80035a8 <ESP01DOConnection+0x294>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4875      	ldr	r0, [pc, #468]	@ (80035b0 <ESP01DOConnection+0x29c>)
 80033da:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 80033dc:	4b70      	ldr	r3, [pc, #448]	@ (80035a0 <ESP01DOConnection+0x28c>)
 80033de:	221a      	movs	r2, #26
 80033e0:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 80033e2:	4b6e      	ldr	r3, [pc, #440]	@ (800359c <ESP01DOConnection+0x288>)
 80033e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80033e8:	601a      	str	r2, [r3, #0]
		break;
 80033ea:	e2b8      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 80033ec:	4b6c      	ldr	r3, [pc, #432]	@ (80035a0 <ESP01DOConnection+0x28c>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 80033f2:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
		break;
 80033f8:	e2b1      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATAT:
		if(esp01TriesAT){
 80033fa:	4b6e      	ldr	r3, [pc, #440]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <ESP01DOConnection+0x10a>
			esp01TriesAT--;
 8003402:	4b6c      	ldr	r3, [pc, #432]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 800340c:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 800340e:	4b69      	ldr	r3, [pc, #420]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <ESP01DOConnection+0x110>
				esp01ATSate = ESP01ATHARDRST0;
 8003416:	4b62      	ldr	r3, [pc, #392]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003418:	2218      	movs	r2, #24
 800341a:	701a      	strb	r2, [r3, #0]
				break;
 800341c:	e29f      	b.n	800395e <ESP01DOConnection+0x64a>
			}
		}
		else
			esp01TriesAT = 4;
 800341e:	4b65      	ldr	r3, [pc, #404]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 8003420:	2204      	movs	r2, #4
 8003422:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 8003424:	4a64      	ldr	r2, [pc, #400]	@ (80035b8 <ESP01DOConnection+0x2a4>)
 8003426:	7813      	ldrb	r3, [r2, #0]
 8003428:	f023 0320 	bic.w	r3, r3, #32
 800342c:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 800342e:	4863      	ldr	r0, [pc, #396]	@ (80035bc <ESP01DOConnection+0x2a8>)
 8003430:	f000 fb3a 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003434:	4b5c      	ldr	r3, [pc, #368]	@ (80035a8 <ESP01DOConnection+0x294>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <ESP01DOConnection+0x130>
			ESP01DbgStr("+&DBGESP01AT\n");
 800343c:	4b5a      	ldr	r3, [pc, #360]	@ (80035a8 <ESP01DOConnection+0x294>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	485f      	ldr	r0, [pc, #380]	@ (80035c0 <ESP01DOConnection+0x2ac>)
 8003442:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 8003444:	4b56      	ldr	r3, [pc, #344]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
		break;
 800344a:	e288      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800344c:	4b5a      	ldr	r3, [pc, #360]	@ (80035b8 <ESP01DOConnection+0x2a4>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <ESP01DOConnection+0x14e>
			esp01ATSate = ESP01ATCWMODE;
 800345a:	4b51      	ldr	r3, [pc, #324]	@ (80035a0 <ESP01DOConnection+0x28c>)
 800345c:	2203      	movs	r2, #3
 800345e:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003460:	e27d      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATAT;
 8003462:	4b4f      	ldr	r3, [pc, #316]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
		break;
 8003468:	e279      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 800346a:	4856      	ldr	r0, [pc, #344]	@ (80035c4 <ESP01DOConnection+0x2b0>)
 800346c:	f000 fb1c 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003470:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <ESP01DOConnection+0x294>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <ESP01DOConnection+0x16c>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8003478:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <ESP01DOConnection+0x294>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4852      	ldr	r0, [pc, #328]	@ (80035c8 <ESP01DOConnection+0x2b4>)
 800347e:	4798      	blx	r3

		/* acá separamos de station a soft ap*/
		if(mode == CONNECTWIFI){
 8003480:	4b52      	ldr	r3, [pc, #328]	@ (80035cc <ESP01DOConnection+0x2b8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIPCLOSESERVER;
 8003488:	4b45      	ldr	r3, [pc, #276]	@ (80035a0 <ESP01DOConnection+0x28c>)
 800348a:	2204      	movs	r2, #4
 800348c:	701a      	strb	r2, [r3, #0]
		}else{
			esp01ATSate = ESP01ATCIPMUX;
		}

		break;
 800348e:	e266      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATCIPMUX;
 8003490:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003492:	2205      	movs	r2, #5
 8003494:	701a      	strb	r2, [r3, #0]
		break;
 8003496:	e262      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCIPCLOSESERVER:
		ESP01StrToBufTX(ATCIPCLOSESERVER);
 8003498:	484d      	ldr	r0, [pc, #308]	@ (80035d0 <ESP01DOConnection+0x2bc>)
 800349a:	f000 fb05 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800349e:	4b42      	ldr	r3, [pc, #264]	@ (80035a8 <ESP01DOConnection+0x294>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <ESP01DOConnection+0x19a>
			ESP01DbgStr("+&DBGATCLOSESERVER\n");
 80034a6:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <ESP01DOConnection+0x294>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	484a      	ldr	r0, [pc, #296]	@ (80035d4 <ESP01DOConnection+0x2c0>)
 80034ac:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 80034ae:	4b3c      	ldr	r3, [pc, #240]	@ (80035a0 <ESP01DOConnection+0x28c>)
 80034b0:	2205      	movs	r2, #5
 80034b2:	701a      	strb	r2, [r3, #0]
		break;
 80034b4:	e253      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 80034b6:	4848      	ldr	r0, [pc, #288]	@ (80035d8 <ESP01DOConnection+0x2c4>)
 80034b8:	f000 faf6 	bl	8003aa8 <ESP01StrToBufTX>

		if(mode == CONNECTWIFI){
 80034bc:	4b43      	ldr	r3, [pc, #268]	@ (80035cc <ESP01DOConnection+0x2b8>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <ESP01DOConnection+0x1be>
			ESP01StrToBufTX("0\r\n");
 80034c4:	4845      	ldr	r0, [pc, #276]	@ (80035dc <ESP01DOConnection+0x2c8>)
 80034c6:	f000 faef 	bl	8003aa8 <ESP01StrToBufTX>
			esp01ATSate = ESP01ATCWJAP;
 80034ca:	4b35      	ldr	r3, [pc, #212]	@ (80035a0 <ESP01DOConnection+0x28c>)
 80034cc:	2206      	movs	r2, #6
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e005      	b.n	80034de <ESP01DOConnection+0x1ca>
		}else{
			ESP01StrToBufTX("1\r\n");
 80034d2:	4843      	ldr	r0, [pc, #268]	@ (80035e0 <ESP01DOConnection+0x2cc>)
 80034d4:	f000 fae8 	bl	8003aa8 <ESP01StrToBufTX>
			esp01ATSate = ESP01ATCWQAP;
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <ESP01DOConnection+0x28c>)
 80034da:	220e      	movs	r2, #14
 80034dc:	701a      	strb	r2, [r3, #0]
		}


		//esp01ATSate = ESP01ATCWJAP;//COMENTAR

		if(ESP01DbgStr != NULL)
 80034de:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <ESP01DOConnection+0x294>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8234 	beq.w	8003950 <ESP01DOConnection+0x63c>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 80034e8:	4b2f      	ldr	r3, [pc, #188]	@ (80035a8 <ESP01DOConnection+0x294>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	483d      	ldr	r0, [pc, #244]	@ (80035e4 <ESP01DOConnection+0x2d0>)
 80034ee:	4798      	blx	r3
		break;
 80034f0:	e22e      	b.n	8003950 <ESP01DOConnection+0x63c>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 80034f2:	4b31      	ldr	r3, [pc, #196]	@ (80035b8 <ESP01DOConnection+0x2a4>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <ESP01DOConnection+0x1f4>
			esp01ATSate = ESP01ATCIFSR;
 8003500:	4b27      	ldr	r3, [pc, #156]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003502:	2208      	movs	r2, #8
 8003504:	701a      	strb	r2, [r3, #0]
			break;
 8003506:	e22a      	b.n	800395e <ESP01DOConnection+0x64a>
		}
		if(esp01SSID[0] == '\0')
 8003508:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <ESP01DOConnection+0x2d4>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8221 	beq.w	8003954 <ESP01DOConnection+0x640>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8003512:	4836      	ldr	r0, [pc, #216]	@ (80035ec <ESP01DOConnection+0x2d8>)
 8003514:	f000 fac8 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003518:	2022      	movs	r0, #34	@ 0x22
 800351a:	f000 faf5 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 800351e:	4832      	ldr	r0, [pc, #200]	@ (80035e8 <ESP01DOConnection+0x2d4>)
 8003520:	f000 fac2 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8003524:	2022      	movs	r0, #34	@ 0x22
 8003526:	f000 faef 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 800352a:	202c      	movs	r0, #44	@ 0x2c
 800352c:	f000 faec 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8003530:	2022      	movs	r0, #34	@ 0x22
 8003532:	f000 fae9 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8003536:	482e      	ldr	r0, [pc, #184]	@ (80035f0 <ESP01DOConnection+0x2dc>)
 8003538:	f000 fab6 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 800353c:	2022      	movs	r0, #34	@ 0x22
 800353e:	f000 fae3 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8003542:	200d      	movs	r0, #13
 8003544:	f000 fae0 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8003548:	200a      	movs	r0, #10
 800354a:	f000 fadd 	bl	8003b08 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <ESP01DOConnection+0x294>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <ESP01DOConnection+0x24a>
			ESP01DbgStr("+&DBGESP01ATCWJAP");
 8003556:	4b14      	ldr	r3, [pc, #80]	@ (80035a8 <ESP01DOConnection+0x294>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4826      	ldr	r0, [pc, #152]	@ (80035f4 <ESP01DOConnection+0x2e0>)
 800355c:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <ESP01DOConnection+0x2a4>)
 8003560:	7813      	ldrb	r3, [r2, #0]
 8003562:	f023 0320 	bic.w	r3, r3, #32
 8003566:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8003568:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <ESP01DOConnection+0x28c>)
 800356a:	2207      	movs	r2, #7
 800356c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <ESP01DOConnection+0x288>)
 8003570:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003574:	601a      	str	r2, [r3, #0]
		break;
 8003576:	e1f2      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8003578:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <ESP01DOConnection+0x2a4>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <ESP01DOConnection+0x280>
			esp01ATSate = ESP01ATCIFSR;
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003588:	2208      	movs	r2, #8
 800358a:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <ESP01DOConnection+0x2a0>)
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003592:	e1e4      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATAT;
 8003594:	4b02      	ldr	r3, [pc, #8]	@ (80035a0 <ESP01DOConnection+0x28c>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
		break;
 800359a:	e1e0      	b.n	800395e <ESP01DOConnection+0x64a>
 800359c:	20000830 	.word	0x20000830
 80035a0:	2000082a 	.word	0x2000082a
 80035a4:	20000a64 	.word	0x20000a64
 80035a8:	20000840 	.word	0x20000840
 80035ac:	080133f8 	.word	0x080133f8
 80035b0:	08013410 	.word	0x08013410
 80035b4:	20000a60 	.word	0x20000a60
 80035b8:	2000082c 	.word	0x2000082c
 80035bc:	08014860 	.word	0x08014860
 80035c0:	08013428 	.word	0x08013428
 80035c4:	08014880 	.word	0x08014880
 80035c8:	08013438 	.word	0x08013438
 80035cc:	20000a72 	.word	0x20000a72
 80035d0:	08014890 	.word	0x08014890
 80035d4:	0801344c 	.word	0x0801344c
 80035d8:	08014868 	.word	0x08014868
 80035dc:	08013460 	.word	0x08013460
 80035e0:	08013464 	.word	0x08013464
 80035e4:	08013468 	.word	0x08013468
 80035e8:	20000844 	.word	0x20000844
 80035ec:	080148a4 	.word	0x080148a4
 80035f0:	20000884 	.word	0x20000884
 80035f4:	0801347c 	.word	0x0801347c
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 80035f8:	4b9a      	ldr	r3, [pc, #616]	@ (8003864 <ESP01DOConnection+0x550>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 80035fe:	489a      	ldr	r0, [pc, #616]	@ (8003868 <ESP01DOConnection+0x554>)
 8003600:	f000 fa52 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003604:	4b99      	ldr	r3, [pc, #612]	@ (800386c <ESP01DOConnection+0x558>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <ESP01DOConnection+0x300>
			ESP01DbgStr("+&DBGESP01CIFSR");
 800360c:	4b97      	ldr	r3, [pc, #604]	@ (800386c <ESP01DOConnection+0x558>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4897      	ldr	r0, [pc, #604]	@ (8003870 <ESP01DOConnection+0x55c>)
 8003612:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003614:	4a97      	ldr	r2, [pc, #604]	@ (8003874 <ESP01DOConnection+0x560>)
 8003616:	7813      	ldrb	r3, [r2, #0]
 8003618:	f023 0320 	bic.w	r3, r3, #32
 800361c:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 800361e:	4b96      	ldr	r3, [pc, #600]	@ (8003878 <ESP01DOConnection+0x564>)
 8003620:	2209      	movs	r2, #9
 8003622:	701a      	strb	r2, [r3, #0]
		break;
 8003624:	e19b      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003626:	4b93      	ldr	r3, [pc, #588]	@ (8003874 <ESP01DOConnection+0x560>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <ESP01DOConnection+0x328>
			esp01ATSate = ESP01ATCIPCLOSE;
 8003634:	4b90      	ldr	r3, [pc, #576]	@ (8003878 <ESP01DOConnection+0x564>)
 8003636:	220a      	movs	r2, #10
 8003638:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 800363a:	e190      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01TriesAT--;
 800363c:	4b8f      	ldr	r3, [pc, #572]	@ (800387c <ESP01DOConnection+0x568>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	3b01      	subs	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b8d      	ldr	r3, [pc, #564]	@ (800387c <ESP01DOConnection+0x568>)
 8003646:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8003648:	4b8c      	ldr	r3, [pc, #560]	@ (800387c <ESP01DOConnection+0x568>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <ESP01DOConnection+0x344>
				esp01ATSate = ESP01ATAT;
 8003650:	4b89      	ldr	r3, [pc, #548]	@ (8003878 <ESP01DOConnection+0x564>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
				break;
 8003656:	e182      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATCIFSR;
 8003658:	4b87      	ldr	r3, [pc, #540]	@ (8003878 <ESP01DOConnection+0x564>)
 800365a:	2208      	movs	r2, #8
 800365c:	701a      	strb	r2, [r3, #0]
		break;
 800365e:	e17e      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8003660:	4b87      	ldr	r3, [pc, #540]	@ (8003880 <ESP01DOConnection+0x56c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8177 	beq.w	8003958 <ESP01DOConnection+0x644>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 800366a:	4886      	ldr	r0, [pc, #536]	@ (8003884 <ESP01DOConnection+0x570>)
 800366c:	f000 fa1c 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003670:	4b7e      	ldr	r3, [pc, #504]	@ (800386c <ESP01DOConnection+0x558>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <ESP01DOConnection+0x36c>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE");
 8003678:	4b7c      	ldr	r3, [pc, #496]	@ (800386c <ESP01DOConnection+0x558>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4882      	ldr	r0, [pc, #520]	@ (8003888 <ESP01DOConnection+0x574>)
 800367e:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8003680:	4b7d      	ldr	r3, [pc, #500]	@ (8003878 <ESP01DOConnection+0x564>)
 8003682:	220b      	movs	r2, #11
 8003684:	701a      	strb	r2, [r3, #0]
		break;
 8003686:	e16a      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8003688:	4880      	ldr	r0, [pc, #512]	@ (800388c <ESP01DOConnection+0x578>)
 800368a:	f000 fa0d 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 800368e:	2022      	movs	r0, #34	@ 0x22
 8003690:	f000 fa3a 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8003694:	487e      	ldr	r0, [pc, #504]	@ (8003890 <ESP01DOConnection+0x57c>)
 8003696:	f000 fa07 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 800369a:	2022      	movs	r0, #34	@ 0x22
 800369c:	f000 fa34 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 80036a0:	202c      	movs	r0, #44	@ 0x2c
 80036a2:	f000 fa31 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 80036a6:	2022      	movs	r0, #34	@ 0x22
 80036a8:	f000 fa2e 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 80036ac:	4874      	ldr	r0, [pc, #464]	@ (8003880 <ESP01DOConnection+0x56c>)
 80036ae:	f000 f9fb 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80036b2:	2022      	movs	r0, #34	@ 0x22
 80036b4:	f000 fa28 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 80036b8:	202c      	movs	r0, #44	@ 0x2c
 80036ba:	f000 fa25 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 80036be:	4875      	ldr	r0, [pc, #468]	@ (8003894 <ESP01DOConnection+0x580>)
 80036c0:	f000 f9f2 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 80036c4:	202c      	movs	r0, #44	@ 0x2c
 80036c6:	f000 fa1f 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 80036ca:	4873      	ldr	r0, [pc, #460]	@ (8003898 <ESP01DOConnection+0x584>)
 80036cc:	f000 f9ec 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 80036d0:	202c      	movs	r0, #44	@ 0x2c
 80036d2:	f000 fa19 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 80036d6:	2030      	movs	r0, #48	@ 0x30
 80036d8:	f000 fa16 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 80036dc:	200d      	movs	r0, #13
 80036de:	f000 fa13 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 80036e2:	200a      	movs	r0, #10
 80036e4:	f000 fa10 	bl	8003b08 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 80036e8:	4b60      	ldr	r3, [pc, #384]	@ (800386c <ESP01DOConnection+0x558>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <ESP01DOConnection+0x3e4>
			ESP01DbgStr("+&DBGESP01ATCIPSTART");
 80036f0:	4b5e      	ldr	r3, [pc, #376]	@ (800386c <ESP01DOConnection+0x558>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4869      	ldr	r0, [pc, #420]	@ (800389c <ESP01DOConnection+0x588>)
 80036f6:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 80036f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003874 <ESP01DOConnection+0x560>)
 80036fa:	7813      	ldrb	r3, [r2, #0]
 80036fc:	f023 0320 	bic.w	r3, r3, #32
 8003700:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8003702:	4a5c      	ldr	r2, [pc, #368]	@ (8003874 <ESP01DOConnection+0x560>)
 8003704:	7813      	ldrb	r3, [r2, #0]
 8003706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800370a:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 800370c:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <ESP01DOConnection+0x564>)
 800370e:	220c      	movs	r2, #12
 8003710:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8003712:	4b63      	ldr	r3, [pc, #396]	@ (80038a0 <ESP01DOConnection+0x58c>)
 8003714:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003718:	601a      	str	r2, [r3, #0]
		break;
 800371a:	e120      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 800371c:	4b55      	ldr	r3, [pc, #340]	@ (8003874 <ESP01DOConnection+0x560>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <ESP01DOConnection+0x41e>
			esp01ATSate = ESP01ATCONNECTED;
 800372a:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <ESP01DOConnection+0x564>)
 800372c:	220d      	movs	r2, #13
 800372e:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8003730:	e115      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATAT;
 8003732:	4b51      	ldr	r3, [pc, #324]	@ (8003878 <ESP01DOConnection+0x564>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
		break;
 8003738:	e111      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 800373a:	4b4e      	ldr	r3, [pc, #312]	@ (8003874 <ESP01DOConnection+0x560>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <ESP01DOConnection+0x43c>
			esp01ATSate = ESP01ATAT;
 8003748:	4b4b      	ldr	r3, [pc, #300]	@ (8003878 <ESP01DOConnection+0x564>)
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
			break;
 800374e:	e106      	b.n	800395e <ESP01DOConnection+0x64a>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8003750:	4b48      	ldr	r3, [pc, #288]	@ (8003874 <ESP01DOConnection+0x560>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <ESP01DOConnection+0x452>
			esp01ATSate = ESP01ATCIPCLOSE;
 800375e:	4b46      	ldr	r3, [pc, #280]	@ (8003878 <ESP01DOConnection+0x564>)
 8003760:	220a      	movs	r2, #10
 8003762:	701a      	strb	r2, [r3, #0]
			break;
 8003764:	e0fb      	b.n	800395e <ESP01DOConnection+0x64a>
		}
		esp01TimeoutTask = 0;
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <ESP01DOConnection+0x58c>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
		break;
 800376c:	e0f7      	b.n	800395e <ESP01DOConnection+0x64a>
	/*********** SOFT AP STATES **********/
	case ESP01ATCWQAP:
		ESP01StrToBufTX(ATCWQAP);
 800376e:	484d      	ldr	r0, [pc, #308]	@ (80038a4 <ESP01DOConnection+0x590>)
 8003770:	f000 f99a 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003774:	4b3d      	ldr	r3, [pc, #244]	@ (800386c <ESP01DOConnection+0x558>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <ESP01DOConnection+0x470>
			ESP01DbgStr("+&DBGESP01CWQAP");
 800377c:	4b3b      	ldr	r3, [pc, #236]	@ (800386c <ESP01DOConnection+0x558>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4849      	ldr	r0, [pc, #292]	@ (80038a8 <ESP01DOConnection+0x594>)
 8003782:	4798      	blx	r3
		esp01ATSate = ESP01ATCWSAP;
 8003784:	4b3c      	ldr	r3, [pc, #240]	@ (8003878 <ESP01DOConnection+0x564>)
 8003786:	220f      	movs	r2, #15
 8003788:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 20;
 800378a:	4b45      	ldr	r3, [pc, #276]	@ (80038a0 <ESP01DOConnection+0x58c>)
 800378c:	2214      	movs	r2, #20
 800378e:	601a      	str	r2, [r3, #0]

		break;
 8003790:	e0e5      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCWSAP:
		ESP01StrToBufTX(ATCWSAP);
 8003792:	4846      	ldr	r0, [pc, #280]	@ (80038ac <ESP01DOConnection+0x598>)
 8003794:	f000 f988 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003798:	4b34      	ldr	r3, [pc, #208]	@ (800386c <ESP01DOConnection+0x558>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <ESP01DOConnection+0x494>
			ESP01DbgStr("+&DBGESP01CWSAP");
 80037a0:	4b32      	ldr	r3, [pc, #200]	@ (800386c <ESP01DOConnection+0x558>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4842      	ldr	r0, [pc, #264]	@ (80038b0 <ESP01DOConnection+0x59c>)
 80037a6:	4798      	blx	r3
		esp01ATSate = ESP01ATCWDHCP;
 80037a8:	4b33      	ldr	r3, [pc, #204]	@ (8003878 <ESP01DOConnection+0x564>)
 80037aa:	2211      	movs	r2, #17
 80037ac:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 300;
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <ESP01DOConnection+0x58c>)
 80037b0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037b4:	601a      	str	r2, [r3, #0]
		esp01userConnected = 0;
 80037b6:	4b3f      	ldr	r3, [pc, #252]	@ (80038b4 <ESP01DOConnection+0x5a0>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
		//esp01Flags.bit.ATRESPONSEOK = 0;
		//esp01Flags.bit.ATRESPONSEOK=0;
		//esp01TimeoutTask = 4000;
		break;
 80037bc:	e0cf      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCWSAP_RESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 80037be:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <ESP01DOConnection+0x560>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <ESP01DOConnection+0x4c0>
			esp01ATSate = ESP01ATCWDHCP;
 80037cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003878 <ESP01DOConnection+0x564>)
 80037ce:	2211      	movs	r2, #17
 80037d0:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 80037d2:	e0c4      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATAT;
 80037d4:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <ESP01DOConnection+0x564>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
		break;
 80037da:	e0c0      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCWDHCP:
		ESP01StrToBufTX(ATCWDHCP);
 80037dc:	4836      	ldr	r0, [pc, #216]	@ (80038b8 <ESP01DOConnection+0x5a4>)
 80037de:	f000 f963 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80037e2:	4b22      	ldr	r3, [pc, #136]	@ (800386c <ESP01DOConnection+0x558>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <ESP01DOConnection+0x4de>
			ESP01DbgStr("+&DBGESP01CWDHCP");
 80037ea:	4b20      	ldr	r3, [pc, #128]	@ (800386c <ESP01DOConnection+0x558>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4833      	ldr	r0, [pc, #204]	@ (80038bc <ESP01DOConnection+0x5a8>)
 80037f0:	4798      	blx	r3
		esp01ATSate = ESP01_WAITING_CONNECTION;
 80037f2:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <ESP01DOConnection+0x564>)
 80037f4:	2212      	movs	r2, #18
 80037f6:	701a      	strb	r2, [r3, #0]

		esp01TimeoutTask = 3000;
 80037f8:	4b29      	ldr	r3, [pc, #164]	@ (80038a0 <ESP01DOConnection+0x58c>)
 80037fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80037fe:	601a      	str	r2, [r3, #0]
		break;
 8003800:	e0ad      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01_WAITING_CONNECTION:
		if(esp01userConnected){
 8003802:	4b2c      	ldr	r3, [pc, #176]	@ (80038b4 <ESP01DOConnection+0x5a0>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80a8 	beq.w	800395c <ESP01DOConnection+0x648>
			esp01ATSate = ESP01ATCIPSERVER;
 800380c:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <ESP01DOConnection+0x564>)
 800380e:	2213      	movs	r2, #19
 8003810:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003812:	e0a3      	b.n	800395c <ESP01DOConnection+0x648>
	case ESP01ATCIPSERVER:
		ESP01StrToBufTX(ATCIPOPENSERVER);
 8003814:	482a      	ldr	r0, [pc, #168]	@ (80038c0 <ESP01DOConnection+0x5ac>)
 8003816:	f000 f947 	bl	8003aa8 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800381a:	4b14      	ldr	r3, [pc, #80]	@ (800386c <ESP01DOConnection+0x558>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <ESP01DOConnection+0x516>
			ESP01DbgStr("+&DBGESP01CIPSERVER");
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <ESP01DOConnection+0x558>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4827      	ldr	r0, [pc, #156]	@ (80038c4 <ESP01DOConnection+0x5b0>)
 8003828:	4798      	blx	r3
		esp01ATSate = ESP01ATCONFIGSERVER;
 800382a:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <ESP01DOConnection+0x564>)
 800382c:	2215      	movs	r2, #21
 800382e:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003830:	4a10      	ldr	r2, [pc, #64]	@ (8003874 <ESP01DOConnection+0x560>)
 8003832:	7813      	ldrb	r3, [r2, #0]
 8003834:	f023 0320 	bic.w	r3, r3, #32
 8003838:	7013      	strb	r3, [r2, #0]
		esp01TimeoutTask = 300;
 800383a:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <ESP01DOConnection+0x58c>)
 800383c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003840:	601a      	str	r2, [r3, #0]
		break;
 8003842:	e08c      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCIPSERVER_RESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <ESP01DOConnection+0x560>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <ESP01DOConnection+0x546>
			esp01ATSate = ESP01ATCONFIGSERVER;
 8003852:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <ESP01DOConnection+0x564>)
 8003854:	2215      	movs	r2, #21
 8003856:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
	break;
 8003858:	e081      	b.n	800395e <ESP01DOConnection+0x64a>
			esp01ATSate = ESP01ATAT;
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <ESP01DOConnection+0x564>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
	break;
 8003860:	e07d      	b.n	800395e <ESP01DOConnection+0x64a>
 8003862:	bf00      	nop
 8003864:	200008bc 	.word	0x200008bc
 8003868:	080148b0 	.word	0x080148b0
 800386c:	20000840 	.word	0x20000840
 8003870:	08013490 	.word	0x08013490
 8003874:	2000082c 	.word	0x2000082c
 8003878:	2000082a 	.word	0x2000082a
 800387c:	20000a60 	.word	0x20000a60
 8003880:	200008a4 	.word	0x200008a4
 8003884:	080148cc 	.word	0x080148cc
 8003888:	080134a0 	.word	0x080134a0
 800388c:	080148bc 	.word	0x080148bc
 8003890:	20000008 	.word	0x20000008
 8003894:	200008b4 	.word	0x200008b4
 8003898:	200008cc 	.word	0x200008cc
 800389c:	080134b8 	.word	0x080134b8
 80038a0:	20000830 	.word	0x20000830
 80038a4:	08014874 	.word	0x08014874
 80038a8:	080134d0 	.word	0x080134d0
 80038ac:	080148e8 	.word	0x080148e8
 80038b0:	080134e0 	.word	0x080134e0
 80038b4:	20000a73 	.word	0x20000a73
 80038b8:	08014908 	.word	0x08014908
 80038bc:	080134f0 	.word	0x080134f0
 80038c0:	0801491c 	.word	0x0801491c
 80038c4:	08013504 	.word	0x08013504
	case ESP01ATCONFIGSERVER:
		ESP01StrToBufTX(ATCIPSEND);
 80038c8:	4826      	ldr	r0, [pc, #152]	@ (8003964 <ESP01DOConnection+0x650>)
 80038ca:	f000 f8ed 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01ByteToBufTX(esp01Link);
 80038ce:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <ESP01DOConnection+0x654>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f918 	bl	8003b08 <ESP01ByteToBufTX>
		ESP01StrToBufTX(",177");
 80038d8:	4824      	ldr	r0, [pc, #144]	@ (800396c <ESP01DOConnection+0x658>)
 80038da:	f000 f8e5 	bl	8003aa8 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 80038de:	4824      	ldr	r0, [pc, #144]	@ (8003970 <ESP01DOConnection+0x65c>)
 80038e0:	f000 f8e2 	bl	8003aa8 <ESP01StrToBufTX>

		esp01Flags.bit.TXCIPSEND = 1;
 80038e4:	4a23      	ldr	r2, [pc, #140]	@ (8003974 <ESP01DOConnection+0x660>)
 80038e6:	7813      	ldrb	r3, [r2, #0]
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80038ee:	4a21      	ldr	r2, [pc, #132]	@ (8003974 <ESP01DOConnection+0x660>)
 80038f0:	7813      	ldrb	r3, [r2, #0]
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	7013      	strb	r3, [r2, #0]

		if(ESP01DbgStr != NULL)
 80038f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <ESP01DOConnection+0x664>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <ESP01DOConnection+0x5f4>
			ESP01DbgStr("+&DBGESP01ATESP01ATCONFIGSERVER");
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <ESP01DOConnection+0x664>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	481d      	ldr	r0, [pc, #116]	@ (800397c <ESP01DOConnection+0x668>)
 8003906:	4798      	blx	r3

		esp01ATSate = ESP01ATCONFIGSERVER_RESPONSE;
 8003908:	4b1d      	ldr	r3, [pc, #116]	@ (8003980 <ESP01DOConnection+0x66c>)
 800390a:	2216      	movs	r2, #22
 800390c:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 800390e:	4a19      	ldr	r2, [pc, #100]	@ (8003974 <ESP01DOConnection+0x660>)
 8003910:	7813      	ldrb	r3, [r2, #0]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	7013      	strb	r3, [r2, #0]
		//esp01TimeoutTask = 200;
	break;
 8003918:	e021      	b.n	800395e <ESP01DOConnection+0x64a>
	case ESP01ATCONFIGSERVER_RESPONSE:
		if(!esp01Flags.bit.WAITINGSYMBOL){
 800391a:	4b16      	ldr	r3, [pc, #88]	@ (8003974 <ESP01DOConnection+0x660>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <ESP01DOConnection+0x638>
			ESP01StrToBufTX(CONFIGSERVER);
 8003928:	4816      	ldr	r0, [pc, #88]	@ (8003984 <ESP01DOConnection+0x670>)
 800392a:	f000 f8bd 	bl	8003aa8 <ESP01StrToBufTX>

			esp01TimeoutTask = 500;
 800392e:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <ESP01DOConnection+0x674>)
 8003930:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003934:	601a      	str	r2, [r3, #0]

			esp01ATSate = ESP01ATWAITSERVERDATA;
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <ESP01DOConnection+0x66c>)
 8003938:	2217      	movs	r2, #23
 800393a:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <ESP01DOConnection+0x664>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <ESP01DOConnection+0x638>
				ESP01DbgStr("+&DBGESP01ATWAITSERVERDATA");
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <ESP01DOConnection+0x664>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4810      	ldr	r0, [pc, #64]	@ (800398c <ESP01DOConnection+0x678>)
 800394a:	4798      	blx	r3
		}
	case ESP01ATWAITSERVERDATA:

	break;
 800394c:	bf00      	nop
 800394e:	e006      	b.n	800395e <ESP01DOConnection+0x64a>
		break;
 8003950:	bf00      	nop
 8003952:	e004      	b.n	800395e <ESP01DOConnection+0x64a>
			break;
 8003954:	bf00      	nop
 8003956:	e002      	b.n	800395e <ESP01DOConnection+0x64a>
			break;
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <ESP01DOConnection+0x64a>
		break;
 800395c:	bf00      	nop
	}
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	080148dc 	.word	0x080148dc
 8003968:	20000a74 	.word	0x20000a74
 800396c:	08013518 	.word	0x08013518
 8003970:	0801335c 	.word	0x0801335c
 8003974:	2000082c 	.word	0x2000082c
 8003978:	20000840 	.word	0x20000840
 800397c:	08013520 	.word	0x08013520
 8003980:	2000082a 	.word	0x2000082a
 8003984:	08014930 	.word	0x08014930
 8003988:	20000830 	.word	0x20000830
 800398c:	08013540 	.word	0x08013540

08003990 <ESP01_setMode>:

void ESP01_setMode(_emode _mode){
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 800399a:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <ESP01_setMode+0x1c>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	7013      	strb	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20000a72 	.word	0x20000a72

080039b0 <ESP01SENDData>:

static void ESP01SENDData(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
	uint8_t value;
	if(esp01Flags.bit.WAITINGSYMBOL){
 80039b6:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <ESP01SENDData+0xd8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 80039c4:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <ESP01SENDData+0xdc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d159      	bne.n	8003a80 <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 80039cc:	4b30      	ldr	r3, [pc, #192]	@ (8003a90 <ESP01SENDData+0xe0>)
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	4b30      	ldr	r3, [pc, #192]	@ (8003a94 <ESP01SENDData+0xe4>)
 80039d2:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 80039d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a88 <ESP01SENDData+0xd8>)
 80039d6:	7813      	ldrb	r3, [r2, #0]
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 80039de:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <ESP01SENDData+0xe8>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <ESP01SENDData+0xec>)
 80039e6:	220a      	movs	r2, #10
 80039e8:	601a      	str	r2, [r3, #0]
		}
		return;
 80039ea:	e049      	b.n	8003a80 <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 80039ec:	4b29      	ldr	r3, [pc, #164]	@ (8003a94 <ESP01SENDData+0xe4>)
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <ESP01SENDData+0xe0>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d044      	beq.n	8003a82 <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 80039f8:	4b26      	ldr	r3, [pc, #152]	@ (8003a94 <ESP01SENDData+0xe4>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <ESP01SENDData+0xf0>)
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8003a04:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <ESP01SENDData+0xd8>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <ESP01SENDData+0x6c>
			if(value == '>')
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a16:	d101      	bne.n	8003a1c <ESP01SENDData+0x6c>
				value = '\n';
 8003a18:	230a      	movs	r3, #10
 8003a1a:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8003a1c:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <ESP01SENDData+0xf4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	79fa      	ldrb	r2, [r7, #7]
 8003a22:	4610      	mov	r0, r2
 8003a24:	4798      	blx	r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02a      	beq.n	8003a82 <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8003a2c:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <ESP01SENDData+0xd8>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d013      	beq.n	8003a62 <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8003a3a:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <ESP01SENDData+0xe4>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b17      	ldr	r3, [pc, #92]	@ (8003aa0 <ESP01SENDData+0xf0>)
 8003a42:	5c9b      	ldrb	r3, [r3, r2]
 8003a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a46:	d10c      	bne.n	8003a62 <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8003a48:	4a0f      	ldr	r2, [pc, #60]	@ (8003a88 <ESP01SENDData+0xd8>)
 8003a4a:	7813      	ldrb	r3, [r2, #0]
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8003a52:	4a0d      	ldr	r2, [pc, #52]	@ (8003a88 <ESP01SENDData+0xd8>)
 8003a54:	7813      	ldrb	r3, [r2, #0]
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <ESP01SENDData+0xdc>)
 8003a5e:	2205      	movs	r2, #5
 8003a60:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8003a62:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <ESP01SENDData+0xe4>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <ESP01SENDData+0xe4>)
 8003a6c:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <ESP01SENDData+0xe4>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a76:	d104      	bne.n	8003a82 <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <ESP01SENDData+0xe4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	e000      	b.n	8003a82 <ESP01SENDData+0xd2>
		return;
 8003a80:	bf00      	nop
		}
	}
}
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000082c 	.word	0x2000082c
 8003a8c:	20000838 	.word	0x20000838
 8003a90:	20000a5e 	.word	0x20000a5e
 8003a94:	20000a5c 	.word	0x20000a5c
 8003a98:	2000082a 	.word	0x2000082a
 8003a9c:	20000830 	.word	0x20000830
 8003aa0:	20000958 	.word	0x20000958
 8003aa4:	20000a64 	.word	0x20000a64

08003aa8 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e017      	b.n	8003ae6 <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	441a      	add	r2, r3
 8003abc:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <ESP01StrToBufTX+0x58>)
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	b288      	uxth	r0, r1
 8003ac4:	490e      	ldr	r1, [pc, #56]	@ (8003b00 <ESP01StrToBufTX+0x58>)
 8003ac6:	8008      	strh	r0, [r1, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	7812      	ldrb	r2, [r2, #0]
 8003acc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <ESP01StrToBufTX+0x5c>)
 8003ace:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <ESP01StrToBufTX+0x58>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad8:	d102      	bne.n	8003ae0 <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8003ada:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <ESP01StrToBufTX+0x58>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e1      	bne.n	8003ab6 <ESP01StrToBufTX+0xe>
	}
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20000a5e 	.word	0x20000a5e
 8003b04:	20000958 	.word	0x20000958

08003b08 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <ESP01ByteToBufTX+0x3c>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	b291      	uxth	r1, r2
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <ESP01ByteToBufTX+0x3c>)
 8003b1c:	8011      	strh	r1, [r2, #0]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <ESP01ByteToBufTX+0x40>)
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <ESP01ByteToBufTX+0x3c>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2e:	d102      	bne.n	8003b36 <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8003b30:	4b04      	ldr	r3, [pc, #16]	@ (8003b44 <ESP01ByteToBufTX+0x3c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	801a      	strh	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000a5e 	.word	0x20000a5e
 8003b48:	20000958 	.word	0x20000958
 8003b4c:	00000000 	.word	0x00000000

08003b50 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8003b56:	4bbe      	ldr	r3, [pc, #760]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 816a 	beq.w	8003e34 <OLED_Print_Data_Task+0x2e4>
		switch(Display.state){
 8003b60:	4bbb      	ldr	r3, [pc, #748]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003b62:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d023      	beq.n	8003bb2 <OLED_Print_Data_Task+0x62>
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	f300 8162 	bgt.w	8003e34 <OLED_Print_Data_Task+0x2e4>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <OLED_Print_Data_Task+0x28>
 8003b74:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8003b76:	e15d      	b.n	8003e34 <OLED_Print_Data_Task+0x2e4>
			if(HAL_GetTick() - Display.timer > 2000){
 8003b78:	f002 f806 	bl	8005b88 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4bb4      	ldr	r3, [pc, #720]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003b80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b8a:	f240 8150 	bls.w	8003e2e <OLED_Print_Data_Task+0x2de>
				Display_Fill(SSD1306_COLOR_BLACK);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fd ff32 	bl	80019f8 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8003b94:	2301      	movs	r3, #1
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	2340      	movs	r3, #64	@ 0x40
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2380      	movs	r3, #128	@ 0x80
 8003b9e:	4aad      	ldr	r2, [pc, #692]	@ (8003e54 <OLED_Print_Data_Task+0x304>)
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7fd ffac 	bl	8001b00 <Display_DrawBitmap>
				Display.state = INPUTS;
 8003ba8:	4ba9      	ldr	r3, [pc, #676]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8003bb0:	e13d      	b.n	8003e2e <OLED_Print_Data_Task+0x2de>
		case INPUTS:
			BateryLevel_Set();
 8003bb2:	f000 f96b 	bl	8003e8c <BateryLevel_Set>

			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	232c      	movs	r3, #44	@ 0x2c
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2325      	movs	r3, #37	@ 0x25
 8003bc0:	4aa5      	ldr	r2, [pc, #660]	@ (8003e58 <OLED_Print_Data_Task+0x308>)
 8003bc2:	2111      	movs	r1, #17
 8003bc4:	2002      	movs	r0, #2
 8003bc6:	f7fd ff9b 	bl	8001b00 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8003bca:	2300      	movs	r3, #0
 8003bcc:	71fb      	strb	r3, [r7, #7]
 8003bce:	e05e      	b.n	8003c8e <OLED_Print_Data_Task+0x13e>
				Display.auxYPos = 107 * Analog.value[i] + 170000;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	4aa2      	ldr	r2, [pc, #648]	@ (8003e5c <OLED_Print_Data_Task+0x30c>)
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	885b      	ldrh	r3, [r3, #2]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	0052      	lsls	r2, r2, #1
 8003be2:	441a      	add	r2, r3
 8003be4:	4611      	mov	r1, r2
 8003be6:	00c8      	lsls	r0, r1, #3
 8003be8:	4611      	mov	r1, r2
 8003bea:	4602      	mov	r2, r0
 8003bec:	440a      	add	r2, r1
 8003bee:	0092      	lsls	r2, r2, #2
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3310      	adds	r3, #16
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	4b95      	ldr	r3, [pc, #596]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003bfa:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxYPos += 5000;
 8003bfe:	4b94      	ldr	r3, [pc, #592]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c00:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003c04:	3b78      	subs	r3, #120	@ 0x78
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b91      	ldr	r3, [pc, #580]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c0a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxYPos /= 10000;
 8003c0e:	4b90      	ldr	r3, [pc, #576]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c10:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003c14:	4a92      	ldr	r2, [pc, #584]	@ (8003e60 <OLED_Print_Data_Task+0x310>)
 8003c16:	fb82 1203 	smull	r1, r2, r2, r3
 8003c1a:	1312      	asrs	r2, r2, #12
 8003c1c:	17db      	asrs	r3, r3, #31
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b8b      	ldr	r3, [pc, #556]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c24:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
				Display.auxXPos = 2 + i * 3;
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	0052      	lsls	r2, r2, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	3302      	adds	r3, #2
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b86      	ldr	r3, [pc, #536]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c38:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
				Display_DrawLine(Display.auxXPos, 61,  Display.auxXPos, Display.auxYPos, SSD1306_COLOR_WHITE);
 8003c3c:	4b84      	ldr	r3, [pc, #528]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c3e:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c42:	4618      	mov	r0, r3
 8003c44:	4b82      	ldr	r3, [pc, #520]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c46:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b80      	ldr	r3, [pc, #512]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c4e:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003c52:	4619      	mov	r1, r3
 8003c54:	2301      	movs	r3, #1
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	213d      	movs	r1, #61	@ 0x3d
 8003c5c:	f7fe f85a 	bl	8001d14 <Display_DrawLine>
				Display_DrawLine(Display.auxXPos+1, 61,  Display.auxXPos+1, Display.auxYPos, SSD1306_COLOR_WHITE);
 8003c60:	4b7b      	ldr	r3, [pc, #492]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c62:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c66:	3301      	adds	r3, #1
 8003c68:	b298      	uxth	r0, r3
 8003c6a:	4b79      	ldr	r3, [pc, #484]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c6c:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8003c70:	3301      	adds	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b76      	ldr	r3, [pc, #472]	@ (8003e50 <OLED_Print_Data_Task+0x300>)
 8003c76:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	460b      	mov	r3, r1
 8003c82:	213d      	movs	r1, #61	@ 0x3d
 8003c84:	f7fe f846 	bl	8001d14 <Display_DrawLine>
			for(uint8_t i = 0; i < 8; i++){
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b07      	cmp	r3, #7
 8003c92:	d99d      	bls.n	8003bd0 <OLED_Print_Data_Task+0x80>
			}

			if(MPU6050.isInit){
 8003c94:	4b73      	ldr	r3, [pc, #460]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003c96:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80c9 	beq.w	8003e32 <OLED_Print_Data_Task+0x2e2>
				MPU6050.Acc.x = (MPU6050.Acc.x / 16384.0) * 9.8f;
 8003ca0:	4b70      	ldr	r3, [pc, #448]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc fc44 	bl	8000534 <__aeabi_i2d>
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e68 <OLED_Print_Data_Task+0x318>)
 8003cb2:	f7fc fdd3 	bl	800085c <__aeabi_ddiv>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	a362      	add	r3, pc, #392	@ (adr r3, 8003e48 <OLED_Print_Data_Task+0x2f8>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fca0 	bl	8000608 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f7fc feac 	bl	8000a2c <__aeabi_d2iz>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	b21a      	sxth	r2, r3
 8003cd8:	4b62      	ldr	r3, [pc, #392]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003cda:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y / 16384.0) * 9.8f;
 8003cdc:	4b61      	ldr	r3, [pc, #388]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc26 	bl	8000534 <__aeabi_i2d>
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	4b5e      	ldr	r3, [pc, #376]	@ (8003e68 <OLED_Print_Data_Task+0x318>)
 8003cee:	f7fc fdb5 	bl	800085c <__aeabi_ddiv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	a353      	add	r3, pc, #332	@ (adr r3, 8003e48 <OLED_Print_Data_Task+0x2f8>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fc82 	bl	8000608 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc fe8e 	bl	8000a2c <__aeabi_d2iz>
 8003d10:	4603      	mov	r3, r0
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003d16:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z / 16384.0) * 9.8f;
 8003d18:	4b52      	ldr	r3, [pc, #328]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003d1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fc08 	bl	8000534 <__aeabi_i2d>
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <OLED_Print_Data_Task+0x318>)
 8003d2a:	f7fc fd97 	bl	800085c <__aeabi_ddiv>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	a344      	add	r3, pc, #272	@ (adr r3, 8003e48 <OLED_Print_Data_Task+0x2f8>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f7fc fc64 	bl	8000608 <__aeabi_dmul>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc fe70 	bl	8000a2c <__aeabi_d2iz>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	4b44      	ldr	r3, [pc, #272]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003d52:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8003d54:	4b43      	ldr	r3, [pc, #268]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4943      	ldr	r1, [pc, #268]	@ (8003e6c <OLED_Print_Data_Task+0x31c>)
 8003d5e:	4844      	ldr	r0, [pc, #272]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003d60:	f00e fe3c 	bl	80129dc <siprintf>
				Display_SetCursor(25, 17);
 8003d64:	2111      	movs	r1, #17
 8003d66:	2019      	movs	r0, #25
 8003d68:	f7fd fe2e 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003d6c:	4a41      	ldr	r2, [pc, #260]	@ (8003e74 <OLED_Print_Data_Task+0x324>)
 8003d6e:	2301      	movs	r3, #1
 8003d70:	ca06      	ldmia	r2, {r1, r2}
 8003d72:	483f      	ldr	r0, [pc, #252]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003d74:	f7fd ffa8 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8003d78:	4b3a      	ldr	r3, [pc, #232]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	493d      	ldr	r1, [pc, #244]	@ (8003e78 <OLED_Print_Data_Task+0x328>)
 8003d82:	483b      	ldr	r0, [pc, #236]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003d84:	f00e fe2a 	bl	80129dc <siprintf>
				Display_SetCursor(25, 34);
 8003d88:	2122      	movs	r1, #34	@ 0x22
 8003d8a:	2019      	movs	r0, #25
 8003d8c:	f7fd fe1c 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003d90:	4a38      	ldr	r2, [pc, #224]	@ (8003e74 <OLED_Print_Data_Task+0x324>)
 8003d92:	2301      	movs	r3, #1
 8003d94:	ca06      	ldmia	r2, {r1, r2}
 8003d96:	4836      	ldr	r0, [pc, #216]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003d98:	f7fd ff96 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8003d9c:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4935      	ldr	r1, [pc, #212]	@ (8003e7c <OLED_Print_Data_Task+0x32c>)
 8003da6:	4832      	ldr	r0, [pc, #200]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003da8:	f00e fe18 	bl	80129dc <siprintf>
				Display_SetCursor(25, 51);
 8003dac:	2133      	movs	r1, #51	@ 0x33
 8003dae:	2019      	movs	r0, #25
 8003db0:	f7fd fe0a 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003db4:	4a2f      	ldr	r2, [pc, #188]	@ (8003e74 <OLED_Print_Data_Task+0x324>)
 8003db6:	2301      	movs	r3, #1
 8003db8:	ca06      	ldmia	r2, {r1, r2}
 8003dba:	482d      	ldr	r0, [pc, #180]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003dbc:	f7fd ff84 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8003dc0:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003dc2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	492d      	ldr	r1, [pc, #180]	@ (8003e80 <OLED_Print_Data_Task+0x330>)
 8003dca:	4829      	ldr	r0, [pc, #164]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003dcc:	f00e fe06 	bl	80129dc <siprintf>
				Display_SetCursor(73, 17);
 8003dd0:	2111      	movs	r1, #17
 8003dd2:	2049      	movs	r0, #73	@ 0x49
 8003dd4:	f7fd fdf8 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003dd8:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <OLED_Print_Data_Task+0x324>)
 8003dda:	2301      	movs	r3, #1
 8003ddc:	ca06      	ldmia	r2, {r1, r2}
 8003dde:	4824      	ldr	r0, [pc, #144]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003de0:	f7fd ff72 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8003de4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003de6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003dea:	461a      	mov	r2, r3
 8003dec:	4925      	ldr	r1, [pc, #148]	@ (8003e84 <OLED_Print_Data_Task+0x334>)
 8003dee:	4820      	ldr	r0, [pc, #128]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003df0:	f00e fdf4 	bl	80129dc <siprintf>
				Display_SetCursor(73, 34);
 8003df4:	2122      	movs	r1, #34	@ 0x22
 8003df6:	2049      	movs	r0, #73	@ 0x49
 8003df8:	f7fd fde6 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <OLED_Print_Data_Task+0x324>)
 8003dfe:	2301      	movs	r3, #1
 8003e00:	ca06      	ldmia	r2, {r1, r2}
 8003e02:	481b      	ldr	r0, [pc, #108]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003e04:	f7fd ff60 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8003e08:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <OLED_Print_Data_Task+0x314>)
 8003e0a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	491d      	ldr	r1, [pc, #116]	@ (8003e88 <OLED_Print_Data_Task+0x338>)
 8003e12:	4817      	ldr	r0, [pc, #92]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003e14:	f00e fde2 	bl	80129dc <siprintf>
				Display_SetCursor(73, 51);
 8003e18:	2133      	movs	r1, #51	@ 0x33
 8003e1a:	2049      	movs	r0, #73	@ 0x49
 8003e1c:	f7fd fdd4 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <OLED_Print_Data_Task+0x324>)
 8003e22:	2301      	movs	r3, #1
 8003e24:	ca06      	ldmia	r2, {r1, r2}
 8003e26:	4812      	ldr	r0, [pc, #72]	@ (8003e70 <OLED_Print_Data_Task+0x320>)
 8003e28:	f7fd ff4e 	bl	8001cc8 <Display_WriteString>
			}
			break;
 8003e2c:	e001      	b.n	8003e32 <OLED_Print_Data_Task+0x2e2>
			break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <OLED_Print_Data_Task+0x2e4>
			break;
 8003e32:	bf00      	nop
		}
	}

	Display_I2C_Refresh_Ready(TRUE);
 8003e34:	2001      	movs	r0, #1
 8003e36:	f7fd fdb7 	bl	80019a8 <Display_I2C_Refresh_Ready>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	f3af 8000 	nop.w
 8003e48:	a0000000 	.word	0xa0000000
 8003e4c:	40239999 	.word	0x40239999
 8003e50:	20000e68 	.word	0x20000e68
 8003e54:	08013c18 	.word	0x08013c18
 8003e58:	08014018 	.word	0x08014018
 8003e5c:	20001280 	.word	0x20001280
 8003e60:	68db8bad 	.word	0x68db8bad
 8003e64:	20000da4 	.word	0x20000da4
 8003e68:	40d00000 	.word	0x40d00000
 8003e6c:	0801355c 	.word	0x0801355c
 8003e70:	20001270 	.word	0x20001270
 8003e74:	20000000 	.word	0x20000000
 8003e78:	08013564 	.word	0x08013564
 8003e7c:	0801356c 	.word	0x0801356c
 8003e80:	08013574 	.word	0x08013574
 8003e84:	0801357c 	.word	0x0801357c
 8003e88:	08013584 	.word	0x08013584

08003e8c <BateryLevel_Set>:

void BateryLevel_Set(){
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2309      	movs	r3, #9
 8003e98:	2206      	movs	r2, #6
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	f7fd ffe7 	bl	8001e70 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <BateryLevel_Set+0x94>)
 8003ea4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003ea6:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d908      	bls.n	8003ec0 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8003eae:	2301      	movs	r3, #1
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2309      	movs	r3, #9
 8003eb4:	2206      	movs	r2, #6
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	2003      	movs	r0, #3
 8003eba:	f7fd ffd9 	bl	8001e70 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8003ebe:	e02b      	b.n	8003f18 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8003ec0:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <BateryLevel_Set+0x94>)
 8003ec2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003ec4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d908      	bls.n	8003ede <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8003ecc:	2301      	movs	r3, #1
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2307      	movs	r3, #7
 8003ed2:	2206      	movs	r2, #6
 8003ed4:	2106      	movs	r1, #6
 8003ed6:	2003      	movs	r0, #3
 8003ed8:	f7fd ffca 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003edc:	e01c      	b.n	8003f18 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 8003ede:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <BateryLevel_Set+0x94>)
 8003ee0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003ee2:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d908      	bls.n	8003efc <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 8003eea:	2301      	movs	r3, #1
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2305      	movs	r3, #5
 8003ef0:	2206      	movs	r2, #6
 8003ef2:	2108      	movs	r1, #8
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f7fd ffbb 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003efa:	e00d      	b.n	8003f18 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <BateryLevel_Set+0x94>)
 8003efe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f00:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d907      	bls.n	8003f18 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8003f08:	2301      	movs	r3, #1
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2206      	movs	r2, #6
 8003f10:	210b      	movs	r1, #11
 8003f12:	2003      	movs	r0, #3
 8003f14:	f7fd ffac 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20001280 	.word	0x20001280

08003f24 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	3302      	adds	r3, #2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003f3a:	2bf1      	cmp	r3, #241	@ 0xf1
 8003f3c:	f000 81c8 	beq.w	80042d0 <decodeOn_USB+0x3ac>
 8003f40:	2bf1      	cmp	r3, #241	@ 0xf1
 8003f42:	f300 81be 	bgt.w	80042c2 <decodeOn_USB+0x39e>
 8003f46:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f48:	d036      	beq.n	8003fb8 <decodeOn_USB+0x94>
 8003f4a:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f4c:	f300 81b9 	bgt.w	80042c2 <decodeOn_USB+0x39e>
 8003f50:	2bb1      	cmp	r3, #177	@ 0xb1
 8003f52:	dc2d      	bgt.n	8003fb0 <decodeOn_USB+0x8c>
 8003f54:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f56:	f2c0 81b4 	blt.w	80042c2 <decodeOn_USB+0x39e>
 8003f5a:	3ba0      	subs	r3, #160	@ 0xa0
 8003f5c:	2b11      	cmp	r3, #17
 8003f5e:	f200 81b0 	bhi.w	80042c2 <decodeOn_USB+0x39e>
 8003f62:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <decodeOn_USB+0x44>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003fd3 	.word	0x08003fd3
 8003f6c:	08004049 	.word	0x08004049
 8003f70:	080040a3 	.word	0x080040a3
 8003f74:	08004137 	.word	0x08004137
 8003f78:	080041fd 	.word	0x080041fd
 8003f7c:	080042c3 	.word	0x080042c3
 8003f80:	080042c3 	.word	0x080042c3
 8003f84:	080042c3 	.word	0x080042c3
 8003f88:	080042c3 	.word	0x080042c3
 8003f8c:	080042c3 	.word	0x080042c3
 8003f90:	080042c3 	.word	0x080042c3
 8003f94:	080042c3 	.word	0x080042c3
 8003f98:	080042c3 	.word	0x080042c3
 8003f9c:	080042c3 	.word	0x080042c3
 8003fa0:	080042c3 	.word	0x080042c3
 8003fa4:	080042c3 	.word	0x080042c3
 8003fa8:	080042c3 	.word	0x080042c3
 8003fac:	080042d5 	.word	0x080042d5
 8003fb0:	2bde      	cmp	r3, #222	@ 0xde
 8003fb2:	f000 8191 	beq.w	80042d8 <decodeOn_USB+0x3b4>
 8003fb6:	e184      	b.n	80042c2 <decodeOn_USB+0x39e>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	220d      	movs	r2, #13
 8003fbc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	21f0      	movs	r1, #240	@ 0xf0
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fa88 	bl	80024e0 <comm_sendCMD>
		break;
 8003fd0:	e183      	b.n	80042da <decodeOn_USB+0x3b6>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	3303      	adds	r3, #3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d82a      	bhi.n	800403a <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	3303      	adds	r3, #3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003ff2:	4a78      	ldr	r2, [pc, #480]	@ (80041d4 <decodeOn_USB+0x2b0>)
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	885a      	ldrh	r2, [r3, #2]
 8003ffc:	4b76      	ldr	r3, [pc, #472]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8003ffe:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	3303      	adds	r3, #3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8004014:	4b70      	ldr	r3, [pc, #448]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8004016:	781a      	ldrb	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800401e:	4b6e      	ldr	r3, [pc, #440]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8004020:	785a      	ldrb	r2, [r3, #1]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800402e:	2303      	movs	r3, #3
 8004030:	21a0      	movs	r1, #160	@ 0xa0
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fe fa54 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 8004038:	e14f      	b.n	80042da <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 800403a:	2306      	movs	r3, #6
 800403c:	4a67      	ldr	r2, [pc, #412]	@ (80041dc <decodeOn_USB+0x2b8>)
 800403e:	21ef      	movs	r1, #239	@ 0xef
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fe fa4d 	bl	80024e0 <comm_sendCMD>
		break;
 8004046:	e148      	b.n	80042da <decodeOn_USB+0x3b6>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e01d      	b.n	800408a <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	4a60      	ldr	r2, [pc, #384]	@ (80041d4 <decodeOn_USB+0x2b0>)
 8004052:	3308      	adds	r3, #8
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	885a      	ldrh	r2, [r3, #2]
 800405a:	4b5f      	ldr	r3, [pc, #380]	@ (80041d8 <decodeOn_USB+0x2b4>)
 800405c:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4a5d      	ldr	r2, [pc, #372]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8004064:	7811      	ldrb	r1, [r2, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	460a      	mov	r2, r1
 800406c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	3301      	adds	r3, #1
 8004076:	4a58      	ldr	r2, [pc, #352]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8004078:	7851      	ldrb	r1, [r2, #1]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	460a      	mov	r2, r1
 8004080:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	3301      	adds	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d9de      	bls.n	800404e <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, data->auxBuffer, 17);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004096:	2311      	movs	r3, #17
 8004098:	21a1      	movs	r1, #161	@ 0xa1
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fe fa20 	bl	80024e0 <comm_sendCMD>
		break;
 80040a0:	e11b      	b.n	80042da <decodeOn_USB+0x3b6>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	3303      	adds	r3, #3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d117      	bne.n	80040e4 <decodeOn_USB+0x1c0>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	3304      	adds	r3, #4
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	4846      	ldr	r0, [pc, #280]	@ (80041e0 <decodeOn_USB+0x2bc>)
 80040c8:	f7fd ffb8 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80040cc:	4b45      	ldr	r3, [pc, #276]	@ (80041e4 <decodeOn_USB+0x2c0>)
 80040ce:	220d      	movs	r2, #13
 80040d0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80040da:	2301      	movs	r3, #1
 80040dc:	21a2      	movs	r1, #162	@ 0xa2
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe f9fe 	bl	80024e0 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	3303      	adds	r3, #3
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d118      	bne.n	8004128 <decodeOn_USB+0x204>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	3304      	adds	r3, #4
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004104:	b25b      	sxtb	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	4837      	ldr	r0, [pc, #220]	@ (80041e8 <decodeOn_USB+0x2c4>)
 800410a:	f7fd ff97 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 800410e:	4b35      	ldr	r3, [pc, #212]	@ (80041e4 <decodeOn_USB+0x2c0>)
 8004110:	220d      	movs	r2, #13
 8004112:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800411c:	2301      	movs	r3, #1
 800411e:	21a2      	movs	r1, #162	@ 0xa2
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fe f9dd 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8004126:	e0d8      	b.n	80042da <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 8004128:	2308      	movs	r3, #8
 800412a:	4a30      	ldr	r2, [pc, #192]	@ (80041ec <decodeOn_USB+0x2c8>)
 800412c:	21ef      	movs	r1, #239	@ 0xef
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fe f9d6 	bl	80024e0 <comm_sendCMD>
		break;
 8004134:	e0d1      	b.n	80042da <decodeOn_USB+0x3b6>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	3303      	adds	r3, #3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11a      	bne.n	800417e <decodeOn_USB+0x25a>
			decom.ui16[0] = EncoderL.pps;
 8004148:	4b29      	ldr	r3, [pc, #164]	@ (80041f0 <decodeOn_USB+0x2cc>)
 800414a:	891a      	ldrh	r2, [r3, #8]
 800414c:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <decodeOn_USB+0x2b4>)
 800414e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8004158:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <decodeOn_USB+0x2b4>)
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8004162:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8004164:	785a      	ldrb	r2, [r3, #1]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004172:	2303      	movs	r3, #3
 8004174:	21a3      	movs	r1, #163	@ 0xa3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fe f9b2 	bl	80024e0 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 800417c:	e0ad      	b.n	80042da <decodeOn_USB+0x3b6>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	3303      	adds	r3, #3
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800418c:	2b01      	cmp	r3, #1
 800418e:	d11a      	bne.n	80041c6 <decodeOn_USB+0x2a2>
			decom.ui16[0] = EncoderR.pps;
 8004190:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <decodeOn_USB+0x2d0>)
 8004192:	891a      	ldrh	r2, [r3, #8]
 8004194:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <decodeOn_USB+0x2b4>)
 8004196:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <decodeOn_USB+0x2b4>)
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80041aa:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <decodeOn_USB+0x2b4>)
 80041ac:	785a      	ldrb	r2, [r3, #1]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80041ba:	2303      	movs	r3, #3
 80041bc:	21a3      	movs	r1, #163	@ 0xa3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fe f98e 	bl	80024e0 <comm_sendCMD>
		break;
 80041c4:	e089      	b.n	80042da <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 80041c6:	230a      	movs	r3, #10
 80041c8:	4a0b      	ldr	r2, [pc, #44]	@ (80041f8 <decodeOn_USB+0x2d4>)
 80041ca:	21ef      	movs	r1, #239	@ 0xef
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fe f987 	bl	80024e0 <comm_sendCMD>
		break;
 80041d2:	e082      	b.n	80042da <decodeOn_USB+0x3b6>
 80041d4:	20001280 	.word	0x20001280
 80041d8:	20000d54 	.word	0x20000d54
 80041dc:	0801358c 	.word	0x0801358c
 80041e0:	20000d5c 	.word	0x20000d5c
 80041e4:	200012a4 	.word	0x200012a4
 80041e8:	20000d74 	.word	0x20000d74
 80041ec:	08013594 	.word	0x08013594
 80041f0:	20000d8c 	.word	0x20000d8c
 80041f4:	20000d98 	.word	0x20000d98
 80041f8:	080135a0 	.word	0x080135a0
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 80041fc:	4b39      	ldr	r3, [pc, #228]	@ (80042e4 <decodeOn_USB+0x3c0>)
 80041fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004202:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004204:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8004206:	4b38      	ldr	r3, [pc, #224]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004212:	785a      	ldrb	r2, [r3, #1]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 800421a:	4b32      	ldr	r3, [pc, #200]	@ (80042e4 <decodeOn_USB+0x3c0>)
 800421c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004220:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004222:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8004224:	4b30      	ldr	r3, [pc, #192]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 800422e:	4b2e      	ldr	r3, [pc, #184]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004230:	785a      	ldrb	r2, [r3, #1]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8004238:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <decodeOn_USB+0x3c0>)
 800423a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800423e:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004240:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 800424c:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800424e:	785a      	ldrb	r2, [r3, #1]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8004256:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <decodeOn_USB+0x3c0>)
 8004258:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800425e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8004260:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 800426a:	4b1f      	ldr	r3, [pc, #124]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800426c:	785a      	ldrb	r2, [r3, #1]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8004274:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <decodeOn_USB+0x3c0>)
 8004276:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800427a:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800427c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 800427e:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <decodeOn_USB+0x3c4>)
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8004288:	4b17      	ldr	r3, [pc, #92]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800428a:	785a      	ldrb	r2, [r3, #1]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8004292:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <decodeOn_USB+0x3c0>)
 8004294:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004298:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800429a:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 800429c:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <decodeOn_USB+0x3c4>)
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 80042a6:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <decodeOn_USB+0x3c4>)
 80042a8:	785a      	ldrb	r2, [r3, #1]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80042b6:	230c      	movs	r3, #12
 80042b8:	21a4      	movs	r1, #164	@ 0xa4
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe f910 	bl	80024e0 <comm_sendCMD>
		break;
 80042c0:	e00b      	b.n	80042da <decodeOn_USB+0x3b6>
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 80042c2:	2306      	movs	r3, #6
 80042c4:	4a09      	ldr	r2, [pc, #36]	@ (80042ec <decodeOn_USB+0x3c8>)
 80042c6:	21ef      	movs	r1, #239	@ 0xef
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fe f909 	bl	80024e0 <comm_sendCMD>
		break;
 80042ce:	e004      	b.n	80042da <decodeOn_USB+0x3b6>
		break;
 80042d0:	bf00      	nop
 80042d2:	e002      	b.n	80042da <decodeOn_USB+0x3b6>
		break;
 80042d4:	bf00      	nop
 80042d6:	e000      	b.n	80042da <decodeOn_USB+0x3b6>
		break;
 80042d8:	bf00      	nop
	}
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000da4 	.word	0x20000da4
 80042e8:	20000d54 	.word	0x20000d54
 80042ec:	080135ac 	.word	0x080135ac

080042f0 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]

}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <onESP01Debug>:

    // Cast explícito también aplicado aquí
    comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, strlen((char*)USB.data.auxBuffer));
}

void onESP01Debug(const char *dbgStr) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
    comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)dbgStr, strlen(dbgStr));
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fb ff65 	bl	80001e0 <strlen>
 8004316:	4603      	mov	r3, r0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	21b1      	movs	r1, #177	@ 0xb1
 800431e:	4803      	ldr	r0, [pc, #12]	@ (800432c <onESP01Debug+0x24>)
 8004320:	f7fe f8de 	bl	80024e0 <comm_sendCMD>
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200012a4 	.word	0x200012a4

08004330 <task_10ms>:

void task_10ms(){
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 8004334:	4a39      	ldr	r2, [pc, #228]	@ (800441c <task_10ms+0xec>)
 8004336:	7813      	ldrb	r3, [r2, #0]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 800433e:	4b38      	ldr	r3, [pc, #224]	@ (8004420 <task_10ms+0xf0>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b36      	ldr	r3, [pc, #216]	@ (8004420 <task_10ms+0xf0>)
 8004348:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 800434a:	4b35      	ldr	r3, [pc, #212]	@ (8004420 <task_10ms+0xf0>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d13d      	bne.n	80043ce <task_10ms+0x9e>
		is100ms1 = 10;
 8004352:	4b33      	ldr	r3, [pc, #204]	@ (8004420 <task_10ms+0xf0>)
 8004354:	220a      	movs	r2, #10
 8004356:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800435c:	4831      	ldr	r0, [pc, #196]	@ (8004424 <task_10ms+0xf4>)
 800435e:	f003 f842 	bl	80073e6 <HAL_GPIO_TogglePin>
		is1s--;
 8004362:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <task_10ms+0xf8>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <task_10ms+0xf8>)
 800436c:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 800436e:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <task_10ms+0xf8>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d12b      	bne.n	80043ce <task_10ms+0x9e>
			is1s = 10;
 8004376:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <task_10ms+0xf8>)
 8004378:	220a      	movs	r2, #10
 800437a:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 800437c:	482b      	ldr	r0, [pc, #172]	@ (800442c <task_10ms+0xfc>)
 800437e:	f7fd fe23 	bl	8001fc8 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 8004382:	482b      	ldr	r0, [pc, #172]	@ (8004430 <task_10ms+0x100>)
 8004384:	f7fd fe20 	bl	8001fc8 <Encoder_1s_Elapsed>

			/* ESTABILIZACIÓN DE PWM */
			Motor_Set_MaxValue(&MotorR, (3026/Analog.value[9]));//<! Usamos esto para independizar la salida PWM de la carga de las baterias
 8004388:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <task_10ms+0x104>)
 800438a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800438c:	461a      	mov	r2, r3
 800438e:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 8004392:	fb93 f3f2 	sdiv	r3, r3, r2
 8004396:	4619      	mov	r1, r3
 8004398:	4827      	ldr	r0, [pc, #156]	@ (8004438 <task_10ms+0x108>)
 800439a:	f7fd ff01 	bl	80021a0 <Motor_Set_MaxValue>
			Motor_Set_MaxValue(&MotorL, (3026/Analog.value[9]));
 800439e:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <task_10ms+0x104>)
 80043a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80043a2:	461a      	mov	r2, r3
 80043a4:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 80043a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	4823      	ldr	r0, [pc, #140]	@ (800443c <task_10ms+0x10c>)
 80043b0:	f7fd fef6 	bl	80021a0 <Motor_Set_MaxValue>
			/* END ESTABILIZACIÓN DE PWM */

			is20s--;
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <task_10ms+0x110>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <task_10ms+0x110>)
 80043be:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <task_10ms+0x110>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <task_10ms+0x9e>
				is20s = 10;
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <task_10ms+0x110>)
 80043ca:	220a      	movs	r2, #10
 80043cc:	701a      	strb	r2, [r3, #0]
				//comm_sendCMD(&ESP.data, GETALIVE, NULL, 0);
			}
		}
	}

	Display.refreshCounter_10ms--;
 80043ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <task_10ms+0x114>)
 80043d0:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <task_10ms+0x114>)
 80043da:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ 							//Tasa de refresco variable
 80043de:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <task_10ms+0x114>)
 80043e0:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <task_10ms+0xc8>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 80043e8:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <task_10ms+0x114>)
 80043ea:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 80043ee:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <task_10ms+0x114>)
 80043f0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 80043f4:	f7ff fbac 	bl	8003b50 <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 80043f8:	f7fe fae4 	bl	80029c4 <ESP01_Timeout10ms>

	Debouncer_Task();
 80043fc:	f7fc fe04 	bl	8001008 <Debouncer_Task>

	Motor_Break_Timeout(&MotorL);
 8004400:	480e      	ldr	r0, [pc, #56]	@ (800443c <task_10ms+0x10c>)
 8004402:	f7fd feb1 	bl	8002168 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 8004406:	480c      	ldr	r0, [pc, #48]	@ (8004438 <task_10ms+0x108>)
 8004408:	f7fd feae 	bl	8002168 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 800440c:	4807      	ldr	r0, [pc, #28]	@ (800442c <task_10ms+0xfc>)
 800440e:	f7fd fd9b 	bl	8001f48 <Encoder_Task>
	Encoder_Task(&EncoderR);
 8004412:	4807      	ldr	r0, [pc, #28]	@ (8004430 <task_10ms+0x100>)
 8004414:	f7fd fd98 	bl	8001f48 <Encoder_Task>
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000d50 	.word	0x20000d50
 8004420:	2000000c 	.word	0x2000000c
 8004424:	40020800 	.word	0x40020800
 8004428:	2000000d 	.word	0x2000000d
 800442c:	20000d8c 	.word	0x20000d8c
 8004430:	20000d98 	.word	0x20000d98
 8004434:	20001280 	.word	0x20001280
 8004438:	20000d74 	.word	0x20000d74
 800443c:	20000d5c 	.word	0x20000d5c
 8004440:	2000000f 	.word	0x2000000f
 8004444:	20000e68 	.word	0x20000e68

08004448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800444c:	f001 fb36 	bl	8005abc <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8004450:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <main+0xf8>)
 8004452:	2200      	movs	r2, #0
 8004454:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 8004458:	4b3a      	ldr	r3, [pc, #232]	@ (8004544 <main+0xfc>)
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800445e:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <main+0xfc>)
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004466:	f000 f895 	bl	8004594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800446a:	f000 fb27 	bl	8004abc <MX_GPIO_Init>
  MX_DMA_Init();
 800446e:	f000 fae7 	bl	8004a40 <MX_DMA_Init>
  MX_ADC1_Init();
 8004472:	f000 f8f9 	bl	8004668 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8004476:	f00d fcd9 	bl	8011e2c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800447a:	f000 f9e5 	bl	8004848 <MX_TIM1_Init>
  MX_I2C1_Init();
 800447e:	f000 f9b5 	bl	80047ec <MX_I2C1_Init>
  MX_TIM3_Init();
 8004482:	f000 fa31 	bl	80048e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004486:	f000 fab1 	bl	80049ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 800448a:	4a2f      	ldr	r2, [pc, #188]	@ (8004548 <main+0x100>)
 800448c:	492f      	ldr	r1, [pc, #188]	@ (800454c <main+0x104>)
 800448e:	4830      	ldr	r0, [pc, #192]	@ (8004550 <main+0x108>)
 8004490:	f7fd fe9a 	bl	80021c8 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 8004494:	482f      	ldr	r0, [pc, #188]	@ (8004554 <main+0x10c>)
 8004496:	f00d fe1b 	bl	80120d0 <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 800449a:	f7fc fd4d 	bl	8000f38 <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 800449e:	492e      	ldr	r1, [pc, #184]	@ (8004558 <main+0x110>)
 80044a0:	482e      	ldr	r0, [pc, #184]	@ (800455c <main+0x114>)
 80044a2:	f7fc fd7d 	bl	8000fa0 <Debounce_Add>
 80044a6:	4603      	mov	r3, r0
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004560 <main+0x118>)
 80044ac:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 80044ae:	f000 fc25 	bl	8004cfc <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 80044b2:	f000 fc5b 	bl	8004d6c <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80044b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004564 <main+0x11c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4a2a      	ldr	r2, [pc, #168]	@ (8004568 <main+0x120>)
 80044c0:	492a      	ldr	r1, [pc, #168]	@ (800456c <main+0x124>)
 80044c2:	482b      	ldr	r0, [pc, #172]	@ (8004570 <main+0x128>)
 80044c4:	f7fd fd92 	bl	8001fec <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 80044c8:	4b26      	ldr	r3, [pc, #152]	@ (8004564 <main+0x11c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4a28      	ldr	r2, [pc, #160]	@ (8004574 <main+0x12c>)
 80044d2:	4929      	ldr	r1, [pc, #164]	@ (8004578 <main+0x130>)
 80044d4:	4829      	ldr	r0, [pc, #164]	@ (800457c <main+0x134>)
 80044d6:	f7fd fd89 	bl	8001fec <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 80044da:	210a      	movs	r1, #10
 80044dc:	4828      	ldr	r0, [pc, #160]	@ (8004580 <main+0x138>)
 80044de:	f7fd fd14 	bl	8001f0a <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 80044e2:	210a      	movs	r1, #10
 80044e4:	4827      	ldr	r0, [pc, #156]	@ (8004584 <main+0x13c>)
 80044e6:	f7fd fd10 	bl	8001f0a <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  /* ESP01 INITIALIZATION */
  Init_WiFi();
 80044ea:	f000 fc91 	bl	8004e10 <Init_WiFi>
  /* END ESP01 INITIALIZATION */
  Car.state = IDLE;
 80044ee:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <main+0x140>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]

  Init_Timing();
 80044f4:	f000 fbbe 	bl	8004c74 <Init_Timing>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 80044f8:	4815      	ldr	r0, [pc, #84]	@ (8004550 <main+0x108>)
 80044fa:	f7fd fe99 	bl	8002230 <Comm_Task>
	Comm_Task(&ESP.data);
 80044fe:	4823      	ldr	r0, [pc, #140]	@ (800458c <main+0x144>)
 8004500:	f7fd fe96 	bl	8002230 <Comm_Task>
	Display_UpdateScreen_Task();
 8004504:	f7fd f9d8 	bl	80018b8 <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8004508:	480d      	ldr	r0, [pc, #52]	@ (8004540 <main+0xf8>)
 800450a:	f7fc ff85 	bl	8001418 <MPU6050_MAF>
	ESP01_Task();
 800450e:	f7fe fa8b 	bl	8002a28 <ESP01_Task>
	/* END USER TASK */

	if(IS10MS){
 8004512:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <main+0x148>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <main+0xdc>
		task_10ms();
 8004520:	f7ff ff06 	bl	8004330 <task_10ms>
	}

	switch(Car.state){
 8004524:	4b18      	ldr	r3, [pc, #96]	@ (8004588 <main+0x140>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d005      	beq.n	8004538 <main+0xf0>
 800452c:	2b02      	cmp	r3, #2
 800452e:	dce3      	bgt.n	80044f8 <main+0xb0>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <main+0xf4>
 8004534:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 8004536:	e002      	b.n	800453e <main+0xf6>
	case GO_FROM_TO:

		break;
 8004538:	bf00      	nop
 800453a:	e7dd      	b.n	80044f8 <main+0xb0>
		break;
 800453c:	bf00      	nop
	Comm_Task(&USB.data);
 800453e:	e7db      	b.n	80044f8 <main+0xb0>
 8004540:	20000da4 	.word	0x20000da4
 8004544:	20000e68 	.word	0x20000e68
 8004548:	08005239 	.word	0x08005239
 800454c:	08003f25 	.word	0x08003f25
 8004550:	200012a4 	.word	0x200012a4
 8004554:	080052ad 	.word	0x080052ad
 8004558:	080042f1 	.word	0x080042f1
 800455c:	08005221 	.word	0x08005221
 8004560:	20000d58 	.word	0x20000d58
 8004564:	20000cc0 	.word	0x20000cc0
 8004568:	08005305 	.word	0x08005305
 800456c:	08005379 	.word	0x08005379
 8004570:	20000d5c 	.word	0x20000d5c
 8004574:	0800533d 	.word	0x0800533d
 8004578:	0800539d 	.word	0x0800539d
 800457c:	20000d74 	.word	0x20000d74
 8004580:	20000d8c 	.word	0x20000d8c
 8004584:	20000d98 	.word	0x20000d98
 8004588:	20001724 	.word	0x20001724
 800458c:	200014f0 	.word	0x200014f0
 8004590:	20000d50 	.word	0x20000d50

08004594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b094      	sub	sp, #80	@ 0x50
 8004598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800459a:	f107 0320 	add.w	r3, r7, #32
 800459e:	2230      	movs	r2, #48	@ 0x30
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f00e fa3c 	bl	8012a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045a8:	f107 030c 	add.w	r3, r7, #12
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	4b28      	ldr	r3, [pc, #160]	@ (8004660 <SystemClock_Config+0xcc>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	4a27      	ldr	r2, [pc, #156]	@ (8004660 <SystemClock_Config+0xcc>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c8:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <SystemClock_Config+0xcc>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	4b22      	ldr	r3, [pc, #136]	@ (8004664 <SystemClock_Config+0xd0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a21      	ldr	r2, [pc, #132]	@ (8004664 <SystemClock_Config+0xd0>)
 80045de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <SystemClock_Config+0xd0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045fa:	2302      	movs	r3, #2
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004604:	2319      	movs	r3, #25
 8004606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004608:	23c0      	movs	r3, #192	@ 0xc0
 800460a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800460c:	2302      	movs	r3, #2
 800460e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004610:	2304      	movs	r3, #4
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004614:	f107 0320 	add.w	r3, r7, #32
 8004618:	4618      	mov	r0, r3
 800461a:	f007 fd43 	bl	800c0a4 <HAL_RCC_OscConfig>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004624:	f000 fecc 	bl	80053c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004628:	230f      	movs	r3, #15
 800462a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800462c:	2302      	movs	r3, #2
 800462e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800463e:	f107 030c 	add.w	r3, r7, #12
 8004642:	2103      	movs	r1, #3
 8004644:	4618      	mov	r0, r3
 8004646:	f007 ffa5 	bl	800c594 <HAL_RCC_ClockConfig>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004650:	f000 feb6 	bl	80053c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004654:	f008 f884 	bl	800c760 <HAL_RCC_EnableCSS>
}
 8004658:	bf00      	nop
 800465a:	3750      	adds	r7, #80	@ 0x50
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	40007000 	.word	0x40007000

08004668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800466e:	463b      	mov	r3, r7
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800467a:	4b59      	ldr	r3, [pc, #356]	@ (80047e0 <MX_ADC1_Init+0x178>)
 800467c:	4a59      	ldr	r2, [pc, #356]	@ (80047e4 <MX_ADC1_Init+0x17c>)
 800467e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004680:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004688:	4b55      	ldr	r3, [pc, #340]	@ (80047e0 <MX_ADC1_Init+0x178>)
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800468e:	4b54      	ldr	r3, [pc, #336]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004690:	2201      	movs	r2, #1
 8004692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004694:	4b52      	ldr	r3, [pc, #328]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004696:	2200      	movs	r2, #0
 8004698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800469a:	4b51      	ldr	r3, [pc, #324]	@ (80047e0 <MX_ADC1_Init+0x178>)
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046a2:	4b4f      	ldr	r3, [pc, #316]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046a8:	4b4d      	ldr	r3, [pc, #308]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046aa:	4a4f      	ldr	r2, [pc, #316]	@ (80047e8 <MX_ADC1_Init+0x180>)
 80046ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046ae:	4b4c      	ldr	r3, [pc, #304]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80046b4:	4b4a      	ldr	r3, [pc, #296]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046b6:	2209      	movs	r2, #9
 80046b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80046ba:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046c2:	4b47      	ldr	r3, [pc, #284]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046c8:	4845      	ldr	r0, [pc, #276]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046ca:	f001 fa8d 	bl	8005be8 <HAL_ADC_Init>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80046d4:	f000 fe74 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80046d8:	2301      	movs	r3, #1
 80046da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80046dc:	2301      	movs	r3, #1
 80046de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80046e0:	2303      	movs	r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046e4:	463b      	mov	r3, r7
 80046e6:	4619      	mov	r1, r3
 80046e8:	483d      	ldr	r0, [pc, #244]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80046ea:	f001 fcdf 	bl	80060ac <HAL_ADC_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80046f4:	f000 fe64 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80046f8:	2302      	movs	r3, #2
 80046fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80046fc:	2302      	movs	r3, #2
 80046fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004700:	463b      	mov	r3, r7
 8004702:	4619      	mov	r1, r3
 8004704:	4836      	ldr	r0, [pc, #216]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004706:	f001 fcd1 	bl	80060ac <HAL_ADC_ConfigChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004710:	f000 fe56 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004714:	2303      	movs	r3, #3
 8004716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004718:	2303      	movs	r3, #3
 800471a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800471c:	463b      	mov	r3, r7
 800471e:	4619      	mov	r1, r3
 8004720:	482f      	ldr	r0, [pc, #188]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004722:	f001 fcc3 	bl	80060ac <HAL_ADC_ConfigChannel>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800472c:	f000 fe48 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004730:	2304      	movs	r3, #4
 8004732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004734:	2304      	movs	r3, #4
 8004736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004738:	463b      	mov	r3, r7
 800473a:	4619      	mov	r1, r3
 800473c:	4828      	ldr	r0, [pc, #160]	@ (80047e0 <MX_ADC1_Init+0x178>)
 800473e:	f001 fcb5 	bl	80060ac <HAL_ADC_ConfigChannel>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8004748:	f000 fe3a 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800474c:	2305      	movs	r3, #5
 800474e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004750:	2305      	movs	r3, #5
 8004752:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004754:	463b      	mov	r3, r7
 8004756:	4619      	mov	r1, r3
 8004758:	4821      	ldr	r0, [pc, #132]	@ (80047e0 <MX_ADC1_Init+0x178>)
 800475a:	f001 fca7 	bl	80060ac <HAL_ADC_ConfigChannel>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8004764:	f000 fe2c 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004768:	2306      	movs	r3, #6
 800476a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800476c:	2306      	movs	r3, #6
 800476e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004770:	463b      	mov	r3, r7
 8004772:	4619      	mov	r1, r3
 8004774:	481a      	ldr	r0, [pc, #104]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004776:	f001 fc99 	bl	80060ac <HAL_ADC_ConfigChannel>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8004780:	f000 fe1e 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004784:	2307      	movs	r3, #7
 8004786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004788:	2307      	movs	r3, #7
 800478a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800478c:	463b      	mov	r3, r7
 800478e:	4619      	mov	r1, r3
 8004790:	4813      	ldr	r0, [pc, #76]	@ (80047e0 <MX_ADC1_Init+0x178>)
 8004792:	f001 fc8b 	bl	80060ac <HAL_ADC_ConfigChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800479c:	f000 fe10 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80047a0:	2308      	movs	r3, #8
 80047a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80047a4:	2308      	movs	r3, #8
 80047a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047a8:	463b      	mov	r3, r7
 80047aa:	4619      	mov	r1, r3
 80047ac:	480c      	ldr	r0, [pc, #48]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80047ae:	f001 fc7d 	bl	80060ac <HAL_ADC_ConfigChannel>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80047b8:	f000 fe02 	bl	80053c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80047bc:	2309      	movs	r3, #9
 80047be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80047c0:	2309      	movs	r3, #9
 80047c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047c4:	463b      	mov	r3, r7
 80047c6:	4619      	mov	r1, r3
 80047c8:	4805      	ldr	r0, [pc, #20]	@ (80047e0 <MX_ADC1_Init+0x178>)
 80047ca:	f001 fc6f 	bl	80060ac <HAL_ADC_ConfigChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80047d4:	f000 fdf4 	bl	80053c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000abc 	.word	0x20000abc
 80047e4:	40012000 	.word	0x40012000
 80047e8:	0f000001 	.word	0x0f000001

080047ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047f0:	4b12      	ldr	r3, [pc, #72]	@ (800483c <MX_I2C1_Init+0x50>)
 80047f2:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <MX_I2C1_Init+0x54>)
 80047f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80047f6:	4b11      	ldr	r3, [pc, #68]	@ (800483c <MX_I2C1_Init+0x50>)
 80047f8:	4a12      	ldr	r2, [pc, #72]	@ (8004844 <MX_I2C1_Init+0x58>)
 80047fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047fc:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <MX_I2C1_Init+0x50>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <MX_I2C1_Init+0x50>)
 8004804:	2200      	movs	r2, #0
 8004806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <MX_I2C1_Init+0x50>)
 800480a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800480e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004810:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <MX_I2C1_Init+0x50>)
 8004812:	2200      	movs	r2, #0
 8004814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <MX_I2C1_Init+0x50>)
 8004818:	2200      	movs	r2, #0
 800481a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800481c:	4b07      	ldr	r3, [pc, #28]	@ (800483c <MX_I2C1_Init+0x50>)
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <MX_I2C1_Init+0x50>)
 8004824:	2200      	movs	r2, #0
 8004826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004828:	4804      	ldr	r0, [pc, #16]	@ (800483c <MX_I2C1_Init+0x50>)
 800482a:	f002 fe0f 	bl	800744c <HAL_I2C_Init>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004834:	f000 fdc4 	bl	80053c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000b64 	.word	0x20000b64
 8004840:	40005400 	.word	0x40005400
 8004844:	00061a80 	.word	0x00061a80

08004848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800485c:	463b      	mov	r3, r7
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004864:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <MX_TIM1_Init+0x98>)
 8004866:	4a1f      	ldr	r2, [pc, #124]	@ (80048e4 <MX_TIM1_Init+0x9c>)
 8004868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800486a:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <MX_TIM1_Init+0x98>)
 800486c:	2200      	movs	r2, #0
 800486e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004870:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <MX_TIM1_Init+0x98>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8004876:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <MX_TIM1_Init+0x98>)
 8004878:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800487c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800487e:	4b18      	ldr	r3, [pc, #96]	@ (80048e0 <MX_TIM1_Init+0x98>)
 8004880:	2200      	movs	r2, #0
 8004882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004884:	4b16      	ldr	r3, [pc, #88]	@ (80048e0 <MX_TIM1_Init+0x98>)
 8004886:	2200      	movs	r2, #0
 8004888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <MX_TIM1_Init+0x98>)
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004890:	4813      	ldr	r0, [pc, #76]	@ (80048e0 <MX_TIM1_Init+0x98>)
 8004892:	f008 f886 	bl	800c9a2 <HAL_TIM_Base_Init>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800489c:	f000 fd90 	bl	80053c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4619      	mov	r1, r3
 80048ac:	480c      	ldr	r0, [pc, #48]	@ (80048e0 <MX_TIM1_Init+0x98>)
 80048ae:	f008 fbe5 	bl	800d07c <HAL_TIM_ConfigClockSource>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80048b8:	f000 fd82 	bl	80053c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048bc:	2300      	movs	r3, #0
 80048be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048c4:	463b      	mov	r3, r7
 80048c6:	4619      	mov	r1, r3
 80048c8:	4805      	ldr	r0, [pc, #20]	@ (80048e0 <MX_TIM1_Init+0x98>)
 80048ca:	f008 ff9f 	bl	800d80c <HAL_TIMEx_MasterConfigSynchronization>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80048d4:	f000 fd74 	bl	80053c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000c78 	.word	0x20000c78
 80048e4:	40010000 	.word	0x40010000

080048e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	@ 0x38
 80048ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	609a      	str	r2, [r3, #8]
 80048fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fc:	f107 0320 	add.w	r3, r7, #32
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
 8004912:	611a      	str	r2, [r3, #16]
 8004914:	615a      	str	r2, [r3, #20]
 8004916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004918:	4b32      	ldr	r3, [pc, #200]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 800491a:	4a33      	ldr	r2, [pc, #204]	@ (80049e8 <MX_TIM3_Init+0x100>)
 800491c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800491e:	4b31      	ldr	r3, [pc, #196]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 8004920:	220f      	movs	r2, #15
 8004922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004924:	4b2f      	ldr	r3, [pc, #188]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800492a:	4b2e      	ldr	r3, [pc, #184]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 800492c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8004930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004932:	4b2c      	ldr	r3, [pc, #176]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004938:	4b2a      	ldr	r3, [pc, #168]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 800493a:	2200      	movs	r2, #0
 800493c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800493e:	4829      	ldr	r0, [pc, #164]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 8004940:	f008 f82f 	bl	800c9a2 <HAL_TIM_Base_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800494a:	f000 fd39 	bl	80053c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800494e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004958:	4619      	mov	r1, r3
 800495a:	4822      	ldr	r0, [pc, #136]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 800495c:	f008 fb8e 	bl	800d07c <HAL_TIM_ConfigClockSource>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004966:	f000 fd2b 	bl	80053c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800496a:	481e      	ldr	r0, [pc, #120]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 800496c:	f008 f8ca 	bl	800cb04 <HAL_TIM_PWM_Init>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004976:	f000 fd23 	bl	80053c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004982:	f107 0320 	add.w	r3, r7, #32
 8004986:	4619      	mov	r1, r3
 8004988:	4816      	ldr	r0, [pc, #88]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 800498a:	f008 ff3f 	bl	800d80c <HAL_TIMEx_MasterConfigSynchronization>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004994:	f000 fd14 	bl	80053c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004998:	2360      	movs	r3, #96	@ 0x60
 800499a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	2200      	movs	r2, #0
 80049ac:	4619      	mov	r1, r3
 80049ae:	480d      	ldr	r0, [pc, #52]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 80049b0:	f008 faa2 	bl	800cef8 <HAL_TIM_PWM_ConfigChannel>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80049ba:	f000 fd01 	bl	80053c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	2204      	movs	r2, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4807      	ldr	r0, [pc, #28]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 80049c6:	f008 fa97 	bl	800cef8 <HAL_TIM_PWM_ConfigChannel>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80049d0:	f000 fcf6 	bl	80053c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80049d4:	4803      	ldr	r0, [pc, #12]	@ (80049e4 <MX_TIM3_Init+0xfc>)
 80049d6:	f000 fec7 	bl	8005768 <HAL_TIM_MspPostInit>

}
 80049da:	bf00      	nop
 80049dc:	3738      	adds	r7, #56	@ 0x38
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000cc0 	.word	0x20000cc0
 80049e8:	40000400 	.word	0x40000400

080049ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049f0:	4b11      	ldr	r3, [pc, #68]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 80049f2:	4a12      	ldr	r2, [pc, #72]	@ (8004a3c <MX_USART1_UART_Init+0x50>)
 80049f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049f6:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 80049f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a10:	4b09      	ldr	r3, [pc, #36]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a12:	220c      	movs	r2, #12
 8004a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a16:	4b08      	ldr	r3, [pc, #32]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a22:	4805      	ldr	r0, [pc, #20]	@ (8004a38 <MX_USART1_UART_Init+0x4c>)
 8004a24:	f008 ff74 	bl	800d910 <HAL_UART_Init>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004a2e:	f000 fcc7 	bl	80053c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000d08 	.word	0x20000d08
 8004a3c:	40011000 	.word	0x40011000

08004a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <MX_DMA_Init+0x78>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab8 <MX_DMA_Init+0x78>)
 8004a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a56:	4b18      	ldr	r3, [pc, #96]	@ (8004ab8 <MX_DMA_Init+0x78>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	4b14      	ldr	r3, [pc, #80]	@ (8004ab8 <MX_DMA_Init+0x78>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	4a13      	ldr	r2, [pc, #76]	@ (8004ab8 <MX_DMA_Init+0x78>)
 8004a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a72:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <MX_DMA_Init+0x78>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2100      	movs	r1, #0
 8004a82:	200b      	movs	r0, #11
 8004a84:	f001 fea7 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004a88:	200b      	movs	r0, #11
 8004a8a:	f001 fec0 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2100      	movs	r1, #0
 8004a92:	200c      	movs	r0, #12
 8004a94:	f001 fe9f 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004a98:	200c      	movs	r0, #12
 8004a9a:	f001 feb8 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2038      	movs	r0, #56	@ 0x38
 8004aa4:	f001 fe97 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004aa8:	2038      	movs	r0, #56	@ 0x38
 8004aaa:	f001 feb0 	bl	800680e <HAL_NVIC_EnableIRQ>

}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800

08004abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	@ 0x28
 8004ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	4b63      	ldr	r3, [pc, #396]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	4a62      	ldr	r2, [pc, #392]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ae2:	4b60      	ldr	r3, [pc, #384]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004afe:	4b59      	ldr	r3, [pc, #356]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	4b55      	ldr	r3, [pc, #340]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	4a54      	ldr	r2, [pc, #336]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b1a:	4b52      	ldr	r3, [pc, #328]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b36:	4b4b      	ldr	r3, [pc, #300]	@ (8004c64 <MX_GPIO_Init+0x1a8>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004b42:	2200      	movs	r2, #0
 8004b44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b48:	4847      	ldr	r0, [pc, #284]	@ (8004c68 <MX_GPIO_Init+0x1ac>)
 8004b4a:	f002 fc33 	bl	80073b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2104      	movs	r1, #4
 8004b52:	4846      	ldr	r0, [pc, #280]	@ (8004c6c <MX_GPIO_Init+0x1b0>)
 8004b54:	f002 fc2e 	bl	80073b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedStatus_2_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8004b5e:	4843      	ldr	r0, [pc, #268]	@ (8004c6c <MX_GPIO_Init+0x1b0>)
 8004b60:	f002 fc28 	bl	80073b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8004b6a:	4841      	ldr	r0, [pc, #260]	@ (8004c70 <MX_GPIO_Init+0x1b4>)
 8004b6c:	f002 fc22 	bl	80073b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b76:	2301      	movs	r3, #1
 8004b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	4619      	mov	r1, r3
 8004b88:	4837      	ldr	r0, [pc, #220]	@ (8004c68 <MX_GPIO_Init+0x1ac>)
 8004b8a:	f002 fa77 	bl	800707c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4833      	ldr	r0, [pc, #204]	@ (8004c70 <MX_GPIO_Init+0x1b4>)
 8004ba2:	f002 fa6b 	bl	800707c <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin LedStatus_2_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|LedStatus_2_Pin|M2_IN2_Pin;
 8004ba6:	f240 430c 	movw	r3, #1036	@ 0x40c
 8004baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bac:	2301      	movs	r3, #1
 8004bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	482b      	ldr	r0, [pc, #172]	@ (8004c6c <MX_GPIO_Init+0x1b0>)
 8004bc0:	f002 fa5c 	bl	800707c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4824      	ldr	r0, [pc, #144]	@ (8004c6c <MX_GPIO_Init+0x1b0>)
 8004bdc:	f002 fa4e 	bl	800707c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004be0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be6:	2302      	movs	r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	481b      	ldr	r0, [pc, #108]	@ (8004c6c <MX_GPIO_Init+0x1b0>)
 8004bfe:	f002 fa3d 	bl	800707c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8004c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	4619      	mov	r1, r3
 8004c18:	4815      	ldr	r0, [pc, #84]	@ (8004c70 <MX_GPIO_Init+0x1b4>)
 8004c1a:	f002 fa2f 	bl	800707c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8004c1e:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8004c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	4619      	mov	r1, r3
 8004c36:	480e      	ldr	r0, [pc, #56]	@ (8004c70 <MX_GPIO_Init+0x1b4>)
 8004c38:	f002 fa20 	bl	800707c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	2017      	movs	r0, #23
 8004c42:	f001 fdc8 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c46:	2017      	movs	r0, #23
 8004c48:	f001 fde1 	bl	800680e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2028      	movs	r0, #40	@ 0x28
 8004c52:	f001 fdc0 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c56:	2028      	movs	r0, #40	@ 0x28
 8004c58:	f001 fdd9 	bl	800680e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004c5c:	bf00      	nop
 8004c5e:	3728      	adds	r7, #40	@ 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40020800 	.word	0x40020800
 8004c6c:	40020400 	.word	0x40020400
 8004c70:	40020000 	.word	0x40020000

08004c74 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8004c78:	4819      	ldr	r0, [pc, #100]	@ (8004ce0 <Init_Timing+0x6c>)
 8004c7a:	f007 fee1 	bl	800ca40 <HAL_TIM_Base_Start_IT>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8004c84:	2309      	movs	r3, #9
 8004c86:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <Init_Timing+0x70>)
 8004c88:	21ee      	movs	r1, #238	@ 0xee
 8004c8a:	4817      	ldr	r0, [pc, #92]	@ (8004ce8 <Init_Timing+0x74>)
 8004c8c:	f7fd fc28 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8004c90:	4816      	ldr	r0, [pc, #88]	@ (8004cec <Init_Timing+0x78>)
 8004c92:	f007 fed5 	bl	800ca40 <HAL_TIM_Base_Start_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8004c9c:	230e      	movs	r3, #14
 8004c9e:	4a14      	ldr	r2, [pc, #80]	@ (8004cf0 <Init_Timing+0x7c>)
 8004ca0:	21ee      	movs	r1, #238	@ 0xee
 8004ca2:	4811      	ldr	r0, [pc, #68]	@ (8004ce8 <Init_Timing+0x74>)
 8004ca4:	f7fd fc1c 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4810      	ldr	r0, [pc, #64]	@ (8004cec <Init_Timing+0x78>)
 8004cac:	f007 ff84 	bl	800cbb8 <HAL_TIM_PWM_Start>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8004cb6:	230e      	movs	r3, #14
 8004cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf4 <Init_Timing+0x80>)
 8004cba:	21ee      	movs	r1, #238	@ 0xee
 8004cbc:	480a      	ldr	r0, [pc, #40]	@ (8004ce8 <Init_Timing+0x74>)
 8004cbe:	f7fd fc0f 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8004cc2:	2104      	movs	r1, #4
 8004cc4:	4809      	ldr	r0, [pc, #36]	@ (8004cec <Init_Timing+0x78>)
 8004cc6:	f007 ff77 	bl	800cbb8 <HAL_TIM_PWM_Start>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8004cd0:	230e      	movs	r3, #14
 8004cd2:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <Init_Timing+0x84>)
 8004cd4:	21ee      	movs	r1, #238	@ 0xee
 8004cd6:	4804      	ldr	r0, [pc, #16]	@ (8004ce8 <Init_Timing+0x74>)
 8004cd8:	f7fd fc02 	bl	80024e0 <comm_sendCMD>
	  }
}
 8004cdc:	bf00      	nop
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000c78 	.word	0x20000c78
 8004ce4:	0801372c 	.word	0x0801372c
 8004ce8:	200012a4 	.word	0x200012a4
 8004cec:	20000cc0 	.word	0x20000cc0
 8004cf0:	08013738 	.word	0x08013738
 8004cf4:	08013748 	.word	0x08013748
 8004cf8:	08013758 	.word	0x08013758

08004cfc <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8004d00:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004d04:	2201      	movs	r2, #1
 8004d06:	21d0      	movs	r1, #208	@ 0xd0
 8004d08:	4811      	ldr	r0, [pc, #68]	@ (8004d50 <Init_MPU6050+0x54>)
 8004d0a:	f003 fc11 	bl	8008530 <HAL_I2C_IsDeviceReady>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8004d14:	230d      	movs	r3, #13
 8004d16:	4a0f      	ldr	r2, [pc, #60]	@ (8004d54 <Init_MPU6050+0x58>)
 8004d18:	21ee      	movs	r1, #238	@ 0xee
 8004d1a:	480f      	ldr	r0, [pc, #60]	@ (8004d58 <Init_MPU6050+0x5c>)
 8004d1c:	f7fd fbe0 	bl	80024e0 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8004d20:	e013      	b.n	8004d4a <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C1_Mem_Write, &I2C1_Mem_Read);
 8004d22:	490e      	ldr	r1, [pc, #56]	@ (8004d5c <Init_MPU6050+0x60>)
 8004d24:	480e      	ldr	r0, [pc, #56]	@ (8004d60 <Init_MPU6050+0x64>)
 8004d26:	f7fc f9a1 	bl	800106c <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8004d2a:	480e      	ldr	r0, [pc, #56]	@ (8004d64 <Init_MPU6050+0x68>)
 8004d2c:	f7fc f9b4 	bl	8001098 <MPU6050_Init>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8004d36:	230c      	movs	r3, #12
 8004d38:	4a0b      	ldr	r2, [pc, #44]	@ (8004d68 <Init_MPU6050+0x6c>)
 8004d3a:	21ee      	movs	r1, #238	@ 0xee
 8004d3c:	4806      	ldr	r0, [pc, #24]	@ (8004d58 <Init_MPU6050+0x5c>)
 8004d3e:	f7fd fbcf 	bl	80024e0 <comm_sendCMD>
}
 8004d42:	e002      	b.n	8004d4a <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8004d44:	4807      	ldr	r0, [pc, #28]	@ (8004d64 <Init_MPU6050+0x68>)
 8004d46:	f7fc fa59 	bl	80011fc <MPU6050_Calibrate>
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000b64 	.word	0x20000b64
 8004d54:	08013768 	.word	0x08013768
 8004d58:	200012a4 	.word	0x200012a4
 8004d5c:	080051bd 	.word	0x080051bd
 8004d60:	0800517d 	.word	0x0800517d
 8004d64:	20000da4 	.word	0x20000da4
 8004d68:	08013778 	.word	0x08013778

08004d6c <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */

/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004d72:	4b1f      	ldr	r3, [pc, #124]	@ (8004df0 <Init_Display+0x84>)
 8004d74:	2214      	movs	r2, #20
 8004d76:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <Init_Display+0x84>)
 8004d7c:	2214      	movs	r2, #20
 8004d7e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8004d82:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004d86:	2201      	movs	r2, #1
 8004d88:	2178      	movs	r1, #120	@ 0x78
 8004d8a:	481a      	ldr	r0, [pc, #104]	@ (8004df4 <Init_Display+0x88>)
 8004d8c:	f003 fbd0 	bl	8008530 <HAL_I2C_IsDeviceReady>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8004d96:	230a      	movs	r3, #10
 8004d98:	4a17      	ldr	r2, [pc, #92]	@ (8004df8 <Init_Display+0x8c>)
 8004d9a:	21ee      	movs	r1, #238	@ 0xee
 8004d9c:	4817      	ldr	r0, [pc, #92]	@ (8004dfc <Init_Display+0x90>)
 8004d9e:	f7fd fb9f 	bl	80024e0 <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8004da2:	e022      	b.n	8004dea <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C1_DMA_Mem_Write, &I2C1_Master_Transmit);
 8004da4:	4916      	ldr	r1, [pc, #88]	@ (8004e00 <Init_Display+0x94>)
 8004da6:	4817      	ldr	r0, [pc, #92]	@ (8004e04 <Init_Display+0x98>)
 8004da8:	f7fc fbfe 	bl	80015a8 <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8004dac:	f7fc fc12 	bl	80015d4 <Display_Init>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8004db6:	2309      	movs	r3, #9
 8004db8:	4a13      	ldr	r2, [pc, #76]	@ (8004e08 <Init_Display+0x9c>)
 8004dba:	21ee      	movs	r1, #238	@ 0xee
 8004dbc:	480f      	ldr	r0, [pc, #60]	@ (8004dfc <Init_Display+0x90>)
 8004dbe:	f7fd fb8f 	bl	80024e0 <comm_sendCMD>
}
 8004dc2:	e012      	b.n	8004dea <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	2340      	movs	r3, #64	@ 0x40
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	4a0f      	ldr	r2, [pc, #60]	@ (8004e0c <Init_Display+0xa0>)
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fc fe94 	bl	8001b00 <Display_DrawBitmap>
			Display.isInit = TRUE;
 8004dd8:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <Init_Display+0x84>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 8004dde:	f000 fed3 	bl	8005b88 <HAL_GetTick>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a02      	ldr	r2, [pc, #8]	@ (8004df0 <Init_Display+0x84>)
 8004de6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 8004dea:	bf00      	nop
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000e68 	.word	0x20000e68
 8004df4:	20000b64 	.word	0x20000b64
 8004df8:	08013788 	.word	0x08013788
 8004dfc:	200012a4 	.word	0x200012a4
 8004e00:	08005149 	.word	0x08005149
 8004e04:	0800510d 	.word	0x0800510d
 8004e08:	08013794 	.word	0x08013794
 8004e0c:	08013818 	.word	0x08013818

08004e10 <Init_WiFi>:
/* FIN INICIALIZACIÓN DISPLAY */

/* INICIALIZACIÓN WIFI */
void Init_WiFi(){
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	ESP.password = 	"wlan412877";
 8004e14:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <Init_WiFi+0x78>)
 8004e16:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <Init_WiFi+0x7c>)
 8004e18:	611a      	str	r2, [r3, #16]
	ESP.ssid = 		"InternetPlus_bed788";
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <Init_WiFi+0x78>)
 8004e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <Init_WiFi+0x80>)
 8004e1e:	60da      	str	r2, [r3, #12]
	ESP.IP = 		"192.168.1.10";
 8004e20:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <Init_WiFi+0x78>)
 8004e22:	4a1c      	ldr	r2, [pc, #112]	@ (8004e94 <Init_WiFi+0x84>)
 8004e24:	615a      	str	r2, [r3, #20]

	Comm_Init(&ESP.data, &decodeOn_USB, &writeOn_ESP);
 8004e26:	4a1c      	ldr	r2, [pc, #112]	@ (8004e98 <Init_WiFi+0x88>)
 8004e28:	491c      	ldr	r1, [pc, #112]	@ (8004e9c <Init_WiFi+0x8c>)
 8004e2a:	481d      	ldr	r0, [pc, #116]	@ (8004ea0 <Init_WiFi+0x90>)
 8004e2c:	f7fd f9cc 	bl	80021c8 <Comm_Init>
	ESP.data.isESP01 = TRUE;
 8004e30:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <Init_WiFi+0x78>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
	HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8004e38:	2201      	movs	r2, #1
 8004e3a:	491a      	ldr	r1, [pc, #104]	@ (8004ea4 <Init_WiFi+0x94>)
 8004e3c:	481a      	ldr	r0, [pc, #104]	@ (8004ea8 <Init_WiFi+0x98>)
 8004e3e:	f008 fdb7 	bl	800d9b0 <HAL_UART_Receive_IT>

	ESP.Config.DoCHPD = setESP01_CHPD;
 8004e42:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <Init_WiFi+0x78>)
 8004e44:	4a19      	ldr	r2, [pc, #100]	@ (8004eac <Init_WiFi+0x9c>)
 8004e46:	601a      	str	r2, [r3, #0]
	ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 8004e48:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <Init_WiFi+0x78>)
 8004e4a:	4a19      	ldr	r2, [pc, #100]	@ (8004eb0 <Init_WiFi+0xa0>)
 8004e4c:	605a      	str	r2, [r3, #4]
	ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e88 <Init_WiFi+0x78>)
 8004e50:	4a18      	ldr	r2, [pc, #96]	@ (8004eb4 <Init_WiFi+0xa4>)
 8004e52:	609a      	str	r2, [r3, #8]

	ESP01_Init(&ESP.Config);
 8004e54:	480c      	ldr	r0, [pc, #48]	@ (8004e88 <Init_WiFi+0x78>)
 8004e56:	f7fd fd79 	bl	800294c <ESP01_Init>
	ESP01_SetWIFI(ESP.ssid, ESP.password);
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <Init_WiFi+0x78>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <Init_WiFi+0x78>)
 8004e60:	6912      	ldr	r2, [r2, #16]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fd fc17 	bl	8002698 <ESP01_SetWIFI>
	ESP01_StartUDP("192.168.1.10", 30010, 30000);
 8004e6a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004e6e:	f247 513a 	movw	r1, #30010	@ 0x753a
 8004e72:	4808      	ldr	r0, [pc, #32]	@ (8004e94 <Init_WiFi+0x84>)
 8004e74:	f7fd fc46 	bl	8002704 <ESP01_StartUDP>
	//ESP01_AttachChangeState(&onESP01ChangeState);
	ESP01_AttachDebugStr(&onESP01Debug);
 8004e78:	480f      	ldr	r0, [pc, #60]	@ (8004eb8 <Init_WiFi+0xa8>)
 8004e7a:	f7fd fdef 	bl	8002a5c <ESP01_AttachDebugStr>

	ESP01_setMode(CREATEWIFI);
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f7fe fd86 	bl	8003990 <ESP01_setMode>
}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200014d8 	.word	0x200014d8
 8004e8c:	080137a0 	.word	0x080137a0
 8004e90:	080137ac 	.word	0x080137ac
 8004e94:	080137c0 	.word	0x080137c0
 8004e98:	080050b5 	.word	0x080050b5
 8004e9c:	08003f25 	.word	0x08003f25
 8004ea0:	200014f0 	.word	0x200014f0
 8004ea4:	20001720 	.word	0x20001720
 8004ea8:	20000d08 	.word	0x20000d08
 8004eac:	080051fd 	.word	0x080051fd
 8004eb0:	08005045 	.word	0x08005045
 8004eb4:	0800507d 	.word	0x0800507d
 8004eb8:	08004309 	.word	0x08004309

08004ebc <HAL_TIM_PeriodElapsedCallback>:
/* END INICIALIZACIÓN WIFI */

/************************************ END USER INIT FUNCTIONS ****************************************/
/***************************************** HAL CALLBACKS *********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //								1/4000s
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d123      	bne.n	8004f16 <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, ADC_NUM_SENSORS);
 8004ece:	2209      	movs	r2, #9
 8004ed0:	4919      	ldr	r1, [pc, #100]	@ (8004f38 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004ed2:	481a      	ldr	r0, [pc, #104]	@ (8004f3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ed4:	f000 ffdc 	bl	8005e90 <HAL_ADC_Start_DMA>
		is5ms--;
 8004ed8:	4b19      	ldr	r3, [pc, #100]	@ (8004f40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	4b17      	ldr	r3, [pc, #92]	@ (8004f40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004ee2:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8004ee4:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d114      	bne.n	8004f16 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8004eec:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004eee:	2214      	movs	r2, #20
 8004ef0:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8004ef2:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004ef4:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 8004efc:	230e      	movs	r3, #14
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2301      	movs	r3, #1
 8004f06:	223b      	movs	r2, #59	@ 0x3b
 8004f08:	21d0      	movs	r1, #208	@ 0xd0
 8004f0a:	4810      	ldr	r0, [pc, #64]	@ (8004f4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004f0c:	f003 f980 	bl	8008210 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fc fd39 	bl	8001988 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f50 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8004f20:	4a0c      	ldr	r2, [pc, #48]	@ (8004f54 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004f22:	7813      	ldrb	r3, [r2, #0]
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	7013      	strb	r3, [r2, #0]
	}
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	20001280 	.word	0x20001280
 8004f3c:	20000abc 	.word	0x20000abc
 8004f40:	2000000e 	.word	0x2000000e
 8004f44:	20000da4 	.word	0x20000da4
 8004f48:	20000e58 	.word	0x20000e58
 8004f4c:	20000b64 	.word	0x20000b64
 8004f50:	40000400 	.word	0x40000400
 8004f54:	20000d50 	.word	0x20000d50

08004f58 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f64:	2b78      	cmp	r3, #120	@ 0x78
 8004f66:	d107      	bne.n	8004f78 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8004f68:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_I2C_MemTxCpltCallback+0x28>)
 8004f6a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 8004f72:	2001      	movs	r0, #1
 8004f74:	f7fc fd08 	bl	8001988 <Display_I2C_DMA_Ready>
		}
	}
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20000da4 	.word	0x20000da4

08004f84 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f90:	2bd0      	cmp	r3, #208	@ 0xd0
 8004f92:	d105      	bne.n	8004fa0 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8004f94:	4804      	ldr	r0, [pc, #16]	@ (8004fa8 <HAL_I2C_MemRxCpltCallback+0x24>)
 8004f96:	f7fc f9d7 	bl	8001348 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	f7fc fcf4 	bl	8001988 <Display_I2C_DMA_Ready>
	}
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000da4 	.word	0x20000da4

08004fac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8004fb4:	4903      	ldr	r1, [pc, #12]	@ (8004fc4 <HAL_ADC_ConvCpltCallback+0x18>)
 8004fb6:	4804      	ldr	r0, [pc, #16]	@ (8004fc8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004fb8:	f7fb fef6 	bl	8000da8 <ADC_Conversion_Cplt>
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20001292 	.word	0x20001292
 8004fc8:	20001280 	.word	0x20001280

08004fcc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fdc:	d102      	bne.n	8004fe4 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8004fde:	4807      	ldr	r0, [pc, #28]	@ (8004ffc <HAL_GPIO_EXTI_Callback+0x30>)
 8004fe0:	f7fc ffe2 	bl	8001fa8 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fea:	d102      	bne.n	8004ff2 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8004fec:	4804      	ldr	r0, [pc, #16]	@ (8005000 <HAL_GPIO_EXTI_Callback+0x34>)
 8004fee:	f7fc ffdb 	bl	8001fa8 <Encoder_Add_Pulse>
	}
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000d8c 	.word	0x20000d8c
 8005000:	20000d98 	.word	0x20000d98

08005004 <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

/******************************************** ESP ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <HAL_UART_RxCpltCallback+0x30>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10a      	bne.n	800502c <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.AT_Rx_data);
 8005016:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <HAL_UART_RxCpltCallback+0x34>)
 8005018:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 800501c:	4618      	mov	r0, r3
 800501e:	f7fd fbc7 	bl	80027b0 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8005022:	2201      	movs	r2, #1
 8005024:	4905      	ldr	r1, [pc, #20]	@ (800503c <HAL_UART_RxCpltCallback+0x38>)
 8005026:	4806      	ldr	r0, [pc, #24]	@ (8005040 <HAL_UART_RxCpltCallback+0x3c>)
 8005028:	f008 fcc2 	bl	800d9b0 <HAL_UART_Receive_IT>
	}
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40011000 	.word	0x40011000
 8005038:	200014d8 	.word	0x200014d8
 800503c:	20001720 	.word	0x20001720
 8005040:	20000d08 	.word	0x20000d08

08005044 <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 800504e:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <ESP01_UART_Transmit+0x30>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d104      	bne.n	8005066 <ESP01_UART_Transmit+0x22>
		USART1->DR = val;
 800505c:	4a06      	ldr	r2, [pc, #24]	@ (8005078 <ESP01_UART_Transmit+0x34>)
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	6053      	str	r3, [r2, #4]
		return 1;
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <ESP01_UART_Transmit+0x24>
	}
	return 0;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	20000d08 	.word	0x20000d08
 8005078:	40011000 	.word	0x40011000

0800507c <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
	ESP.data.Rx.buffer[ESP.data.Rx.write++] = value;
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <ESP01_Data_Recived+0x34>)
 8005088:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	b2d1      	uxtb	r1, r2
 8005090:	4a07      	ldr	r2, [pc, #28]	@ (80050b0 <ESP01_Data_Recived+0x34>)
 8005092:	f882 111d 	strb.w	r1, [r2, #285]	@ 0x11d
 8005096:	461a      	mov	r2, r3
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <ESP01_Data_Recived+0x34>)
 800509a:	4413      	add	r3, r2
 800509c:	79fa      	ldrb	r2, [r7, #7]
 800509e:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	200014d8 	.word	0x200014d8

080050b4 <writeOn_ESP>:

void writeOn_ESP(s_commData *data){
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	ESP.bytesToTx = data->Tx.write - data->Tx.read;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	78da      	ldrb	r2, [r3, #3]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	789b      	ldrb	r3, [r3, #2]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005108 <writeOn_ESP+0x54>)
 80050ca:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
	if(ESP01_Send(data->Tx.buffer,  data->Tx.read,  ESP.bytesToTx,  RINGBUFFLENGTH) == ESP01_SEND_READY){
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1d18      	adds	r0, r3, #4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	789b      	ldrb	r3, [r3, #2]
 80050d6:	4619      	mov	r1, r3
 80050d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <writeOn_ESP+0x54>)
 80050da:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 80050de:	461a      	mov	r2, r3
 80050e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050e4:	f7fd fb84 	bl	80027f0 <ESP01_Send>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b09      	cmp	r3, #9
 80050ec:	d108      	bne.n	8005100 <writeOn_ESP+0x4c>
		data->Tx.read += ESP.bytesToTx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	789a      	ldrb	r2, [r3, #2]
 80050f2:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <writeOn_ESP+0x54>)
 80050f4:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 80050f8:	4413      	add	r3, r2
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	709a      	strb	r2, [r3, #2]
	}
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	200014d8 	.word	0x200014d8

0800510c <I2C1_DMA_Mem_Write>:
/******************************************** END ESP ***********************************************/

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C1_DMA_Mem_Write(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	60ba      	str	r2, [r7, #8]
 8005114:	461a      	mov	r2, r3
 8005116:	4603      	mov	r3, r0
 8005118:	81fb      	strh	r3, [r7, #14]
 800511a:	460b      	mov	r3, r1
 800511c:	737b      	strb	r3, [r7, #13]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8005122:	7b7b      	ldrb	r3, [r7, #13]
 8005124:	b29a      	uxth	r2, r3
 8005126:	89f9      	ldrh	r1, [r7, #14]
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	2301      	movs	r3, #1
 8005132:	4804      	ldr	r0, [pc, #16]	@ (8005144 <I2C1_DMA_Mem_Write+0x38>)
 8005134:	f002 ff0e 	bl	8007f54 <HAL_I2C_Mem_Write_DMA>
 8005138:	4603      	mov	r3, r0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000b64 	.word	0x20000b64

08005148 <I2C1_Master_Transmit>:

e_system I2C1_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	4603      	mov	r3, r0
 8005154:	81fb      	strh	r3, [r7, #14]
 8005156:	4613      	mov	r3, r2
 8005158:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800515a:	89ba      	ldrh	r2, [r7, #12]
 800515c:	89f9      	ldrh	r1, [r7, #14]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	4613      	mov	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	4804      	ldr	r0, [pc, #16]	@ (8005178 <I2C1_Master_Transmit+0x30>)
 8005168:	f002 faca 	bl	8007700 <HAL_I2C_Master_Transmit>
 800516c:	4603      	mov	r3, r0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000b64 	.word	0x20000b64

0800517c <I2C1_Mem_Write>:

e_system I2C1_Mem_Write(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af04      	add	r7, sp, #16
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	80fb      	strh	r3, [r7, #6]
 8005188:	460b      	mov	r3, r1
 800518a:	717b      	strb	r3, [r7, #5]
 800518c:	4613      	mov	r3, r2
 800518e:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8005190:	797b      	ldrb	r3, [r7, #5]
 8005192:	b29a      	uxth	r2, r3
 8005194:	793b      	ldrb	r3, [r7, #4]
 8005196:	b298      	uxth	r0, r3
 8005198:	88f9      	ldrh	r1, [r7, #6]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	8a3b      	ldrh	r3, [r7, #16]
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4603      	mov	r3, r0
 80051a8:	4803      	ldr	r0, [pc, #12]	@ (80051b8 <I2C1_Mem_Write+0x3c>)
 80051aa:	f002 fba7 	bl	80078fc <HAL_I2C_Mem_Write>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000b64 	.word	0x20000b64

080051bc <I2C1_Mem_Read>:

e_system I2C1_Mem_Read(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af04      	add	r7, sp, #16
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	80fb      	strh	r3, [r7, #6]
 80051c8:	460b      	mov	r3, r1
 80051ca:	717b      	strb	r3, [r7, #5]
 80051cc:	4613      	mov	r3, r2
 80051ce:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80051d0:	797b      	ldrb	r3, [r7, #5]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	793b      	ldrb	r3, [r7, #4]
 80051d6:	b298      	uxth	r0, r3
 80051d8:	88f9      	ldrh	r1, [r7, #6]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	8a3b      	ldrh	r3, [r7, #16]
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	4603      	mov	r3, r0
 80051e8:	4803      	ldr	r0, [pc, #12]	@ (80051f8 <I2C1_Mem_Read+0x3c>)
 80051ea:	f002 fc81 	bl	8007af0 <HAL_I2C_Mem_Read>
 80051ee:	4603      	mov	r3, r0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000b64 	.word	0x20000b64

080051fc <setESP01_CHPD>:

void setESP01_CHPD(uint8_t val){
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	461a      	mov	r2, r3
 800520a:	2104      	movs	r1, #4
 800520c:	4803      	ldr	r0, [pc, #12]	@ (800521c <setESP01_CHPD+0x20>)
 800520e:	f002 f8d1 	bl	80073b4 <HAL_GPIO_WritePin>
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40020400 	.word	0x40020400

08005220 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8005224:	2101      	movs	r1, #1
 8005226:	4803      	ldr	r0, [pc, #12]	@ (8005234 <KEY_Read_Value+0x14>)
 8005228:	f002 f8ac 	bl	8007384 <HAL_GPIO_ReadPin>
 800522c:	4603      	mov	r3, r0
}
 800522e:	4618      	mov	r0, r3
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40020000 	.word	0x40020000

08005238 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8005240:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <writeOn_USB+0x70>)
 8005242:	78da      	ldrb	r2, [r3, #3]
 8005244:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <writeOn_USB+0x70>)
 8005246:	789b      	ldrb	r3, [r3, #2]
 8005248:	429a      	cmp	r2, r3
 800524a:	d909      	bls.n	8005260 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 800524c:	4b16      	ldr	r3, [pc, #88]	@ (80052a8 <writeOn_USB+0x70>)
 800524e:	78da      	ldrb	r2, [r3, #3]
 8005250:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <writeOn_USB+0x70>)
 8005252:	789b      	ldrb	r3, [r3, #2]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b2da      	uxtb	r2, r3
 8005258:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <writeOn_USB+0x70>)
 800525a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 800525e:	e006      	b.n	800526e <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8005260:	4b11      	ldr	r3, [pc, #68]	@ (80052a8 <writeOn_USB+0x70>)
 8005262:	789b      	ldrb	r3, [r3, #2]
 8005264:	425b      	negs	r3, r3
 8005266:	b2da      	uxtb	r2, r3
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <writeOn_USB+0x70>)
 800526a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 800526e:	4b0e      	ldr	r3, [pc, #56]	@ (80052a8 <writeOn_USB+0x70>)
 8005270:	789b      	ldrb	r3, [r3, #2]
 8005272:	461a      	mov	r2, r3
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <writeOn_USB+0x70>)
 8005276:	4413      	add	r3, r2
 8005278:	3304      	adds	r3, #4
 800527a:	4a0b      	ldr	r2, [pc, #44]	@ (80052a8 <writeOn_USB+0x70>)
 800527c:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f00c feec 	bl	8012060 <CDC_Transmit_FS>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d108      	bne.n	80052a0 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <writeOn_USB+0x70>)
 8005290:	789a      	ldrb	r2, [r3, #2]
 8005292:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <writeOn_USB+0x70>)
 8005294:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8005298:	4413      	add	r3, r2
 800529a:	b2da      	uxtb	r2, r3
 800529c:	4b02      	ldr	r3, [pc, #8]	@ (80052a8 <writeOn_USB+0x70>)
 800529e:	709a      	strb	r2, [r3, #2]
	}
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	200012a4 	.word	0x200012a4

080052ac <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01a      	beq.n	80052f2 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 80052bc:	2300      	movs	r3, #0
 80052be:	81fb      	strh	r3, [r7, #14]
 80052c0:	e013      	b.n	80052ea <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	441a      	add	r2, r3
 80052c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <dataRxOn_USB+0x54>)
 80052ca:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	b2c8      	uxtb	r0, r1
 80052d2:	490b      	ldr	r1, [pc, #44]	@ (8005300 <dataRxOn_USB+0x54>)
 80052d4:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 80052d8:	4619      	mov	r1, r3
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <dataRxOn_USB+0x54>)
 80052de:	440b      	add	r3, r1
 80052e0:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	3301      	adds	r3, #1
 80052e8:	81fb      	strh	r3, [r7, #14]
 80052ea:	89fb      	ldrh	r3, [r7, #14]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d8e7      	bhi.n	80052c2 <dataRxOn_USB+0x16>
		}
	}
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	200012a4 	.word	0x200012a4

08005304 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	460a      	mov	r2, r1
 800530e:	71fb      	strb	r3, [r7, #7]
 8005310:	4613      	mov	r3, r2
 8005312:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	461a      	mov	r2, r3
 8005318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800531c:	4806      	ldr	r0, [pc, #24]	@ (8005338 <Motor_Left_SetPins+0x34>)
 800531e:	f002 f849 	bl	80073b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 8005322:	79bb      	ldrb	r3, [r7, #6]
 8005324:	461a      	mov	r2, r3
 8005326:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800532a:	4803      	ldr	r0, [pc, #12]	@ (8005338 <Motor_Left_SetPins+0x34>)
 800532c:	f002 f842 	bl	80073b4 <HAL_GPIO_WritePin>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40020000 	.word	0x40020000

0800533c <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	460a      	mov	r2, r1
 8005346:	71fb      	strb	r3, [r7, #7]
 8005348:	4613      	mov	r3, r2
 800534a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	461a      	mov	r2, r3
 8005350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005354:	4806      	ldr	r0, [pc, #24]	@ (8005370 <Motor_Right_SetPins+0x34>)
 8005356:	f002 f82d 	bl	80073b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 800535a:	79bb      	ldrb	r3, [r7, #6]
 800535c:	461a      	mov	r2, r3
 800535e:	2108      	movs	r1, #8
 8005360:	4804      	ldr	r0, [pc, #16]	@ (8005374 <Motor_Right_SetPins+0x38>)
 8005362:	f002 f827 	bl	80073b4 <HAL_GPIO_WritePin>
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40020000 	.word	0x40020000
 8005374:	40020400 	.word	0x40020400

08005378 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 8005382:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <Motor_Left_SetPWM+0x20>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000cc0 	.word	0x20000cc0

0800539c <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80053a6:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <Motor_Right_SetPWM+0x20>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000cc0 	.word	0x20000cc0

080053c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053c4:	b672      	cpsid	i
}
 80053c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <Error_Handler+0x8>

080053cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <HAL_MspInit+0x58>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053da:	4a12      	ldr	r2, [pc, #72]	@ (8005424 <HAL_MspInit+0x58>)
 80053dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_MspInit+0x58>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <HAL_MspInit+0x58>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005424 <HAL_MspInit+0x58>)
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80053fe:	4b09      	ldr	r3, [pc, #36]	@ (8005424 <HAL_MspInit+0x58>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	2051      	movs	r0, #81	@ 0x51
 8005410:	f001 f9e1 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005414:	2051      	movs	r0, #81	@ 0x51
 8005416:	f001 f9fa 	bl	800680e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800

08005428 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	@ 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005430:	f107 0314 	add.w	r3, r7, #20
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a40      	ldr	r2, [pc, #256]	@ (8005548 <HAL_ADC_MspInit+0x120>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d179      	bne.n	800553e <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	4b3f      	ldr	r3, [pc, #252]	@ (800554c <HAL_ADC_MspInit+0x124>)
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	4a3e      	ldr	r2, [pc, #248]	@ (800554c <HAL_ADC_MspInit+0x124>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005458:	6453      	str	r3, [r2, #68]	@ 0x44
 800545a:	4b3c      	ldr	r3, [pc, #240]	@ (800554c <HAL_ADC_MspInit+0x124>)
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	4b38      	ldr	r3, [pc, #224]	@ (800554c <HAL_ADC_MspInit+0x124>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	4a37      	ldr	r2, [pc, #220]	@ (800554c <HAL_ADC_MspInit+0x124>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6313      	str	r3, [r2, #48]	@ 0x30
 8005476:	4b35      	ldr	r3, [pc, #212]	@ (800554c <HAL_ADC_MspInit+0x124>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	4b31      	ldr	r3, [pc, #196]	@ (800554c <HAL_ADC_MspInit+0x124>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	4a30      	ldr	r2, [pc, #192]	@ (800554c <HAL_ADC_MspInit+0x124>)
 800548c:	f043 0302 	orr.w	r3, r3, #2
 8005490:	6313      	str	r3, [r2, #48]	@ 0x30
 8005492:	4b2e      	ldr	r3, [pc, #184]	@ (800554c <HAL_ADC_MspInit+0x124>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 800549e:	23fe      	movs	r3, #254	@ 0xfe
 80054a0:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054a2:	2303      	movs	r3, #3
 80054a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	4619      	mov	r1, r3
 80054b0:	4827      	ldr	r0, [pc, #156]	@ (8005550 <HAL_ADC_MspInit+0x128>)
 80054b2:	f001 fde3 	bl	800707c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 80054b6:	2303      	movs	r3, #3
 80054b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054ba:	2303      	movs	r3, #3
 80054bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4619      	mov	r1, r3
 80054c8:	4822      	ldr	r0, [pc, #136]	@ (8005554 <HAL_ADC_MspInit+0x12c>)
 80054ca:	f001 fdd7 	bl	800707c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80054ce:	4b22      	ldr	r3, [pc, #136]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054d0:	4a22      	ldr	r2, [pc, #136]	@ (800555c <HAL_ADC_MspInit+0x134>)
 80054d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80054d4:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054da:	4b1f      	ldr	r3, [pc, #124]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80054e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80054e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80054ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80054f6:	4b18      	ldr	r3, [pc, #96]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 80054f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80054fe:	4b16      	ldr	r3, [pc, #88]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 8005500:	2200      	movs	r2, #0
 8005502:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005504:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 8005506:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800550a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800550c:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 800550e:	2200      	movs	r2, #0
 8005510:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005512:	4811      	ldr	r0, [pc, #68]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 8005514:	f001 f996 	bl	8006844 <HAL_DMA_Init>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800551e:	f7ff ff4f 	bl	80053c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a0c      	ldr	r2, [pc, #48]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 8005526:	639a      	str	r2, [r3, #56]	@ 0x38
 8005528:	4a0b      	ldr	r2, [pc, #44]	@ (8005558 <HAL_ADC_MspInit+0x130>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800552e:	2200      	movs	r2, #0
 8005530:	2100      	movs	r1, #0
 8005532:	2012      	movs	r0, #18
 8005534:	f001 f94f 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005538:	2012      	movs	r0, #18
 800553a:	f001 f968 	bl	800680e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800553e:	bf00      	nop
 8005540:	3728      	adds	r7, #40	@ 0x28
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40012000 	.word	0x40012000
 800554c:	40023800 	.word	0x40023800
 8005550:	40020000 	.word	0x40020000
 8005554:	40020400 	.word	0x40020400
 8005558:	20000b04 	.word	0x20000b04
 800555c:	40026410 	.word	0x40026410

08005560 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	@ 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a50      	ldr	r2, [pc, #320]	@ (80056c0 <HAL_I2C_MspInit+0x160>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f040 8099 	bne.w	80056b6 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	4b4e      	ldr	r3, [pc, #312]	@ (80056c4 <HAL_I2C_MspInit+0x164>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	4a4d      	ldr	r2, [pc, #308]	@ (80056c4 <HAL_I2C_MspInit+0x164>)
 800558e:	f043 0302 	orr.w	r3, r3, #2
 8005592:	6313      	str	r3, [r2, #48]	@ 0x30
 8005594:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <HAL_I2C_MspInit+0x164>)
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80055a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80055a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055a6:	2312      	movs	r3, #18
 80055a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ae:	2303      	movs	r3, #3
 80055b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80055b2:	2304      	movs	r3, #4
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b6:	f107 0314 	add.w	r3, r7, #20
 80055ba:	4619      	mov	r1, r3
 80055bc:	4842      	ldr	r0, [pc, #264]	@ (80056c8 <HAL_I2C_MspInit+0x168>)
 80055be:	f001 fd5d 	bl	800707c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <HAL_I2C_MspInit+0x164>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	4a3e      	ldr	r2, [pc, #248]	@ (80056c4 <HAL_I2C_MspInit+0x164>)
 80055cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055d2:	4b3c      	ldr	r3, [pc, #240]	@ (80056c4 <HAL_I2C_MspInit+0x164>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80055de:	4b3b      	ldr	r3, [pc, #236]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 80055e0:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <HAL_I2C_MspInit+0x170>)
 80055e2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80055e4:	4b39      	ldr	r3, [pc, #228]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055ea:	4b38      	ldr	r3, [pc, #224]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 80055ec:	2240      	movs	r2, #64	@ 0x40
 80055ee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f0:	4b36      	ldr	r3, [pc, #216]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055f6:	4b35      	ldr	r3, [pc, #212]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 80055f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055fe:	4b33      	ldr	r3, [pc, #204]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 8005600:	2200      	movs	r2, #0
 8005602:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005604:	4b31      	ldr	r3, [pc, #196]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 8005606:	2200      	movs	r2, #0
 8005608:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800560a:	4b30      	ldr	r3, [pc, #192]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 800560c:	2200      	movs	r2, #0
 800560e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005610:	4b2e      	ldr	r3, [pc, #184]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 8005612:	2200      	movs	r2, #0
 8005614:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005616:	4b2d      	ldr	r3, [pc, #180]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 8005618:	2200      	movs	r2, #0
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800561c:	482b      	ldr	r0, [pc, #172]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 800561e:	f001 f911 	bl	8006844 <HAL_DMA_Init>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005628:	f7ff feca 	bl	80053c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a27      	ldr	r2, [pc, #156]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 8005630:	635a      	str	r2, [r3, #52]	@ 0x34
 8005632:	4a26      	ldr	r2, [pc, #152]	@ (80056cc <HAL_I2C_MspInit+0x16c>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005638:	4b26      	ldr	r3, [pc, #152]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 800563a:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <HAL_I2C_MspInit+0x178>)
 800563c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800563e:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005640:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005644:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005646:	4b23      	ldr	r3, [pc, #140]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005648:	2200      	movs	r2, #0
 800564a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800564c:	4b21      	ldr	r3, [pc, #132]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005652:	4b20      	ldr	r3, [pc, #128]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005658:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800565a:	4b1e      	ldr	r3, [pc, #120]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 800565c:	2200      	movs	r2, #0
 800565e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005660:	4b1c      	ldr	r3, [pc, #112]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005662:	2200      	movs	r2, #0
 8005664:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005666:	4b1b      	ldr	r3, [pc, #108]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005668:	2200      	movs	r2, #0
 800566a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800566c:	4b19      	ldr	r3, [pc, #100]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 800566e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005672:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005674:	4b17      	ldr	r3, [pc, #92]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005676:	2200      	movs	r2, #0
 8005678:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800567a:	4816      	ldr	r0, [pc, #88]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 800567c:	f001 f8e2 	bl	8006844 <HAL_DMA_Init>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8005686:	f7ff fe9b 	bl	80053c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a11      	ldr	r2, [pc, #68]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005690:	4a10      	ldr	r2, [pc, #64]	@ (80056d4 <HAL_I2C_MspInit+0x174>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005696:	2200      	movs	r2, #0
 8005698:	2100      	movs	r1, #0
 800569a:	201f      	movs	r0, #31
 800569c:	f001 f89b 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80056a0:	201f      	movs	r0, #31
 80056a2:	f001 f8b4 	bl	800680e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	2020      	movs	r0, #32
 80056ac:	f001 f893 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80056b0:	2020      	movs	r0, #32
 80056b2:	f001 f8ac 	bl	800680e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80056b6:	bf00      	nop
 80056b8:	3728      	adds	r7, #40	@ 0x28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40005400 	.word	0x40005400
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40020400 	.word	0x40020400
 80056cc:	20000bb8 	.word	0x20000bb8
 80056d0:	40026028 	.word	0x40026028
 80056d4:	20000c18 	.word	0x20000c18
 80056d8:	40026010 	.word	0x40026010

080056dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <HAL_TIM_Base_MspInit+0x80>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d116      	bne.n	800571c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005760 <HAL_TIM_Base_MspInit+0x84>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005760 <HAL_TIM_Base_MspInit+0x84>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80056fe:	4b18      	ldr	r3, [pc, #96]	@ (8005760 <HAL_TIM_Base_MspInit+0x84>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	2019      	movs	r0, #25
 8005710:	f001 f861 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005714:	2019      	movs	r0, #25
 8005716:	f001 f87a 	bl	800680e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800571a:	e01a      	b.n	8005752 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a10      	ldr	r2, [pc, #64]	@ (8005764 <HAL_TIM_Base_MspInit+0x88>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d115      	bne.n	8005752 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <HAL_TIM_Base_MspInit+0x84>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	4a0c      	ldr	r2, [pc, #48]	@ (8005760 <HAL_TIM_Base_MspInit+0x84>)
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	6413      	str	r3, [r2, #64]	@ 0x40
 8005736:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <HAL_TIM_Base_MspInit+0x84>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2100      	movs	r1, #0
 8005746:	201d      	movs	r0, #29
 8005748:	f001 f845 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800574c:	201d      	movs	r0, #29
 800574e:	f001 f85e 	bl	800680e <HAL_NVIC_EnableIRQ>
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40023800 	.word	0x40023800
 8005764:	40000400 	.word	0x40000400

08005768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a12      	ldr	r2, [pc, #72]	@ (80057d0 <HAL_TIM_MspPostInit+0x68>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d11d      	bne.n	80057c6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <HAL_TIM_MspPostInit+0x6c>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	4a10      	ldr	r2, [pc, #64]	@ (80057d4 <HAL_TIM_MspPostInit+0x6c>)
 8005794:	f043 0302 	orr.w	r3, r3, #2
 8005798:	6313      	str	r3, [r2, #48]	@ 0x30
 800579a:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <HAL_TIM_MspPostInit+0x6c>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 80057a6:	2330      	movs	r3, #48	@ 0x30
 80057a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057aa:	2302      	movs	r3, #2
 80057ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057b6:	2302      	movs	r3, #2
 80057b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4619      	mov	r1, r3
 80057c0:	4805      	ldr	r0, [pc, #20]	@ (80057d8 <HAL_TIM_MspPostInit+0x70>)
 80057c2:	f001 fc5b 	bl	800707c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80057c6:	bf00      	nop
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40020400 	.word	0x40020400

080057dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005870 <HAL_UART_MspInit+0x94>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d133      	bne.n	8005866 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <HAL_UART_MspInit+0x98>)
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <HAL_UART_MspInit+0x98>)
 8005808:	f043 0310 	orr.w	r3, r3, #16
 800580c:	6453      	str	r3, [r2, #68]	@ 0x44
 800580e:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <HAL_UART_MspInit+0x98>)
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	4b15      	ldr	r3, [pc, #84]	@ (8005874 <HAL_UART_MspInit+0x98>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	4a14      	ldr	r2, [pc, #80]	@ (8005874 <HAL_UART_MspInit+0x98>)
 8005824:	f043 0302 	orr.w	r3, r3, #2
 8005828:	6313      	str	r3, [r2, #48]	@ 0x30
 800582a:	4b12      	ldr	r3, [pc, #72]	@ (8005874 <HAL_UART_MspInit+0x98>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8005836:	23c0      	movs	r3, #192	@ 0xc0
 8005838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583a:	2302      	movs	r3, #2
 800583c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005842:	2303      	movs	r3, #3
 8005844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005846:	2307      	movs	r3, #7
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800584a:	f107 0314 	add.w	r3, r7, #20
 800584e:	4619      	mov	r1, r3
 8005850:	4809      	ldr	r0, [pc, #36]	@ (8005878 <HAL_UART_MspInit+0x9c>)
 8005852:	f001 fc13 	bl	800707c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	2025      	movs	r0, #37	@ 0x25
 800585c:	f000 ffbb 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005860:	2025      	movs	r0, #37	@ 0x25
 8005862:	f000 ffd4 	bl	800680e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005866:	bf00      	nop
 8005868:	3728      	adds	r7, #40	@ 0x28
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40011000 	.word	0x40011000
 8005874:	40023800 	.word	0x40023800
 8005878:	40020400 	.word	0x40020400

0800587c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005880:	f007 f874 	bl	800c96c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <NMI_Handler+0x8>

08005888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <HardFault_Handler+0x4>

08005890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <MemManage_Handler+0x4>

08005898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800589c:	bf00      	nop
 800589e:	e7fd      	b.n	800589c <BusFault_Handler+0x4>

080058a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <UsageFault_Handler+0x4>

080058a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058d6:	f000 f943 	bl	8005b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80058e4:	4802      	ldr	r0, [pc, #8]	@ (80058f0 <DMA1_Stream0_IRQHandler+0x10>)
 80058e6:	f001 f945 	bl	8006b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000c18 	.word	0x20000c18

080058f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80058f8:	4802      	ldr	r0, [pc, #8]	@ (8005904 <DMA1_Stream1_IRQHandler+0x10>)
 80058fa:	f001 f93b 	bl	8006b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000bb8 	.word	0x20000bb8

08005908 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800590c:	4802      	ldr	r0, [pc, #8]	@ (8005918 <ADC_IRQHandler+0x10>)
 800590e:	f000 f9ae 	bl	8005c6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000abc 	.word	0x20000abc

0800591c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8005920:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005924:	f001 fd7a 	bl	800741c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}

0800592c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005930:	4802      	ldr	r0, [pc, #8]	@ (800593c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005932:	f007 f9f1 	bl	800cd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000c78 	.word	0x20000c78

08005940 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005944:	4802      	ldr	r0, [pc, #8]	@ (8005950 <TIM3_IRQHandler+0x10>)
 8005946:	f007 f9e7 	bl	800cd18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000cc0 	.word	0x20000cc0

08005954 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005958:	4802      	ldr	r0, [pc, #8]	@ (8005964 <I2C1_EV_IRQHandler+0x10>)
 800595a:	f002 ff17 	bl	800878c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800595e:	bf00      	nop
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000b64 	.word	0x20000b64

08005968 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800596c:	4802      	ldr	r0, [pc, #8]	@ (8005978 <I2C1_ER_IRQHandler+0x10>)
 800596e:	f003 f87e 	bl	8008a6e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005972:	bf00      	nop
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000b64 	.word	0x20000b64

0800597c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005980:	4802      	ldr	r0, [pc, #8]	@ (800598c <USART1_IRQHandler+0x10>)
 8005982:	f008 f83b 	bl	800d9fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000d08 	.word	0x20000d08

08005990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8005994:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005998:	f001 fd40 	bl	800741c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800599c:	bf00      	nop
 800599e:	bd80      	pop	{r7, pc}

080059a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80059a4:	4802      	ldr	r0, [pc, #8]	@ (80059b0 <DMA2_Stream0_IRQHandler+0x10>)
 80059a6:	f001 f8e5 	bl	8006b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000b04 	.word	0x20000b04

080059b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80059b8:	4802      	ldr	r0, [pc, #8]	@ (80059c4 <OTG_FS_IRQHandler+0x10>)
 80059ba:	f005 fa64 	bl	800ae86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20002014 	.word	0x20002014

080059c8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <_sbrk+0x5c>)
 80059e2:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <_sbrk+0x60>)
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059ec:	4b13      	ldr	r3, [pc, #76]	@ (8005a3c <_sbrk+0x64>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059f4:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <_sbrk+0x64>)
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <_sbrk+0x68>)
 80059f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059fa:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <_sbrk+0x64>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d207      	bcs.n	8005a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a08:	f00d f826 	bl	8012a58 <__errno>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	220c      	movs	r2, #12
 8005a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	e009      	b.n	8005a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a18:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <_sbrk+0x64>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <_sbrk+0x64>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a05      	ldr	r2, [pc, #20]	@ (8005a3c <_sbrk+0x64>)
 8005a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20020000 	.word	0x20020000
 8005a38:	00000400 	.word	0x00000400
 8005a3c:	20001728 	.word	0x20001728
 8005a40:	20002860 	.word	0x20002860

08005a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <SystemInit+0x20>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4e:	4a05      	ldr	r2, [pc, #20]	@ (8005a64 <SystemInit+0x20>)
 8005a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a6c:	f7ff ffea 	bl	8005a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a70:	480c      	ldr	r0, [pc, #48]	@ (8005aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a72:	490d      	ldr	r1, [pc, #52]	@ (8005aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a74:	4a0d      	ldr	r2, [pc, #52]	@ (8005aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a78:	e002      	b.n	8005a80 <LoopCopyDataInit>

08005a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7e:	3304      	adds	r3, #4

08005a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a84:	d3f9      	bcc.n	8005a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a86:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a88:	4c0a      	ldr	r4, [pc, #40]	@ (8005ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a8c:	e001      	b.n	8005a92 <LoopFillZerobss>

08005a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a90:	3204      	adds	r2, #4

08005a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a94:	d3fb      	bcc.n	8005a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a96:	f00c ffe5 	bl	8012a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a9a:	f7fe fcd5 	bl	8004448 <main>
  bx  lr    
 8005a9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8005aac:	08014c00 	.word	0x08014c00
  ldr r2, =_sbss
 8005ab0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8005ab4:	20002860 	.word	0x20002860

08005ab8 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ab8:	e7fe      	b.n	8005ab8 <DMA1_Stream2_IRQHandler>
	...

08005abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8005afc <HAL_Init+0x40>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8005afc <HAL_Init+0x40>)
 8005ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <HAL_Init+0x40>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <HAL_Init+0x40>)
 8005ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ad8:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <HAL_Init+0x40>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a07      	ldr	r2, [pc, #28]	@ (8005afc <HAL_Init+0x40>)
 8005ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ae4:	2003      	movs	r0, #3
 8005ae6:	f000 fe6b 	bl	80067c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005aea:	200f      	movs	r0, #15
 8005aec:	f000 f808 	bl	8005b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005af0:	f7ff fc6c 	bl	80053cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40023c00 	.word	0x40023c00

08005b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b08:	4b12      	ldr	r3, [pc, #72]	@ (8005b54 <HAL_InitTick+0x54>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <HAL_InitTick+0x58>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fe83 	bl	800682a <HAL_SYSTICK_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00e      	b.n	8005b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b0f      	cmp	r3, #15
 8005b32:	d80a      	bhi.n	8005b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b34:	2200      	movs	r2, #0
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	f000 fe4b 	bl	80067d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b40:	4a06      	ldr	r2, [pc, #24]	@ (8005b5c <HAL_InitTick+0x5c>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e000      	b.n	8005b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000010 	.word	0x20000010
 8005b58:	20000018 	.word	0x20000018
 8005b5c:	20000014 	.word	0x20000014

08005b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <HAL_IncTick+0x20>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <HAL_IncTick+0x24>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <HAL_IncTick+0x24>)
 8005b72:	6013      	str	r3, [r2, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000018 	.word	0x20000018
 8005b84:	2000172c 	.word	0x2000172c

08005b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	@ (8005b9c <HAL_GetTick+0x14>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	2000172c 	.word	0x2000172c

08005ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ba8:	f7ff ffee 	bl	8005b88 <HAL_GetTick>
 8005bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d005      	beq.n	8005bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bba:	4b0a      	ldr	r3, [pc, #40]	@ (8005be4 <HAL_Delay+0x44>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005bc6:	bf00      	nop
 8005bc8:	f7ff ffde 	bl	8005b88 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d8f7      	bhi.n	8005bc8 <HAL_Delay+0x28>
  {
  }
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000018 	.word	0x20000018

08005be8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e033      	b.n	8005c66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fc0e 	bl	8005428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d118      	bne.n	8005c58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c2e:	f023 0302 	bic.w	r3, r3, #2
 8005c32:	f043 0202 	orr.w	r2, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb68 	bl	8006310 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c56:	e001      	b.n	8005c5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d049      	beq.n	8005d38 <HAL_ADC_IRQHandler+0xca>
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d046      	beq.n	8005d38 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d105      	bne.n	8005cc2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d12b      	bne.n	8005d28 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d127      	bne.n	8005d28 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d119      	bne.n	8005d28 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0220 	bic.w	r2, r2, #32
 8005d02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d20:	f043 0201 	orr.w	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff f93f 	bl	8004fac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f06f 0212 	mvn.w	r2, #18
 8005d36:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d057      	beq.n	8005dfe <HAL_ADC_IRQHandler+0x190>
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d054      	beq.n	8005dfe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d139      	bne.n	8005dee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d12b      	bne.n	8005dee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d124      	bne.n	8005dee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d11d      	bne.n	8005dee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d119      	bne.n	8005dee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dc8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f043 0201 	orr.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fc0c 	bl	800660c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 020c 	mvn.w	r2, #12
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <HAL_ADC_IRQHandler+0x1d6>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d014      	beq.n	8005e44 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10d      	bne.n	8005e44 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f925 	bl	8006084 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0201 	mvn.w	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d015      	beq.n	8005e86 <HAL_ADC_IRQHandler+0x218>
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d012      	beq.n	8005e86 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e64:	f043 0202 	orr.w	r2, r3, #2
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0220 	mvn.w	r2, #32
 8005e74:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f90e 	bl	8006098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0220 	mvn.w	r2, #32
 8005e84:	601a      	str	r2, [r3, #0]
  }
}
 8005e86:	bf00      	nop
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_ADC_Start_DMA+0x1e>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0ce      	b.n	800604c <HAL_ADC_Start_DMA+0x1bc>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d018      	beq.n	8005ef6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8006054 <HAL_ADC_Start_DMA+0x1c4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5f      	ldr	r2, [pc, #380]	@ (8006058 <HAL_ADC_Start_DMA+0x1c8>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0c9a      	lsrs	r2, r3, #18
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005ee8:	e002      	b.n	8005ef0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f9      	bne.n	8005eea <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f04:	d107      	bne.n	8005f16 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f14:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f040 8086 	bne.w	8006032 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005f50:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f64:	d106      	bne.n	8005f74 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	f023 0206 	bic.w	r2, r3, #6
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f72:	e002      	b.n	8005f7a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f82:	4b36      	ldr	r3, [pc, #216]	@ (800605c <HAL_ADC_Start_DMA+0x1cc>)
 8005f84:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	4a35      	ldr	r2, [pc, #212]	@ (8006060 <HAL_ADC_Start_DMA+0x1d0>)
 8005f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f92:	4a34      	ldr	r2, [pc, #208]	@ (8006064 <HAL_ADC_Start_DMA+0x1d4>)
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	4a33      	ldr	r2, [pc, #204]	@ (8006068 <HAL_ADC_Start_DMA+0x1d8>)
 8005f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005fb6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fc6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	334c      	adds	r3, #76	@ 0x4c
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f000 fce2 	bl	80069a0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10f      	bne.n	8006008 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d129      	bne.n	800604a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006004:	609a      	str	r2, [r3, #8]
 8006006:	e020      	b.n	800604a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a17      	ldr	r2, [pc, #92]	@ (800606c <HAL_ADC_Start_DMA+0x1dc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d11b      	bne.n	800604a <HAL_ADC_Start_DMA+0x1ba>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d114      	bne.n	800604a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	e00b      	b.n	800604a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	f043 0210 	orr.w	r2, r3, #16
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006042:	f043 0201 	orr.w	r2, r3, #1
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000010 	.word	0x20000010
 8006058:	431bde83 	.word	0x431bde83
 800605c:	40012300 	.word	0x40012300
 8006060:	08006509 	.word	0x08006509
 8006064:	080065c3 	.word	0x080065c3
 8006068:	080065df 	.word	0x080065df
 800606c:	40012000 	.word	0x40012000

08006070 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x1c>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e113      	b.n	80062f0 <HAL_ADC_ConfigChannel+0x244>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d925      	bls.n	8006124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68d9      	ldr	r1, [r3, #12]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	4613      	mov	r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	3b1e      	subs	r3, #30
 80060ee:	2207      	movs	r2, #7
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	43da      	mvns	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	400a      	ands	r2, r1
 80060fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68d9      	ldr	r1, [r3, #12]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	4618      	mov	r0, r3
 8006110:	4603      	mov	r3, r0
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4403      	add	r3, r0
 8006116:	3b1e      	subs	r3, #30
 8006118:	409a      	lsls	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	e022      	b.n	800616a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6919      	ldr	r1, [r3, #16]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	4613      	mov	r3, r2
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	4413      	add	r3, r2
 8006138:	2207      	movs	r2, #7
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43da      	mvns	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	400a      	ands	r2, r1
 8006146:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6919      	ldr	r1, [r3, #16]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	4618      	mov	r0, r3
 800615a:	4603      	mov	r3, r0
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4403      	add	r3, r0
 8006160:	409a      	lsls	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b06      	cmp	r3, #6
 8006170:	d824      	bhi.n	80061bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	3b05      	subs	r3, #5
 8006184:	221f      	movs	r2, #31
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43da      	mvns	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	400a      	ands	r2, r1
 8006192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4618      	mov	r0, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	3b05      	subs	r3, #5
 80061ae:	fa00 f203 	lsl.w	r2, r0, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80061ba:	e04c      	b.n	8006256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	d824      	bhi.n	800620e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	3b23      	subs	r3, #35	@ 0x23
 80061d6:	221f      	movs	r2, #31
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43da      	mvns	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	400a      	ands	r2, r1
 80061e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4618      	mov	r0, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	3b23      	subs	r3, #35	@ 0x23
 8006200:	fa00 f203 	lsl.w	r2, r0, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	631a      	str	r2, [r3, #48]	@ 0x30
 800620c:	e023      	b.n	8006256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	3b41      	subs	r3, #65	@ 0x41
 8006220:	221f      	movs	r2, #31
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43da      	mvns	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	400a      	ands	r2, r1
 800622e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	4618      	mov	r0, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	3b41      	subs	r3, #65	@ 0x41
 800624a:	fa00 f203 	lsl.w	r2, r0, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006256:	4b29      	ldr	r3, [pc, #164]	@ (80062fc <HAL_ADC_ConfigChannel+0x250>)
 8006258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <HAL_ADC_ConfigChannel+0x254>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d10f      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x1d8>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b12      	cmp	r3, #18
 800626a:	d10b      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_ADC_ConfigChannel+0x254>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d12b      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x23a>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1c      	ldr	r2, [pc, #112]	@ (8006304 <HAL_ADC_ConfigChannel+0x258>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <HAL_ADC_ConfigChannel+0x1f4>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b11      	cmp	r3, #17
 800629e:	d122      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a11      	ldr	r2, [pc, #68]	@ (8006304 <HAL_ADC_ConfigChannel+0x258>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d111      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062c2:	4b11      	ldr	r3, [pc, #68]	@ (8006308 <HAL_ADC_ConfigChannel+0x25c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a11      	ldr	r2, [pc, #68]	@ (800630c <HAL_ADC_ConfigChannel+0x260>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	0c9a      	lsrs	r2, r3, #18
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80062d8:	e002      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3b01      	subs	r3, #1
 80062de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f9      	bne.n	80062da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	40012300 	.word	0x40012300
 8006300:	40012000 	.word	0x40012000
 8006304:	10000012 	.word	0x10000012
 8006308:	20000010 	.word	0x20000010
 800630c:	431bde83 	.word	0x431bde83

08006310 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006318:	4b79      	ldr	r3, [pc, #484]	@ (8006500 <ADC_Init+0x1f0>)
 800631a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6859      	ldr	r1, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	021a      	lsls	r2, r3, #8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6859      	ldr	r1, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800638a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6899      	ldr	r1, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a2:	4a58      	ldr	r2, [pc, #352]	@ (8006504 <ADC_Init+0x1f4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6899      	ldr	r1, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80063d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6899      	ldr	r1, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	e00f      	b.n	800640e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800640c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0202 	bic.w	r2, r2, #2
 800641c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6899      	ldr	r1, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7e1b      	ldrb	r3, [r3, #24]
 8006428:	005a      	lsls	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01b      	beq.n	8006474 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800644a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800645a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	3b01      	subs	r3, #1
 8006468:	035a      	lsls	r2, r3, #13
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
 8006472:	e007      	b.n	8006484 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	3b01      	subs	r3, #1
 80064a0:	051a      	lsls	r2, r3, #20
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80064b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6899      	ldr	r1, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064c6:	025a      	lsls	r2, r3, #9
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6899      	ldr	r1, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	029a      	lsls	r2, r3, #10
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	bf00      	nop
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40012300 	.word	0x40012300
 8006504:	0f000001 	.word	0x0f000001

08006508 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800651e:	2b00      	cmp	r3, #0
 8006520:	d13c      	bne.n	800659c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d12b      	bne.n	8006594 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006540:	2b00      	cmp	r3, #0
 8006542:	d127      	bne.n	8006594 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800654e:	2b00      	cmp	r3, #0
 8006550:	d006      	beq.n	8006560 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800655c:	2b00      	cmp	r3, #0
 800655e:	d119      	bne.n	8006594 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0220 	bic.w	r2, r2, #32
 800656e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	f043 0201 	orr.w	r2, r3, #1
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7fe fd09 	bl	8004fac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800659a:	e00e      	b.n	80065ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fd75 	bl	8006098 <HAL_ADC_ErrorCallback>
}
 80065ae:	e004      	b.n	80065ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff fd4d 	bl	8006070 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2240      	movs	r2, #64	@ 0x40
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f6:	f043 0204 	orr.w	r2, r3, #4
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff fd4a 	bl	8006098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006630:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <__NVIC_SetPriorityGrouping+0x44>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800663c:	4013      	ands	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800664c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006652:	4a04      	ldr	r2, [pc, #16]	@ (8006664 <__NVIC_SetPriorityGrouping+0x44>)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	60d3      	str	r3, [r2, #12]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <__NVIC_GetPriorityGrouping+0x18>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	f003 0307 	and.w	r3, r3, #7
}
 8006676:	4618      	mov	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000ed00 	.word	0xe000ed00

08006684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	db0b      	blt.n	80066ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	f003 021f 	and.w	r2, r3, #31
 800669c:	4907      	ldr	r1, [pc, #28]	@ (80066bc <__NVIC_EnableIRQ+0x38>)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2001      	movs	r0, #1
 80066a6:	fa00 f202 	lsl.w	r2, r0, r2
 80066aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	e000e100 	.word	0xe000e100

080066c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db0a      	blt.n	80066ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	490c      	ldr	r1, [pc, #48]	@ (800670c <__NVIC_SetPriority+0x4c>)
 80066da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	440b      	add	r3, r1
 80066e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066e8:	e00a      	b.n	8006700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4908      	ldr	r1, [pc, #32]	@ (8006710 <__NVIC_SetPriority+0x50>)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3b04      	subs	r3, #4
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	440b      	add	r3, r1
 80066fe:	761a      	strb	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000e100 	.word	0xe000e100
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006714:	b480      	push	{r7}
 8006716:	b089      	sub	sp, #36	@ 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f1c3 0307 	rsb	r3, r3, #7
 800672e:	2b04      	cmp	r3, #4
 8006730:	bf28      	it	cs
 8006732:	2304      	movcs	r3, #4
 8006734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3304      	adds	r3, #4
 800673a:	2b06      	cmp	r3, #6
 800673c:	d902      	bls.n	8006744 <NVIC_EncodePriority+0x30>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3b03      	subs	r3, #3
 8006742:	e000      	b.n	8006746 <NVIC_EncodePriority+0x32>
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43da      	mvns	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	401a      	ands	r2, r3
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800675c:	f04f 31ff 	mov.w	r1, #4294967295
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	43d9      	mvns	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	4313      	orrs	r3, r2
         );
}
 800676e:	4618      	mov	r0, r3
 8006770:	3724      	adds	r7, #36	@ 0x24
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3b01      	subs	r3, #1
 8006788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800678c:	d301      	bcc.n	8006792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800678e:	2301      	movs	r3, #1
 8006790:	e00f      	b.n	80067b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006792:	4a0a      	ldr	r2, [pc, #40]	@ (80067bc <SysTick_Config+0x40>)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3b01      	subs	r3, #1
 8006798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800679a:	210f      	movs	r1, #15
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	f7ff ff8e 	bl	80066c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067a4:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <SysTick_Config+0x40>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067aa:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <SysTick_Config+0x40>)
 80067ac:	2207      	movs	r2, #7
 80067ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	e000e010 	.word	0xe000e010

080067c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff29 	bl	8006620 <__NVIC_SetPriorityGrouping>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	4603      	mov	r3, r0
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
 80067e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067e8:	f7ff ff3e 	bl	8006668 <__NVIC_GetPriorityGrouping>
 80067ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	6978      	ldr	r0, [r7, #20]
 80067f4:	f7ff ff8e 	bl	8006714 <NVIC_EncodePriority>
 80067f8:	4602      	mov	r2, r0
 80067fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff ff5d 	bl	80066c0 <__NVIC_SetPriority>
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	4603      	mov	r3, r0
 8006816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ff31 	bl	8006684 <__NVIC_EnableIRQ>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff ffa2 	bl	800677c <SysTick_Config>
 8006838:	4603      	mov	r3, r0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006850:	f7ff f99a 	bl	8005b88 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e099      	b.n	8006994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006880:	e00f      	b.n	80068a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006882:	f7ff f981 	bl	8005b88 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b05      	cmp	r3, #5
 800688e:	d908      	bls.n	80068a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2203      	movs	r2, #3
 800689a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e078      	b.n	8006994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e8      	bne.n	8006882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4b38      	ldr	r3, [pc, #224]	@ (800699c <HAL_DMA_Init+0x158>)
 80068bc:	4013      	ands	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d107      	bne.n	800690c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006904:	4313      	orrs	r3, r2
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	2b04      	cmp	r3, #4
 8006934:	d117      	bne.n	8006966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb1b 	bl	8006f84 <DMA_CheckFifoParam>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2240      	movs	r2, #64	@ 0x40
 8006958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006962:	2301      	movs	r3, #1
 8006964:	e016      	b.n	8006994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fad2 	bl	8006f18 <DMA_CalcBaseAndBitshift>
 8006974:	4603      	mov	r3, r0
 8006976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697c:	223f      	movs	r2, #63	@ 0x3f
 800697e:	409a      	lsls	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	f010803f 	.word	0xf010803f

080069a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_DMA_Start_IT+0x26>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e040      	b.n	8006a48 <HAL_DMA_Start_IT+0xa8>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d12f      	bne.n	8006a3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2202      	movs	r2, #2
 80069de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fa64 	bl	8006ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f8:	223f      	movs	r2, #63	@ 0x3f
 80069fa:	409a      	lsls	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0216 	orr.w	r2, r2, #22
 8006a0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0208 	orr.w	r2, r2, #8
 8006a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e005      	b.n	8006a46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
 8006a44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a5e:	f7ff f893 	bl	8005b88 <HAL_GetTick>
 8006a62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d008      	beq.n	8006a82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2280      	movs	r2, #128	@ 0x80
 8006a74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e052      	b.n	8006b28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0216 	bic.w	r2, r2, #22
 8006a90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <HAL_DMA_Abort+0x62>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0208 	bic.w	r2, r2, #8
 8006ac0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ad2:	e013      	b.n	8006afc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ad4:	f7ff f858 	bl	8005b88 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	d90c      	bls.n	8006afc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2203      	movs	r2, #3
 8006aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e015      	b.n	8006b28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e4      	bne.n	8006ad4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0e:	223f      	movs	r2, #63	@ 0x3f
 8006b10:	409a      	lsls	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2280      	movs	r2, #128	@ 0x80
 8006b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e00c      	b.n	8006b68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2205      	movs	r2, #5
 8006b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b80:	4b8e      	ldr	r3, [pc, #568]	@ (8006dbc <HAL_DMA_IRQHandler+0x248>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a8e      	ldr	r2, [pc, #568]	@ (8006dc0 <HAL_DMA_IRQHandler+0x24c>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	0a9b      	lsrs	r3, r3, #10
 8006b8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01a      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0204 	bic.w	r2, r2, #4
 8006bc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bcc:	2208      	movs	r2, #8
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd8:	f043 0201 	orr.w	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be4:	2201      	movs	r2, #1
 8006be6:	409a      	lsls	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d012      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c02:	2201      	movs	r2, #1
 8006c04:	409a      	lsls	r2, r3
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0e:	f043 0202 	orr.w	r2, r3, #2
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	409a      	lsls	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d012      	beq.n	8006c4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c38:	2204      	movs	r2, #4
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c44:	f043 0204 	orr.w	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c50:	2210      	movs	r2, #16
 8006c52:	409a      	lsls	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d043      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d03c      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6e:	2210      	movs	r2, #16
 8006c70:	409a      	lsls	r2, r3
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d018      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d108      	bne.n	8006ca4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d024      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
 8006ca2:	e01f      	b.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01b      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
 8006cb4:	e016      	b.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d107      	bne.n	8006cd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0208 	bic.w	r2, r2, #8
 8006cd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce8:	2220      	movs	r2, #32
 8006cea:	409a      	lsls	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 808f 	beq.w	8006e14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8087 	beq.w	8006e14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	409a      	lsls	r2, r3
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d136      	bne.n	8006d8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0216 	bic.w	r2, r2, #22
 8006d2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <HAL_DMA_IRQHandler+0x1da>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0208 	bic.w	r2, r2, #8
 8006d5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d62:	223f      	movs	r2, #63	@ 0x3f
 8006d64:	409a      	lsls	r2, r3
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d07e      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
        }
        return;
 8006d8a:	e079      	b.n	8006e80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01d      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d031      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
 8006db8:	e02c      	b.n	8006e14 <HAL_DMA_IRQHandler+0x2a0>
 8006dba:	bf00      	nop
 8006dbc:	20000010 	.word	0x20000010
 8006dc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d023      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
 8006dd4:	e01e      	b.n	8006e14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0210 	bic.w	r2, r2, #16
 8006df2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d032      	beq.n	8006e82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d022      	beq.n	8006e6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2205      	movs	r2, #5
 8006e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d307      	bcc.n	8006e5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f2      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x2cc>
 8006e5a:	e000      	b.n	8006e5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	e000      	b.n	8006e82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e80:	bf00      	nop
    }
  }
}
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e96:	b2db      	uxtb	r3, r3
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d108      	bne.n	8006efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006efa:	e007      	b.n	8006f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	3b10      	subs	r3, #16
 8006f28:	4a14      	ldr	r2, [pc, #80]	@ (8006f7c <DMA_CalcBaseAndBitshift+0x64>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f32:	4a13      	ldr	r2, [pc, #76]	@ (8006f80 <DMA_CalcBaseAndBitshift+0x68>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d909      	bls.n	8006f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f4e:	f023 0303 	bic.w	r3, r3, #3
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f58:	e007      	b.n	8006f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	aaaaaaab 	.word	0xaaaaaaab
 8006f80:	08014b90 	.word	0x08014b90

08006f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11f      	bne.n	8006fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d856      	bhi.n	8007052 <DMA_CheckFifoParam+0xce>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <DMA_CheckFifoParam+0x28>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fbd 	.word	0x08006fbd
 8006fb0:	08006fcf 	.word	0x08006fcf
 8006fb4:	08006fbd 	.word	0x08006fbd
 8006fb8:	08007053 	.word	0x08007053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d046      	beq.n	8007056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fcc:	e043      	b.n	8007056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006fd6:	d140      	bne.n	800705a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fdc:	e03d      	b.n	800705a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe6:	d121      	bne.n	800702c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d837      	bhi.n	800705e <DMA_CheckFifoParam+0xda>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <DMA_CheckFifoParam+0x70>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	0800700b 	.word	0x0800700b
 8006ffc:	08007005 	.word	0x08007005
 8007000:	0800701d 	.word	0x0800701d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
      break;
 8007008:	e030      	b.n	800706c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d025      	beq.n	8007062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800701a:	e022      	b.n	8007062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007024:	d11f      	bne.n	8007066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800702a:	e01c      	b.n	8007066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d903      	bls.n	800703a <DMA_CheckFifoParam+0xb6>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d003      	beq.n	8007040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007038:	e018      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
      break;
 800703e:	e015      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	73fb      	strb	r3, [r7, #15]
      break;
 8007050:	e00b      	b.n	800706a <DMA_CheckFifoParam+0xe6>
      break;
 8007052:	bf00      	nop
 8007054:	e00a      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      break;
 8007056:	bf00      	nop
 8007058:	e008      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      break;
 800705a:	bf00      	nop
 800705c:	e006      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      break;
 800705e:	bf00      	nop
 8007060:	e004      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      break;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      break;   
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <DMA_CheckFifoParam+0xe8>
      break;
 800706a:	bf00      	nop
    }
  } 
  
  return status; 
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800707c:	b480      	push	{r7}
 800707e:	b089      	sub	sp, #36	@ 0x24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800708e:	2300      	movs	r3, #0
 8007090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	e159      	b.n	800734c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007098:	2201      	movs	r2, #1
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	fa02 f303 	lsl.w	r3, r2, r3
 80070a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	f040 8148 	bne.w	8007346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d005      	beq.n	80070ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d130      	bne.n	8007130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	2203      	movs	r2, #3
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4013      	ands	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007104:	2201      	movs	r2, #1
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	43db      	mvns	r3, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	091b      	lsrs	r3, r3, #4
 800711a:	f003 0201 	and.w	r2, r3, #1
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	4313      	orrs	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	2b03      	cmp	r3, #3
 800713a:	d017      	beq.n	800716c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	2203      	movs	r2, #3
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4313      	orrs	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d123      	bne.n	80071c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	08da      	lsrs	r2, r3, #3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3208      	adds	r2, #8
 8007180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	220f      	movs	r2, #15
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	43db      	mvns	r3, r3
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	4013      	ands	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	08da      	lsrs	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3208      	adds	r2, #8
 80071ba:	69b9      	ldr	r1, [r7, #24]
 80071bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	2203      	movs	r2, #3
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4013      	ands	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f003 0203 	and.w	r2, r3, #3
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a2 	beq.w	8007346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	4b57      	ldr	r3, [pc, #348]	@ (8007364 <HAL_GPIO_Init+0x2e8>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	4a56      	ldr	r2, [pc, #344]	@ (8007364 <HAL_GPIO_Init+0x2e8>)
 800720c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007210:	6453      	str	r3, [r2, #68]	@ 0x44
 8007212:	4b54      	ldr	r3, [pc, #336]	@ (8007364 <HAL_GPIO_Init+0x2e8>)
 8007214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800721e:	4a52      	ldr	r2, [pc, #328]	@ (8007368 <HAL_GPIO_Init+0x2ec>)
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	089b      	lsrs	r3, r3, #2
 8007224:	3302      	adds	r3, #2
 8007226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800722a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	220f      	movs	r2, #15
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	43db      	mvns	r3, r3
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	4013      	ands	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a49      	ldr	r2, [pc, #292]	@ (800736c <HAL_GPIO_Init+0x2f0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d019      	beq.n	800727e <HAL_GPIO_Init+0x202>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a48      	ldr	r2, [pc, #288]	@ (8007370 <HAL_GPIO_Init+0x2f4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <HAL_GPIO_Init+0x1fe>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a47      	ldr	r2, [pc, #284]	@ (8007374 <HAL_GPIO_Init+0x2f8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00d      	beq.n	8007276 <HAL_GPIO_Init+0x1fa>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a46      	ldr	r2, [pc, #280]	@ (8007378 <HAL_GPIO_Init+0x2fc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <HAL_GPIO_Init+0x1f6>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a45      	ldr	r2, [pc, #276]	@ (800737c <HAL_GPIO_Init+0x300>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d101      	bne.n	800726e <HAL_GPIO_Init+0x1f2>
 800726a:	2304      	movs	r3, #4
 800726c:	e008      	b.n	8007280 <HAL_GPIO_Init+0x204>
 800726e:	2307      	movs	r3, #7
 8007270:	e006      	b.n	8007280 <HAL_GPIO_Init+0x204>
 8007272:	2303      	movs	r3, #3
 8007274:	e004      	b.n	8007280 <HAL_GPIO_Init+0x204>
 8007276:	2302      	movs	r3, #2
 8007278:	e002      	b.n	8007280 <HAL_GPIO_Init+0x204>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_GPIO_Init+0x204>
 800727e:	2300      	movs	r3, #0
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	f002 0203 	and.w	r2, r2, #3
 8007286:	0092      	lsls	r2, r2, #2
 8007288:	4093      	lsls	r3, r2
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	4313      	orrs	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007290:	4935      	ldr	r1, [pc, #212]	@ (8007368 <HAL_GPIO_Init+0x2ec>)
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	089b      	lsrs	r3, r3, #2
 8007296:	3302      	adds	r3, #2
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800729e:	4b38      	ldr	r3, [pc, #224]	@ (8007380 <HAL_GPIO_Init+0x304>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	43db      	mvns	r3, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	4013      	ands	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007380 <HAL_GPIO_Init+0x304>)
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007380 <HAL_GPIO_Init+0x304>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	4013      	ands	r3, r2
 80072d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072ec:	4a24      	ldr	r2, [pc, #144]	@ (8007380 <HAL_GPIO_Init+0x304>)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072f2:	4b23      	ldr	r3, [pc, #140]	@ (8007380 <HAL_GPIO_Init+0x304>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	43db      	mvns	r3, r3
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	4013      	ands	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007316:	4a1a      	ldr	r2, [pc, #104]	@ (8007380 <HAL_GPIO_Init+0x304>)
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800731c:	4b18      	ldr	r3, [pc, #96]	@ (8007380 <HAL_GPIO_Init+0x304>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	43db      	mvns	r3, r3
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	4013      	ands	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007340:	4a0f      	ldr	r2, [pc, #60]	@ (8007380 <HAL_GPIO_Init+0x304>)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3301      	adds	r3, #1
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b0f      	cmp	r3, #15
 8007350:	f67f aea2 	bls.w	8007098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3724      	adds	r7, #36	@ 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40023800 	.word	0x40023800
 8007368:	40013800 	.word	0x40013800
 800736c:	40020000 	.word	0x40020000
 8007370:	40020400 	.word	0x40020400
 8007374:	40020800 	.word	0x40020800
 8007378:	40020c00 	.word	0x40020c00
 800737c:	40021000 	.word	0x40021000
 8007380:	40013c00 	.word	0x40013c00

08007384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	887b      	ldrh	r3, [r7, #2]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	e001      	b.n	80073a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	807b      	strh	r3, [r7, #2]
 80073c0:	4613      	mov	r3, r2
 80073c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073c4:	787b      	ldrb	r3, [r7, #1]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073ca:	887a      	ldrh	r2, [r7, #2]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073d0:	e003      	b.n	80073da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073d2:	887b      	ldrh	r3, [r7, #2]
 80073d4:	041a      	lsls	r2, r3, #16
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	619a      	str	r2, [r3, #24]
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073f8:	887a      	ldrh	r2, [r7, #2]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4013      	ands	r3, r2
 80073fe:	041a      	lsls	r2, r3, #16
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	43d9      	mvns	r1, r3
 8007404:	887b      	ldrh	r3, [r7, #2]
 8007406:	400b      	ands	r3, r1
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	619a      	str	r2, [r3, #24]
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007426:	4b08      	ldr	r3, [pc, #32]	@ (8007448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007428:	695a      	ldr	r2, [r3, #20]
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	4013      	ands	r3, r2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007432:	4a05      	ldr	r2, [pc, #20]	@ (8007448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd fdc6 	bl	8004fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40013c00 	.word	0x40013c00

0800744c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e12b      	b.n	80076b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fe f874 	bl	8005560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	@ 0x24
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800749e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074b0:	f005 fa34 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 80074b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4a81      	ldr	r2, [pc, #516]	@ (80076c0 <HAL_I2C_Init+0x274>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d807      	bhi.n	80074d0 <HAL_I2C_Init+0x84>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4a80      	ldr	r2, [pc, #512]	@ (80076c4 <HAL_I2C_Init+0x278>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	bf94      	ite	ls
 80074c8:	2301      	movls	r3, #1
 80074ca:	2300      	movhi	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	e006      	b.n	80074de <HAL_I2C_Init+0x92>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a7d      	ldr	r2, [pc, #500]	@ (80076c8 <HAL_I2C_Init+0x27c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	bf94      	ite	ls
 80074d8:	2301      	movls	r3, #1
 80074da:	2300      	movhi	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e0e7      	b.n	80076b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a78      	ldr	r2, [pc, #480]	@ (80076cc <HAL_I2C_Init+0x280>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	0c9b      	lsrs	r3, r3, #18
 80074f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a6a      	ldr	r2, [pc, #424]	@ (80076c0 <HAL_I2C_Init+0x274>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d802      	bhi.n	8007520 <HAL_I2C_Init+0xd4>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	3301      	adds	r3, #1
 800751e:	e009      	b.n	8007534 <HAL_I2C_Init+0xe8>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007526:	fb02 f303 	mul.w	r3, r2, r3
 800752a:	4a69      	ldr	r2, [pc, #420]	@ (80076d0 <HAL_I2C_Init+0x284>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	099b      	lsrs	r3, r3, #6
 8007532:	3301      	adds	r3, #1
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	430b      	orrs	r3, r1
 800753a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007546:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	495c      	ldr	r1, [pc, #368]	@ (80076c0 <HAL_I2C_Init+0x274>)
 8007550:	428b      	cmp	r3, r1
 8007552:	d819      	bhi.n	8007588 <HAL_I2C_Init+0x13c>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1e59      	subs	r1, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007568:	400b      	ands	r3, r1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <HAL_I2C_Init+0x138>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1e59      	subs	r1, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	fbb1 f3f3 	udiv	r3, r1, r3
 800757c:	3301      	adds	r3, #1
 800757e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007582:	e051      	b.n	8007628 <HAL_I2C_Init+0x1dc>
 8007584:	2304      	movs	r3, #4
 8007586:	e04f      	b.n	8007628 <HAL_I2C_Init+0x1dc>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d111      	bne.n	80075b4 <HAL_I2C_Init+0x168>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	1e58      	subs	r0, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	440b      	add	r3, r1
 800759e:	fbb0 f3f3 	udiv	r3, r0, r3
 80075a2:	3301      	adds	r3, #1
 80075a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e012      	b.n	80075da <HAL_I2C_Init+0x18e>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	1e58      	subs	r0, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	0099      	lsls	r1, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80075ca:	3301      	adds	r3, #1
 80075cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Init+0x196>
 80075de:	2301      	movs	r3, #1
 80075e0:	e022      	b.n	8007628 <HAL_I2C_Init+0x1dc>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10e      	bne.n	8007608 <HAL_I2C_Init+0x1bc>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1e58      	subs	r0, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6859      	ldr	r1, [r3, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	440b      	add	r3, r1
 80075f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80075fc:	3301      	adds	r3, #1
 80075fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007606:	e00f      	b.n	8007628 <HAL_I2C_Init+0x1dc>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1e58      	subs	r0, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	0099      	lsls	r1, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	fbb0 f3f3 	udiv	r3, r0, r3
 800761e:	3301      	adds	r3, #1
 8007620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	6809      	ldr	r1, [r1, #0]
 800762c:	4313      	orrs	r3, r2
 800762e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007656:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6911      	ldr	r1, [r2, #16]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68d2      	ldr	r2, [r2, #12]
 8007662:	4311      	orrs	r1, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6812      	ldr	r2, [r2, #0]
 8007668:	430b      	orrs	r3, r1
 800766a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695a      	ldr	r2, [r3, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	000186a0 	.word	0x000186a0
 80076c4:	001e847f 	.word	0x001e847f
 80076c8:	003d08ff 	.word	0x003d08ff
 80076cc:	431bde83 	.word	0x431bde83
 80076d0:	10624dd3 	.word	0x10624dd3

080076d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e6:	2b80      	cmp	r3, #128	@ 0x80
 80076e8:	d103      	bne.n	80076f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	611a      	str	r2, [r3, #16]
  }
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	461a      	mov	r2, r3
 800770c:	460b      	mov	r3, r1
 800770e:	817b      	strh	r3, [r7, #10]
 8007710:	4613      	mov	r3, r2
 8007712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007714:	f7fe fa38 	bl	8005b88 <HAL_GetTick>
 8007718:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b20      	cmp	r3, #32
 8007724:	f040 80e0 	bne.w	80078e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2319      	movs	r3, #25
 800772e:	2201      	movs	r2, #1
 8007730:	4970      	ldr	r1, [pc, #448]	@ (80078f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f002 ffe0 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800773e:	2302      	movs	r3, #2
 8007740:	e0d3      	b.n	80078ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_I2C_Master_Transmit+0x50>
 800774c:	2302      	movs	r3, #2
 800774e:	e0cc      	b.n	80078ea <HAL_I2C_Master_Transmit+0x1ea>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d007      	beq.n	8007776 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0201 	orr.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2221      	movs	r2, #33	@ 0x21
 800778a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2210      	movs	r2, #16
 8007792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	893a      	ldrh	r2, [r7, #8]
 80077a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a50      	ldr	r2, [pc, #320]	@ (80078f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80077b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077b8:	8979      	ldrh	r1, [r7, #10]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f002 fbd6 	bl	8009f70 <I2C_MasterRequestWrite>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e08d      	b.n	80078ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80077e4:	e066      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	6a39      	ldr	r1, [r7, #32]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f003 f89e 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00d      	beq.n	8007812 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d107      	bne.n	800780e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800780c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e06b      	b.n	80078ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b04      	cmp	r3, #4
 800784e:	d11b      	bne.n	8007888 <HAL_I2C_Master_Transmit+0x188>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007854:	2b00      	cmp	r3, #0
 8007856:	d017      	beq.n	8007888 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785c:	781a      	ldrb	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	6a39      	ldr	r1, [r7, #32]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f003 f895 	bl	800a9bc <I2C_WaitOnBTFFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	2b04      	cmp	r3, #4
 800789e:	d107      	bne.n	80078b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e01a      	b.n	80078ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d194      	bne.n	80077e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	00100002 	.word	0x00100002
 80078f8:	ffff0000 	.word	0xffff0000

080078fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af02      	add	r7, sp, #8
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	461a      	mov	r2, r3
 800790a:	4603      	mov	r3, r0
 800790c:	817b      	strh	r3, [r7, #10]
 800790e:	460b      	mov	r3, r1
 8007910:	813b      	strh	r3, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007916:	f7fe f937 	bl	8005b88 <HAL_GetTick>
 800791a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b20      	cmp	r3, #32
 8007926:	f040 80d9 	bne.w	8007adc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	2319      	movs	r3, #25
 8007930:	2201      	movs	r2, #1
 8007932:	496d      	ldr	r1, [pc, #436]	@ (8007ae8 <HAL_I2C_Mem_Write+0x1ec>)
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f002 fedf 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
 8007942:	e0cc      	b.n	8007ade <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_I2C_Mem_Write+0x56>
 800794e:	2302      	movs	r3, #2
 8007950:	e0c5      	b.n	8007ade <HAL_I2C_Mem_Write+0x1e2>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d007      	beq.n	8007978 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007986:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2221      	movs	r2, #33	@ 0x21
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2240      	movs	r2, #64	@ 0x40
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a3a      	ldr	r2, [r7, #32]
 80079a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4a4d      	ldr	r2, [pc, #308]	@ (8007aec <HAL_I2C_Mem_Write+0x1f0>)
 80079b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079ba:	88f8      	ldrh	r0, [r7, #6]
 80079bc:	893a      	ldrh	r2, [r7, #8]
 80079be:	8979      	ldrh	r1, [r7, #10]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	4603      	mov	r3, r0
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f002 fb52 	bl	800a074 <I2C_RequestMemoryWrite>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d052      	beq.n	8007a7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e081      	b.n	8007ade <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f002 ffa4 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d107      	bne.n	8007a02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e06b      	b.n	8007ade <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0a:	781a      	ldrb	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d11b      	bne.n	8007a7c <HAL_I2C_Mem_Write+0x180>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d017      	beq.n	8007a7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1aa      	bne.n	80079da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f002 ff97 	bl	800a9bc <I2C_WaitOnBTFFlagUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00d      	beq.n	8007ab0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d107      	bne.n	8007aac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aaa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e016      	b.n	8007ade <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	00100002 	.word	0x00100002
 8007aec:	ffff0000 	.word	0xffff0000

08007af0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08c      	sub	sp, #48	@ 0x30
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	817b      	strh	r3, [r7, #10]
 8007b02:	460b      	mov	r3, r1
 8007b04:	813b      	strh	r3, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b0a:	f7fe f83d 	bl	8005b88 <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	f040 8214 	bne.w	8007f46 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2319      	movs	r3, #25
 8007b24:	2201      	movs	r2, #1
 8007b26:	497b      	ldr	r1, [pc, #492]	@ (8007d14 <HAL_I2C_Mem_Read+0x224>)
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f002 fde5 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b34:	2302      	movs	r3, #2
 8007b36:	e207      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_I2C_Mem_Read+0x56>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e200      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d007      	beq.n	8007b6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2222      	movs	r2, #34	@ 0x22
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2240      	movs	r2, #64	@ 0x40
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4a5b      	ldr	r2, [pc, #364]	@ (8007d18 <HAL_I2C_Mem_Read+0x228>)
 8007bac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bae:	88f8      	ldrh	r0, [r7, #6]
 8007bb0:	893a      	ldrh	r2, [r7, #8]
 8007bb2:	8979      	ldrh	r1, [r7, #10]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f002 faee 	bl	800a1a0 <I2C_RequestMemoryRead>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e1bc      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d113      	bne.n	8007bfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	623b      	str	r3, [r7, #32]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e190      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d11b      	bne.n	8007c3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e170      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d11b      	bne.n	8007c7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c66:	2300      	movs	r3, #0
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	e150      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c94:	e144      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	f200 80f1 	bhi.w	8007e82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d123      	bne.n	8007cf0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007caa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f002 feff 	bl	800aab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e145      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007cee:	e117      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d14e      	bne.n	8007d96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4906      	ldr	r1, [pc, #24]	@ (8007d1c <HAL_I2C_Mem_Read+0x22c>)
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f002 fcf8 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e11a      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
 8007d12:	bf00      	nop
 8007d14:	00100002 	.word	0x00100002
 8007d18:	ffff0000 	.word	0xffff0000
 8007d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d94:	e0c4      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	496c      	ldr	r1, [pc, #432]	@ (8007f50 <HAL_I2C_Mem_Read+0x460>)
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f002 fca9 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0cb      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4955      	ldr	r1, [pc, #340]	@ (8007f50 <HAL_I2C_Mem_Read+0x460>)
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f002 fc7b 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e09d      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e80:	e04e      	b.n	8007f20 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f002 fe12 	bl	800aab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e058      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d124      	bne.n	8007f20 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d107      	bne.n	8007eee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f aeb6 	bne.w	8007c96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	e000      	b.n	8007f48 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007f46:	2302      	movs	r3, #2
  }
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3728      	adds	r7, #40	@ 0x28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	00010004 	.word	0x00010004

08007f54 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	@ 0x28
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	817b      	strh	r3, [r7, #10]
 8007f66:	460b      	mov	r3, r1
 8007f68:	813b      	strh	r3, [r7, #8]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f72:	f7fd fe09 	bl	8005b88 <HAL_GetTick>
 8007f76:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	f040 8136 	bne.w	80081f2 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f86:	4b9d      	ldr	r3, [pc, #628]	@ (80081fc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	08db      	lsrs	r3, r3, #3
 8007f8c:	4a9c      	ldr	r2, [pc, #624]	@ (8008200 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8007f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f92:	0a1a      	lsrs	r2, r3, #8
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009a      	lsls	r2, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d112      	bne.n	8007fd2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc6:	f043 0220 	orr.w	r2, r3, #32
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e110      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d0df      	beq.n	8007fa0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_I2C_Mem_Write_DMA+0x9a>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e102      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b01      	cmp	r3, #1
 8008002:	d007      	beq.n	8008014 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2221      	movs	r2, #33	@ 0x21
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2240      	movs	r2, #64	@ 0x40
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800803e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a6c      	ldr	r2, [pc, #432]	@ (8008204 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8008054:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008056:	897a      	ldrh	r2, [r7, #10]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800805c:	893a      	ldrh	r2, [r7, #8]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 80a9 	beq.w	80081ca <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807c:	2b00      	cmp	r3, #0
 800807e:	d02a      	beq.n	80080d6 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008084:	4a60      	ldr	r2, [pc, #384]	@ (8008208 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8008086:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808c:	4a5f      	ldr	r2, [pc, #380]	@ (800820c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800808e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008094:	2200      	movs	r2, #0
 8008096:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800809c:	2200      	movs	r2, #0
 800809e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a4:	2200      	movs	r2, #0
 80080a6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ac:	2200      	movs	r2, #0
 80080ae:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b8:	4619      	mov	r1, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3310      	adds	r3, #16
 80080c0:	461a      	mov	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c6:	f7fe fc6b 	bl	80069a0 <HAL_DMA_Start_IT>
 80080ca:	4603      	mov	r3, r0
 80080cc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80080ce:	7efb      	ldrb	r3, [r7, #27]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d166      	bne.n	80081a2 <HAL_I2C_Mem_Write_DMA+0x24e>
 80080d4:	e013      	b.n	80080fe <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e07a      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80080fe:	88f8      	ldrh	r0, [r7, #6]
 8008100:	893a      	ldrh	r2, [r7, #8]
 8008102:	8979      	ldrh	r1, [r7, #10]
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	2323      	movs	r3, #35	@ 0x23
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4603      	mov	r3, r0
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 ffb0 	bl	800a074 <I2C_RequestMemoryWrite>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d022      	beq.n	8008160 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe fd06 	bl	8006b30 <HAL_DMA_Abort_IT>
 8008124:	4603      	mov	r3, r0
 8008126:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812c:	2200      	movs	r2, #0
 800812e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800813e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e049      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800818c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800819c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	e028      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b6:	f043 0210 	orr.w	r2, r3, #16
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e014      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
  }
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000010 	.word	0x20000010
 8008200:	14f8b589 	.word	0x14f8b589
 8008204:	ffff0000 	.word	0xffff0000
 8008208:	0800a371 	.word	0x0800a371
 800820c:	0800a52f 	.word	0x0800a52f

08008210 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08c      	sub	sp, #48	@ 0x30
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	4608      	mov	r0, r1
 800821a:	4611      	mov	r1, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4603      	mov	r3, r0
 8008220:	817b      	strh	r3, [r7, #10]
 8008222:	460b      	mov	r3, r1
 8008224:	813b      	strh	r3, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800822a:	f7fd fcad 	bl	8005b88 <HAL_GetTick>
 800822e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b20      	cmp	r3, #32
 800823e:	f040 8172 	bne.w	8008526 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008242:	4b93      	ldr	r3, [pc, #588]	@ (8008490 <HAL_I2C_Mem_Read_DMA+0x280>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	08db      	lsrs	r3, r3, #3
 8008248:	4a92      	ldr	r2, [pc, #584]	@ (8008494 <HAL_I2C_Mem_Read_DMA+0x284>)
 800824a:	fba2 2303 	umull	r2, r3, r2, r3
 800824e:	0a1a      	lsrs	r2, r3, #8
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009a      	lsls	r2, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	3b01      	subs	r3, #1
 8008260:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d112      	bne.n	800828e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008282:	f043 0220 	orr.w	r2, r3, #32
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800828a:	2302      	movs	r3, #2
 800828c:	e14c      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b02      	cmp	r3, #2
 800829a:	d0df      	beq.n	800825c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_I2C_Mem_Read_DMA+0x9a>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e13e      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d007      	beq.n	80082d0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2222      	movs	r2, #34	@ 0x22
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2240      	movs	r2, #64	@ 0x40
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4a62      	ldr	r2, [pc, #392]	@ (8008498 <HAL_I2C_Mem_Read_DMA+0x288>)
 8008310:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008312:	897a      	ldrh	r2, [r7, #10]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8008318:	893a      	ldrh	r2, [r7, #8]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 80cc 	beq.w	80084cc <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	2b00      	cmp	r3, #0
 800833a:	d02d      	beq.n	8008398 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	4a56      	ldr	r2, [pc, #344]	@ (800849c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8008342:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	4a55      	ldr	r2, [pc, #340]	@ (80084a0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800834a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	2200      	movs	r2, #0
 8008352:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008358:	2200      	movs	r2, #0
 800835a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008360:	2200      	movs	r2, #0
 8008362:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	2200      	movs	r2, #0
 800836a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3310      	adds	r3, #16
 8008376:	4619      	mov	r1, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837c:	461a      	mov	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008382:	f7fe fb0d 	bl	80069a0 <HAL_DMA_Start_IT>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800838c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 8087 	bne.w	80084a4 <HAL_I2C_Mem_Read_DMA+0x294>
 8008396:	e013      	b.n	80083c0 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e0b3      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80083c0:	88f8      	ldrh	r0, [r7, #6]
 80083c2:	893a      	ldrh	r2, [r7, #8]
 80083c4:	8979      	ldrh	r1, [r7, #10]
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	2323      	movs	r3, #35	@ 0x23
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4603      	mov	r3, r0
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f001 fee5 	bl	800a1a0 <I2C_RequestMemoryRead>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d023      	beq.n	8008424 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fba5 	bl	8006b30 <HAL_DMA_Abort_IT>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	2200      	movs	r2, #0
 80083f2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008402:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0201 	bic.w	r2, r2, #1
 800841e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e081      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008428:	2b01      	cmp	r3, #1
 800842a:	d108      	bne.n	800843e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	e007      	b.n	800844e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800844c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800847a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800848a:	605a      	str	r2, [r3, #4]
 800848c:	e049      	b.n	8008522 <HAL_I2C_Mem_Read_DMA+0x312>
 800848e:	bf00      	nop
 8008490:	20000010 	.word	0x20000010
 8008494:	14f8b589 	.word	0x14f8b589
 8008498:	ffff0000 	.word	0xffff0000
 800849c:	0800a371 	.word	0x0800a371
 80084a0:	0800a52f 	.word	0x0800a52f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b8:	f043 0210 	orr.w	r2, r3, #16
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e02d      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80084cc:	88f8      	ldrh	r0, [r7, #6]
 80084ce:	893a      	ldrh	r2, [r7, #8]
 80084d0:	8979      	ldrh	r1, [r7, #10]
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	2323      	movs	r3, #35	@ 0x23
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4603      	mov	r3, r0
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f001 fe5f 	bl	800a1a0 <I2C_RequestMemoryRead>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e01d      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008510:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	e000      	b.n	8008528 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8008526:	2302      	movs	r3, #2
  }
}
 8008528:	4618      	mov	r0, r3
 800852a:	3728      	adds	r7, #40	@ 0x28
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	@ 0x28
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	460b      	mov	r3, r1
 800853e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008540:	f7fd fb22 	bl	8005b88 <HAL_GetTick>
 8008544:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b20      	cmp	r3, #32
 8008554:	f040 8111 	bne.w	800877a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2319      	movs	r3, #25
 800855e:	2201      	movs	r2, #1
 8008560:	4988      	ldr	r1, [pc, #544]	@ (8008784 <HAL_I2C_IsDeviceReady+0x254>)
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f002 f8c8 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800856e:	2302      	movs	r3, #2
 8008570:	e104      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_I2C_IsDeviceReady+0x50>
 800857c:	2302      	movs	r3, #2
 800857e:	e0fd      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b01      	cmp	r3, #1
 8008594:	d007      	beq.n	80085a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0201 	orr.w	r2, r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2224      	movs	r2, #36	@ 0x24
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4a70      	ldr	r2, [pc, #448]	@ (8008788 <HAL_I2C_IsDeviceReady+0x258>)
 80085c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f002 f886 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008600:	d103      	bne.n	800860a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008608:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e0b6      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800860e:	897b      	ldrh	r3, [r7, #10]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800861c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800861e:	f7fd fab3 	bl	8005b88 <HAL_GetTick>
 8008622:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b02      	cmp	r3, #2
 8008630:	bf0c      	ite	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	2300      	movne	r3, #0
 8008636:	b2db      	uxtb	r3, r3
 8008638:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008652:	e025      	b.n	80086a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008654:	f7fd fa98 	bl	8005b88 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d302      	bcc.n	800866a <HAL_I2C_IsDeviceReady+0x13a>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d103      	bne.n	8008672 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	22a0      	movs	r2, #160	@ 0xa0
 800866e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b02      	cmp	r3, #2
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008696:	bf0c      	ite	eq
 8008698:	2301      	moveq	r3, #1
 800869a:	2300      	movne	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80086aa:	d005      	beq.n	80086b8 <HAL_I2C_IsDeviceReady+0x188>
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d102      	bne.n	80086b8 <HAL_I2C_IsDeviceReady+0x188>
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0cd      	beq.n	8008654 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d129      	bne.n	8008722 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086de:	2300      	movs	r3, #0
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	613b      	str	r3, [r7, #16]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2319      	movs	r3, #25
 80086fa:	2201      	movs	r2, #1
 80086fc:	4921      	ldr	r1, [pc, #132]	@ (8008784 <HAL_I2C_IsDeviceReady+0x254>)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f001 fffa 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e036      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e02c      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008730:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800873a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2319      	movs	r3, #25
 8008742:	2201      	movs	r2, #1
 8008744:	490f      	ldr	r1, [pc, #60]	@ (8008784 <HAL_I2C_IsDeviceReady+0x254>)
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 ffd6 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e012      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	3301      	adds	r3, #1
 800875a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	f4ff af32 	bcc.w	80085ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	00100002 	.word	0x00100002
 8008788:	ffff0000 	.word	0xffff0000

0800878c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d003      	beq.n	80087c4 <HAL_I2C_EV_IRQHandler+0x38>
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b40      	cmp	r3, #64	@ 0x40
 80087c0:	f040 80c1 	bne.w	8008946 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10d      	bne.n	80087fa <HAL_I2C_EV_IRQHandler+0x6e>
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80087e4:	d003      	beq.n	80087ee <HAL_I2C_EV_IRQHandler+0x62>
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80087ec:	d101      	bne.n	80087f2 <HAL_I2C_EV_IRQHandler+0x66>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <HAL_I2C_EV_IRQHandler+0x68>
 80087f2:	2300      	movs	r3, #0
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f000 8132 	beq.w	8008a5e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00c      	beq.n	800881e <HAL_I2C_EV_IRQHandler+0x92>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	0a5b      	lsrs	r3, r3, #9
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f002 f9d9 	bl	800abc8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fd8b 	bl	8009332 <I2C_Master_SB>
 800881c:	e092      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	08db      	lsrs	r3, r3, #3
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <HAL_I2C_EV_IRQHandler+0xb2>
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	0a5b      	lsrs	r3, r3, #9
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fe01 	bl	800943e <I2C_Master_ADD10>
 800883c:	e082      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <HAL_I2C_EV_IRQHandler+0xd2>
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	0a5b      	lsrs	r3, r3, #9
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fe1b 	bl	8009492 <I2C_Master_ADDR>
 800885c:	e072      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	089b      	lsrs	r3, r3, #2
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d03b      	beq.n	80088e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008878:	f000 80f3 	beq.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	09db      	lsrs	r3, r3, #7
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00f      	beq.n	80088a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	0a9b      	lsrs	r3, r3, #10
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d009      	beq.n	80088a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	089b      	lsrs	r3, r3, #2
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d103      	bne.n	80088a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f9df 	bl	8008c64 <I2C_MasterTransmit_TXE>
 80088a6:	e04d      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80d6 	beq.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	0a5b      	lsrs	r3, r3, #9
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80cf 	beq.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b21      	cmp	r3, #33	@ 0x21
 80088c8:	d103      	bne.n	80088d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa66 	bl	8008d9c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088d0:	e0c7      	b.n	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	2b40      	cmp	r3, #64	@ 0x40
 80088d6:	f040 80c4 	bne.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fad4 	bl	8008e88 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088e0:	e0bf      	b.n	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f0:	f000 80b7 	beq.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	099b      	lsrs	r3, r3, #6
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00f      	beq.n	8008920 <HAL_I2C_EV_IRQHandler+0x194>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	0a9b      	lsrs	r3, r3, #10
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <HAL_I2C_EV_IRQHandler+0x194>
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	089b      	lsrs	r3, r3, #2
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d103      	bne.n	8008920 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb4d 	bl	8008fb8 <I2C_MasterReceive_RXNE>
 800891e:	e011      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	089b      	lsrs	r3, r3, #2
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 809a 	beq.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	0a5b      	lsrs	r3, r3, #9
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8093 	beq.w	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc03 	bl	8009148 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008942:	e08e      	b.n	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008944:	e08d      	b.n	8008a62 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	e007      	b.n	8008968 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d012      	beq.n	800899a <HAL_I2C_EV_IRQHandler+0x20e>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	0a5b      	lsrs	r3, r3, #9
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00c      	beq.n	800899a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 ffcc 	bl	8009930 <I2C_Slave_ADDR>
 8008998:	e066      	b.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <HAL_I2C_EV_IRQHandler+0x22e>
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	0a5b      	lsrs	r3, r3, #9
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 f806 	bl	80099c4 <I2C_Slave_STOPF>
 80089b8:	e056      	b.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b21      	cmp	r3, #33	@ 0x21
 80089be:	d002      	beq.n	80089c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b29      	cmp	r3, #41	@ 0x29
 80089c4:	d125      	bne.n	8008a12 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	09db      	lsrs	r3, r3, #7
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00f      	beq.n	80089f2 <HAL_I2C_EV_IRQHandler+0x266>
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	0a9b      	lsrs	r3, r3, #10
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <HAL_I2C_EV_IRQHandler+0x266>
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	089b      	lsrs	r3, r3, #2
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fee2 	bl	80097b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089f0:	e039      	b.n	8008a66 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	089b      	lsrs	r3, r3, #2
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d033      	beq.n	8008a66 <HAL_I2C_EV_IRQHandler+0x2da>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	0a5b      	lsrs	r3, r3, #9
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d02d      	beq.n	8008a66 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 ff0f 	bl	800982e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a10:	e029      	b.n	8008a66 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	099b      	lsrs	r3, r3, #6
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00f      	beq.n	8008a3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	0a9b      	lsrs	r3, r3, #10
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 ff1a 	bl	8009870 <I2C_SlaveReceive_RXNE>
 8008a3c:	e014      	b.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	089b      	lsrs	r3, r3, #2
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	0a5b      	lsrs	r3, r3, #9
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d008      	beq.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 ff48 	bl	80098ec <I2C_SlaveReceive_BTF>
 8008a5c:	e004      	b.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008a5e:	bf00      	nop
 8008a60:	e002      	b.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a62:	bf00      	nop
 8008a64:	e000      	b.n	8008a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a66:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b08a      	sub	sp, #40	@ 0x28
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a90:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	0a1b      	lsrs	r3, r3, #8
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00e      	beq.n	8008abc <HAL_I2C_ER_IRQHandler+0x4e>
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d008      	beq.n	8008abc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008aba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	0a5b      	lsrs	r3, r3, #9
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_I2C_ER_IRQHandler+0x78>
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	f043 0302 	orr.w	r3, r3, #2
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008ae4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	0a9b      	lsrs	r3, r3, #10
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d03f      	beq.n	8008b72 <HAL_I2C_ER_IRQHandler+0x104>
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d039      	beq.n	8008b72 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008afe:	7efb      	ldrb	r3, [r7, #27]
 8008b00:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b10:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b16:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008b18:	7ebb      	ldrb	r3, [r7, #26]
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	d112      	bne.n	8008b44 <HAL_I2C_ER_IRQHandler+0xd6>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10f      	bne.n	8008b44 <HAL_I2C_ER_IRQHandler+0xd6>
 8008b24:	7cfb      	ldrb	r3, [r7, #19]
 8008b26:	2b21      	cmp	r3, #33	@ 0x21
 8008b28:	d008      	beq.n	8008b3c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008b2a:	7cfb      	ldrb	r3, [r7, #19]
 8008b2c:	2b29      	cmp	r3, #41	@ 0x29
 8008b2e:	d005      	beq.n	8008b3c <HAL_I2C_ER_IRQHandler+0xce>
 8008b30:	7cfb      	ldrb	r3, [r7, #19]
 8008b32:	2b28      	cmp	r3, #40	@ 0x28
 8008b34:	d106      	bne.n	8008b44 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b21      	cmp	r3, #33	@ 0x21
 8008b3a:	d103      	bne.n	8008b44 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f871 	bl	8009c24 <I2C_Slave_AF>
 8008b42:	e016      	b.n	8008b72 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b4c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	f043 0304 	orr.w	r3, r3, #4
 8008b54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b56:	7efb      	ldrb	r3, [r7, #27]
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d002      	beq.n	8008b62 <HAL_I2C_ER_IRQHandler+0xf4>
 8008b5c:	7efb      	ldrb	r3, [r7, #27]
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d107      	bne.n	8008b72 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b70:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	0adb      	lsrs	r3, r3, #11
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00e      	beq.n	8008b9c <HAL_I2C_ER_IRQHandler+0x12e>
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	f043 0308 	orr.w	r3, r3, #8
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8008b9a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d008      	beq.n	8008bb4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f8ac 	bl	8009d0c <I2C_ITError>
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3728      	adds	r7, #40	@ 0x28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d150      	bne.n	8008d2c <I2C_MasterTransmit_TXE+0xc8>
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	2b21      	cmp	r3, #33	@ 0x21
 8008c8e:	d14d      	bne.n	8008d2c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d01d      	beq.n	8008cd2 <I2C_MasterTransmit_TXE+0x6e>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d01a      	beq.n	8008cd2 <I2C_MasterTransmit_TXE+0x6e>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ca2:	d016      	beq.n	8008cd2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cb2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2211      	movs	r2, #17
 8008cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff76 	bl	8008bbc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008cd0:	e060      	b.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ce0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cf0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b40      	cmp	r3, #64	@ 0x40
 8008d0a:	d107      	bne.n	8008d1c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7fc f91f 	bl	8004f58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d1a:	e03b      	b.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ff49 	bl	8008bbc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d2a:	e033      	b.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b21      	cmp	r3, #33	@ 0x21
 8008d30:	d005      	beq.n	8008d3e <I2C_MasterTransmit_TXE+0xda>
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b40      	cmp	r3, #64	@ 0x40
 8008d36:	d12d      	bne.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b22      	cmp	r3, #34	@ 0x22
 8008d3c:	d12a      	bne.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d108      	bne.n	8008d5a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d56:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008d58:	e01c      	b.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b40      	cmp	r3, #64	@ 0x40
 8008d64:	d103      	bne.n	8008d6e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f88e 	bl	8008e88 <I2C_MemoryTransmit_TXE_BTF>
}
 8008d6c:	e012      	b.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008d92:	e7ff      	b.n	8008d94 <I2C_MasterTransmit_TXE+0x130>
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b21      	cmp	r3, #33	@ 0x21
 8008db4:	d164      	bne.n	8008e80 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d012      	beq.n	8008de6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008de4:	e04c      	b.n	8008e80 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d01d      	beq.n	8008e28 <I2C_MasterTransmit_BTF+0x8c>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b20      	cmp	r3, #32
 8008df0:	d01a      	beq.n	8008e28 <I2C_MasterTransmit_BTF+0x8c>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008df8:	d016      	beq.n	8008e28 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e08:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2211      	movs	r2, #17
 8008e0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fecb 	bl	8008bbc <HAL_I2C_MasterTxCpltCallback>
}
 8008e26:	e02b      	b.n	8008e80 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e46:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b40      	cmp	r3, #64	@ 0x40
 8008e60:	d107      	bne.n	8008e72 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7fc f874 	bl	8004f58 <HAL_I2C_MemTxCpltCallback>
}
 8008e70:	e006      	b.n	8008e80 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fe9e 	bl	8008bbc <HAL_I2C_MasterTxCpltCallback>
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11d      	bne.n	8008edc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d10b      	bne.n	8008ec0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb8:	1c9a      	adds	r2, r3, #2
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008ebe:	e077      	b.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	121b      	asrs	r3, r3, #8
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008eda:	e069      	b.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d10b      	bne.n	8008efc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008efa:	e059      	b.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d152      	bne.n	8008faa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b22      	cmp	r3, #34	@ 0x22
 8008f08:	d10d      	bne.n	8008f26 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f18:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008f24:	e044      	b.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	2b21      	cmp	r3, #33	@ 0x21
 8008f34:	d112      	bne.n	8008f5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	781a      	ldrb	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008f5a:	e029      	b.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d124      	bne.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b21      	cmp	r3, #33	@ 0x21
 8008f6a:	d121      	bne.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008f7a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fb ffd8 	bl	8004f58 <HAL_I2C_MemTxCpltCallback>
}
 8008fa8:	e002      	b.n	8008fb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fe fb92 	bl	80076d4 <I2C_Flush_DR>
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b22      	cmp	r3, #34	@ 0x22
 8008fca:	f040 80b9 	bne.w	8009140 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d921      	bls.n	8009026 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	b2d2      	uxtb	r2, r2
 8008fee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800900c:	b29b      	uxth	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	f040 8096 	bne.w	8009140 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009022:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009024:	e08c      	b.n	8009140 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902a:	2b02      	cmp	r3, #2
 800902c:	d07f      	beq.n	800912e <I2C_MasterReceive_RXNE+0x176>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d002      	beq.n	800903a <I2C_MasterReceive_RXNE+0x82>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d179      	bne.n	800912e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fd06 	bl	800aa4c <I2C_WaitOnSTOPRequestThroughIT>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d14c      	bne.n	80090e0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009054:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009064:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009082:	b29b      	uxth	r3, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b40      	cmp	r3, #64	@ 0x40
 800909e:	d10a      	bne.n	80090b6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fb ff68 	bl	8004f84 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090b4:	e044      	b.n	8009140 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d002      	beq.n	80090ca <I2C_MasterReceive_RXNE+0x112>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d103      	bne.n	80090d2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80090d0:	e002      	b.n	80090d8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2212      	movs	r2, #18
 80090d6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fd79 	bl	8008bd0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090de:	e02f      	b.n	8009140 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80090ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691a      	ldr	r2, [r3, #16]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800910c:	b29b      	uxth	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff fd88 	bl	8008c3c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800912c:	e008      	b.n	8009140 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800913c:	605a      	str	r2, [r3, #4]
}
 800913e:	e7ff      	b.n	8009140 <I2C_MasterReceive_RXNE+0x188>
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b04      	cmp	r3, #4
 800915e:	d11b      	bne.n	8009198 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800916e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691a      	ldr	r2, [r3, #16]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	b2d2      	uxtb	r2, r2
 800917c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800918c:	b29b      	uxth	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	b29a      	uxth	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009196:	e0c8      	b.n	800932a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800919c:	b29b      	uxth	r3, r3
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d129      	bne.n	80091f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	d00a      	beq.n	80091ce <I2C_MasterReceive_BTF+0x86>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d007      	beq.n	80091ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80091f4:	e099      	b.n	800932a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	f040 8081 	bne.w	8009304 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d002      	beq.n	800920e <I2C_MasterReceive_BTF+0xc6>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b10      	cmp	r3, #16
 800920c:	d108      	bne.n	8009220 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	e019      	b.n	8009254 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b04      	cmp	r3, #4
 8009224:	d002      	beq.n	800922c <I2C_MasterReceive_BTF+0xe4>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d108      	bne.n	800923e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	e00a      	b.n	8009254 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b10      	cmp	r3, #16
 8009242:	d007      	beq.n	8009254 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009252:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b01      	subs	r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b40      	cmp	r3, #64	@ 0x40
 80092c2:	d10a      	bne.n	80092da <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7fb fe56 	bl	8004f84 <HAL_I2C_MemRxCpltCallback>
}
 80092d8:	e027      	b.n	800932a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d002      	beq.n	80092ee <I2C_MasterReceive_BTF+0x1a6>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d103      	bne.n	80092f6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80092f4:	e002      	b.n	80092fc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2212      	movs	r2, #18
 80092fa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff fc67 	bl	8008bd0 <HAL_I2C_MasterRxCpltCallback>
}
 8009302:	e012      	b.n	800932a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691a      	ldr	r2, [r3, #16]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b40      	cmp	r3, #64	@ 0x40
 8009344:	d117      	bne.n	8009376 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009352:	b2db      	uxtb	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800935e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009360:	e067      	b.n	8009432 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	b2da      	uxtb	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	611a      	str	r2, [r3, #16]
}
 8009374:	e05d      	b.n	8009432 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800937e:	d133      	bne.n	80093e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b21      	cmp	r3, #33	@ 0x21
 800938a:	d109      	bne.n	80093a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009390:	b2db      	uxtb	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800939c:	611a      	str	r2, [r3, #16]
 800939e:	e008      	b.n	80093b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <I2C_Master_SB+0x92>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d108      	bne.n	80093d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d032      	beq.n	8009432 <I2C_Master_SB+0x100>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d02d      	beq.n	8009432 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093e4:	605a      	str	r2, [r3, #4]
}
 80093e6:	e024      	b.n	8009432 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10e      	bne.n	800940e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	11db      	asrs	r3, r3, #7
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 0306 	and.w	r3, r3, #6
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f063 030f 	orn	r3, r3, #15
 8009404:	b2da      	uxtb	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	611a      	str	r2, [r3, #16]
}
 800940c:	e011      	b.n	8009432 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009412:	2b01      	cmp	r3, #1
 8009414:	d10d      	bne.n	8009432 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800941a:	b29b      	uxth	r3, r3
 800941c:	11db      	asrs	r3, r3, #7
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 0306 	and.w	r3, r3, #6
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f063 030e 	orn	r3, r3, #14
 800942a:	b2da      	uxtb	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	611a      	str	r2, [r3, #16]
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <I2C_Master_ADD10+0x26>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d108      	bne.n	8009476 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00c      	beq.n	8009486 <I2C_Master_ADD10+0x48>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009484:	605a      	str	r2, [r3, #4]
  }
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009492:	b480      	push	{r7}
 8009494:	b091      	sub	sp, #68	@ 0x44
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b22      	cmp	r3, #34	@ 0x22
 80094ba:	f040 8169 	bne.w	8009790 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10f      	bne.n	80094e6 <I2C_Master_ADDR+0x54>
 80094c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094ca:	2b40      	cmp	r3, #64	@ 0x40
 80094cc:	d10b      	bne.n	80094e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ce:	2300      	movs	r3, #0
 80094d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	e160      	b.n	80097a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d11d      	bne.n	800952a <I2C_Master_ADDR+0x98>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80094f6:	d118      	bne.n	800952a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094f8:	2300      	movs	r3, #0
 80094fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800950c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800951c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	651a      	str	r2, [r3, #80]	@ 0x50
 8009528:	e13e      	b.n	80097a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800952e:	b29b      	uxth	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	d113      	bne.n	800955c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009534:	2300      	movs	r3, #0
 8009536:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009548:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e115      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b01      	cmp	r3, #1
 8009564:	f040 808a 	bne.w	800967c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800956e:	d137      	bne.n	80095e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800957e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800958a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800958e:	d113      	bne.n	80095b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800959e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095a0:	2300      	movs	r3, #0
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b6:	e0e7      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b8:	2300      	movs	r3, #0
 80095ba:	623b      	str	r3, [r7, #32]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	623b      	str	r3, [r7, #32]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	623b      	str	r3, [r7, #32]
 80095cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e0d3      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	2b08      	cmp	r3, #8
 80095e4:	d02e      	beq.n	8009644 <I2C_Master_ADDR+0x1b2>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d02b      	beq.n	8009644 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80095ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ee:	2b12      	cmp	r3, #18
 80095f0:	d102      	bne.n	80095f8 <I2C_Master_ADDR+0x166>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d125      	bne.n	8009644 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	d00e      	beq.n	800961c <I2C_Master_ADDR+0x18a>
 80095fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009600:	2b02      	cmp	r3, #2
 8009602:	d00b      	beq.n	800961c <I2C_Master_ADDR+0x18a>
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	2b10      	cmp	r3, #16
 8009608:	d008      	beq.n	800961c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	e007      	b.n	800962c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800962a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	e0a1      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009652:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	61bb      	str	r3, [r7, #24]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	61bb      	str	r3, [r7, #24]
 8009668:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	e085      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d14d      	bne.n	8009722 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	2b04      	cmp	r3, #4
 800968a:	d016      	beq.n	80096ba <I2C_Master_ADDR+0x228>
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	2b02      	cmp	r3, #2
 8009690:	d013      	beq.n	80096ba <I2C_Master_ADDR+0x228>
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	2b10      	cmp	r3, #16
 8009696:	d010      	beq.n	80096ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	e007      	b.n	80096ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80096c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096d8:	d117      	bne.n	800970a <I2C_Master_ADDR+0x278>
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80096e0:	d00b      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d008      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ea:	2b08      	cmp	r3, #8
 80096ec:	d005      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f0:	2b10      	cmp	r3, #16
 80096f2:	d002      	beq.n	80096fa <I2C_Master_ADDR+0x268>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	2b20      	cmp	r3, #32
 80096f8:	d107      	bne.n	800970a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009708:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	e032      	b.n	8009788 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009730:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800973c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009740:	d117      	bne.n	8009772 <I2C_Master_ADDR+0x2e0>
 8009742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009748:	d00b      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	2b01      	cmp	r3, #1
 800974e:	d008      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 8009750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009752:	2b08      	cmp	r3, #8
 8009754:	d005      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	2b10      	cmp	r3, #16
 800975a:	d002      	beq.n	8009762 <I2C_Master_ADDR+0x2d0>
 800975c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975e:	2b20      	cmp	r3, #32
 8009760:	d107      	bne.n	8009772 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009770:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800978e:	e00b      	b.n	80097a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	e7ff      	b.n	80097a8 <I2C_Master_ADDR+0x316>
 80097a8:	bf00      	nop
 80097aa:	3744      	adds	r7, #68	@ 0x44
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d02b      	beq.n	8009826 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d114      	bne.n	8009826 <I2C_SlaveTransmit_TXE+0x72>
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	2b29      	cmp	r3, #41	@ 0x29
 8009800:	d111      	bne.n	8009826 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009810:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2221      	movs	r2, #33	@ 0x21
 8009816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2228      	movs	r2, #40	@ 0x28
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff f9df 	bl	8008be4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009826:	bf00      	nop
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800983a:	b29b      	uxth	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d011      	beq.n	8009864 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800987e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009884:	b29b      	uxth	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d02c      	beq.n	80098e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	691a      	ldr	r2, [r3, #16]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d114      	bne.n	80098e4 <I2C_SlaveReceive_RXNE+0x74>
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80098be:	d111      	bne.n	80098e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2222      	movs	r2, #34	@ 0x22
 80098d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2228      	movs	r2, #40	@ 0x28
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff f98a 	bl	8008bf8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d012      	beq.n	8009924 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800994a:	2b28      	cmp	r3, #40	@ 0x28
 800994c:	d127      	bne.n	800999e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800995c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	089b      	lsrs	r3, r3, #2
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800996a:	2301      	movs	r3, #1
 800996c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	09db      	lsrs	r3, r3, #7
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d103      	bne.n	8009982 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	81bb      	strh	r3, [r7, #12]
 8009980:	e002      	b.n	8009988 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009990:	89ba      	ldrh	r2, [r7, #12]
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff f938 	bl	8008c0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800999c:	e00e      	b.n	80099bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80099e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80099e4:	2300      	movs	r3, #0
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	60bb      	str	r3, [r7, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0201 	orr.w	r2, r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a20:	d172      	bne.n	8009b08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b22      	cmp	r3, #34	@ 0x22
 8009a26:	d002      	beq.n	8009a2e <I2C_Slave_STOPF+0x6a>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a2c:	d135      	bne.n	8009a9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4a:	f043 0204 	orr.w	r2, r3, #4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd fa0e 	bl	8006e88 <HAL_DMA_GetState>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d049      	beq.n	8009b06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a76:	4a69      	ldr	r2, [pc, #420]	@ (8009c1c <I2C_Slave_STOPF+0x258>)
 8009a78:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fd f856 	bl	8006b30 <HAL_DMA_Abort_IT>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d03d      	beq.n	8009b06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a98:	e035      	b.n	8009b06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab6:	f043 0204 	orr.w	r2, r3, #4
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009acc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fd f9d8 	bl	8006e88 <HAL_DMA_GetState>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d014      	beq.n	8009b08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8009c1c <I2C_Slave_STOPF+0x258>)
 8009ae4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd f820 	bl	8006b30 <HAL_DMA_Abort_IT>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d008      	beq.n	8009b08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	e000      	b.n	8009b08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009b06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d03e      	beq.n	8009b90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d112      	bne.n	8009b46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b50:	2b40      	cmp	r3, #64	@ 0x40
 8009b52:	d112      	bne.n	8009b7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	691a      	ldr	r2, [r3, #16]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b88:	f043 0204 	orr.w	r2, r3, #4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8b7 	bl	8009d0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009b9e:	e039      	b.n	8009c14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba4:	d109      	bne.n	8009bba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2228      	movs	r2, #40	@ 0x28
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff f81f 	bl	8008bf8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b28      	cmp	r3, #40	@ 0x28
 8009bc4:	d111      	bne.n	8009bea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a15      	ldr	r2, [pc, #84]	@ (8009c20 <I2C_Slave_STOPF+0x25c>)
 8009bca:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff f820 	bl	8008c28 <HAL_I2C_ListenCpltCallback>
}
 8009be8:	e014      	b.n	8009c14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bee:	2b22      	cmp	r3, #34	@ 0x22
 8009bf0:	d002      	beq.n	8009bf8 <I2C_Slave_STOPF+0x234>
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	2b22      	cmp	r3, #34	@ 0x22
 8009bf6:	d10d      	bne.n	8009c14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fe fff2 	bl	8008bf8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009c14:	bf00      	nop
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	0800a5a9 	.word	0x0800a5a9
 8009c20:	ffff0000 	.word	0xffff0000

08009c24 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c32:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c38:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d002      	beq.n	8009c46 <I2C_Slave_AF+0x22>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	d129      	bne.n	8009c9a <I2C_Slave_AF+0x76>
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b28      	cmp	r3, #40	@ 0x28
 8009c4a:	d126      	bne.n	8009c9a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8009d08 <I2C_Slave_AF+0xe4>)
 8009c50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c60:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c6a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c7a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7fe ffc8 	bl	8008c28 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009c98:	e031      	b.n	8009cfe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	2b21      	cmp	r3, #33	@ 0x21
 8009c9e:	d129      	bne.n	8009cf4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a19      	ldr	r2, [pc, #100]	@ (8009d08 <I2C_Slave_AF+0xe4>)
 8009ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2221      	movs	r2, #33	@ 0x21
 8009caa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009cca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009cd4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ce4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7fd fcf4 	bl	80076d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7fe ff79 	bl	8008be4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009cf2:	e004      	b.n	8009cfe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009cfc:	615a      	str	r2, [r3, #20]
}
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	ffff0000 	.word	0xffff0000

08009d0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2b10      	cmp	r3, #16
 8009d28:	d002      	beq.n	8009d30 <I2C_ITError+0x24>
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b40      	cmp	r3, #64	@ 0x40
 8009d2e:	d10a      	bne.n	8009d46 <I2C_ITError+0x3a>
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	2b22      	cmp	r3, #34	@ 0x22
 8009d34:	d107      	bne.n	8009d46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d4c:	2b28      	cmp	r3, #40	@ 0x28
 8009d4e:	d107      	bne.n	8009d60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2228      	movs	r2, #40	@ 0x28
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d5e:	e015      	b.n	8009d8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d6e:	d00a      	beq.n	8009d86 <I2C_ITError+0x7a>
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	2b60      	cmp	r3, #96	@ 0x60
 8009d74:	d007      	beq.n	8009d86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d9a:	d162      	bne.n	8009e62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009daa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d020      	beq.n	8009dfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8009f68 <I2C_ITError+0x25c>)
 8009dc0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fc feb2 	bl	8006b30 <HAL_DMA_Abort_IT>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8089 	beq.w	8009ee6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2220      	movs	r2, #32
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009df6:	4610      	mov	r0, r2
 8009df8:	4798      	blx	r3
 8009dfa:	e074      	b.n	8009ee6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	4a59      	ldr	r2, [pc, #356]	@ (8009f68 <I2C_ITError+0x25c>)
 8009e02:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fc fe91 	bl	8006b30 <HAL_DMA_Abort_IT>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d068      	beq.n	8009ee6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e1e:	2b40      	cmp	r3, #64	@ 0x40
 8009e20:	d10b      	bne.n	8009e3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 0201 	bic.w	r2, r2, #1
 8009e48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	e041      	b.n	8009ee6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b60      	cmp	r3, #96	@ 0x60
 8009e6c:	d125      	bne.n	8009eba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e86:	2b40      	cmp	r3, #64	@ 0x40
 8009e88:	d10b      	bne.n	8009ea2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	691a      	ldr	r2, [r3, #16]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e94:	b2d2      	uxtb	r2, r2
 8009e96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 0201 	bic.w	r2, r2, #1
 8009eb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fe fecc 	bl	8008c50 <HAL_I2C_AbortCpltCallback>
 8009eb8:	e015      	b.n	8009ee6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec4:	2b40      	cmp	r3, #64	@ 0x40
 8009ec6:	d10b      	bne.n	8009ee0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691a      	ldr	r2, [r3, #16]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7fe feab 	bl	8008c3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10e      	bne.n	8009f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d007      	beq.n	8009f24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d113      	bne.n	8009f60 <I2C_ITError+0x254>
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b28      	cmp	r3, #40	@ 0x28
 8009f3c:	d110      	bne.n	8009f60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	@ (8009f6c <I2C_ITError+0x260>)
 8009f42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fe fe64 	bl	8008c28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	0800a5a9 	.word	0x0800a5a9
 8009f6c:	ffff0000 	.word	0xffff0000

08009f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d006      	beq.n	8009f9a <I2C_MasterRequestWrite+0x2a>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d003      	beq.n	8009f9a <I2C_MasterRequestWrite+0x2a>
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f98:	d108      	bne.n	8009fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	e00b      	b.n	8009fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb0:	2b12      	cmp	r3, #18
 8009fb2:	d107      	bne.n	8009fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 fb91 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fea:	d103      	bne.n	8009ff4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e035      	b.n	800a064 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a000:	d108      	bne.n	800a014 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a002:	897b      	ldrh	r3, [r7, #10]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	461a      	mov	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a010:	611a      	str	r2, [r3, #16]
 800a012:	e01b      	b.n	800a04c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a014:	897b      	ldrh	r3, [r7, #10]
 800a016:	11db      	asrs	r3, r3, #7
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f003 0306 	and.w	r3, r3, #6
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f063 030f 	orn	r3, r3, #15
 800a024:	b2da      	uxtb	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	490e      	ldr	r1, [pc, #56]	@ (800a06c <I2C_MasterRequestWrite+0xfc>)
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fbda 	bl	800a7ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e010      	b.n	800a064 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a042:	897b      	ldrh	r3, [r7, #10]
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	4907      	ldr	r1, [pc, #28]	@ (800a070 <I2C_MasterRequestWrite+0x100>)
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fbca 	bl	800a7ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	00010008 	.word	0x00010008
 800a070:	00010002 	.word	0x00010002

0800a074 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	461a      	mov	r2, r3
 800a082:	4603      	mov	r3, r0
 800a084:	817b      	strh	r3, [r7, #10]
 800a086:	460b      	mov	r3, r1
 800a088:	813b      	strh	r3, [r7, #8]
 800a08a:	4613      	mov	r3, r2
 800a08c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a09c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 fb24 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00d      	beq.n	800a0d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0c4:	d103      	bne.n	800a0ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e05f      	b.n	800a192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0d2:	897b      	ldrh	r3, [r7, #10]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a0e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e4:	6a3a      	ldr	r2, [r7, #32]
 800a0e6:	492d      	ldr	r1, [pc, #180]	@ (800a19c <I2C_RequestMemoryWrite+0x128>)
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fb7f 	bl	800a7ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e04c      	b.n	800a192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a110:	6a39      	ldr	r1, [r7, #32]
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 fc0a 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00d      	beq.n	800a13a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a122:	2b04      	cmp	r3, #4
 800a124:	d107      	bne.n	800a136 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e02b      	b.n	800a192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d105      	bne.n	800a14c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a140:	893b      	ldrh	r3, [r7, #8]
 800a142:	b2da      	uxtb	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	611a      	str	r2, [r3, #16]
 800a14a:	e021      	b.n	800a190 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a14c:	893b      	ldrh	r3, [r7, #8]
 800a14e:	0a1b      	lsrs	r3, r3, #8
 800a150:	b29b      	uxth	r3, r3
 800a152:	b2da      	uxtb	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15c:	6a39      	ldr	r1, [r7, #32]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 fbe4 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d107      	bne.n	800a182 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e005      	b.n	800a192 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a186:	893b      	ldrh	r3, [r7, #8]
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	00010002 	.word	0x00010002

0800a1a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	817b      	strh	r3, [r7, #10]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	813b      	strh	r3, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a1c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fa86 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00d      	beq.n	800a20e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a200:	d103      	bne.n	800a20a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a208:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e0aa      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a20e:	897b      	ldrh	r3, [r7, #10]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a21c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a220:	6a3a      	ldr	r2, [r7, #32]
 800a222:	4952      	ldr	r1, [pc, #328]	@ (800a36c <I2C_RequestMemoryRead+0x1cc>)
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 fae1 	bl	800a7ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e097      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a24a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a24c:	6a39      	ldr	r1, [r7, #32]
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 fb6c 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00d      	beq.n	800a276 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d107      	bne.n	800a272 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e076      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d105      	bne.n	800a288 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a27c:	893b      	ldrh	r3, [r7, #8]
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	611a      	str	r2, [r3, #16]
 800a286:	e021      	b.n	800a2cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a288:	893b      	ldrh	r3, [r7, #8]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a298:	6a39      	ldr	r1, [r7, #32]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 fb46 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00d      	beq.n	800a2c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d107      	bne.n	800a2be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e050      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2c2:	893b      	ldrh	r3, [r7, #8]
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ce:	6a39      	ldr	r1, [r7, #32]
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fb2b 	bl	800a92c <I2C_WaitOnTXEFlagUntilTimeout>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00d      	beq.n	800a2f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	d107      	bne.n	800a2f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e035      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a306:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	2200      	movs	r2, #0
 800a310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f9ef 	bl	800a6f8 <I2C_WaitOnFlagUntilTimeout>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00d      	beq.n	800a33c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a32e:	d103      	bne.n	800a338 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a336:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e013      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a33c:	897b      	ldrh	r3, [r7, #10]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	b2da      	uxtb	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	6a3a      	ldr	r2, [r7, #32]
 800a350:	4906      	ldr	r1, [pc, #24]	@ (800a36c <I2C_RequestMemoryRead+0x1cc>)
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 fa4a 	bl	800a7ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	00010002 	.word	0x00010002

0800a370 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a384:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a38c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a392:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a3a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a3c4:	7cfb      	ldrb	r3, [r7, #19]
 800a3c6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a3ca:	2b21      	cmp	r3, #33	@ 0x21
 800a3cc:	d007      	beq.n	800a3de <I2C_DMAXferCplt+0x6e>
 800a3ce:	7cfb      	ldrb	r3, [r7, #19]
 800a3d0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800a3d4:	2b22      	cmp	r3, #34	@ 0x22
 800a3d6:	d131      	bne.n	800a43c <I2C_DMAXferCplt+0xcc>
 800a3d8:	7cbb      	ldrb	r3, [r7, #18]
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	d12e      	bne.n	800a43c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a3f4:	7cfb      	ldrb	r3, [r7, #19]
 800a3f6:	2b29      	cmp	r3, #41	@ 0x29
 800a3f8:	d10a      	bne.n	800a410 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2221      	movs	r2, #33	@ 0x21
 800a3fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2228      	movs	r2, #40	@ 0x28
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a408:	6978      	ldr	r0, [r7, #20]
 800a40a:	f7fe fbeb 	bl	8008be4 <HAL_I2C_SlaveTxCpltCallback>
 800a40e:	e00c      	b.n	800a42a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a410:	7cfb      	ldrb	r3, [r7, #19]
 800a412:	2b2a      	cmp	r3, #42	@ 0x2a
 800a414:	d109      	bne.n	800a42a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2222      	movs	r2, #34	@ 0x22
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2228      	movs	r2, #40	@ 0x28
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a424:	6978      	ldr	r0, [r7, #20]
 800a426:	f7fe fbe7 	bl	8008bf8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a438:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a43a:	e074      	b.n	800a526 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b00      	cmp	r3, #0
 800a446:	d06e      	beq.n	800a526 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d107      	bne.n	800a462 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a460:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a470:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a478:	d009      	beq.n	800a48e <I2C_DMAXferCplt+0x11e>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	d006      	beq.n	800a48e <I2C_DMAXferCplt+0x11e>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a486:	d002      	beq.n	800a48e <I2C_DMAXferCplt+0x11e>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d107      	bne.n	800a49e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a49c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a4ac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4bc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800a4cc:	6978      	ldr	r0, [r7, #20]
 800a4ce:	f7fe fbb5 	bl	8008c3c <HAL_I2C_ErrorCallback>
}
 800a4d2:	e028      	b.n	800a526 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b40      	cmp	r3, #64	@ 0x40
 800a4e6:	d10a      	bne.n	800a4fe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a4f6:	6978      	ldr	r0, [r7, #20]
 800a4f8:	f7fa fd44 	bl	8004f84 <HAL_I2C_MemRxCpltCallback>
}
 800a4fc:	e013      	b.n	800a526 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d002      	beq.n	800a512 <I2C_DMAXferCplt+0x1a2>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b20      	cmp	r3, #32
 800a510:	d103      	bne.n	800a51a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2200      	movs	r2, #0
 800a516:	631a      	str	r2, [r3, #48]	@ 0x30
 800a518:	e002      	b.n	800a520 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2212      	movs	r2, #18
 800a51e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a520:	6978      	ldr	r0, [r7, #20]
 800a522:	f7fe fb55 	bl	8008bd0 <HAL_I2C_MasterRxCpltCallback>
}
 800a526:	bf00      	nop
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a548:	2200      	movs	r2, #0
 800a54a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a558:	2200      	movs	r2, #0
 800a55a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7fc fca1 	bl	8006ea4 <HAL_DMA_GetError>
 800a562:	4603      	mov	r3, r0
 800a564:	2b02      	cmp	r3, #2
 800a566:	d01b      	beq.n	800a5a0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a576:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a592:	f043 0210 	orr.w	r2, r3, #16
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7fe fb4e 	bl	8008c3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a5a0:	bf00      	nop
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a5c2:	4b4b      	ldr	r3, [pc, #300]	@ (800a6f0 <I2C_DMAAbort+0x148>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	08db      	lsrs	r3, r3, #3
 800a5c8:	4a4a      	ldr	r2, [pc, #296]	@ (800a6f4 <I2C_DMAAbort+0x14c>)
 800a5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ce:	0a1a      	lsrs	r2, r3, #8
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	00da      	lsls	r2, r3, #3
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e6:	f043 0220 	orr.w	r2, r3, #32
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a5ee:	e00a      	b.n	800a606 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a604:	d0ea      	beq.n	800a5dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a612:	2200      	movs	r2, #0
 800a614:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a622:	2200      	movs	r2, #0
 800a624:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a634:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2200      	movs	r2, #0
 800a63a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a648:	2200      	movs	r2, #0
 800a64a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a658:	2200      	movs	r2, #0
 800a65a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0201 	bic.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b60      	cmp	r3, #96	@ 0x60
 800a676:	d10e      	bne.n	800a696 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2200      	movs	r2, #0
 800a68c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a68e:	6978      	ldr	r0, [r7, #20]
 800a690:	f7fe fade 	bl	8008c50 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a694:	e027      	b.n	800a6e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a696:	7cfb      	ldrb	r3, [r7, #19]
 800a698:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a69c:	2b28      	cmp	r3, #40	@ 0x28
 800a69e:	d117      	bne.n	800a6d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0201 	orr.w	r2, r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a6be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2228      	movs	r2, #40	@ 0x28
 800a6ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a6ce:	e007      	b.n	800a6e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a6e0:	6978      	ldr	r0, [r7, #20]
 800a6e2:	f7fe faab 	bl	8008c3c <HAL_I2C_ErrorCallback>
}
 800a6e6:	bf00      	nop
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000010 	.word	0x20000010
 800a6f4:	14f8b589 	.word	0x14f8b589

0800a6f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	603b      	str	r3, [r7, #0]
 800a704:	4613      	mov	r3, r2
 800a706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a708:	e048      	b.n	800a79c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d044      	beq.n	800a79c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a712:	f7fb fa39 	bl	8005b88 <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d302      	bcc.n	800a728 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d139      	bne.n	800a79c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	0c1b      	lsrs	r3, r3, #16
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d10d      	bne.n	800a74e <I2C_WaitOnFlagUntilTimeout+0x56>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	43da      	mvns	r2, r3
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	4013      	ands	r3, r2
 800a73e:	b29b      	uxth	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	bf0c      	ite	eq
 800a744:	2301      	moveq	r3, #1
 800a746:	2300      	movne	r3, #0
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	e00c      	b.n	800a768 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	43da      	mvns	r2, r3
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	4013      	ands	r3, r2
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bf0c      	ite	eq
 800a760:	2301      	moveq	r3, #1
 800a762:	2300      	movne	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	461a      	mov	r2, r3
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d116      	bne.n	800a79c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2220      	movs	r2, #32
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a788:	f043 0220 	orr.w	r2, r3, #32
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e023      	b.n	800a7e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	0c1b      	lsrs	r3, r3, #16
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d10d      	bne.n	800a7c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	43da      	mvns	r2, r3
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bf0c      	ite	eq
 800a7b8:	2301      	moveq	r3, #1
 800a7ba:	2300      	movne	r3, #0
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	e00c      	b.n	800a7dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	43da      	mvns	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bf0c      	ite	eq
 800a7d4:	2301      	moveq	r3, #1
 800a7d6:	2300      	movne	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d093      	beq.n	800a70a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7fa:	e071      	b.n	800a8e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a80a:	d123      	bne.n	800a854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a81a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2220      	movs	r2, #32
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a840:	f043 0204 	orr.w	r2, r3, #4
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e067      	b.n	800a924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d041      	beq.n	800a8e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85c:	f7fb f994 	bl	8005b88 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d302      	bcc.n	800a872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d136      	bne.n	800a8e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	0c1b      	lsrs	r3, r3, #16
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d10c      	bne.n	800a896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	43da      	mvns	r2, r3
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4013      	ands	r3, r2
 800a888:	b29b      	uxth	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	bf14      	ite	ne
 800a88e:	2301      	movne	r3, #1
 800a890:	2300      	moveq	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	e00b      	b.n	800a8ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	43da      	mvns	r2, r3
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bf14      	ite	ne
 800a8a8:	2301      	movne	r3, #1
 800a8aa:	2300      	moveq	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d016      	beq.n	800a8e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8cc:	f043 0220 	orr.w	r2, r3, #32
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e021      	b.n	800a924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d10c      	bne.n	800a904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	43da      	mvns	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bf14      	ite	ne
 800a8fc:	2301      	movne	r3, #1
 800a8fe:	2300      	moveq	r3, #0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	e00b      	b.n	800a91c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	43da      	mvns	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4013      	ands	r3, r2
 800a910:	b29b      	uxth	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	bf14      	ite	ne
 800a916:	2301      	movne	r3, #1
 800a918:	2300      	moveq	r3, #0
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f47f af6d 	bne.w	800a7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a938:	e034      	b.n	800a9a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 f915 	bl	800ab6a <I2C_IsAcknowledgeFailed>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e034      	b.n	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d028      	beq.n	800a9a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a952:	f7fb f919 	bl	8005b88 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d302      	bcc.n	800a968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11d      	bne.n	800a9a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a972:	2b80      	cmp	r3, #128	@ 0x80
 800a974:	d016      	beq.n	800a9a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2220      	movs	r2, #32
 800a980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a990:	f043 0220 	orr.w	r2, r3, #32
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e007      	b.n	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ae:	2b80      	cmp	r3, #128	@ 0x80
 800a9b0:	d1c3      	bne.n	800a93a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a9c8:	e034      	b.n	800aa34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 f8cd 	bl	800ab6a <I2C_IsAcknowledgeFailed>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e034      	b.n	800aa44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e0:	d028      	beq.n	800aa34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9e2:	f7fb f8d1 	bl	8005b88 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d302      	bcc.n	800a9f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d11d      	bne.n	800aa34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	f003 0304 	and.w	r3, r3, #4
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d016      	beq.n	800aa34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa20:	f043 0220 	orr.w	r2, r3, #32
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e007      	b.n	800aa44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	f003 0304 	and.w	r3, r3, #4
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d1c3      	bne.n	800a9ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800aa58:	4b13      	ldr	r3, [pc, #76]	@ (800aaa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	08db      	lsrs	r3, r3, #3
 800aa5e:	4a13      	ldr	r2, [pc, #76]	@ (800aaac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800aa60:	fba2 2303 	umull	r2, r3, r2, r3
 800aa64:	0a1a      	lsrs	r2, r3, #8
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d107      	bne.n	800aa8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7e:	f043 0220 	orr.w	r2, r3, #32
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e008      	b.n	800aa9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa98:	d0e9      	beq.n	800aa6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	20000010 	.word	0x20000010
 800aaac:	14f8b589 	.word	0x14f8b589

0800aab0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aabc:	e049      	b.n	800ab52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	f003 0310 	and.w	r3, r3, #16
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d119      	bne.n	800ab00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f06f 0210 	mvn.w	r2, #16
 800aad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e030      	b.n	800ab62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab00:	f7fb f842 	bl	8005b88 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d302      	bcc.n	800ab16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d11d      	bne.n	800ab52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab20:	2b40      	cmp	r3, #64	@ 0x40
 800ab22:	d016      	beq.n	800ab52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab3e:	f043 0220 	orr.w	r2, r3, #32
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e007      	b.n	800ab62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5c:	2b40      	cmp	r3, #64	@ 0x40
 800ab5e:	d1ae      	bne.n	800aabe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab80:	d11b      	bne.n	800abba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ab8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2220      	movs	r2, #32
 800ab96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba6:	f043 0204 	orr.w	r2, r3, #4
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800abd8:	d103      	bne.n	800abe2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800abe0:	e007      	b.n	800abf2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800abea:	d102      	bne.n	800abf2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2208      	movs	r2, #8
 800abf0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b086      	sub	sp, #24
 800ac02:	af02      	add	r7, sp, #8
 800ac04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e101      	b.n	800ae14 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f007 fb70 	bl	8012310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2203      	movs	r2, #3
 800ac34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac3e:	d102      	bne.n	800ac46 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f003 feeb 	bl	800ea26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	7c1a      	ldrb	r2, [r3, #16]
 800ac58:	f88d 2000 	strb.w	r2, [sp]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac60:	f003 fdca 	bl	800e7f8 <USB_CoreInit>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e0ce      	b.n	800ae14 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f003 fee3 	bl	800ea48 <USB_SetCurrentMode>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e0bf      	b.n	800ae14 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
 800ac98:	e04a      	b.n	800ad30 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac9a:	7bfa      	ldrb	r2, [r7, #15]
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	3315      	adds	r3, #21
 800acaa:	2201      	movs	r2, #1
 800acac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800acae:	7bfa      	ldrb	r2, [r7, #15]
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	4613      	mov	r3, r2
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	4413      	add	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	440b      	add	r3, r1
 800acbc:	3314      	adds	r3, #20
 800acbe:	7bfa      	ldrb	r2, [r7, #15]
 800acc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800acc2:	7bfa      	ldrb	r2, [r7, #15]
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	b298      	uxth	r0, r3
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	332e      	adds	r3, #46	@ 0x2e
 800acd6:	4602      	mov	r2, r0
 800acd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800acda:	7bfa      	ldrb	r2, [r7, #15]
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	00db      	lsls	r3, r3, #3
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	440b      	add	r3, r1
 800ace8:	3318      	adds	r3, #24
 800acea:	2200      	movs	r2, #0
 800acec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800acee:	7bfa      	ldrb	r2, [r7, #15]
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	4613      	mov	r3, r2
 800acf4:	00db      	lsls	r3, r3, #3
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	440b      	add	r3, r1
 800acfc:	331c      	adds	r3, #28
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad02:	7bfa      	ldrb	r2, [r7, #15]
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	440b      	add	r3, r1
 800ad10:	3320      	adds	r3, #32
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad16:	7bfa      	ldrb	r2, [r7, #15]
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	3324      	adds	r3, #36	@ 0x24
 800ad26:	2200      	movs	r2, #0
 800ad28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	73fb      	strb	r3, [r7, #15]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	791b      	ldrb	r3, [r3, #4]
 800ad34:	7bfa      	ldrb	r2, [r7, #15]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d3af      	bcc.n	800ac9a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
 800ad3e:	e044      	b.n	800adca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad40:	7bfa      	ldrb	r2, [r7, #15]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad56:	7bfa      	ldrb	r2, [r7, #15]
 800ad58:	6879      	ldr	r1, [r7, #4]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	4413      	add	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	440b      	add	r3, r1
 800ad64:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ad68:	7bfa      	ldrb	r2, [r7, #15]
 800ad6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad6c:	7bfa      	ldrb	r2, [r7, #15]
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	4613      	mov	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	440b      	add	r3, r1
 800ad7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad82:	7bfa      	ldrb	r2, [r7, #15]
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad98:	7bfa      	ldrb	r2, [r7, #15]
 800ad9a:	6879      	ldr	r1, [r7, #4]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	4413      	add	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	440b      	add	r3, r1
 800ada6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800adaa:	2200      	movs	r2, #0
 800adac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800adae:	7bfa      	ldrb	r2, [r7, #15]
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	3301      	adds	r3, #1
 800adc8:	73fb      	strb	r3, [r7, #15]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	791b      	ldrb	r3, [r3, #4]
 800adce:	7bfa      	ldrb	r2, [r7, #15]
 800add0:	429a      	cmp	r2, r3
 800add2:	d3b5      	bcc.n	800ad40 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7c1a      	ldrb	r2, [r3, #16]
 800addc:	f88d 2000 	strb.w	r2, [sp]
 800ade0:	3304      	adds	r3, #4
 800ade2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ade4:	f003 fe7c 	bl	800eae0 <USB_DevInit>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2202      	movs	r2, #2
 800adf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e00c      	b.n	800ae14 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f004 fec6 	bl	800fb9e <USB_DevDisconnect>

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <HAL_PCD_Start+0x1c>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e022      	b.n	800ae7e <HAL_PCD_Start+0x62>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d009      	beq.n	800ae60 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d105      	bne.n	800ae60 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f003 fdcd 	bl	800ea04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f004 fe74 	bl	800fb5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae86:	b590      	push	{r4, r7, lr}
 800ae88:	b08d      	sub	sp, #52	@ 0x34
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f004 ff32 	bl	800fd06 <USB_GetMode>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f040 848c 	bne.w	800b7c2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f004 fe96 	bl	800fbe0 <USB_ReadInterrupts>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 8482 	beq.w	800b7c0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	0a1b      	lsrs	r3, r3, #8
 800aec6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f004 fe83 	bl	800fbe0 <USB_ReadInterrupts>
 800aeda:	4603      	mov	r3, r0
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d107      	bne.n	800aef4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695a      	ldr	r2, [r3, #20]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f002 0202 	and.w	r2, r2, #2
 800aef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f004 fe71 	bl	800fbe0 <USB_ReadInterrupts>
 800aefe:	4603      	mov	r3, r0
 800af00:	f003 0310 	and.w	r3, r3, #16
 800af04:	2b10      	cmp	r3, #16
 800af06:	d161      	bne.n	800afcc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f022 0210 	bic.w	r2, r2, #16
 800af16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	6a1b      	ldr	r3, [r3, #32]
 800af1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	f003 020f 	and.w	r2, r3, #15
 800af24:	4613      	mov	r3, r2
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	4413      	add	r3, r2
 800af34:	3304      	adds	r3, #4
 800af36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af42:	d124      	bne.n	800af8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d035      	beq.n	800afbc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	091b      	lsrs	r3, r3, #4
 800af58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af5e:	b29b      	uxth	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	6a38      	ldr	r0, [r7, #32]
 800af64:	f004 fca8 	bl	800f8b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	091b      	lsrs	r3, r3, #4
 800af70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af74:	441a      	add	r2, r3
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	695a      	ldr	r2, [r3, #20]
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	091b      	lsrs	r3, r3, #4
 800af82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af86:	441a      	add	r2, r3
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	615a      	str	r2, [r3, #20]
 800af8c:	e016      	b.n	800afbc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800af94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af98:	d110      	bne.n	800afbc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800afa0:	2208      	movs	r2, #8
 800afa2:	4619      	mov	r1, r3
 800afa4:	6a38      	ldr	r0, [r7, #32]
 800afa6:	f004 fc87 	bl	800f8b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	695a      	ldr	r2, [r3, #20]
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	091b      	lsrs	r3, r3, #4
 800afb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afb6:	441a      	add	r2, r3
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699a      	ldr	r2, [r3, #24]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f042 0210 	orr.w	r2, r2, #16
 800afca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f004 fe05 	bl	800fbe0 <USB_ReadInterrupts>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800afdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800afe0:	f040 80a7 	bne.w	800b132 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4618      	mov	r0, r3
 800afee:	f004 fe0a 	bl	800fc06 <USB_ReadDevAllOutEpInterrupt>
 800aff2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800aff4:	e099      	b.n	800b12a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800aff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 808e 	beq.w	800b11e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	4611      	mov	r1, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f004 fe2e 	bl	800fc6e <USB_ReadDevOutEPInterrupt>
 800b012:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00c      	beq.n	800b038 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02a:	461a      	mov	r2, r3
 800b02c:	2301      	movs	r3, #1
 800b02e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b030:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fea4 	bl	800bd80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f003 0308 	and.w	r3, r3, #8
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00c      	beq.n	800b05c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b04e:	461a      	mov	r2, r3
 800b050:	2308      	movs	r3, #8
 800b052:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 ff7a 	bl	800bf50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f003 0310 	and.w	r3, r3, #16
 800b062:	2b00      	cmp	r3, #0
 800b064:	d008      	beq.n	800b078 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b072:	461a      	mov	r2, r3
 800b074:	2310      	movs	r3, #16
 800b076:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d030      	beq.n	800b0e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b08a:	2b80      	cmp	r3, #128	@ 0x80
 800b08c:	d109      	bne.n	800b0a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	69fa      	ldr	r2, [r7, #28]
 800b098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b09c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b0a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	78db      	ldrb	r3, [r3, #3]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d108      	bne.n	800b0d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f007 fa1b 	bl	8012508 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0de:	461a      	mov	r2, r3
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d008      	beq.n	800b100 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	015a      	lsls	r2, r3, #5
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	2320      	movs	r3, #32
 800b0fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b116:	461a      	mov	r2, r3
 800b118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b11c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	3301      	adds	r3, #1
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f47f af62 	bne.w	800aff6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f004 fd52 	bl	800fbe0 <USB_ReadInterrupts>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b146:	f040 80db 	bne.w	800b300 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4618      	mov	r0, r3
 800b150:	f004 fd73 	bl	800fc3a <USB_ReadDevAllInEpInterrupt>
 800b154:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b15a:	e0cd      	b.n	800b2f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 80c2 	beq.w	800b2ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f004 fd99 	bl	800fcaa <USB_ReadDevInEPInterrupt>
 800b178:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d057      	beq.n	800b234 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b186:	f003 030f 	and.w	r3, r3, #15
 800b18a:	2201      	movs	r2, #1
 800b18c:	fa02 f303 	lsl.w	r3, r2, r3
 800b190:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	43db      	mvns	r3, r3
 800b19e:	69f9      	ldr	r1, [r7, #28]
 800b1a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	799b      	ldrb	r3, [r3, #6]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d132      	bne.n	800b228 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	3320      	adds	r3, #32
 800b1d2:	6819      	ldr	r1, [r3, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d8:	4613      	mov	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4403      	add	r3, r0
 800b1e2:	331c      	adds	r3, #28
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4419      	add	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4403      	add	r3, r0
 800b1f6:	3320      	adds	r3, #32
 800b1f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d113      	bne.n	800b228 <HAL_PCD_IRQHandler+0x3a2>
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b204:	4613      	mov	r3, r2
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	440b      	add	r3, r1
 800b20e:	3324      	adds	r3, #36	@ 0x24
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d108      	bne.n	800b228 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b220:	461a      	mov	r2, r3
 800b222:	2101      	movs	r1, #1
 800b224:	f004 fda0 	bl	800fd68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f007 f8ef 	bl	8012412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f003 0308 	and.w	r3, r3, #8
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d008      	beq.n	800b250 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b240:	015a      	lsls	r2, r3, #5
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	4413      	add	r3, r2
 800b246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b24a:	461a      	mov	r2, r3
 800b24c:	2308      	movs	r3, #8
 800b24e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f003 0310 	and.w	r3, r3, #16
 800b256:	2b00      	cmp	r3, #0
 800b258:	d008      	beq.n	800b26c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b266:	461a      	mov	r2, r3
 800b268:	2310      	movs	r3, #16
 800b26a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d008      	beq.n	800b288 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b282:	461a      	mov	r2, r3
 800b284:	2340      	movs	r3, #64	@ 0x40
 800b286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d023      	beq.n	800b2da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b294:	6a38      	ldr	r0, [r7, #32]
 800b296:	f003 fd87 	bl	800eda8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b29a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b29c:	4613      	mov	r3, r2
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	3310      	adds	r3, #16
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	78db      	ldrb	r3, [r3, #3]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d108      	bne.n	800b2c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f007 f932 	bl	801252c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	015a      	lsls	r2, r3, #5
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b2e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fcbd 	bl	800bc66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f4:	085b      	lsrs	r3, r3, #1
 800b2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f47f af2e 	bne.w	800b15c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f004 fc6b 	bl	800fbe0 <USB_ReadInterrupts>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b314:	d122      	bne.n	800b35c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	69fa      	ldr	r2, [r7, #28]
 800b320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b324:	f023 0301 	bic.w	r3, r3, #1
 800b328:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b330:	2b01      	cmp	r3, #1
 800b332:	d108      	bne.n	800b346 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b33c:	2100      	movs	r1, #0
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fea4 	bl	800c08c <HAL_PCDEx_LPM_Callback>
 800b344:	e002      	b.n	800b34c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f007 f8d0 	bl	80124ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	695a      	ldr	r2, [r3, #20]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b35a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f004 fc3d 	bl	800fbe0 <USB_ReadInterrupts>
 800b366:	4603      	mov	r3, r0
 800b368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b36c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b370:	d112      	bne.n	800b398 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d102      	bne.n	800b388 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f007 f88c 	bl	80124a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	695a      	ldr	r2, [r3, #20]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b396:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f004 fc1f 	bl	800fbe0 <USB_ReadInterrupts>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b3a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ac:	f040 80b7 	bne.w	800b51e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	69fa      	ldr	r2, [r7, #28]
 800b3ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3be:	f023 0301 	bic.w	r3, r3, #1
 800b3c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2110      	movs	r1, #16
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f003 fcec 	bl	800eda8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3d4:	e046      	b.n	800b464 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3fa:	0151      	lsls	r1, r2, #5
 800b3fc:	69fa      	ldr	r2, [r7, #28]
 800b3fe:	440a      	add	r2, r1
 800b400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b404:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b408:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b416:	461a      	mov	r2, r3
 800b418:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b41c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b438:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b43c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b440:	015a      	lsls	r2, r3, #5
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	4413      	add	r3, r2
 800b446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44e:	0151      	lsls	r1, r2, #5
 800b450:	69fa      	ldr	r2, [r7, #28]
 800b452:	440a      	add	r2, r1
 800b454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b458:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b45c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b460:	3301      	adds	r3, #1
 800b462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	791b      	ldrb	r3, [r3, #4]
 800b468:	461a      	mov	r2, r3
 800b46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d3b2      	bcc.n	800b3d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b47e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b482:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	7bdb      	ldrb	r3, [r3, #15]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d016      	beq.n	800b4ba <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b496:	69fa      	ldr	r2, [r7, #28]
 800b498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b49c:	f043 030b 	orr.w	r3, r3, #11
 800b4a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ac:	69fa      	ldr	r2, [r7, #28]
 800b4ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4b2:	f043 030b 	orr.w	r3, r3, #11
 800b4b6:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4b8:	e015      	b.n	800b4e6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	69fa      	ldr	r2, [r7, #28]
 800b4c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b4cc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800b4d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4e0:	f043 030b 	orr.w	r3, r3, #11
 800b4e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b4f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b508:	461a      	mov	r2, r3
 800b50a:	f004 fc2d 	bl	800fd68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	695a      	ldr	r2, [r3, #20]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b51c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4618      	mov	r0, r3
 800b524:	f004 fb5c 	bl	800fbe0 <USB_ReadInterrupts>
 800b528:	4603      	mov	r3, r0
 800b52a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b52e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b532:	d123      	bne.n	800b57c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f004 fbf2 	bl	800fd22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f003 fca9 	bl	800ee9a <USB_GetDevSpeed>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681c      	ldr	r4, [r3, #0]
 800b554:	f001 f9d6 	bl	800c904 <HAL_RCC_GetHCLKFreq>
 800b558:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b55e:	461a      	mov	r2, r3
 800b560:	4620      	mov	r0, r4
 800b562:	f003 f9ad 	bl	800e8c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f006 ff7b 	bl	8012462 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	695a      	ldr	r2, [r3, #20]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b57a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	f004 fb2d 	bl	800fbe0 <USB_ReadInterrupts>
 800b586:	4603      	mov	r3, r0
 800b588:	f003 0308 	and.w	r3, r3, #8
 800b58c:	2b08      	cmp	r3, #8
 800b58e:	d10a      	bne.n	800b5a6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f006 ff58 	bl	8012446 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	695a      	ldr	r2, [r3, #20]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f002 0208 	and.w	r2, r2, #8
 800b5a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f004 fb18 	bl	800fbe0 <USB_ReadInterrupts>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5b6:	2b80      	cmp	r3, #128	@ 0x80
 800b5b8:	d123      	bne.n	800b602 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5ca:	e014      	b.n	800b5f6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d105      	bne.n	800b5f0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fb0a 	bl	800bc04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	791b      	ldrb	r3, [r3, #4]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d3e4      	bcc.n	800b5cc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4618      	mov	r0, r3
 800b608:	f004 faea 	bl	800fbe0 <USB_ReadInterrupts>
 800b60c:	4603      	mov	r3, r0
 800b60e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b616:	d13c      	bne.n	800b692 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b618:	2301      	movs	r3, #1
 800b61a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b61c:	e02b      	b.n	800b676 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b632:	4613      	mov	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	4413      	add	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	440b      	add	r3, r1
 800b63c:	3318      	adds	r3, #24
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d115      	bne.n	800b670 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b644:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b646:	2b00      	cmp	r3, #0
 800b648:	da12      	bge.n	800b670 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b64e:	4613      	mov	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	440b      	add	r3, r1
 800b658:	3317      	adds	r3, #23
 800b65a:	2201      	movs	r2, #1
 800b65c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	b2db      	uxtb	r3, r3
 800b662:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b666:	b2db      	uxtb	r3, r3
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 faca 	bl	800bc04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	3301      	adds	r3, #1
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	791b      	ldrb	r3, [r3, #4]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	4293      	cmp	r3, r2
 800b680:	d3cd      	bcc.n	800b61e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	695a      	ldr	r2, [r3, #20]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4618      	mov	r0, r3
 800b698:	f004 faa2 	bl	800fbe0 <USB_ReadInterrupts>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b6a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6a6:	d156      	bne.n	800b756 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6ac:	e045      	b.n	800b73a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	440b      	add	r3, r1
 800b6cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d12e      	bne.n	800b734 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	da2b      	bge.n	800b734 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b6e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d121      	bne.n	800b734 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	440b      	add	r3, r1
 800b6fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b702:	2201      	movs	r2, #1
 800b704:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	69fa      	ldr	r2, [r7, #28]
 800b728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b72c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b730:	6053      	str	r3, [r2, #4]
            break;
 800b732:	e008      	b.n	800b746 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b736:	3301      	adds	r3, #1
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	791b      	ldrb	r3, [r3, #4]
 800b73e:	461a      	mov	r2, r3
 800b740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b742:	4293      	cmp	r3, r2
 800b744:	d3b3      	bcc.n	800b6ae <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695a      	ldr	r2, [r3, #20]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f004 fa40 	bl	800fbe0 <USB_ReadInterrupts>
 800b760:	4603      	mov	r3, r0
 800b762:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b76a:	d10a      	bne.n	800b782 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f006 feef 	bl	8012550 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	695a      	ldr	r2, [r3, #20]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4618      	mov	r0, r3
 800b788:	f004 fa2a 	bl	800fbe0 <USB_ReadInterrupts>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	2b04      	cmp	r3, #4
 800b794:	d115      	bne.n	800b7c2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	f003 0304 	and.w	r3, r3, #4
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f006 fedf 	bl	801256c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6859      	ldr	r1, [r3, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	605a      	str	r2, [r3, #4]
 800b7be:	e000      	b.n	800b7c2 <HAL_PCD_IRQHandler+0x93c>
      return;
 800b7c0:	bf00      	nop
    }
  }
}
 800b7c2:	3734      	adds	r7, #52	@ 0x34
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd90      	pop	{r4, r7, pc}

0800b7c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d101      	bne.n	800b7e2 <HAL_PCD_SetAddress+0x1a>
 800b7de:	2302      	movs	r3, #2
 800b7e0:	e012      	b.n	800b808 <HAL_PCD_SetAddress+0x40>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	78fa      	ldrb	r2, [r7, #3]
 800b7ee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	78fa      	ldrb	r2, [r7, #3]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f004 f989 	bl	800fb10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	4608      	mov	r0, r1
 800b81a:	4611      	mov	r1, r2
 800b81c:	461a      	mov	r2, r3
 800b81e:	4603      	mov	r3, r0
 800b820:	70fb      	strb	r3, [r7, #3]
 800b822:	460b      	mov	r3, r1
 800b824:	803b      	strh	r3, [r7, #0]
 800b826:	4613      	mov	r3, r2
 800b828:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b82a:	2300      	movs	r3, #0
 800b82c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b82e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b832:	2b00      	cmp	r3, #0
 800b834:	da0f      	bge.n	800b856 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b836:	78fb      	ldrb	r3, [r7, #3]
 800b838:	f003 020f 	and.w	r2, r3, #15
 800b83c:	4613      	mov	r3, r2
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	3310      	adds	r3, #16
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4413      	add	r3, r2
 800b84a:	3304      	adds	r3, #4
 800b84c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2201      	movs	r2, #1
 800b852:	705a      	strb	r2, [r3, #1]
 800b854:	e00f      	b.n	800b876 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b856:	78fb      	ldrb	r3, [r7, #3]
 800b858:	f003 020f 	and.w	r2, r3, #15
 800b85c:	4613      	mov	r3, r2
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	4413      	add	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	4413      	add	r3, r2
 800b86c:	3304      	adds	r3, #4
 800b86e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	f003 030f 	and.w	r3, r3, #15
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b882:	883b      	ldrh	r3, [r7, #0]
 800b884:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	78ba      	ldrb	r2, [r7, #2]
 800b890:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	785b      	ldrb	r3, [r3, #1]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d004      	beq.n	800b8a4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b8a4:	78bb      	ldrb	r3, [r7, #2]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d102      	bne.n	800b8b0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d101      	bne.n	800b8be <HAL_PCD_EP_Open+0xae>
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	e00e      	b.n	800b8dc <HAL_PCD_EP_Open+0xcc>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68f9      	ldr	r1, [r7, #12]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f003 fb09 	bl	800eee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b8da:	7afb      	ldrb	r3, [r7, #11]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b8f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	da0f      	bge.n	800b918 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	f003 020f 	and.w	r2, r3, #15
 800b8fe:	4613      	mov	r3, r2
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	4413      	add	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	3310      	adds	r3, #16
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	3304      	adds	r3, #4
 800b90e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2201      	movs	r2, #1
 800b914:	705a      	strb	r2, [r3, #1]
 800b916:	e00f      	b.n	800b938 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	f003 020f 	and.w	r2, r3, #15
 800b91e:	4613      	mov	r3, r2
 800b920:	00db      	lsls	r3, r3, #3
 800b922:	4413      	add	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	3304      	adds	r3, #4
 800b930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b938:	78fb      	ldrb	r3, [r7, #3]
 800b93a:	f003 030f 	and.w	r3, r3, #15
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_PCD_EP_Close+0x6e>
 800b94e:	2302      	movs	r3, #2
 800b950:	e00e      	b.n	800b970 <HAL_PCD_EP_Close+0x8c>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68f9      	ldr	r1, [r7, #12]
 800b960:	4618      	mov	r0, r3
 800b962:	f003 fb47 	bl	800eff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	607a      	str	r2, [r7, #4]
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	460b      	mov	r3, r1
 800b986:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	f003 020f 	and.w	r2, r3, #15
 800b98e:	4613      	mov	r3, r2
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	4413      	add	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	3304      	adds	r3, #4
 800b9a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	f003 030f 	and.w	r3, r3, #15
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	799b      	ldrb	r3, [r3, #6]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d102      	bne.n	800b9d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6818      	ldr	r0, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	799b      	ldrb	r3, [r3, #6]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	6979      	ldr	r1, [r7, #20]
 800b9e0:	f003 fbe4 	bl	800f1ac <USB_EPStartXfer>

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	f003 020f 	and.w	r2, r3, #15
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	4613      	mov	r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ba10:	681b      	ldr	r3, [r3, #0]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b086      	sub	sp, #24
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba2e:	7afb      	ldrb	r3, [r7, #11]
 800ba30:	f003 020f 	and.w	r2, r3, #15
 800ba34:	4613      	mov	r3, r2
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	3304      	adds	r3, #4
 800ba44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2200      	movs	r2, #0
 800ba56:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba5e:	7afb      	ldrb	r3, [r7, #11]
 800ba60:	f003 030f 	and.w	r3, r3, #15
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	799b      	ldrb	r3, [r3, #6]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d102      	bne.n	800ba78 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6818      	ldr	r0, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	799b      	ldrb	r3, [r3, #6]
 800ba80:	461a      	mov	r2, r3
 800ba82:	6979      	ldr	r1, [r7, #20]
 800ba84:	f003 fb92 	bl	800f1ac <USB_EPStartXfer>

  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba9e:	78fb      	ldrb	r3, [r7, #3]
 800baa0:	f003 030f 	and.w	r3, r3, #15
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	7912      	ldrb	r2, [r2, #4]
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d901      	bls.n	800bab0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e04f      	b.n	800bb50 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da0f      	bge.n	800bad8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bab8:	78fb      	ldrb	r3, [r7, #3]
 800baba:	f003 020f 	and.w	r2, r3, #15
 800babe:	4613      	mov	r3, r2
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	3310      	adds	r3, #16
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	3304      	adds	r3, #4
 800bace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2201      	movs	r2, #1
 800bad4:	705a      	strb	r2, [r3, #1]
 800bad6:	e00d      	b.n	800baf4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	4613      	mov	r3, r2
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	3304      	adds	r3, #4
 800baec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2201      	movs	r2, #1
 800baf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	f003 030f 	and.w	r3, r3, #15
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d101      	bne.n	800bb14 <HAL_PCD_EP_SetStall+0x82>
 800bb10:	2302      	movs	r3, #2
 800bb12:	e01d      	b.n	800bb50 <HAL_PCD_EP_SetStall+0xbe>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68f9      	ldr	r1, [r7, #12]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f003 ff20 	bl	800f968 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	f003 030f 	and.w	r3, r3, #15
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d109      	bne.n	800bb46 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	7999      	ldrb	r1, [r3, #6]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb40:	461a      	mov	r2, r3
 800bb42:	f004 f911 	bl	800fd68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bb64:	78fb      	ldrb	r3, [r7, #3]
 800bb66:	f003 030f 	and.w	r3, r3, #15
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	7912      	ldrb	r2, [r2, #4]
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d901      	bls.n	800bb76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e042      	b.n	800bbfc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da0f      	bge.n	800bb9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb7e:	78fb      	ldrb	r3, [r7, #3]
 800bb80:	f003 020f 	and.w	r2, r3, #15
 800bb84:	4613      	mov	r3, r2
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	4413      	add	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	3310      	adds	r3, #16
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	3304      	adds	r3, #4
 800bb94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	705a      	strb	r2, [r3, #1]
 800bb9c:	e00f      	b.n	800bbbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb9e:	78fb      	ldrb	r3, [r7, #3]
 800bba0:	f003 020f 	and.w	r2, r3, #15
 800bba4:	4613      	mov	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bbc4:	78fb      	ldrb	r3, [r7, #3]
 800bbc6:	f003 030f 	and.w	r3, r3, #15
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d101      	bne.n	800bbde <HAL_PCD_EP_ClrStall+0x86>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	e00e      	b.n	800bbfc <HAL_PCD_EP_ClrStall+0xa4>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68f9      	ldr	r1, [r7, #12]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f003 ff29 	bl	800fa44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bc10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	da0c      	bge.n	800bc32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc18:	78fb      	ldrb	r3, [r7, #3]
 800bc1a:	f003 020f 	and.w	r2, r3, #15
 800bc1e:	4613      	mov	r3, r2
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	4413      	add	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	3310      	adds	r3, #16
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	e00c      	b.n	800bc4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	f003 020f 	and.w	r2, r3, #15
 800bc38:	4613      	mov	r3, r2
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	4413      	add	r3, r2
 800bc48:	3304      	adds	r3, #4
 800bc4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68f9      	ldr	r1, [r7, #12]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f003 fd48 	bl	800f6e8 <USB_EPStopXfer>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bc5c:	7afb      	ldrb	r3, [r7, #11]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b08a      	sub	sp, #40	@ 0x28
 800bc6a:	af02      	add	r7, sp, #8
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	3310      	adds	r3, #16
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	4413      	add	r3, r2
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	695a      	ldr	r2, [r3, #20]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d901      	bls.n	800bc9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e06b      	b.n	800bd76 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d902      	bls.n	800bcba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	3303      	adds	r3, #3
 800bcbe:	089b      	lsrs	r3, r3, #2
 800bcc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcc2:	e02a      	b.n	800bd1a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	691a      	ldr	r2, [r3, #16]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d902      	bls.n	800bce0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	3303      	adds	r3, #3
 800bce4:	089b      	lsrs	r3, r3, #2
 800bce6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	68d9      	ldr	r1, [r3, #12]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6978      	ldr	r0, [r7, #20]
 800bcfe:	f003 fd9d 	bl	800f83c <USB_WritePacket>

    ep->xfer_buff  += len;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	441a      	add	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	695a      	ldr	r2, [r3, #20]
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	441a      	add	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	015a      	lsls	r2, r3, #5
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	4413      	add	r3, r2
 800bd22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd2a:	69ba      	ldr	r2, [r7, #24]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d809      	bhi.n	800bd44 <PCD_WriteEmptyTxFifo+0xde>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	695a      	ldr	r2, [r3, #20]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d203      	bcs.n	800bd44 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1bf      	bne.n	800bcc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d811      	bhi.n	800bd74 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	2201      	movs	r2, #1
 800bd58:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	43db      	mvns	r3, r3
 800bd6a:	6939      	ldr	r1, [r7, #16]
 800bd6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd70:	4013      	ands	r3, r2
 800bd72:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	333c      	adds	r3, #60	@ 0x3c
 800bd98:	3304      	adds	r3, #4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	799b      	ldrb	r3, [r3, #6]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d17b      	bne.n	800beae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f003 0308 	and.w	r3, r3, #8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d015      	beq.n	800bdec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	4a61      	ldr	r2, [pc, #388]	@ (800bf48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	f240 80b9 	bls.w	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 80b3 	beq.w	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bde2:	461a      	mov	r2, r3
 800bde4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bde8:	6093      	str	r3, [r2, #8]
 800bdea:	e0a7      	b.n	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d009      	beq.n	800be0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	015a      	lsls	r2, r3, #5
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be02:	461a      	mov	r2, r3
 800be04:	2320      	movs	r3, #32
 800be06:	6093      	str	r3, [r2, #8]
 800be08:	e098      	b.n	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800be10:	2b00      	cmp	r3, #0
 800be12:	f040 8093 	bne.w	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	4a4b      	ldr	r2, [pc, #300]	@ (800bf48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d90f      	bls.n	800be3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	015a      	lsls	r2, r3, #5
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	4413      	add	r3, r2
 800be30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be34:	461a      	mov	r2, r3
 800be36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be3a:	6093      	str	r3, [r2, #8]
 800be3c:	e07e      	b.n	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4613      	mov	r3, r2
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	4413      	add	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4413      	add	r3, r2
 800be50:	3304      	adds	r3, #4
 800be52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6a1a      	ldr	r2, [r3, #32]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	0159      	lsls	r1, r3, #5
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	440b      	add	r3, r1
 800be60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be6a:	1ad2      	subs	r2, r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d114      	bne.n	800bea0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be88:	461a      	mov	r2, r3
 800be8a:	2101      	movs	r1, #1
 800be8c:	f003 ff6c 	bl	800fd68 <USB_EP0_OutStart>
 800be90:	e006      	b.n	800bea0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68da      	ldr	r2, [r3, #12]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	441a      	add	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f006 fa98 	bl	80123dc <HAL_PCD_DataOutStageCallback>
 800beac:	e046      	b.n	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4a26      	ldr	r2, [pc, #152]	@ (800bf4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d124      	bne.n	800bf00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00a      	beq.n	800bed6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800becc:	461a      	mov	r2, r3
 800bece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bed2:	6093      	str	r3, [r2, #8]
 800bed4:	e032      	b.n	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	f003 0320 	and.w	r3, r3, #32
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d008      	beq.n	800bef2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	015a      	lsls	r2, r3, #5
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beec:	461a      	mov	r2, r3
 800beee:	2320      	movs	r3, #32
 800bef0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f006 fa6f 	bl	80123dc <HAL_PCD_DataOutStageCallback>
 800befe:	e01d      	b.n	800bf3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d114      	bne.n	800bf30 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	440b      	add	r3, r1
 800bf14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d108      	bne.n	800bf30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6818      	ldr	r0, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	f003 ff1c 	bl	800fd68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f006 fa50 	bl	80123dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	4f54300a 	.word	0x4f54300a
 800bf4c:	4f54310a 	.word	0x4f54310a

0800bf50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	333c      	adds	r3, #60	@ 0x3c
 800bf68:	3304      	adds	r3, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	015a      	lsls	r2, r3, #5
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	4413      	add	r3, r2
 800bf76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4a15      	ldr	r2, [pc, #84]	@ (800bfd8 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d90e      	bls.n	800bfa4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d009      	beq.n	800bfa4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfa2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f006 fa07 	bl	80123b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	4a0a      	ldr	r2, [pc, #40]	@ (800bfd8 <PCD_EP_OutSetupPacket_int+0x88>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d90c      	bls.n	800bfcc <PCD_EP_OutSetupPacket_int+0x7c>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	799b      	ldrb	r3, [r3, #6]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d108      	bne.n	800bfcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	f003 fece 	bl	800fd68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	4f54300a 	.word	0x4f54300a

0800bfdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d107      	bne.n	800c00a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bffa:	883b      	ldrh	r3, [r7, #0]
 800bffc:	0419      	lsls	r1, r3, #16
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	430a      	orrs	r2, r1
 800c006:	629a      	str	r2, [r3, #40]	@ 0x28
 800c008:	e028      	b.n	800c05c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c010:	0c1b      	lsrs	r3, r3, #16
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	4413      	add	r3, r2
 800c016:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
 800c01c:	e00d      	b.n	800c03a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	3340      	adds	r3, #64	@ 0x40
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	0c1b      	lsrs	r3, r3, #16
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	4413      	add	r3, r2
 800c032:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	3301      	adds	r3, #1
 800c038:	73fb      	strb	r3, [r7, #15]
 800c03a:	7bfa      	ldrb	r2, [r7, #15]
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	3b01      	subs	r3, #1
 800c040:	429a      	cmp	r2, r3
 800c042:	d3ec      	bcc.n	800c01e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c044:	883b      	ldrh	r3, [r7, #0]
 800c046:	0418      	lsls	r0, r3, #16
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	78fb      	ldrb	r3, [r7, #3]
 800c04e:	3b01      	subs	r3, #1
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	4302      	orrs	r2, r0
 800c054:	3340      	adds	r3, #64	@ 0x40
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	460b      	mov	r3, r1
 800c074:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	887a      	ldrh	r2, [r7, #2]
 800c07c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e267      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d075      	beq.n	800c1ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c0c2:	4b88      	ldr	r3, [pc, #544]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f003 030c 	and.w	r3, r3, #12
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d00c      	beq.n	800c0e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c0ce:	4b85      	ldr	r3, [pc, #532]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c0d6:	2b08      	cmp	r3, #8
 800c0d8:	d112      	bne.n	800c100 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c0da:	4b82      	ldr	r3, [pc, #520]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0e6:	d10b      	bne.n	800c100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0e8:	4b7e      	ldr	r3, [pc, #504]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d05b      	beq.n	800c1ac <HAL_RCC_OscConfig+0x108>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d157      	bne.n	800c1ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e242      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c108:	d106      	bne.n	800c118 <HAL_RCC_OscConfig+0x74>
 800c10a:	4b76      	ldr	r3, [pc, #472]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a75      	ldr	r2, [pc, #468]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c114:	6013      	str	r3, [r2, #0]
 800c116:	e01d      	b.n	800c154 <HAL_RCC_OscConfig+0xb0>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c120:	d10c      	bne.n	800c13c <HAL_RCC_OscConfig+0x98>
 800c122:	4b70      	ldr	r3, [pc, #448]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a6f      	ldr	r2, [pc, #444]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	4b6d      	ldr	r3, [pc, #436]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a6c      	ldr	r2, [pc, #432]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	e00b      	b.n	800c154 <HAL_RCC_OscConfig+0xb0>
 800c13c:	4b69      	ldr	r3, [pc, #420]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a68      	ldr	r2, [pc, #416]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	4b66      	ldr	r3, [pc, #408]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a65      	ldr	r2, [pc, #404]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c14e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d013      	beq.n	800c184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c15c:	f7f9 fd14 	bl	8005b88 <HAL_GetTick>
 800c160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c162:	e008      	b.n	800c176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c164:	f7f9 fd10 	bl	8005b88 <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b64      	cmp	r3, #100	@ 0x64
 800c170:	d901      	bls.n	800c176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e207      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c176:	4b5b      	ldr	r3, [pc, #364]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0f0      	beq.n	800c164 <HAL_RCC_OscConfig+0xc0>
 800c182:	e014      	b.n	800c1ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c184:	f7f9 fd00 	bl	8005b88 <HAL_GetTick>
 800c188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c18a:	e008      	b.n	800c19e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c18c:	f7f9 fcfc 	bl	8005b88 <HAL_GetTick>
 800c190:	4602      	mov	r2, r0
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	2b64      	cmp	r3, #100	@ 0x64
 800c198:	d901      	bls.n	800c19e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	e1f3      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c19e:	4b51      	ldr	r3, [pc, #324]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1f0      	bne.n	800c18c <HAL_RCC_OscConfig+0xe8>
 800c1aa:	e000      	b.n	800c1ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0302 	and.w	r3, r3, #2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d063      	beq.n	800c282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c1ba:	4b4a      	ldr	r3, [pc, #296]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f003 030c 	and.w	r3, r3, #12
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00b      	beq.n	800c1de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c1c6:	4b47      	ldr	r3, [pc, #284]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c1ce:	2b08      	cmp	r3, #8
 800c1d0:	d11c      	bne.n	800c20c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c1d2:	4b44      	ldr	r3, [pc, #272]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d116      	bne.n	800c20c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c1de:	4b41      	ldr	r3, [pc, #260]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d005      	beq.n	800c1f6 <HAL_RCC_OscConfig+0x152>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d001      	beq.n	800c1f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e1c7      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1f6:	4b3b      	ldr	r3, [pc, #236]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	4937      	ldr	r1, [pc, #220]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c206:	4313      	orrs	r3, r2
 800c208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c20a:	e03a      	b.n	800c282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d020      	beq.n	800c256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c214:	4b34      	ldr	r3, [pc, #208]	@ (800c2e8 <HAL_RCC_OscConfig+0x244>)
 800c216:	2201      	movs	r2, #1
 800c218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c21a:	f7f9 fcb5 	bl	8005b88 <HAL_GetTick>
 800c21e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c220:	e008      	b.n	800c234 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c222:	f7f9 fcb1 	bl	8005b88 <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d901      	bls.n	800c234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e1a8      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c234:	4b2b      	ldr	r3, [pc, #172]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0302 	and.w	r3, r3, #2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0f0      	beq.n	800c222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c240:	4b28      	ldr	r3, [pc, #160]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	4925      	ldr	r1, [pc, #148]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c250:	4313      	orrs	r3, r2
 800c252:	600b      	str	r3, [r1, #0]
 800c254:	e015      	b.n	800c282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c256:	4b24      	ldr	r3, [pc, #144]	@ (800c2e8 <HAL_RCC_OscConfig+0x244>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c25c:	f7f9 fc94 	bl	8005b88 <HAL_GetTick>
 800c260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c262:	e008      	b.n	800c276 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c264:	f7f9 fc90 	bl	8005b88 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d901      	bls.n	800c276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e187      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c276:	4b1b      	ldr	r3, [pc, #108]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1f0      	bne.n	800c264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0308 	and.w	r3, r3, #8
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d036      	beq.n	800c2fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d016      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c296:	4b15      	ldr	r3, [pc, #84]	@ (800c2ec <HAL_RCC_OscConfig+0x248>)
 800c298:	2201      	movs	r2, #1
 800c29a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c29c:	f7f9 fc74 	bl	8005b88 <HAL_GetTick>
 800c2a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2a4:	f7f9 fc70 	bl	8005b88 <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e167      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2e4 <HAL_RCC_OscConfig+0x240>)
 800c2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0f0      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x200>
 800c2c2:	e01b      	b.n	800c2fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c2c4:	4b09      	ldr	r3, [pc, #36]	@ (800c2ec <HAL_RCC_OscConfig+0x248>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c2ca:	f7f9 fc5d 	bl	8005b88 <HAL_GetTick>
 800c2ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2d0:	e00e      	b.n	800c2f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2d2:	f7f9 fc59 	bl	8005b88 <HAL_GetTick>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d907      	bls.n	800c2f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e150      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
 800c2e4:	40023800 	.word	0x40023800
 800c2e8:	42470000 	.word	0x42470000
 800c2ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c2f0:	4b88      	ldr	r3, [pc, #544]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c2f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2f4:	f003 0302 	and.w	r3, r3, #2
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ea      	bne.n	800c2d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 8097 	beq.w	800c438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c30e:	4b81      	ldr	r3, [pc, #516]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10f      	bne.n	800c33a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c31a:	2300      	movs	r3, #0
 800c31c:	60bb      	str	r3, [r7, #8]
 800c31e:	4b7d      	ldr	r3, [pc, #500]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c322:	4a7c      	ldr	r2, [pc, #496]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c328:	6413      	str	r3, [r2, #64]	@ 0x40
 800c32a:	4b7a      	ldr	r3, [pc, #488]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c32e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c332:	60bb      	str	r3, [r7, #8]
 800c334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c336:	2301      	movs	r3, #1
 800c338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c33a:	4b77      	ldr	r3, [pc, #476]	@ (800c518 <HAL_RCC_OscConfig+0x474>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c342:	2b00      	cmp	r3, #0
 800c344:	d118      	bne.n	800c378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c346:	4b74      	ldr	r3, [pc, #464]	@ (800c518 <HAL_RCC_OscConfig+0x474>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a73      	ldr	r2, [pc, #460]	@ (800c518 <HAL_RCC_OscConfig+0x474>)
 800c34c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c352:	f7f9 fc19 	bl	8005b88 <HAL_GetTick>
 800c356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c358:	e008      	b.n	800c36c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c35a:	f7f9 fc15 	bl	8005b88 <HAL_GetTick>
 800c35e:	4602      	mov	r2, r0
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	2b02      	cmp	r3, #2
 800c366:	d901      	bls.n	800c36c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c368:	2303      	movs	r3, #3
 800c36a:	e10c      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c36c:	4b6a      	ldr	r3, [pc, #424]	@ (800c518 <HAL_RCC_OscConfig+0x474>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0f0      	beq.n	800c35a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d106      	bne.n	800c38e <HAL_RCC_OscConfig+0x2ea>
 800c380:	4b64      	ldr	r3, [pc, #400]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c384:	4a63      	ldr	r2, [pc, #396]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c386:	f043 0301 	orr.w	r3, r3, #1
 800c38a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c38c:	e01c      	b.n	800c3c8 <HAL_RCC_OscConfig+0x324>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	2b05      	cmp	r3, #5
 800c394:	d10c      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x30c>
 800c396:	4b5f      	ldr	r3, [pc, #380]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c39a:	4a5e      	ldr	r2, [pc, #376]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c39c:	f043 0304 	orr.w	r3, r3, #4
 800c3a0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3a2:	4b5c      	ldr	r3, [pc, #368]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3a6:	4a5b      	ldr	r2, [pc, #364]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3a8:	f043 0301 	orr.w	r3, r3, #1
 800c3ac:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3ae:	e00b      	b.n	800c3c8 <HAL_RCC_OscConfig+0x324>
 800c3b0:	4b58      	ldr	r3, [pc, #352]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3b4:	4a57      	ldr	r2, [pc, #348]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3b6:	f023 0301 	bic.w	r3, r3, #1
 800c3ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3bc:	4b55      	ldr	r3, [pc, #340]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3c0:	4a54      	ldr	r2, [pc, #336]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3c2:	f023 0304 	bic.w	r3, r3, #4
 800c3c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d015      	beq.n	800c3fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3d0:	f7f9 fbda 	bl	8005b88 <HAL_GetTick>
 800c3d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3d6:	e00a      	b.n	800c3ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3d8:	f7f9 fbd6 	bl	8005b88 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d901      	bls.n	800c3ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e0cb      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3ee:	4b49      	ldr	r3, [pc, #292]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0ee      	beq.n	800c3d8 <HAL_RCC_OscConfig+0x334>
 800c3fa:	e014      	b.n	800c426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3fc:	f7f9 fbc4 	bl	8005b88 <HAL_GetTick>
 800c400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c402:	e00a      	b.n	800c41a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c404:	f7f9 fbc0 	bl	8005b88 <HAL_GetTick>
 800c408:	4602      	mov	r2, r0
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c412:	4293      	cmp	r3, r2
 800c414:	d901      	bls.n	800c41a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e0b5      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c41a:	4b3e      	ldr	r3, [pc, #248]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c41c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c41e:	f003 0302 	and.w	r3, r3, #2
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1ee      	bne.n	800c404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d105      	bne.n	800c438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c42c:	4b39      	ldr	r3, [pc, #228]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c430:	4a38      	ldr	r2, [pc, #224]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 80a1 	beq.w	800c584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c442:	4b34      	ldr	r3, [pc, #208]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	f003 030c 	and.w	r3, r3, #12
 800c44a:	2b08      	cmp	r3, #8
 800c44c:	d05c      	beq.n	800c508 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	2b02      	cmp	r3, #2
 800c454:	d141      	bne.n	800c4da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c456:	4b31      	ldr	r3, [pc, #196]	@ (800c51c <HAL_RCC_OscConfig+0x478>)
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c45c:	f7f9 fb94 	bl	8005b88 <HAL_GetTick>
 800c460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c462:	e008      	b.n	800c476 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c464:	f7f9 fb90 	bl	8005b88 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d901      	bls.n	800c476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	e087      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c476:	4b27      	ldr	r3, [pc, #156]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f0      	bne.n	800c464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	69da      	ldr	r2, [r3, #28]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	431a      	orrs	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c490:	019b      	lsls	r3, r3, #6
 800c492:	431a      	orrs	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c498:	085b      	lsrs	r3, r3, #1
 800c49a:	3b01      	subs	r3, #1
 800c49c:	041b      	lsls	r3, r3, #16
 800c49e:	431a      	orrs	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a4:	061b      	lsls	r3, r3, #24
 800c4a6:	491b      	ldr	r1, [pc, #108]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c4ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c51c <HAL_RCC_OscConfig+0x478>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4b2:	f7f9 fb69 	bl	8005b88 <HAL_GetTick>
 800c4b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4b8:	e008      	b.n	800c4cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4ba:	f7f9 fb65 	bl	8005b88 <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e05c      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4cc:	4b11      	ldr	r3, [pc, #68]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d0f0      	beq.n	800c4ba <HAL_RCC_OscConfig+0x416>
 800c4d8:	e054      	b.n	800c584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4da:	4b10      	ldr	r3, [pc, #64]	@ (800c51c <HAL_RCC_OscConfig+0x478>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4e0:	f7f9 fb52 	bl	8005b88 <HAL_GetTick>
 800c4e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4e6:	e008      	b.n	800c4fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4e8:	f7f9 fb4e 	bl	8005b88 <HAL_GetTick>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e045      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4fa:	4b06      	ldr	r3, [pc, #24]	@ (800c514 <HAL_RCC_OscConfig+0x470>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1f0      	bne.n	800c4e8 <HAL_RCC_OscConfig+0x444>
 800c506:	e03d      	b.n	800c584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d107      	bne.n	800c520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	e038      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
 800c514:	40023800 	.word	0x40023800
 800c518:	40007000 	.word	0x40007000
 800c51c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c520:	4b1b      	ldr	r3, [pc, #108]	@ (800c590 <HAL_RCC_OscConfig+0x4ec>)
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d028      	beq.n	800c580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c538:	429a      	cmp	r2, r3
 800c53a:	d121      	bne.n	800c580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c546:	429a      	cmp	r2, r3
 800c548:	d11a      	bne.n	800c580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c550:	4013      	ands	r3, r2
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c558:	4293      	cmp	r3, r2
 800c55a:	d111      	bne.n	800c580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c566:	085b      	lsrs	r3, r3, #1
 800c568:	3b01      	subs	r3, #1
 800c56a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d107      	bne.n	800c580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c57a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d001      	beq.n	800c584 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	40023800 	.word	0x40023800

0800c594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e0cc      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c5a8:	4b68      	ldr	r3, [pc, #416]	@ (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0307 	and.w	r3, r3, #7
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d90c      	bls.n	800c5d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5b6:	4b65      	ldr	r3, [pc, #404]	@ (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	b2d2      	uxtb	r2, r2
 800c5bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5be:	4b63      	ldr	r3, [pc, #396]	@ (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 0307 	and.w	r3, r3, #7
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d001      	beq.n	800c5d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e0b8      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0302 	and.w	r3, r3, #2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d020      	beq.n	800c61e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d005      	beq.n	800c5f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5e8:	4b59      	ldr	r3, [pc, #356]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	4a58      	ldr	r2, [pc, #352]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c5f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0308 	and.w	r3, r3, #8
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d005      	beq.n	800c60c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c600:	4b53      	ldr	r3, [pc, #332]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	4a52      	ldr	r2, [pc, #328]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c60a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c60c:	4b50      	ldr	r3, [pc, #320]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	494d      	ldr	r1, [pc, #308]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0301 	and.w	r3, r3, #1
 800c626:	2b00      	cmp	r3, #0
 800c628:	d044      	beq.n	800c6b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d107      	bne.n	800c642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c632:	4b47      	ldr	r3, [pc, #284]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d119      	bne.n	800c672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e07f      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	2b02      	cmp	r3, #2
 800c648:	d003      	beq.n	800c652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d107      	bne.n	800c662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c652:	4b3f      	ldr	r3, [pc, #252]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d109      	bne.n	800c672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e06f      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c662:	4b3b      	ldr	r3, [pc, #236]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	e067      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c672:	4b37      	ldr	r3, [pc, #220]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	f023 0203 	bic.w	r2, r3, #3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	4934      	ldr	r1, [pc, #208]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c680:	4313      	orrs	r3, r2
 800c682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c684:	f7f9 fa80 	bl	8005b88 <HAL_GetTick>
 800c688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c68a:	e00a      	b.n	800c6a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c68c:	f7f9 fa7c 	bl	8005b88 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e04f      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6a2:	4b2b      	ldr	r3, [pc, #172]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 020c 	and.w	r2, r3, #12
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d1eb      	bne.n	800c68c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c6b4:	4b25      	ldr	r3, [pc, #148]	@ (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d20c      	bcs.n	800c6dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6c2:	4b22      	ldr	r3, [pc, #136]	@ (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ca:	4b20      	ldr	r3, [pc, #128]	@ (800c74c <HAL_RCC_ClockConfig+0x1b8>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d001      	beq.n	800c6dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e032      	b.n	800c742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d008      	beq.n	800c6fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6e8:	4b19      	ldr	r3, [pc, #100]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	4916      	ldr	r1, [pc, #88]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0308 	and.w	r3, r3, #8
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c706:	4b12      	ldr	r3, [pc, #72]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	490e      	ldr	r1, [pc, #56]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c716:	4313      	orrs	r3, r2
 800c718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c71a:	f000 f82d 	bl	800c778 <HAL_RCC_GetSysClockFreq>
 800c71e:	4602      	mov	r2, r0
 800c720:	4b0b      	ldr	r3, [pc, #44]	@ (800c750 <HAL_RCC_ClockConfig+0x1bc>)
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	091b      	lsrs	r3, r3, #4
 800c726:	f003 030f 	and.w	r3, r3, #15
 800c72a:	490a      	ldr	r1, [pc, #40]	@ (800c754 <HAL_RCC_ClockConfig+0x1c0>)
 800c72c:	5ccb      	ldrb	r3, [r1, r3]
 800c72e:	fa22 f303 	lsr.w	r3, r2, r3
 800c732:	4a09      	ldr	r2, [pc, #36]	@ (800c758 <HAL_RCC_ClockConfig+0x1c4>)
 800c734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c736:	4b09      	ldr	r3, [pc, #36]	@ (800c75c <HAL_RCC_ClockConfig+0x1c8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f9 f9e0 	bl	8005b00 <HAL_InitTick>

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40023c00 	.word	0x40023c00
 800c750:	40023800 	.word	0x40023800
 800c754:	08014b78 	.word	0x08014b78
 800c758:	20000010 	.word	0x20000010
 800c75c:	20000014 	.word	0x20000014

0800c760 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800c764:	4b03      	ldr	r3, [pc, #12]	@ (800c774 <HAL_RCC_EnableCSS+0x14>)
 800c766:	2201      	movs	r2, #1
 800c768:	601a      	str	r2, [r3, #0]
}
 800c76a:	bf00      	nop
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	4247004c 	.word	0x4247004c

0800c778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c77c:	b090      	sub	sp, #64	@ 0x40
 800c77e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c780:	2300      	movs	r3, #0
 800c782:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800c788:	2300      	movs	r3, #0
 800c78a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c790:	4b59      	ldr	r3, [pc, #356]	@ (800c8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f003 030c 	and.w	r3, r3, #12
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d00d      	beq.n	800c7b8 <HAL_RCC_GetSysClockFreq+0x40>
 800c79c:	2b08      	cmp	r3, #8
 800c79e:	f200 80a1 	bhi.w	800c8e4 <HAL_RCC_GetSysClockFreq+0x16c>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <HAL_RCC_GetSysClockFreq+0x34>
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d003      	beq.n	800c7b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c7aa:	e09b      	b.n	800c8e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c7ac:	4b53      	ldr	r3, [pc, #332]	@ (800c8fc <HAL_RCC_GetSysClockFreq+0x184>)
 800c7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c7b0:	e09b      	b.n	800c8ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c7b2:	4b53      	ldr	r3, [pc, #332]	@ (800c900 <HAL_RCC_GetSysClockFreq+0x188>)
 800c7b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c7b6:	e098      	b.n	800c8ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c7b8:	4b4f      	ldr	r3, [pc, #316]	@ (800c8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c7c2:	4b4d      	ldr	r3, [pc, #308]	@ (800c8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d028      	beq.n	800c820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7ce:	4b4a      	ldr	r3, [pc, #296]	@ (800c8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	099b      	lsrs	r3, r3, #6
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	623b      	str	r3, [r7, #32]
 800c7d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4b47      	ldr	r3, [pc, #284]	@ (800c900 <HAL_RCC_GetSysClockFreq+0x188>)
 800c7e4:	fb03 f201 	mul.w	r2, r3, r1
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	fb00 f303 	mul.w	r3, r0, r3
 800c7ee:	4413      	add	r3, r2
 800c7f0:	4a43      	ldr	r2, [pc, #268]	@ (800c900 <HAL_RCC_GetSysClockFreq+0x188>)
 800c7f2:	fba0 1202 	umull	r1, r2, r0, r2
 800c7f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c7fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7fe:	4413      	add	r3, r2
 800c800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c804:	2200      	movs	r2, #0
 800c806:	61bb      	str	r3, [r7, #24]
 800c808:	61fa      	str	r2, [r7, #28]
 800c80a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c80e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c812:	f7f4 f933 	bl	8000a7c <__aeabi_uldivmod>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4613      	mov	r3, r2
 800c81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c81e:	e053      	b.n	800c8c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c820:	4b35      	ldr	r3, [pc, #212]	@ (800c8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	099b      	lsrs	r3, r3, #6
 800c826:	2200      	movs	r2, #0
 800c828:	613b      	str	r3, [r7, #16]
 800c82a:	617a      	str	r2, [r7, #20]
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c832:	f04f 0b00 	mov.w	fp, #0
 800c836:	4652      	mov	r2, sl
 800c838:	465b      	mov	r3, fp
 800c83a:	f04f 0000 	mov.w	r0, #0
 800c83e:	f04f 0100 	mov.w	r1, #0
 800c842:	0159      	lsls	r1, r3, #5
 800c844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c848:	0150      	lsls	r0, r2, #5
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	ebb2 080a 	subs.w	r8, r2, sl
 800c852:	eb63 090b 	sbc.w	r9, r3, fp
 800c856:	f04f 0200 	mov.w	r2, #0
 800c85a:	f04f 0300 	mov.w	r3, #0
 800c85e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c86a:	ebb2 0408 	subs.w	r4, r2, r8
 800c86e:	eb63 0509 	sbc.w	r5, r3, r9
 800c872:	f04f 0200 	mov.w	r2, #0
 800c876:	f04f 0300 	mov.w	r3, #0
 800c87a:	00eb      	lsls	r3, r5, #3
 800c87c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c880:	00e2      	lsls	r2, r4, #3
 800c882:	4614      	mov	r4, r2
 800c884:	461d      	mov	r5, r3
 800c886:	eb14 030a 	adds.w	r3, r4, sl
 800c88a:	603b      	str	r3, [r7, #0]
 800c88c:	eb45 030b 	adc.w	r3, r5, fp
 800c890:	607b      	str	r3, [r7, #4]
 800c892:	f04f 0200 	mov.w	r2, #0
 800c896:	f04f 0300 	mov.w	r3, #0
 800c89a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c89e:	4629      	mov	r1, r5
 800c8a0:	028b      	lsls	r3, r1, #10
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	028a      	lsls	r2, r1, #10
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	60bb      	str	r3, [r7, #8]
 800c8b6:	60fa      	str	r2, [r7, #12]
 800c8b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8bc:	f7f4 f8de 	bl	8000a7c <__aeabi_uldivmod>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	0c1b      	lsrs	r3, r3, #16
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800c8d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c8e2:	e002      	b.n	800c8ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c8e4:	4b05      	ldr	r3, [pc, #20]	@ (800c8fc <HAL_RCC_GetSysClockFreq+0x184>)
 800c8e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800c8e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3740      	adds	r7, #64	@ 0x40
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8f6:	bf00      	nop
 800c8f8:	40023800 	.word	0x40023800
 800c8fc:	00f42400 	.word	0x00f42400
 800c900:	017d7840 	.word	0x017d7840

0800c904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c904:	b480      	push	{r7}
 800c906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c908:	4b03      	ldr	r3, [pc, #12]	@ (800c918 <HAL_RCC_GetHCLKFreq+0x14>)
 800c90a:	681b      	ldr	r3, [r3, #0]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	20000010 	.word	0x20000010

0800c91c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c920:	f7ff fff0 	bl	800c904 <HAL_RCC_GetHCLKFreq>
 800c924:	4602      	mov	r2, r0
 800c926:	4b05      	ldr	r3, [pc, #20]	@ (800c93c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	0a9b      	lsrs	r3, r3, #10
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	4903      	ldr	r1, [pc, #12]	@ (800c940 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c932:	5ccb      	ldrb	r3, [r1, r3]
 800c934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c938:	4618      	mov	r0, r3
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	40023800 	.word	0x40023800
 800c940:	08014b88 	.word	0x08014b88

0800c944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c948:	f7ff ffdc 	bl	800c904 <HAL_RCC_GetHCLKFreq>
 800c94c:	4602      	mov	r2, r0
 800c94e:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	0b5b      	lsrs	r3, r3, #13
 800c954:	f003 0307 	and.w	r3, r3, #7
 800c958:	4903      	ldr	r1, [pc, #12]	@ (800c968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c95a:	5ccb      	ldrb	r3, [r1, r3]
 800c95c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c960:	4618      	mov	r0, r3
 800c962:	bd80      	pop	{r7, pc}
 800c964:	40023800 	.word	0x40023800
 800c968:	08014b88 	.word	0x08014b88

0800c96c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800c970:	4b06      	ldr	r3, [pc, #24]	@ (800c98c <HAL_RCC_NMI_IRQHandler+0x20>)
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c978:	2b80      	cmp	r3, #128	@ 0x80
 800c97a:	d104      	bne.n	800c986 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800c97c:	f000 f80a 	bl	800c994 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800c980:	4b03      	ldr	r3, [pc, #12]	@ (800c990 <HAL_RCC_NMI_IRQHandler+0x24>)
 800c982:	2280      	movs	r2, #128	@ 0x80
 800c984:	701a      	strb	r2, [r3, #0]
  }
}
 800c986:	bf00      	nop
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	40023800 	.word	0x40023800
 800c990:	4002380e 	.word	0x4002380e

0800c994 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800c994:	b480      	push	{r7}
 800c996:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800c998:	bf00      	nop
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e041      	b.n	800ca38 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f8 fe87 	bl	80056dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2202      	movs	r2, #2
 800c9d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	f000 fc3b 	bl	800d25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2201      	movs	r2, #1
 800ca22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d001      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e044      	b.n	800cae2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68da      	ldr	r2, [r3, #12]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f042 0201 	orr.w	r2, r2, #1
 800ca6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a1e      	ldr	r2, [pc, #120]	@ (800caf0 <HAL_TIM_Base_Start_IT+0xb0>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d018      	beq.n	800caac <HAL_TIM_Base_Start_IT+0x6c>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca82:	d013      	beq.n	800caac <HAL_TIM_Base_Start_IT+0x6c>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a1a      	ldr	r2, [pc, #104]	@ (800caf4 <HAL_TIM_Base_Start_IT+0xb4>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d00e      	beq.n	800caac <HAL_TIM_Base_Start_IT+0x6c>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a19      	ldr	r2, [pc, #100]	@ (800caf8 <HAL_TIM_Base_Start_IT+0xb8>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d009      	beq.n	800caac <HAL_TIM_Base_Start_IT+0x6c>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a17      	ldr	r2, [pc, #92]	@ (800cafc <HAL_TIM_Base_Start_IT+0xbc>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d004      	beq.n	800caac <HAL_TIM_Base_Start_IT+0x6c>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a16      	ldr	r2, [pc, #88]	@ (800cb00 <HAL_TIM_Base_Start_IT+0xc0>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d111      	bne.n	800cad0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b06      	cmp	r3, #6
 800cabc:	d010      	beq.n	800cae0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f042 0201 	orr.w	r2, r2, #1
 800cacc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cace:	e007      	b.n	800cae0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f042 0201 	orr.w	r2, r2, #1
 800cade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	40010000 	.word	0x40010000
 800caf4:	40000400 	.word	0x40000400
 800caf8:	40000800 	.word	0x40000800
 800cafc:	40000c00 	.word	0x40000c00
 800cb00:	40014000 	.word	0x40014000

0800cb04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e041      	b.n	800cb9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d106      	bne.n	800cb30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f839 	bl	800cba2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f000 fb8a 	bl	800d25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cba2:	b480      	push	{r7}
 800cba4:	b083      	sub	sp, #12
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cbaa:	bf00      	nop
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
	...

0800cbb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d109      	bne.n	800cbdc <HAL_TIM_PWM_Start+0x24>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	bf14      	ite	ne
 800cbd4:	2301      	movne	r3, #1
 800cbd6:	2300      	moveq	r3, #0
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	e022      	b.n	800cc22 <HAL_TIM_PWM_Start+0x6a>
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d109      	bne.n	800cbf6 <HAL_TIM_PWM_Start+0x3e>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	bf14      	ite	ne
 800cbee:	2301      	movne	r3, #1
 800cbf0:	2300      	moveq	r3, #0
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	e015      	b.n	800cc22 <HAL_TIM_PWM_Start+0x6a>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d109      	bne.n	800cc10 <HAL_TIM_PWM_Start+0x58>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	bf14      	ite	ne
 800cc08:	2301      	movne	r3, #1
 800cc0a:	2300      	moveq	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	e008      	b.n	800cc22 <HAL_TIM_PWM_Start+0x6a>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	bf14      	ite	ne
 800cc1c:	2301      	movne	r3, #1
 800cc1e:	2300      	moveq	r3, #0
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e068      	b.n	800ccfc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d104      	bne.n	800cc3a <HAL_TIM_PWM_Start+0x82>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2202      	movs	r2, #2
 800cc34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cc38:	e013      	b.n	800cc62 <HAL_TIM_PWM_Start+0xaa>
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b04      	cmp	r3, #4
 800cc3e:	d104      	bne.n	800cc4a <HAL_TIM_PWM_Start+0x92>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2202      	movs	r2, #2
 800cc44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc48:	e00b      	b.n	800cc62 <HAL_TIM_PWM_Start+0xaa>
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2b08      	cmp	r3, #8
 800cc4e:	d104      	bne.n	800cc5a <HAL_TIM_PWM_Start+0xa2>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2202      	movs	r2, #2
 800cc54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc58:	e003      	b.n	800cc62 <HAL_TIM_PWM_Start+0xaa>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2201      	movs	r2, #1
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fda8 	bl	800d7c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a23      	ldr	r2, [pc, #140]	@ (800cd04 <HAL_TIM_PWM_Start+0x14c>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d107      	bne.n	800cc8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cc88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a1d      	ldr	r2, [pc, #116]	@ (800cd04 <HAL_TIM_PWM_Start+0x14c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d018      	beq.n	800ccc6 <HAL_TIM_PWM_Start+0x10e>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc9c:	d013      	beq.n	800ccc6 <HAL_TIM_PWM_Start+0x10e>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a19      	ldr	r2, [pc, #100]	@ (800cd08 <HAL_TIM_PWM_Start+0x150>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d00e      	beq.n	800ccc6 <HAL_TIM_PWM_Start+0x10e>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a17      	ldr	r2, [pc, #92]	@ (800cd0c <HAL_TIM_PWM_Start+0x154>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d009      	beq.n	800ccc6 <HAL_TIM_PWM_Start+0x10e>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a16      	ldr	r2, [pc, #88]	@ (800cd10 <HAL_TIM_PWM_Start+0x158>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d004      	beq.n	800ccc6 <HAL_TIM_PWM_Start+0x10e>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a14      	ldr	r2, [pc, #80]	@ (800cd14 <HAL_TIM_PWM_Start+0x15c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d111      	bne.n	800ccea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f003 0307 	and.w	r3, r3, #7
 800ccd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b06      	cmp	r3, #6
 800ccd6:	d010      	beq.n	800ccfa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f042 0201 	orr.w	r2, r2, #1
 800cce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cce8:	e007      	b.n	800ccfa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f042 0201 	orr.w	r2, r2, #1
 800ccf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	40010000 	.word	0x40010000
 800cd08:	40000400 	.word	0x40000400
 800cd0c:	40000800 	.word	0x40000800
 800cd10:	40000c00 	.word	0x40000c00
 800cd14:	40014000 	.word	0x40014000

0800cd18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d020      	beq.n	800cd7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01b      	beq.n	800cd7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f06f 0202 	mvn.w	r2, #2
 800cd4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	f003 0303 	and.w	r3, r3, #3
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fa5b 	bl	800d21e <HAL_TIM_IC_CaptureCallback>
 800cd68:	e005      	b.n	800cd76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa4d 	bl	800d20a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fa5e 	bl	800d232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f003 0304 	and.w	r3, r3, #4
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d020      	beq.n	800cdc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f003 0304 	and.w	r3, r3, #4
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01b      	beq.n	800cdc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f06f 0204 	mvn.w	r2, #4
 800cd98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fa35 	bl	800d21e <HAL_TIM_IC_CaptureCallback>
 800cdb4:	e005      	b.n	800cdc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fa27 	bl	800d20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fa38 	bl	800d232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d020      	beq.n	800ce14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f003 0308 	and.w	r3, r3, #8
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d01b      	beq.n	800ce14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f06f 0208 	mvn.w	r2, #8
 800cde4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2204      	movs	r2, #4
 800cdea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	69db      	ldr	r3, [r3, #28]
 800cdf2:	f003 0303 	and.w	r3, r3, #3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fa0f 	bl	800d21e <HAL_TIM_IC_CaptureCallback>
 800ce00:	e005      	b.n	800ce0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 fa01 	bl	800d20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fa12 	bl	800d232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f003 0310 	and.w	r3, r3, #16
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d020      	beq.n	800ce60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f003 0310 	and.w	r3, r3, #16
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d01b      	beq.n	800ce60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f06f 0210 	mvn.w	r2, #16
 800ce30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2208      	movs	r2, #8
 800ce36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f9e9 	bl	800d21e <HAL_TIM_IC_CaptureCallback>
 800ce4c:	e005      	b.n	800ce5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f9db 	bl	800d20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f9ec 	bl	800d232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00c      	beq.n	800ce84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d007      	beq.n	800ce84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f06f 0201 	mvn.w	r2, #1
 800ce7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7f8 f81c 	bl	8004ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00c      	beq.n	800cea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fd2a 	bl	800d8fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00c      	beq.n	800cecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d007      	beq.n	800cecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f9bd 	bl	800d246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f003 0320 	and.w	r3, r3, #32
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00c      	beq.n	800cef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f003 0320 	and.w	r3, r3, #32
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d007      	beq.n	800cef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f06f 0220 	mvn.w	r2, #32
 800cee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fcfc 	bl	800d8e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cef0:	bf00      	nop
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d101      	bne.n	800cf16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cf12:	2302      	movs	r3, #2
 800cf14:	e0ae      	b.n	800d074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b0c      	cmp	r3, #12
 800cf22:	f200 809f 	bhi.w	800d064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cf26:	a201      	add	r2, pc, #4	@ (adr r2, 800cf2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2c:	0800cf61 	.word	0x0800cf61
 800cf30:	0800d065 	.word	0x0800d065
 800cf34:	0800d065 	.word	0x0800d065
 800cf38:	0800d065 	.word	0x0800d065
 800cf3c:	0800cfa1 	.word	0x0800cfa1
 800cf40:	0800d065 	.word	0x0800d065
 800cf44:	0800d065 	.word	0x0800d065
 800cf48:	0800d065 	.word	0x0800d065
 800cf4c:	0800cfe3 	.word	0x0800cfe3
 800cf50:	0800d065 	.word	0x0800d065
 800cf54:	0800d065 	.word	0x0800d065
 800cf58:	0800d065 	.word	0x0800d065
 800cf5c:	0800d023 	.word	0x0800d023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68b9      	ldr	r1, [r7, #8]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fa04 	bl	800d374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	699a      	ldr	r2, [r3, #24]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f042 0208 	orr.w	r2, r2, #8
 800cf7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	699a      	ldr	r2, [r3, #24]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f022 0204 	bic.w	r2, r2, #4
 800cf8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6999      	ldr	r1, [r3, #24]
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	691a      	ldr	r2, [r3, #16]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	619a      	str	r2, [r3, #24]
      break;
 800cf9e:	e064      	b.n	800d06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68b9      	ldr	r1, [r7, #8]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 fa4a 	bl	800d440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	699a      	ldr	r2, [r3, #24]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cfba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	699a      	ldr	r2, [r3, #24]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cfca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6999      	ldr	r1, [r3, #24]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	021a      	lsls	r2, r3, #8
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	619a      	str	r2, [r3, #24]
      break;
 800cfe0:	e043      	b.n	800d06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fa95 	bl	800d518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	69da      	ldr	r2, [r3, #28]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f042 0208 	orr.w	r2, r2, #8
 800cffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	69da      	ldr	r2, [r3, #28]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f022 0204 	bic.w	r2, r2, #4
 800d00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	69d9      	ldr	r1, [r3, #28]
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	691a      	ldr	r2, [r3, #16]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	61da      	str	r2, [r3, #28]
      break;
 800d020:	e023      	b.n	800d06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 fadf 	bl	800d5ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	69da      	ldr	r2, [r3, #28]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	69da      	ldr	r2, [r3, #28]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	69d9      	ldr	r1, [r3, #28]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	021a      	lsls	r2, r3, #8
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	430a      	orrs	r2, r1
 800d060:	61da      	str	r2, [r3, #28]
      break;
 800d062:	e002      	b.n	800d06a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	75fb      	strb	r3, [r7, #23]
      break;
 800d068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d090:	2b01      	cmp	r3, #1
 800d092:	d101      	bne.n	800d098 <HAL_TIM_ConfigClockSource+0x1c>
 800d094:	2302      	movs	r3, #2
 800d096:	e0b4      	b.n	800d202 <HAL_TIM_ConfigClockSource+0x186>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d0be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0d0:	d03e      	beq.n	800d150 <HAL_TIM_ConfigClockSource+0xd4>
 800d0d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0d6:	f200 8087 	bhi.w	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0de:	f000 8086 	beq.w	800d1ee <HAL_TIM_ConfigClockSource+0x172>
 800d0e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0e6:	d87f      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d0e8:	2b70      	cmp	r3, #112	@ 0x70
 800d0ea:	d01a      	beq.n	800d122 <HAL_TIM_ConfigClockSource+0xa6>
 800d0ec:	2b70      	cmp	r3, #112	@ 0x70
 800d0ee:	d87b      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d0f0:	2b60      	cmp	r3, #96	@ 0x60
 800d0f2:	d050      	beq.n	800d196 <HAL_TIM_ConfigClockSource+0x11a>
 800d0f4:	2b60      	cmp	r3, #96	@ 0x60
 800d0f6:	d877      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d0f8:	2b50      	cmp	r3, #80	@ 0x50
 800d0fa:	d03c      	beq.n	800d176 <HAL_TIM_ConfigClockSource+0xfa>
 800d0fc:	2b50      	cmp	r3, #80	@ 0x50
 800d0fe:	d873      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d100:	2b40      	cmp	r3, #64	@ 0x40
 800d102:	d058      	beq.n	800d1b6 <HAL_TIM_ConfigClockSource+0x13a>
 800d104:	2b40      	cmp	r3, #64	@ 0x40
 800d106:	d86f      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d108:	2b30      	cmp	r3, #48	@ 0x30
 800d10a:	d064      	beq.n	800d1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d10c:	2b30      	cmp	r3, #48	@ 0x30
 800d10e:	d86b      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d110:	2b20      	cmp	r3, #32
 800d112:	d060      	beq.n	800d1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d114:	2b20      	cmp	r3, #32
 800d116:	d867      	bhi.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d05c      	beq.n	800d1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d11c:	2b10      	cmp	r3, #16
 800d11e:	d05a      	beq.n	800d1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800d120:	e062      	b.n	800d1e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d132:	f000 fb25 	bl	800d780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	609a      	str	r2, [r3, #8]
      break;
 800d14e:	e04f      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d160:	f000 fb0e 	bl	800d780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	689a      	ldr	r2, [r3, #8]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d172:	609a      	str	r2, [r3, #8]
      break;
 800d174:	e03c      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d182:	461a      	mov	r2, r3
 800d184:	f000 fa82 	bl	800d68c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2150      	movs	r1, #80	@ 0x50
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fadb 	bl	800d74a <TIM_ITRx_SetConfig>
      break;
 800d194:	e02c      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f000 faa1 	bl	800d6ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2160      	movs	r1, #96	@ 0x60
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 facb 	bl	800d74a <TIM_ITRx_SetConfig>
      break;
 800d1b4:	e01c      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	f000 fa62 	bl	800d68c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2140      	movs	r1, #64	@ 0x40
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 fabb 	bl	800d74a <TIM_ITRx_SetConfig>
      break;
 800d1d4:	e00c      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	f000 fab2 	bl	800d74a <TIM_ITRx_SetConfig>
      break;
 800d1e6:	e003      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ec:	e000      	b.n	800d1f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d1ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d200:	7bfb      	ldrb	r3, [r7, #15]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d212:	bf00      	nop
 800d214:	370c      	adds	r7, #12
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d232:	b480      	push	{r7}
 800d234:	b083      	sub	sp, #12
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d23a:	bf00      	nop
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr

0800d246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d246:	b480      	push	{r7}
 800d248:	b083      	sub	sp, #12
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d24e:	bf00      	nop
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
	...

0800d25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a3a      	ldr	r2, [pc, #232]	@ (800d358 <TIM_Base_SetConfig+0xfc>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d00f      	beq.n	800d294 <TIM_Base_SetConfig+0x38>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d27a:	d00b      	beq.n	800d294 <TIM_Base_SetConfig+0x38>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a37      	ldr	r2, [pc, #220]	@ (800d35c <TIM_Base_SetConfig+0x100>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d007      	beq.n	800d294 <TIM_Base_SetConfig+0x38>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a36      	ldr	r2, [pc, #216]	@ (800d360 <TIM_Base_SetConfig+0x104>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d003      	beq.n	800d294 <TIM_Base_SetConfig+0x38>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a35      	ldr	r2, [pc, #212]	@ (800d364 <TIM_Base_SetConfig+0x108>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d108      	bne.n	800d2a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d29a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800d358 <TIM_Base_SetConfig+0xfc>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d01b      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2b4:	d017      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a28      	ldr	r2, [pc, #160]	@ (800d35c <TIM_Base_SetConfig+0x100>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d013      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a27      	ldr	r2, [pc, #156]	@ (800d360 <TIM_Base_SetConfig+0x104>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d00f      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a26      	ldr	r2, [pc, #152]	@ (800d364 <TIM_Base_SetConfig+0x108>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00b      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a25      	ldr	r2, [pc, #148]	@ (800d368 <TIM_Base_SetConfig+0x10c>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d007      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a24      	ldr	r2, [pc, #144]	@ (800d36c <TIM_Base_SetConfig+0x110>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d003      	beq.n	800d2e6 <TIM_Base_SetConfig+0x8a>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a23      	ldr	r2, [pc, #140]	@ (800d370 <TIM_Base_SetConfig+0x114>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d108      	bne.n	800d2f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	4313      	orrs	r3, r2
 800d304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	689a      	ldr	r2, [r3, #8]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a0e      	ldr	r2, [pc, #56]	@ (800d358 <TIM_Base_SetConfig+0xfc>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d103      	bne.n	800d32c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	691a      	ldr	r2, [r3, #16]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d105      	bne.n	800d34a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	f023 0201 	bic.w	r2, r3, #1
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	611a      	str	r2, [r3, #16]
  }
}
 800d34a:	bf00      	nop
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	40010000 	.word	0x40010000
 800d35c:	40000400 	.word	0x40000400
 800d360:	40000800 	.word	0x40000800
 800d364:	40000c00 	.word	0x40000c00
 800d368:	40014000 	.word	0x40014000
 800d36c:	40014400 	.word	0x40014400
 800d370:	40014800 	.word	0x40014800

0800d374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d374:	b480      	push	{r7}
 800d376:	b087      	sub	sp, #28
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a1b      	ldr	r3, [r3, #32]
 800d382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	f023 0201 	bic.w	r2, r3, #1
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f023 0303 	bic.w	r3, r3, #3
 800d3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f023 0302 	bic.w	r3, r3, #2
 800d3bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d43c <TIM_OC1_SetConfig+0xc8>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d10c      	bne.n	800d3ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	f023 0308 	bic.w	r3, r3, #8
 800d3d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f023 0304 	bic.w	r3, r3, #4
 800d3e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a13      	ldr	r2, [pc, #76]	@ (800d43c <TIM_OC1_SetConfig+0xc8>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d111      	bne.n	800d416 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	4313      	orrs	r3, r2
 800d40a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	4313      	orrs	r3, r2
 800d414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	621a      	str	r2, [r3, #32]
}
 800d430:	bf00      	nop
 800d432:	371c      	adds	r7, #28
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	40010000 	.word	0x40010000

0800d440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a1b      	ldr	r3, [r3, #32]
 800d44e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	f023 0210 	bic.w	r2, r3, #16
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	021b      	lsls	r3, r3, #8
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	4313      	orrs	r3, r2
 800d482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f023 0320 	bic.w	r3, r3, #32
 800d48a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	697a      	ldr	r2, [r7, #20]
 800d494:	4313      	orrs	r3, r2
 800d496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a1e      	ldr	r2, [pc, #120]	@ (800d514 <TIM_OC2_SetConfig+0xd4>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d10d      	bne.n	800d4bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	011b      	lsls	r3, r3, #4
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a15      	ldr	r2, [pc, #84]	@ (800d514 <TIM_OC2_SetConfig+0xd4>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d113      	bne.n	800d4ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d4ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	621a      	str	r2, [r3, #32]
}
 800d506:	bf00      	nop
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	40010000 	.word	0x40010000

0800d518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f023 0303 	bic.w	r3, r3, #3
 800d54e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	4313      	orrs	r3, r2
 800d558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	021b      	lsls	r3, r3, #8
 800d568:	697a      	ldr	r2, [r7, #20]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a1d      	ldr	r2, [pc, #116]	@ (800d5e8 <TIM_OC3_SetConfig+0xd0>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d10d      	bne.n	800d592 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d57c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	021b      	lsls	r3, r3, #8
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4313      	orrs	r3, r2
 800d588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a14      	ldr	r2, [pc, #80]	@ (800d5e8 <TIM_OC3_SetConfig+0xd0>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d113      	bne.n	800d5c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d5a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	011b      	lsls	r3, r3, #4
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	011b      	lsls	r3, r3, #4
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	685a      	ldr	r2, [r3, #4]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	621a      	str	r2, [r3, #32]
}
 800d5dc:	bf00      	nop
 800d5de:	371c      	adds	r7, #28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	40010000 	.word	0x40010000

0800d5ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b087      	sub	sp, #28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a1b      	ldr	r3, [r3, #32]
 800d600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	69db      	ldr	r3, [r3, #28]
 800d612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	021b      	lsls	r3, r3, #8
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	031b      	lsls	r3, r3, #12
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	4313      	orrs	r3, r2
 800d642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a10      	ldr	r2, [pc, #64]	@ (800d688 <TIM_OC4_SetConfig+0x9c>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d109      	bne.n	800d660 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	019b      	lsls	r3, r3, #6
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	697a      	ldr	r2, [r7, #20]
 800d664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	621a      	str	r2, [r3, #32]
}
 800d67a:	bf00      	nop
 800d67c:	371c      	adds	r7, #28
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	40010000 	.word	0x40010000

0800d68c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b087      	sub	sp, #28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6a1b      	ldr	r3, [r3, #32]
 800d69c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	f023 0201 	bic.w	r2, r3, #1
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d6b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	011b      	lsls	r3, r3, #4
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	f023 030a 	bic.w	r3, r3, #10
 800d6c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6ca:	697a      	ldr	r2, [r7, #20]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	693a      	ldr	r2, [r7, #16]
 800d6d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	621a      	str	r2, [r3, #32]
}
 800d6de:	bf00      	nop
 800d6e0:	371c      	adds	r7, #28
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b087      	sub	sp, #28
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	60f8      	str	r0, [r7, #12]
 800d6f2:	60b9      	str	r1, [r7, #8]
 800d6f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6a1b      	ldr	r3, [r3, #32]
 800d700:	f023 0210 	bic.w	r2, r3, #16
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	031b      	lsls	r3, r3, #12
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	011b      	lsls	r3, r3, #4
 800d72c:	697a      	ldr	r2, [r7, #20]
 800d72e:	4313      	orrs	r3, r2
 800d730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	693a      	ldr	r2, [r7, #16]
 800d736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	697a      	ldr	r2, [r7, #20]
 800d73c:	621a      	str	r2, [r3, #32]
}
 800d73e:	bf00      	nop
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b085      	sub	sp, #20
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	4313      	orrs	r3, r2
 800d768:	f043 0307 	orr.w	r3, r3, #7
 800d76c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	609a      	str	r2, [r3, #8]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d780:	b480      	push	{r7}
 800d782:	b087      	sub	sp, #28
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d79a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	021a      	lsls	r2, r3, #8
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	431a      	orrs	r2, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	609a      	str	r2, [r3, #8]
}
 800d7b4:	bf00      	nop
 800d7b6:	371c      	adds	r7, #28
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b087      	sub	sp, #28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	f003 031f 	and.w	r3, r3, #31
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6a1a      	ldr	r2, [r3, #32]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	43db      	mvns	r3, r3
 800d7e2:	401a      	ands	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6a1a      	ldr	r2, [r3, #32]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	f003 031f 	and.w	r3, r3, #31
 800d7f2:	6879      	ldr	r1, [r7, #4]
 800d7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d7f8:	431a      	orrs	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	621a      	str	r2, [r3, #32]
}
 800d7fe:	bf00      	nop
 800d800:	371c      	adds	r7, #28
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
	...

0800d80c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d101      	bne.n	800d824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d820:	2302      	movs	r3, #2
 800d822:	e050      	b.n	800d8c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d84a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	4313      	orrs	r3, r2
 800d854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a1c      	ldr	r2, [pc, #112]	@ (800d8d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d018      	beq.n	800d89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d870:	d013      	beq.n	800d89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a18      	ldr	r2, [pc, #96]	@ (800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d00e      	beq.n	800d89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a16      	ldr	r2, [pc, #88]	@ (800d8dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d009      	beq.n	800d89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a15      	ldr	r2, [pc, #84]	@ (800d8e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d004      	beq.n	800d89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a13      	ldr	r2, [pc, #76]	@ (800d8e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d10c      	bne.n	800d8b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	40010000 	.word	0x40010000
 800d8d8:	40000400 	.word	0x40000400
 800d8dc:	40000800 	.word	0x40000800
 800d8e0:	40000c00 	.word	0x40000c00
 800d8e4:	40014000 	.word	0x40014000

0800d8e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e042      	b.n	800d9a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d106      	bne.n	800d93c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7f7 ff50 	bl	80057dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2224      	movs	r2, #36	@ 0x24
 800d940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68da      	ldr	r2, [r3, #12]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fcdb 	bl	800e310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	691a      	ldr	r2, [r3, #16]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	695a      	ldr	r2, [r3, #20]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2220      	movs	r2, #32
 800d994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2220      	movs	r2, #32
 800d99c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	d112      	bne.n	800d9f0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d002      	beq.n	800d9d6 <HAL_UART_Receive_IT+0x26>
 800d9d0:	88fb      	ldrh	r3, [r7, #6]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d101      	bne.n	800d9da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e00b      	b.n	800d9f2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d9e0:	88fb      	ldrh	r3, [r7, #6]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	68b9      	ldr	r1, [r7, #8]
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 faba 	bl	800df60 <UART_Start_Receive_IT>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	e000      	b.n	800d9f2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d9f0:	2302      	movs	r3, #2
  }
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
	...

0800d9fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b0ba      	sub	sp, #232	@ 0xe8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800da22:	2300      	movs	r3, #0
 800da24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800da28:	2300      	movs	r3, #0
 800da2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800da2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800da3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10f      	bne.n	800da62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da46:	f003 0320 	and.w	r3, r3, #32
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d009      	beq.n	800da62 <HAL_UART_IRQHandler+0x66>
 800da4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da52:	f003 0320 	and.w	r3, r3, #32
 800da56:	2b00      	cmp	r3, #0
 800da58:	d003      	beq.n	800da62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fb99 	bl	800e192 <UART_Receive_IT>
      return;
 800da60:	e25b      	b.n	800df1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800da62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80de 	beq.w	800dc28 <HAL_UART_IRQHandler+0x22c>
 800da6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	2b00      	cmp	r3, #0
 800da76:	d106      	bne.n	800da86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800da78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 80d1 	beq.w	800dc28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800da86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <HAL_UART_IRQHandler+0xae>
 800da92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d005      	beq.n	800daaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daa2:	f043 0201 	orr.w	r2, r3, #1
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800daaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daae:	f003 0304 	and.w	r3, r3, #4
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00b      	beq.n	800dace <HAL_UART_IRQHandler+0xd2>
 800dab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d005      	beq.n	800dace <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dac6:	f043 0202 	orr.w	r2, r3, #2
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dad2:	f003 0302 	and.w	r3, r3, #2
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00b      	beq.n	800daf2 <HAL_UART_IRQHandler+0xf6>
 800dada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d005      	beq.n	800daf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daea:	f043 0204 	orr.w	r2, r3, #4
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800daf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daf6:	f003 0308 	and.w	r3, r3, #8
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d011      	beq.n	800db22 <HAL_UART_IRQHandler+0x126>
 800dafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db02:	f003 0320 	and.w	r3, r3, #32
 800db06:	2b00      	cmp	r3, #0
 800db08:	d105      	bne.n	800db16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800db0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	2b00      	cmp	r3, #0
 800db14:	d005      	beq.n	800db22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db1a:	f043 0208 	orr.w	r2, r3, #8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db26:	2b00      	cmp	r3, #0
 800db28:	f000 81f2 	beq.w	800df10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800db2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db30:	f003 0320 	and.w	r3, r3, #32
 800db34:	2b00      	cmp	r3, #0
 800db36:	d008      	beq.n	800db4a <HAL_UART_IRQHandler+0x14e>
 800db38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db3c:	f003 0320 	and.w	r3, r3, #32
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 fb24 	bl	800e192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db54:	2b40      	cmp	r3, #64	@ 0x40
 800db56:	bf0c      	ite	eq
 800db58:	2301      	moveq	r3, #1
 800db5a:	2300      	movne	r3, #0
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db66:	f003 0308 	and.w	r3, r3, #8
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d103      	bne.n	800db76 <HAL_UART_IRQHandler+0x17a>
 800db6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800db72:	2b00      	cmp	r3, #0
 800db74:	d04f      	beq.n	800dc16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fa2c 	bl	800dfd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db86:	2b40      	cmp	r3, #64	@ 0x40
 800db88:	d141      	bne.n	800dc0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3314      	adds	r3, #20
 800db90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db98:	e853 3f00 	ldrex	r3, [r3]
 800db9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dbb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dbba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dbc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dbce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1d9      	bne.n	800db8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d013      	beq.n	800dc06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbe2:	4a7e      	ldr	r2, [pc, #504]	@ (800dddc <HAL_UART_IRQHandler+0x3e0>)
 800dbe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f8 ffa0 	bl	8006b30 <HAL_DMA_Abort_IT>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d016      	beq.n	800dc24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800dc00:	4610      	mov	r0, r2
 800dc02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc04:	e00e      	b.n	800dc24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f994 	bl	800df34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc0c:	e00a      	b.n	800dc24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f990 	bl	800df34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc14:	e006      	b.n	800dc24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f98c 	bl	800df34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800dc22:	e175      	b.n	800df10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc24:	bf00      	nop
    return;
 800dc26:	e173      	b.n	800df10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	f040 814f 	bne.w	800ded0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dc32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc36:	f003 0310 	and.w	r3, r3, #16
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f000 8148 	beq.w	800ded0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dc40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc44:	f003 0310 	and.w	r3, r3, #16
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 8141 	beq.w	800ded0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc4e:	2300      	movs	r3, #0
 800dc50:	60bb      	str	r3, [r7, #8]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	60bb      	str	r3, [r7, #8]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	60bb      	str	r3, [r7, #8]
 800dc62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	695b      	ldr	r3, [r3, #20]
 800dc6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc6e:	2b40      	cmp	r3, #64	@ 0x40
 800dc70:	f040 80b6 	bne.w	800dde0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 8145 	beq.w	800df14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dc8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dc92:	429a      	cmp	r2, r3
 800dc94:	f080 813e 	bcs.w	800df14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dc9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dca4:	69db      	ldr	r3, [r3, #28]
 800dca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dcaa:	f000 8088 	beq.w	800ddbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	330c      	adds	r3, #12
 800dcb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dcbc:	e853 3f00 	ldrex	r3, [r3]
 800dcc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dcc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dcc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	330c      	adds	r3, #12
 800dcd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dcda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dcde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dcea:	e841 2300 	strex	r3, r2, [r1]
 800dcee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dcf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1d9      	bne.n	800dcae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	3314      	adds	r3, #20
 800dd00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dd04:	e853 3f00 	ldrex	r3, [r3]
 800dd08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dd0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd0c:	f023 0301 	bic.w	r3, r3, #1
 800dd10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	3314      	adds	r3, #20
 800dd1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dd1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dd22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dd26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dd2a:	e841 2300 	strex	r3, r2, [r1]
 800dd2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dd30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1e1      	bne.n	800dcfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3314      	adds	r3, #20
 800dd3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd40:	e853 3f00 	ldrex	r3, [r3]
 800dd44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dd46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3314      	adds	r3, #20
 800dd56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dd5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dd5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dd60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dd62:	e841 2300 	strex	r3, r2, [r1]
 800dd66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dd68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1e3      	bne.n	800dd36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	330c      	adds	r3, #12
 800dd82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd86:	e853 3f00 	ldrex	r3, [r3]
 800dd8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dd8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd8e:	f023 0310 	bic.w	r3, r3, #16
 800dd92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	330c      	adds	r3, #12
 800dd9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dda0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dda2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dda6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dda8:	e841 2300 	strex	r3, r2, [r1]
 800ddac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ddae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e3      	bne.n	800dd7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f8 fe49 	bl	8006a50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f8b7 	bl	800df48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ddda:	e09b      	b.n	800df14 <HAL_UART_IRQHandler+0x518>
 800dddc:	0800e09b 	.word	0x0800e09b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 808e 	beq.w	800df18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ddfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800de00:	2b00      	cmp	r3, #0
 800de02:	f000 8089 	beq.w	800df18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	330c      	adds	r3, #12
 800de0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de10:	e853 3f00 	ldrex	r3, [r3]
 800de14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	330c      	adds	r3, #12
 800de26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800de2a:	647a      	str	r2, [r7, #68]	@ 0x44
 800de2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de32:	e841 2300 	strex	r3, r2, [r1]
 800de36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1e3      	bne.n	800de06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	3314      	adds	r3, #20
 800de44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	e853 3f00 	ldrex	r3, [r3]
 800de4c:	623b      	str	r3, [r7, #32]
   return(result);
 800de4e:	6a3b      	ldr	r3, [r7, #32]
 800de50:	f023 0301 	bic.w	r3, r3, #1
 800de54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	3314      	adds	r3, #20
 800de5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800de62:	633a      	str	r2, [r7, #48]	@ 0x30
 800de64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de6a:	e841 2300 	strex	r3, r2, [r1]
 800de6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e3      	bne.n	800de3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2220      	movs	r2, #32
 800de7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	330c      	adds	r3, #12
 800de8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	60fb      	str	r3, [r7, #12]
   return(result);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f023 0310 	bic.w	r3, r3, #16
 800de9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	330c      	adds	r3, #12
 800dea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800dea8:	61fa      	str	r2, [r7, #28]
 800deaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	69b9      	ldr	r1, [r7, #24]
 800deae:	69fa      	ldr	r2, [r7, #28]
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	617b      	str	r3, [r7, #20]
   return(result);
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e3      	bne.n	800de84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dec2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f83d 	bl	800df48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dece:	e023      	b.n	800df18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ded0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ded4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d009      	beq.n	800def0 <HAL_UART_IRQHandler+0x4f4>
 800dedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d003      	beq.n	800def0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f8ea 	bl	800e0c2 <UART_Transmit_IT>
    return;
 800deee:	e014      	b.n	800df1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800def0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800def4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800def8:	2b00      	cmp	r3, #0
 800defa:	d00e      	beq.n	800df1a <HAL_UART_IRQHandler+0x51e>
 800defc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df04:	2b00      	cmp	r3, #0
 800df06:	d008      	beq.n	800df1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 f92a 	bl	800e162 <UART_EndTransmit_IT>
    return;
 800df0e:	e004      	b.n	800df1a <HAL_UART_IRQHandler+0x51e>
    return;
 800df10:	bf00      	nop
 800df12:	e002      	b.n	800df1a <HAL_UART_IRQHandler+0x51e>
      return;
 800df14:	bf00      	nop
 800df16:	e000      	b.n	800df1a <HAL_UART_IRQHandler+0x51e>
      return;
 800df18:	bf00      	nop
  }
}
 800df1a:	37e8      	adds	r7, #232	@ 0xe8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	4613      	mov	r3, r2
 800df6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	88fa      	ldrh	r2, [r7, #6]
 800df78:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	88fa      	ldrh	r2, [r7, #6]
 800df7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2222      	movs	r2, #34	@ 0x22
 800df8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d007      	beq.n	800dfa6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68da      	ldr	r2, [r3, #12]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfa4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	695a      	ldr	r2, [r3, #20]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f042 0201 	orr.w	r2, r2, #1
 800dfb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68da      	ldr	r2, [r3, #12]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f042 0220 	orr.w	r2, r2, #32
 800dfc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b095      	sub	sp, #84	@ 0x54
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	330c      	adds	r3, #12
 800dfe2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfe6:	e853 3f00 	ldrex	r3, [r3]
 800dfea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	330c      	adds	r3, #12
 800dffa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dffc:	643a      	str	r2, [r7, #64]	@ 0x40
 800dffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e004:	e841 2300 	strex	r3, r2, [r1]
 800e008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1e5      	bne.n	800dfdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3314      	adds	r3, #20
 800e016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	e853 3f00 	ldrex	r3, [r3]
 800e01e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	f023 0301 	bic.w	r3, r3, #1
 800e026:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3314      	adds	r3, #20
 800e02e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e030:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e038:	e841 2300 	strex	r3, r2, [r1]
 800e03c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e5      	bne.n	800e010 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d119      	bne.n	800e080 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	330c      	adds	r3, #12
 800e052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	e853 3f00 	ldrex	r3, [r3]
 800e05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	f023 0310 	bic.w	r3, r3, #16
 800e062:	647b      	str	r3, [r7, #68]	@ 0x44
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	330c      	adds	r3, #12
 800e06a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e06c:	61ba      	str	r2, [r7, #24]
 800e06e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e070:	6979      	ldr	r1, [r7, #20]
 800e072:	69ba      	ldr	r2, [r7, #24]
 800e074:	e841 2300 	strex	r3, r2, [r1]
 800e078:	613b      	str	r3, [r7, #16]
   return(result);
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e5      	bne.n	800e04c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2220      	movs	r2, #32
 800e084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e08e:	bf00      	nop
 800e090:	3754      	adds	r7, #84	@ 0x54
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b084      	sub	sp, #16
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff ff3d 	bl	800df34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b085      	sub	sp, #20
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b21      	cmp	r3, #33	@ 0x21
 800e0d4:	d13e      	bne.n	800e154 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0de:	d114      	bne.n	800e10a <UART_Transmit_IT+0x48>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d110      	bne.n	800e10a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a1b      	ldr	r3, [r3, #32]
 800e0ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	1c9a      	adds	r2, r3, #2
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	621a      	str	r2, [r3, #32]
 800e108:	e008      	b.n	800e11c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	1c59      	adds	r1, r3, #1
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	6211      	str	r1, [r2, #32]
 800e114:	781a      	ldrb	r2, [r3, #0]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e120:	b29b      	uxth	r3, r3
 800e122:	3b01      	subs	r3, #1
 800e124:	b29b      	uxth	r3, r3
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	4619      	mov	r1, r3
 800e12a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10f      	bne.n	800e150 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e13e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e14e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e150:	2300      	movs	r3, #0
 800e152:	e000      	b.n	800e156 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e154:	2302      	movs	r3, #2
  }
}
 800e156:	4618      	mov	r0, r3
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68da      	ldr	r2, [r3, #12]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2220      	movs	r2, #32
 800e17e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff fecc 	bl	800df20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b08c      	sub	sp, #48	@ 0x30
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b22      	cmp	r3, #34	@ 0x22
 800e1a4:	f040 80ae 	bne.w	800e304 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1b0:	d117      	bne.n	800e1e2 <UART_Receive_IT+0x50>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	691b      	ldr	r3, [r3, #16]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d113      	bne.n	800e1e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1da:	1c9a      	adds	r2, r3, #2
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	629a      	str	r2, [r3, #40]	@ 0x28
 800e1e0:	e026      	b.n	800e230 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1f4:	d007      	beq.n	800e206 <UART_Receive_IT+0x74>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10a      	bne.n	800e214 <UART_Receive_IT+0x82>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d106      	bne.n	800e214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e210:	701a      	strb	r2, [r3, #0]
 800e212:	e008      	b.n	800e226 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e220:	b2da      	uxtb	r2, r3
 800e222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e234:	b29b      	uxth	r3, r3
 800e236:	3b01      	subs	r3, #1
 800e238:	b29b      	uxth	r3, r3
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4619      	mov	r1, r3
 800e23e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e240:	2b00      	cmp	r3, #0
 800e242:	d15d      	bne.n	800e300 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68da      	ldr	r2, [r3, #12]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f022 0220 	bic.w	r2, r2, #32
 800e252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68da      	ldr	r2, [r3, #12]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	695a      	ldr	r2, [r3, #20]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 0201 	bic.w	r2, r2, #1
 800e272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2220      	movs	r2, #32
 800e278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e286:	2b01      	cmp	r3, #1
 800e288:	d135      	bne.n	800e2f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	330c      	adds	r3, #12
 800e296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	e853 3f00 	ldrex	r3, [r3]
 800e29e:	613b      	str	r3, [r7, #16]
   return(result);
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f023 0310 	bic.w	r3, r3, #16
 800e2a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	330c      	adds	r3, #12
 800e2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2b0:	623a      	str	r2, [r7, #32]
 800e2b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b4:	69f9      	ldr	r1, [r7, #28]
 800e2b6:	6a3a      	ldr	r2, [r7, #32]
 800e2b8:	e841 2300 	strex	r3, r2, [r1]
 800e2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1e5      	bne.n	800e290 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f003 0310 	and.w	r3, r3, #16
 800e2ce:	2b10      	cmp	r3, #16
 800e2d0:	d10a      	bne.n	800e2e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	60fb      	str	r3, [r7, #12]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	60fb      	str	r3, [r7, #12]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	60fb      	str	r3, [r7, #12]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff fe2a 	bl	800df48 <HAL_UARTEx_RxEventCallback>
 800e2f4:	e002      	b.n	800e2fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7f6 fe84 	bl	8005004 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	e002      	b.n	800e306 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	e000      	b.n	800e306 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e304:	2302      	movs	r3, #2
  }
}
 800e306:	4618      	mov	r0, r3
 800e308:	3730      	adds	r7, #48	@ 0x30
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
	...

0800e310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e314:	b0c0      	sub	sp, #256	@ 0x100
 800e316:	af00      	add	r7, sp, #0
 800e318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e32c:	68d9      	ldr	r1, [r3, #12]
 800e32e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	ea40 0301 	orr.w	r3, r0, r1
 800e338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e33e:	689a      	ldr	r2, [r3, #8]
 800e340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	431a      	orrs	r2, r3
 800e348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e34c:	695b      	ldr	r3, [r3, #20]
 800e34e:	431a      	orrs	r2, r3
 800e350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e354:	69db      	ldr	r3, [r3, #28]
 800e356:	4313      	orrs	r3, r2
 800e358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e368:	f021 010c 	bic.w	r1, r1, #12
 800e36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e376:	430b      	orrs	r3, r1
 800e378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e37a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e38a:	6999      	ldr	r1, [r3, #24]
 800e38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	ea40 0301 	orr.w	r3, r0, r1
 800e396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	4b8f      	ldr	r3, [pc, #572]	@ (800e5dc <UART_SetConfig+0x2cc>)
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d005      	beq.n	800e3b0 <UART_SetConfig+0xa0>
 800e3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4b8d      	ldr	r3, [pc, #564]	@ (800e5e0 <UART_SetConfig+0x2d0>)
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d104      	bne.n	800e3ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e3b0:	f7fe fac8 	bl	800c944 <HAL_RCC_GetPCLK2Freq>
 800e3b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e3b8:	e003      	b.n	800e3c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e3ba:	f7fe faaf 	bl	800c91c <HAL_RCC_GetPCLK1Freq>
 800e3be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3c6:	69db      	ldr	r3, [r3, #28]
 800e3c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e3cc:	f040 810c 	bne.w	800e5e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e3d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e3da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e3de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	462b      	mov	r3, r5
 800e3e6:	1891      	adds	r1, r2, r2
 800e3e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e3ea:	415b      	adcs	r3, r3
 800e3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	eb12 0801 	adds.w	r8, r2, r1
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	eb43 0901 	adc.w	r9, r3, r1
 800e3fe:	f04f 0200 	mov.w	r2, #0
 800e402:	f04f 0300 	mov.w	r3, #0
 800e406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e40a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e40e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e412:	4690      	mov	r8, r2
 800e414:	4699      	mov	r9, r3
 800e416:	4623      	mov	r3, r4
 800e418:	eb18 0303 	adds.w	r3, r8, r3
 800e41c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e420:	462b      	mov	r3, r5
 800e422:	eb49 0303 	adc.w	r3, r9, r3
 800e426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e43a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e43e:	460b      	mov	r3, r1
 800e440:	18db      	adds	r3, r3, r3
 800e442:	653b      	str	r3, [r7, #80]	@ 0x50
 800e444:	4613      	mov	r3, r2
 800e446:	eb42 0303 	adc.w	r3, r2, r3
 800e44a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e44c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e454:	f7f2 fb12 	bl	8000a7c <__aeabi_uldivmod>
 800e458:	4602      	mov	r2, r0
 800e45a:	460b      	mov	r3, r1
 800e45c:	4b61      	ldr	r3, [pc, #388]	@ (800e5e4 <UART_SetConfig+0x2d4>)
 800e45e:	fba3 2302 	umull	r2, r3, r3, r2
 800e462:	095b      	lsrs	r3, r3, #5
 800e464:	011c      	lsls	r4, r3, #4
 800e466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e46a:	2200      	movs	r2, #0
 800e46c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e478:	4642      	mov	r2, r8
 800e47a:	464b      	mov	r3, r9
 800e47c:	1891      	adds	r1, r2, r2
 800e47e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e480:	415b      	adcs	r3, r3
 800e482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e488:	4641      	mov	r1, r8
 800e48a:	eb12 0a01 	adds.w	sl, r2, r1
 800e48e:	4649      	mov	r1, r9
 800e490:	eb43 0b01 	adc.w	fp, r3, r1
 800e494:	f04f 0200 	mov.w	r2, #0
 800e498:	f04f 0300 	mov.w	r3, #0
 800e49c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e4a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e4a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e4a8:	4692      	mov	sl, r2
 800e4aa:	469b      	mov	fp, r3
 800e4ac:	4643      	mov	r3, r8
 800e4ae:	eb1a 0303 	adds.w	r3, sl, r3
 800e4b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e4b6:	464b      	mov	r3, r9
 800e4b8:	eb4b 0303 	adc.w	r3, fp, r3
 800e4bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e4cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e4d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	18db      	adds	r3, r3, r3
 800e4d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4da:	4613      	mov	r3, r2
 800e4dc:	eb42 0303 	adc.w	r3, r2, r3
 800e4e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e4e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e4ea:	f7f2 fac7 	bl	8000a7c <__aeabi_uldivmod>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	4b3b      	ldr	r3, [pc, #236]	@ (800e5e4 <UART_SetConfig+0x2d4>)
 800e4f6:	fba3 2301 	umull	r2, r3, r3, r1
 800e4fa:	095b      	lsrs	r3, r3, #5
 800e4fc:	2264      	movs	r2, #100	@ 0x64
 800e4fe:	fb02 f303 	mul.w	r3, r2, r3
 800e502:	1acb      	subs	r3, r1, r3
 800e504:	00db      	lsls	r3, r3, #3
 800e506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e50a:	4b36      	ldr	r3, [pc, #216]	@ (800e5e4 <UART_SetConfig+0x2d4>)
 800e50c:	fba3 2302 	umull	r2, r3, r3, r2
 800e510:	095b      	lsrs	r3, r3, #5
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e518:	441c      	add	r4, r3
 800e51a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e51e:	2200      	movs	r2, #0
 800e520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e52c:	4642      	mov	r2, r8
 800e52e:	464b      	mov	r3, r9
 800e530:	1891      	adds	r1, r2, r2
 800e532:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e534:	415b      	adcs	r3, r3
 800e536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e53c:	4641      	mov	r1, r8
 800e53e:	1851      	adds	r1, r2, r1
 800e540:	6339      	str	r1, [r7, #48]	@ 0x30
 800e542:	4649      	mov	r1, r9
 800e544:	414b      	adcs	r3, r1
 800e546:	637b      	str	r3, [r7, #52]	@ 0x34
 800e548:	f04f 0200 	mov.w	r2, #0
 800e54c:	f04f 0300 	mov.w	r3, #0
 800e550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e554:	4659      	mov	r1, fp
 800e556:	00cb      	lsls	r3, r1, #3
 800e558:	4651      	mov	r1, sl
 800e55a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e55e:	4651      	mov	r1, sl
 800e560:	00ca      	lsls	r2, r1, #3
 800e562:	4610      	mov	r0, r2
 800e564:	4619      	mov	r1, r3
 800e566:	4603      	mov	r3, r0
 800e568:	4642      	mov	r2, r8
 800e56a:	189b      	adds	r3, r3, r2
 800e56c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e570:	464b      	mov	r3, r9
 800e572:	460a      	mov	r2, r1
 800e574:	eb42 0303 	adc.w	r3, r2, r3
 800e578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e58c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e590:	460b      	mov	r3, r1
 800e592:	18db      	adds	r3, r3, r3
 800e594:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e596:	4613      	mov	r3, r2
 800e598:	eb42 0303 	adc.w	r3, r2, r3
 800e59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e59e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e5a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e5a6:	f7f2 fa69 	bl	8000a7c <__aeabi_uldivmod>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e5e4 <UART_SetConfig+0x2d4>)
 800e5b0:	fba3 1302 	umull	r1, r3, r3, r2
 800e5b4:	095b      	lsrs	r3, r3, #5
 800e5b6:	2164      	movs	r1, #100	@ 0x64
 800e5b8:	fb01 f303 	mul.w	r3, r1, r3
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	3332      	adds	r3, #50	@ 0x32
 800e5c2:	4a08      	ldr	r2, [pc, #32]	@ (800e5e4 <UART_SetConfig+0x2d4>)
 800e5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c8:	095b      	lsrs	r3, r3, #5
 800e5ca:	f003 0207 	and.w	r2, r3, #7
 800e5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4422      	add	r2, r4
 800e5d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e5d8:	e106      	b.n	800e7e8 <UART_SetConfig+0x4d8>
 800e5da:	bf00      	nop
 800e5dc:	40011000 	.word	0x40011000
 800e5e0:	40011400 	.word	0x40011400
 800e5e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e5e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e5f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e5f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e5fa:	4642      	mov	r2, r8
 800e5fc:	464b      	mov	r3, r9
 800e5fe:	1891      	adds	r1, r2, r2
 800e600:	6239      	str	r1, [r7, #32]
 800e602:	415b      	adcs	r3, r3
 800e604:	627b      	str	r3, [r7, #36]	@ 0x24
 800e606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e60a:	4641      	mov	r1, r8
 800e60c:	1854      	adds	r4, r2, r1
 800e60e:	4649      	mov	r1, r9
 800e610:	eb43 0501 	adc.w	r5, r3, r1
 800e614:	f04f 0200 	mov.w	r2, #0
 800e618:	f04f 0300 	mov.w	r3, #0
 800e61c:	00eb      	lsls	r3, r5, #3
 800e61e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e622:	00e2      	lsls	r2, r4, #3
 800e624:	4614      	mov	r4, r2
 800e626:	461d      	mov	r5, r3
 800e628:	4643      	mov	r3, r8
 800e62a:	18e3      	adds	r3, r4, r3
 800e62c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e630:	464b      	mov	r3, r9
 800e632:	eb45 0303 	adc.w	r3, r5, r3
 800e636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e64a:	f04f 0200 	mov.w	r2, #0
 800e64e:	f04f 0300 	mov.w	r3, #0
 800e652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e656:	4629      	mov	r1, r5
 800e658:	008b      	lsls	r3, r1, #2
 800e65a:	4621      	mov	r1, r4
 800e65c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e660:	4621      	mov	r1, r4
 800e662:	008a      	lsls	r2, r1, #2
 800e664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e668:	f7f2 fa08 	bl	8000a7c <__aeabi_uldivmod>
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	4b60      	ldr	r3, [pc, #384]	@ (800e7f4 <UART_SetConfig+0x4e4>)
 800e672:	fba3 2302 	umull	r2, r3, r3, r2
 800e676:	095b      	lsrs	r3, r3, #5
 800e678:	011c      	lsls	r4, r3, #4
 800e67a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e67e:	2200      	movs	r2, #0
 800e680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e68c:	4642      	mov	r2, r8
 800e68e:	464b      	mov	r3, r9
 800e690:	1891      	adds	r1, r2, r2
 800e692:	61b9      	str	r1, [r7, #24]
 800e694:	415b      	adcs	r3, r3
 800e696:	61fb      	str	r3, [r7, #28]
 800e698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e69c:	4641      	mov	r1, r8
 800e69e:	1851      	adds	r1, r2, r1
 800e6a0:	6139      	str	r1, [r7, #16]
 800e6a2:	4649      	mov	r1, r9
 800e6a4:	414b      	adcs	r3, r1
 800e6a6:	617b      	str	r3, [r7, #20]
 800e6a8:	f04f 0200 	mov.w	r2, #0
 800e6ac:	f04f 0300 	mov.w	r3, #0
 800e6b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	00cb      	lsls	r3, r1, #3
 800e6b8:	4651      	mov	r1, sl
 800e6ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e6be:	4651      	mov	r1, sl
 800e6c0:	00ca      	lsls	r2, r1, #3
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	4642      	mov	r2, r8
 800e6ca:	189b      	adds	r3, r3, r2
 800e6cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e6d0:	464b      	mov	r3, r9
 800e6d2:	460a      	mov	r2, r1
 800e6d4:	eb42 0303 	adc.w	r3, r2, r3
 800e6d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e6e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e6e8:	f04f 0200 	mov.w	r2, #0
 800e6ec:	f04f 0300 	mov.w	r3, #0
 800e6f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e6f4:	4649      	mov	r1, r9
 800e6f6:	008b      	lsls	r3, r1, #2
 800e6f8:	4641      	mov	r1, r8
 800e6fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e6fe:	4641      	mov	r1, r8
 800e700:	008a      	lsls	r2, r1, #2
 800e702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e706:	f7f2 f9b9 	bl	8000a7c <__aeabi_uldivmod>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	4611      	mov	r1, r2
 800e710:	4b38      	ldr	r3, [pc, #224]	@ (800e7f4 <UART_SetConfig+0x4e4>)
 800e712:	fba3 2301 	umull	r2, r3, r3, r1
 800e716:	095b      	lsrs	r3, r3, #5
 800e718:	2264      	movs	r2, #100	@ 0x64
 800e71a:	fb02 f303 	mul.w	r3, r2, r3
 800e71e:	1acb      	subs	r3, r1, r3
 800e720:	011b      	lsls	r3, r3, #4
 800e722:	3332      	adds	r3, #50	@ 0x32
 800e724:	4a33      	ldr	r2, [pc, #204]	@ (800e7f4 <UART_SetConfig+0x4e4>)
 800e726:	fba2 2303 	umull	r2, r3, r2, r3
 800e72a:	095b      	lsrs	r3, r3, #5
 800e72c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e730:	441c      	add	r4, r3
 800e732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e736:	2200      	movs	r2, #0
 800e738:	673b      	str	r3, [r7, #112]	@ 0x70
 800e73a:	677a      	str	r2, [r7, #116]	@ 0x74
 800e73c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e740:	4642      	mov	r2, r8
 800e742:	464b      	mov	r3, r9
 800e744:	1891      	adds	r1, r2, r2
 800e746:	60b9      	str	r1, [r7, #8]
 800e748:	415b      	adcs	r3, r3
 800e74a:	60fb      	str	r3, [r7, #12]
 800e74c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e750:	4641      	mov	r1, r8
 800e752:	1851      	adds	r1, r2, r1
 800e754:	6039      	str	r1, [r7, #0]
 800e756:	4649      	mov	r1, r9
 800e758:	414b      	adcs	r3, r1
 800e75a:	607b      	str	r3, [r7, #4]
 800e75c:	f04f 0200 	mov.w	r2, #0
 800e760:	f04f 0300 	mov.w	r3, #0
 800e764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e768:	4659      	mov	r1, fp
 800e76a:	00cb      	lsls	r3, r1, #3
 800e76c:	4651      	mov	r1, sl
 800e76e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e772:	4651      	mov	r1, sl
 800e774:	00ca      	lsls	r2, r1, #3
 800e776:	4610      	mov	r0, r2
 800e778:	4619      	mov	r1, r3
 800e77a:	4603      	mov	r3, r0
 800e77c:	4642      	mov	r2, r8
 800e77e:	189b      	adds	r3, r3, r2
 800e780:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e782:	464b      	mov	r3, r9
 800e784:	460a      	mov	r2, r1
 800e786:	eb42 0303 	adc.w	r3, r2, r3
 800e78a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	663b      	str	r3, [r7, #96]	@ 0x60
 800e796:	667a      	str	r2, [r7, #100]	@ 0x64
 800e798:	f04f 0200 	mov.w	r2, #0
 800e79c:	f04f 0300 	mov.w	r3, #0
 800e7a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	008b      	lsls	r3, r1, #2
 800e7a8:	4641      	mov	r1, r8
 800e7aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e7ae:	4641      	mov	r1, r8
 800e7b0:	008a      	lsls	r2, r1, #2
 800e7b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e7b6:	f7f2 f961 	bl	8000a7c <__aeabi_uldivmod>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4b0d      	ldr	r3, [pc, #52]	@ (800e7f4 <UART_SetConfig+0x4e4>)
 800e7c0:	fba3 1302 	umull	r1, r3, r3, r2
 800e7c4:	095b      	lsrs	r3, r3, #5
 800e7c6:	2164      	movs	r1, #100	@ 0x64
 800e7c8:	fb01 f303 	mul.w	r3, r1, r3
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	011b      	lsls	r3, r3, #4
 800e7d0:	3332      	adds	r3, #50	@ 0x32
 800e7d2:	4a08      	ldr	r2, [pc, #32]	@ (800e7f4 <UART_SetConfig+0x4e4>)
 800e7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d8:	095b      	lsrs	r3, r3, #5
 800e7da:	f003 020f 	and.w	r2, r3, #15
 800e7de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4422      	add	r2, r4
 800e7e6:	609a      	str	r2, [r3, #8]
}
 800e7e8:	bf00      	nop
 800e7ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7f4:	51eb851f 	.word	0x51eb851f

0800e7f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b084      	sub	sp, #16
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
 800e802:	f107 001c 	add.w	r0, r7, #28
 800e806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e80a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d123      	bne.n	800e85a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e816:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800e826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e83a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d105      	bne.n	800e84e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f001 fae8 	bl	800fe24 <USB_CoreReset>
 800e854:	4603      	mov	r3, r0
 800e856:	73fb      	strb	r3, [r7, #15]
 800e858:	e01b      	b.n	800e892 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f001 fadc 	bl	800fe24 <USB_CoreReset>
 800e86c:	4603      	mov	r3, r0
 800e86e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e870:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e87c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	639a      	str	r2, [r3, #56]	@ 0x38
 800e884:	e005      	b.n	800e892 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e88a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e892:	7fbb      	ldrb	r3, [r7, #30]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d10b      	bne.n	800e8b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f043 0206 	orr.w	r2, r3, #6
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	f043 0220 	orr.w	r2, r3, #32
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8bc:	b004      	add	sp, #16
 800e8be:	4770      	bx	lr

0800e8c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d165      	bne.n	800e9a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4a41      	ldr	r2, [pc, #260]	@ (800e9dc <USB_SetTurnaroundTime+0x11c>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d906      	bls.n	800e8ea <USB_SetTurnaroundTime+0x2a>
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	4a40      	ldr	r2, [pc, #256]	@ (800e9e0 <USB_SetTurnaroundTime+0x120>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d202      	bcs.n	800e8ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e8e4:	230f      	movs	r3, #15
 800e8e6:	617b      	str	r3, [r7, #20]
 800e8e8:	e062      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	4a3c      	ldr	r2, [pc, #240]	@ (800e9e0 <USB_SetTurnaroundTime+0x120>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d306      	bcc.n	800e900 <USB_SetTurnaroundTime+0x40>
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	4a3b      	ldr	r2, [pc, #236]	@ (800e9e4 <USB_SetTurnaroundTime+0x124>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d202      	bcs.n	800e900 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e8fa:	230e      	movs	r3, #14
 800e8fc:	617b      	str	r3, [r7, #20]
 800e8fe:	e057      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	4a38      	ldr	r2, [pc, #224]	@ (800e9e4 <USB_SetTurnaroundTime+0x124>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d306      	bcc.n	800e916 <USB_SetTurnaroundTime+0x56>
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	4a37      	ldr	r2, [pc, #220]	@ (800e9e8 <USB_SetTurnaroundTime+0x128>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d202      	bcs.n	800e916 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e910:	230d      	movs	r3, #13
 800e912:	617b      	str	r3, [r7, #20]
 800e914:	e04c      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	4a33      	ldr	r2, [pc, #204]	@ (800e9e8 <USB_SetTurnaroundTime+0x128>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d306      	bcc.n	800e92c <USB_SetTurnaroundTime+0x6c>
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	4a32      	ldr	r2, [pc, #200]	@ (800e9ec <USB_SetTurnaroundTime+0x12c>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d802      	bhi.n	800e92c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e926:	230c      	movs	r3, #12
 800e928:	617b      	str	r3, [r7, #20]
 800e92a:	e041      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	4a2f      	ldr	r2, [pc, #188]	@ (800e9ec <USB_SetTurnaroundTime+0x12c>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d906      	bls.n	800e942 <USB_SetTurnaroundTime+0x82>
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	4a2e      	ldr	r2, [pc, #184]	@ (800e9f0 <USB_SetTurnaroundTime+0x130>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d802      	bhi.n	800e942 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e93c:	230b      	movs	r3, #11
 800e93e:	617b      	str	r3, [r7, #20]
 800e940:	e036      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	4a2a      	ldr	r2, [pc, #168]	@ (800e9f0 <USB_SetTurnaroundTime+0x130>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d906      	bls.n	800e958 <USB_SetTurnaroundTime+0x98>
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	4a29      	ldr	r2, [pc, #164]	@ (800e9f4 <USB_SetTurnaroundTime+0x134>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d802      	bhi.n	800e958 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e952:	230a      	movs	r3, #10
 800e954:	617b      	str	r3, [r7, #20]
 800e956:	e02b      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4a26      	ldr	r2, [pc, #152]	@ (800e9f4 <USB_SetTurnaroundTime+0x134>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d906      	bls.n	800e96e <USB_SetTurnaroundTime+0xae>
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	4a25      	ldr	r2, [pc, #148]	@ (800e9f8 <USB_SetTurnaroundTime+0x138>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d202      	bcs.n	800e96e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e968:	2309      	movs	r3, #9
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	e020      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	4a21      	ldr	r2, [pc, #132]	@ (800e9f8 <USB_SetTurnaroundTime+0x138>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d306      	bcc.n	800e984 <USB_SetTurnaroundTime+0xc4>
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	4a20      	ldr	r2, [pc, #128]	@ (800e9fc <USB_SetTurnaroundTime+0x13c>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d802      	bhi.n	800e984 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e97e:	2308      	movs	r3, #8
 800e980:	617b      	str	r3, [r7, #20]
 800e982:	e015      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	4a1d      	ldr	r2, [pc, #116]	@ (800e9fc <USB_SetTurnaroundTime+0x13c>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d906      	bls.n	800e99a <USB_SetTurnaroundTime+0xda>
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	4a1c      	ldr	r2, [pc, #112]	@ (800ea00 <USB_SetTurnaroundTime+0x140>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d202      	bcs.n	800e99a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e994:	2307      	movs	r3, #7
 800e996:	617b      	str	r3, [r7, #20]
 800e998:	e00a      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e99a:	2306      	movs	r3, #6
 800e99c:	617b      	str	r3, [r7, #20]
 800e99e:	e007      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d102      	bne.n	800e9ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e9a6:	2309      	movs	r3, #9
 800e9a8:	617b      	str	r3, [r7, #20]
 800e9aa:	e001      	b.n	800e9b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e9ac:	2309      	movs	r3, #9
 800e9ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	029b      	lsls	r3, r3, #10
 800e9c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e9c8:	431a      	orrs	r2, r3
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	371c      	adds	r7, #28
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	00d8acbf 	.word	0x00d8acbf
 800e9e0:	00e4e1c0 	.word	0x00e4e1c0
 800e9e4:	00f42400 	.word	0x00f42400
 800e9e8:	01067380 	.word	0x01067380
 800e9ec:	011a499f 	.word	0x011a499f
 800e9f0:	01312cff 	.word	0x01312cff
 800e9f4:	014ca43f 	.word	0x014ca43f
 800e9f8:	016e3600 	.word	0x016e3600
 800e9fc:	01a6ab1f 	.word	0x01a6ab1f
 800ea00:	01e84800 	.word	0x01e84800

0800ea04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f043 0201 	orr.w	r2, r3, #1
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea26:	b480      	push	{r7}
 800ea28:	b083      	sub	sp, #12
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	f023 0201 	bic.w	r2, r3, #1
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ea54:	2300      	movs	r3, #0
 800ea56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ea64:	78fb      	ldrb	r3, [r7, #3]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d115      	bne.n	800ea96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ea76:	200a      	movs	r0, #10
 800ea78:	f7f7 f892 	bl	8005ba0 <HAL_Delay>
      ms += 10U;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	330a      	adds	r3, #10
 800ea80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f001 f93f 	bl	800fd06 <USB_GetMode>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d01e      	beq.n	800eacc <USB_SetCurrentMode+0x84>
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2bc7      	cmp	r3, #199	@ 0xc7
 800ea92:	d9f0      	bls.n	800ea76 <USB_SetCurrentMode+0x2e>
 800ea94:	e01a      	b.n	800eacc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ea96:	78fb      	ldrb	r3, [r7, #3]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d115      	bne.n	800eac8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800eaa8:	200a      	movs	r0, #10
 800eaaa:	f7f7 f879 	bl	8005ba0 <HAL_Delay>
      ms += 10U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	330a      	adds	r3, #10
 800eab2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f001 f926 	bl	800fd06 <USB_GetMode>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d005      	beq.n	800eacc <USB_SetCurrentMode+0x84>
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2bc7      	cmp	r3, #199	@ 0xc7
 800eac4:	d9f0      	bls.n	800eaa8 <USB_SetCurrentMode+0x60>
 800eac6:	e001      	b.n	800eacc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e005      	b.n	800ead8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2bc8      	cmp	r3, #200	@ 0xc8
 800ead0:	d101      	bne.n	800ead6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	e000      	b.n	800ead8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ead6:	2300      	movs	r3, #0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eae0:	b084      	sub	sp, #16
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b086      	sub	sp, #24
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800eaee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eafa:	2300      	movs	r3, #0
 800eafc:	613b      	str	r3, [r7, #16]
 800eafe:	e009      	b.n	800eb14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	3340      	adds	r3, #64	@ 0x40
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	3301      	adds	r3, #1
 800eb12:	613b      	str	r3, [r7, #16]
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	2b0e      	cmp	r3, #14
 800eb18:	d9f2      	bls.n	800eb00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eb1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d11c      	bne.n	800eb5c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb30:	f043 0302 	orr.w	r3, r3, #2
 800eb34:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb46:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb52:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	639a      	str	r2, [r3, #56]	@ 0x38
 800eb5a:	e00b      	b.n	800eb74 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb60:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb6c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d10d      	bne.n	800eba4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eb88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d104      	bne.n	800eb9a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eb90:	2100      	movs	r1, #0
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 f968 	bl	800ee68 <USB_SetDevSpeed>
 800eb98:	e008      	b.n	800ebac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eb9a:	2101      	movs	r1, #1
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f963 	bl	800ee68 <USB_SetDevSpeed>
 800eba2:	e003      	b.n	800ebac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eba4:	2103      	movs	r1, #3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f95e 	bl	800ee68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ebac:	2110      	movs	r1, #16
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 f8fa 	bl	800eda8 <USB_FlushTxFifo>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f924 	bl	800ee0c <USB_FlushRxFifo>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebec:	461a      	mov	r2, r3
 800ebee:	2300      	movs	r3, #0
 800ebf0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	613b      	str	r3, [r7, #16]
 800ebf6:	e043      	b.n	800ec80 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	015a      	lsls	r2, r3, #5
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4413      	add	r3, r2
 800ec00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec0e:	d118      	bne.n	800ec42 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d10a      	bne.n	800ec2c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec22:	461a      	mov	r2, r3
 800ec24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	e013      	b.n	800ec54 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	015a      	lsls	r2, r3, #5
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec38:	461a      	mov	r2, r3
 800ec3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ec3e:	6013      	str	r3, [r2, #0]
 800ec40:	e008      	b.n	800ec54 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	015a      	lsls	r2, r3, #5
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	4413      	add	r3, r2
 800ec4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec4e:	461a      	mov	r2, r3
 800ec50:	2300      	movs	r3, #0
 800ec52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	015a      	lsls	r2, r3, #5
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec60:	461a      	mov	r2, r3
 800ec62:	2300      	movs	r3, #0
 800ec64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	015a      	lsls	r2, r3, #5
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec72:	461a      	mov	r2, r3
 800ec74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ec78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	613b      	str	r3, [r7, #16]
 800ec80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ec84:	461a      	mov	r2, r3
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d3b5      	bcc.n	800ebf8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	613b      	str	r3, [r7, #16]
 800ec90:	e043      	b.n	800ed1a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	015a      	lsls	r2, r3, #5
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	4413      	add	r3, r2
 800ec9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca8:	d118      	bne.n	800ecdc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10a      	bne.n	800ecc6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	015a      	lsls	r2, r3, #5
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ecc2:	6013      	str	r3, [r2, #0]
 800ecc4:	e013      	b.n	800ecee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	015a      	lsls	r2, r3, #5
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	4413      	add	r3, r2
 800ecce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ecd8:	6013      	str	r3, [r2, #0]
 800ecda:	e008      	b.n	800ecee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	015a      	lsls	r2, r3, #5
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	4413      	add	r3, r2
 800ece4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece8:	461a      	mov	r2, r3
 800ecea:	2300      	movs	r3, #0
 800ecec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	015a      	lsls	r2, r3, #5
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	015a      	lsls	r2, r3, #5
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	4413      	add	r3, r2
 800ed08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ed12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	3301      	adds	r3, #1
 800ed18:	613b      	str	r3, [r7, #16]
 800ed1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ed1e:	461a      	mov	r2, r3
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d3b5      	bcc.n	800ec92 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ed46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d105      	bne.n	800ed5c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	f043 0210 	orr.w	r2, r3, #16
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	699a      	ldr	r2, [r3, #24]
 800ed60:	4b10      	ldr	r3, [pc, #64]	@ (800eda4 <USB_DevInit+0x2c4>)
 800ed62:	4313      	orrs	r3, r2
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ed68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d005      	beq.n	800ed7c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	f043 0208 	orr.w	r2, r3, #8
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ed7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d107      	bne.n	800ed94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed8c:	f043 0304 	orr.w	r3, r3, #4
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eda0:	b004      	add	sp, #16
 800eda2:	4770      	bx	lr
 800eda4:	803c3800 	.word	0x803c3800

0800eda8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800edb2:	2300      	movs	r3, #0
 800edb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800edc2:	d901      	bls.n	800edc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e01b      	b.n	800ee00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	daf2      	bge.n	800edb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800edd0:	2300      	movs	r3, #0
 800edd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	019b      	lsls	r3, r3, #6
 800edd8:	f043 0220 	orr.w	r2, r3, #32
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	3301      	adds	r3, #1
 800ede4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800edec:	d901      	bls.n	800edf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800edee:	2303      	movs	r3, #3
 800edf0:	e006      	b.n	800ee00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	f003 0320 	and.w	r3, r3, #32
 800edfa:	2b20      	cmp	r3, #32
 800edfc:	d0f0      	beq.n	800ede0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ee14:	2300      	movs	r3, #0
 800ee16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ee24:	d901      	bls.n	800ee2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e018      	b.n	800ee5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	691b      	ldr	r3, [r3, #16]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	daf2      	bge.n	800ee18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ee32:	2300      	movs	r3, #0
 800ee34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2210      	movs	r2, #16
 800ee3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ee48:	d901      	bls.n	800ee4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ee4a:	2303      	movs	r3, #3
 800ee4c:	e006      	b.n	800ee5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	f003 0310 	and.w	r3, r3, #16
 800ee56:	2b10      	cmp	r3, #16
 800ee58:	d0f0      	beq.n	800ee3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	78fb      	ldrb	r3, [r7, #3]
 800ee82:	68f9      	ldr	r1, [r7, #12]
 800ee84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3714      	adds	r7, #20
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee9a:	b480      	push	{r7}
 800ee9c:	b087      	sub	sp, #28
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	f003 0306 	and.w	r3, r3, #6
 800eeb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d102      	bne.n	800eec0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eeba:	2300      	movs	r3, #0
 800eebc:	75fb      	strb	r3, [r7, #23]
 800eebe:	e00a      	b.n	800eed6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d002      	beq.n	800eecc <USB_GetDevSpeed+0x32>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b06      	cmp	r3, #6
 800eeca:	d102      	bne.n	800eed2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eecc:	2302      	movs	r3, #2
 800eece:	75fb      	strb	r3, [r7, #23]
 800eed0:	e001      	b.n	800eed6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eed2:	230f      	movs	r3, #15
 800eed4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	371c      	adds	r7, #28
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	785b      	ldrb	r3, [r3, #1]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d13a      	bne.n	800ef76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef06:	69da      	ldr	r2, [r3, #28]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 030f 	and.w	r3, r3, #15
 800ef10:	2101      	movs	r1, #1
 800ef12:	fa01 f303 	lsl.w	r3, r1, r3
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	68f9      	ldr	r1, [r7, #12]
 800ef1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	015a      	lsls	r2, r3, #5
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d155      	bne.n	800efe4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	015a      	lsls	r2, r3, #5
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	4413      	add	r3, r2
 800ef40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	791b      	ldrb	r3, [r3, #4]
 800ef52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	059b      	lsls	r3, r3, #22
 800ef5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	0151      	lsls	r1, r2, #5
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	440a      	add	r2, r1
 800ef66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	e036      	b.n	800efe4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef7c:	69da      	ldr	r2, [r3, #28]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	f003 030f 	and.w	r3, r3, #15
 800ef86:	2101      	movs	r1, #1
 800ef88:	fa01 f303 	lsl.w	r3, r1, r3
 800ef8c:	041b      	lsls	r3, r3, #16
 800ef8e:	68f9      	ldr	r1, [r7, #12]
 800ef90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef94:	4313      	orrs	r3, r2
 800ef96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	015a      	lsls	r2, r3, #5
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4413      	add	r3, r2
 800efa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d11a      	bne.n	800efe4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	015a      	lsls	r2, r3, #5
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	4413      	add	r3, r2
 800efb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	791b      	ldrb	r3, [r3, #4]
 800efc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efca:	430b      	orrs	r3, r1
 800efcc:	4313      	orrs	r3, r2
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	0151      	lsls	r1, r2, #5
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	440a      	add	r2, r1
 800efd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efe2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
	...

0800eff4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	785b      	ldrb	r3, [r3, #1]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d161      	bne.n	800f0d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	015a      	lsls	r2, r3, #5
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	4413      	add	r3, r2
 800f018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f026:	d11f      	bne.n	800f068 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	015a      	lsls	r2, r3, #5
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4413      	add	r3, r2
 800f030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	0151      	lsls	r1, r2, #5
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	440a      	add	r2, r1
 800f03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f042:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f046:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	015a      	lsls	r2, r3, #5
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	4413      	add	r3, r2
 800f050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	0151      	lsls	r1, r2, #5
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	440a      	add	r2, r1
 800f05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f062:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f066:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f06e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	f003 030f 	and.w	r3, r3, #15
 800f078:	2101      	movs	r1, #1
 800f07a:	fa01 f303 	lsl.w	r3, r1, r3
 800f07e:	b29b      	uxth	r3, r3
 800f080:	43db      	mvns	r3, r3
 800f082:	68f9      	ldr	r1, [r7, #12]
 800f084:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f088:	4013      	ands	r3, r2
 800f08a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f092:	69da      	ldr	r2, [r3, #28]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	f003 030f 	and.w	r3, r3, #15
 800f09c:	2101      	movs	r1, #1
 800f09e:	fa01 f303 	lsl.w	r3, r1, r3
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	43db      	mvns	r3, r3
 800f0a6:	68f9      	ldr	r1, [r7, #12]
 800f0a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f0ac:	4013      	ands	r3, r2
 800f0ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	0159      	lsls	r1, r3, #5
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	440b      	add	r3, r1
 800f0c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	4b35      	ldr	r3, [pc, #212]	@ (800f1a4 <USB_DeactivateEndpoint+0x1b0>)
 800f0ce:	4013      	ands	r3, r2
 800f0d0:	600b      	str	r3, [r1, #0]
 800f0d2:	e060      	b.n	800f196 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	015a      	lsls	r2, r3, #5
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4413      	add	r3, r2
 800f0dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f0e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f0ea:	d11f      	bne.n	800f12c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	015a      	lsls	r2, r3, #5
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	0151      	lsls	r1, r2, #5
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	440a      	add	r2, r1
 800f102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f106:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f10a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	015a      	lsls	r2, r3, #5
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	4413      	add	r3, r2
 800f114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	0151      	lsls	r1, r2, #5
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	440a      	add	r2, r1
 800f122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f126:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f12a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	f003 030f 	and.w	r3, r3, #15
 800f13c:	2101      	movs	r1, #1
 800f13e:	fa01 f303 	lsl.w	r3, r1, r3
 800f142:	041b      	lsls	r3, r3, #16
 800f144:	43db      	mvns	r3, r3
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f14c:	4013      	ands	r3, r2
 800f14e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f156:	69da      	ldr	r2, [r3, #28]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	f003 030f 	and.w	r3, r3, #15
 800f160:	2101      	movs	r1, #1
 800f162:	fa01 f303 	lsl.w	r3, r1, r3
 800f166:	041b      	lsls	r3, r3, #16
 800f168:	43db      	mvns	r3, r3
 800f16a:	68f9      	ldr	r1, [r7, #12]
 800f16c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f170:	4013      	ands	r3, r2
 800f172:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	015a      	lsls	r2, r3, #5
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4413      	add	r3, r2
 800f17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	0159      	lsls	r1, r3, #5
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	440b      	add	r3, r1
 800f18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f18e:	4619      	mov	r1, r3
 800f190:	4b05      	ldr	r3, [pc, #20]	@ (800f1a8 <USB_DeactivateEndpoint+0x1b4>)
 800f192:	4013      	ands	r3, r2
 800f194:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	ec337800 	.word	0xec337800
 800f1a8:	eff37800 	.word	0xeff37800

0800f1ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	@ 0x28
 800f1b0:	af02      	add	r7, sp, #8
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	785b      	ldrb	r3, [r3, #1]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	f040 817f 	bne.w	800f4cc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d132      	bne.n	800f23c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	015a      	lsls	r2, r3, #5
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	4413      	add	r3, r2
 800f1de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	0151      	lsls	r1, r2, #5
 800f1e8:	69fa      	ldr	r2, [r7, #28]
 800f1ea:	440a      	add	r2, r1
 800f1ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f1f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f1f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f1f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	015a      	lsls	r2, r3, #5
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	4413      	add	r3, r2
 800f202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	69ba      	ldr	r2, [r7, #24]
 800f20a:	0151      	lsls	r1, r2, #5
 800f20c:	69fa      	ldr	r2, [r7, #28]
 800f20e:	440a      	add	r2, r1
 800f210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	015a      	lsls	r2, r3, #5
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	4413      	add	r3, r2
 800f222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	69ba      	ldr	r2, [r7, #24]
 800f22a:	0151      	lsls	r1, r2, #5
 800f22c:	69fa      	ldr	r2, [r7, #28]
 800f22e:	440a      	add	r2, r1
 800f230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f234:	0cdb      	lsrs	r3, r3, #19
 800f236:	04db      	lsls	r3, r3, #19
 800f238:	6113      	str	r3, [r2, #16]
 800f23a:	e097      	b.n	800f36c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	015a      	lsls	r2, r3, #5
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	4413      	add	r3, r2
 800f244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f248:	691b      	ldr	r3, [r3, #16]
 800f24a:	69ba      	ldr	r2, [r7, #24]
 800f24c:	0151      	lsls	r1, r2, #5
 800f24e:	69fa      	ldr	r2, [r7, #28]
 800f250:	440a      	add	r2, r1
 800f252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f256:	0cdb      	lsrs	r3, r3, #19
 800f258:	04db      	lsls	r3, r3, #19
 800f25a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	015a      	lsls	r2, r3, #5
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	4413      	add	r3, r2
 800f264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	69ba      	ldr	r2, [r7, #24]
 800f26c:	0151      	lsls	r1, r2, #5
 800f26e:	69fa      	ldr	r2, [r7, #28]
 800f270:	440a      	add	r2, r1
 800f272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f276:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f27a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f27e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d11a      	bne.n	800f2bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	691a      	ldr	r2, [r3, #16]
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d903      	bls.n	800f29a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	689a      	ldr	r2, [r3, #8]
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	0151      	lsls	r1, r2, #5
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	440a      	add	r2, r1
 800f2b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f2b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f2b8:	6113      	str	r3, [r2, #16]
 800f2ba:	e044      	b.n	800f346 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	691a      	ldr	r2, [r3, #16]
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	1e5a      	subs	r2, r3, #1
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2d0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	015a      	lsls	r2, r3, #5
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2de:	691a      	ldr	r2, [r3, #16]
 800f2e0:	8afb      	ldrh	r3, [r7, #22]
 800f2e2:	04d9      	lsls	r1, r3, #19
 800f2e4:	4ba4      	ldr	r3, [pc, #656]	@ (800f578 <USB_EPStartXfer+0x3cc>)
 800f2e6:	400b      	ands	r3, r1
 800f2e8:	69b9      	ldr	r1, [r7, #24]
 800f2ea:	0148      	lsls	r0, r1, #5
 800f2ec:	69f9      	ldr	r1, [r7, #28]
 800f2ee:	4401      	add	r1, r0
 800f2f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	791b      	ldrb	r3, [r3, #4]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d122      	bne.n	800f346 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	015a      	lsls	r2, r3, #5
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	4413      	add	r3, r2
 800f308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	69ba      	ldr	r2, [r7, #24]
 800f310:	0151      	lsls	r1, r2, #5
 800f312:	69fa      	ldr	r2, [r7, #28]
 800f314:	440a      	add	r2, r1
 800f316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f31a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f31e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	015a      	lsls	r2, r3, #5
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	4413      	add	r3, r2
 800f328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f32c:	691a      	ldr	r2, [r3, #16]
 800f32e:	8afb      	ldrh	r3, [r7, #22]
 800f330:	075b      	lsls	r3, r3, #29
 800f332:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f336:	69b9      	ldr	r1, [r7, #24]
 800f338:	0148      	lsls	r0, r1, #5
 800f33a:	69f9      	ldr	r1, [r7, #28]
 800f33c:	4401      	add	r1, r0
 800f33e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f342:	4313      	orrs	r3, r2
 800f344:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f352:	691a      	ldr	r2, [r3, #16]
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f35c:	69b9      	ldr	r1, [r7, #24]
 800f35e:	0148      	lsls	r0, r1, #5
 800f360:	69f9      	ldr	r1, [r7, #28]
 800f362:	4401      	add	r1, r0
 800f364:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f368:	4313      	orrs	r3, r2
 800f36a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f36c:	79fb      	ldrb	r3, [r7, #7]
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d14b      	bne.n	800f40a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d009      	beq.n	800f38e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	015a      	lsls	r2, r3, #5
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	4413      	add	r3, r2
 800f382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f386:	461a      	mov	r2, r3
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	69db      	ldr	r3, [r3, #28]
 800f38c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	791b      	ldrb	r3, [r3, #4]
 800f392:	2b01      	cmp	r3, #1
 800f394:	d128      	bne.n	800f3e8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d110      	bne.n	800f3c8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	015a      	lsls	r2, r3, #5
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	69ba      	ldr	r2, [r7, #24]
 800f3b6:	0151      	lsls	r1, r2, #5
 800f3b8:	69fa      	ldr	r2, [r7, #28]
 800f3ba:	440a      	add	r2, r1
 800f3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	e00f      	b.n	800f3e8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3c8:	69bb      	ldr	r3, [r7, #24]
 800f3ca:	015a      	lsls	r2, r3, #5
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	69ba      	ldr	r2, [r7, #24]
 800f3d8:	0151      	lsls	r1, r2, #5
 800f3da:	69fa      	ldr	r2, [r7, #28]
 800f3dc:	440a      	add	r2, r1
 800f3de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3e6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	015a      	lsls	r2, r3, #5
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	4413      	add	r3, r2
 800f3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	69ba      	ldr	r2, [r7, #24]
 800f3f8:	0151      	lsls	r1, r2, #5
 800f3fa:	69fa      	ldr	r2, [r7, #28]
 800f3fc:	440a      	add	r2, r1
 800f3fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f402:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f406:	6013      	str	r3, [r2, #0]
 800f408:	e166      	b.n	800f6d8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	015a      	lsls	r2, r3, #5
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	4413      	add	r3, r2
 800f412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	69ba      	ldr	r2, [r7, #24]
 800f41a:	0151      	lsls	r1, r2, #5
 800f41c:	69fa      	ldr	r2, [r7, #28]
 800f41e:	440a      	add	r2, r1
 800f420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f424:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f428:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	791b      	ldrb	r3, [r3, #4]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d015      	beq.n	800f45e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	f000 814e 	beq.w	800f6d8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 030f 	and.w	r3, r3, #15
 800f44c:	2101      	movs	r1, #1
 800f44e:	fa01 f303 	lsl.w	r3, r1, r3
 800f452:	69f9      	ldr	r1, [r7, #28]
 800f454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f458:	4313      	orrs	r3, r2
 800f45a:	634b      	str	r3, [r1, #52]	@ 0x34
 800f45c:	e13c      	b.n	800f6d8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d110      	bne.n	800f490 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	015a      	lsls	r2, r3, #5
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	4413      	add	r3, r2
 800f476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	69ba      	ldr	r2, [r7, #24]
 800f47e:	0151      	lsls	r1, r2, #5
 800f480:	69fa      	ldr	r2, [r7, #28]
 800f482:	440a      	add	r2, r1
 800f484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f488:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f48c:	6013      	str	r3, [r2, #0]
 800f48e:	e00f      	b.n	800f4b0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	015a      	lsls	r2, r3, #5
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	4413      	add	r3, r2
 800f498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	69ba      	ldr	r2, [r7, #24]
 800f4a0:	0151      	lsls	r1, r2, #5
 800f4a2:	69fa      	ldr	r2, [r7, #28]
 800f4a4:	440a      	add	r2, r1
 800f4a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f4ae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	68d9      	ldr	r1, [r3, #12]
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	781a      	ldrb	r2, [r3, #0]
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	691b      	ldr	r3, [r3, #16]
 800f4bc:	b298      	uxth	r0, r3
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f000 f9b9 	bl	800f83c <USB_WritePacket>
 800f4ca:	e105      	b.n	800f6d8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	015a      	lsls	r2, r3, #5
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4d8:	691b      	ldr	r3, [r3, #16]
 800f4da:	69ba      	ldr	r2, [r7, #24]
 800f4dc:	0151      	lsls	r1, r2, #5
 800f4de:	69fa      	ldr	r2, [r7, #28]
 800f4e0:	440a      	add	r2, r1
 800f4e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4e6:	0cdb      	lsrs	r3, r3, #19
 800f4e8:	04db      	lsls	r3, r3, #19
 800f4ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	015a      	lsls	r2, r3, #5
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	69ba      	ldr	r2, [r7, #24]
 800f4fc:	0151      	lsls	r1, r2, #5
 800f4fe:	69fa      	ldr	r2, [r7, #28]
 800f500:	440a      	add	r2, r1
 800f502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f506:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f50a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f50e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d132      	bne.n	800f57c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	689a      	ldr	r2, [r3, #8]
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	689a      	ldr	r2, [r3, #8]
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	015a      	lsls	r2, r3, #5
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	4413      	add	r3, r2
 800f536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f53a:	691a      	ldr	r2, [r3, #16]
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	6a1b      	ldr	r3, [r3, #32]
 800f540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f544:	69b9      	ldr	r1, [r7, #24]
 800f546:	0148      	lsls	r0, r1, #5
 800f548:	69f9      	ldr	r1, [r7, #28]
 800f54a:	4401      	add	r1, r0
 800f54c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f550:	4313      	orrs	r3, r2
 800f552:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	015a      	lsls	r2, r3, #5
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	4413      	add	r3, r2
 800f55c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	69ba      	ldr	r2, [r7, #24]
 800f564:	0151      	lsls	r1, r2, #5
 800f566:	69fa      	ldr	r2, [r7, #28]
 800f568:	440a      	add	r2, r1
 800f56a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f56e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f572:	6113      	str	r3, [r2, #16]
 800f574:	e062      	b.n	800f63c <USB_EPStartXfer+0x490>
 800f576:	bf00      	nop
 800f578:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d123      	bne.n	800f5cc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	015a      	lsls	r2, r3, #5
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	4413      	add	r3, r2
 800f58c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f590:	691a      	ldr	r2, [r3, #16]
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f59a:	69b9      	ldr	r1, [r7, #24]
 800f59c:	0148      	lsls	r0, r1, #5
 800f59e:	69f9      	ldr	r1, [r7, #28]
 800f5a0:	4401      	add	r1, r0
 800f5a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	015a      	lsls	r2, r3, #5
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	69ba      	ldr	r2, [r7, #24]
 800f5ba:	0151      	lsls	r1, r2, #5
 800f5bc:	69fa      	ldr	r2, [r7, #28]
 800f5be:	440a      	add	r2, r1
 800f5c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f5c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f5c8:	6113      	str	r3, [r2, #16]
 800f5ca:	e037      	b.n	800f63c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	691a      	ldr	r2, [r3, #16]
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	1e5a      	subs	r2, r3, #1
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5e0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	8afa      	ldrh	r2, [r7, #22]
 800f5e8:	fb03 f202 	mul.w	r2, r3, r2
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	015a      	lsls	r2, r3, #5
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	8afb      	ldrh	r3, [r7, #22]
 800f600:	04d9      	lsls	r1, r3, #19
 800f602:	4b38      	ldr	r3, [pc, #224]	@ (800f6e4 <USB_EPStartXfer+0x538>)
 800f604:	400b      	ands	r3, r1
 800f606:	69b9      	ldr	r1, [r7, #24]
 800f608:	0148      	lsls	r0, r1, #5
 800f60a:	69f9      	ldr	r1, [r7, #28]
 800f60c:	4401      	add	r1, r0
 800f60e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f612:	4313      	orrs	r3, r2
 800f614:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	015a      	lsls	r2, r3, #5
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f622:	691a      	ldr	r2, [r3, #16]
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	6a1b      	ldr	r3, [r3, #32]
 800f628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f62c:	69b9      	ldr	r1, [r7, #24]
 800f62e:	0148      	lsls	r0, r1, #5
 800f630:	69f9      	ldr	r1, [r7, #28]
 800f632:	4401      	add	r1, r0
 800f634:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800f638:	4313      	orrs	r3, r2
 800f63a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800f63c:	79fb      	ldrb	r3, [r7, #7]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d10d      	bne.n	800f65e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d009      	beq.n	800f65e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	68d9      	ldr	r1, [r3, #12]
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	015a      	lsls	r2, r3, #5
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	4413      	add	r3, r2
 800f656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f65a:	460a      	mov	r2, r1
 800f65c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	791b      	ldrb	r3, [r3, #4]
 800f662:	2b01      	cmp	r3, #1
 800f664:	d128      	bne.n	800f6b8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f672:	2b00      	cmp	r3, #0
 800f674:	d110      	bne.n	800f698 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	69ba      	ldr	r2, [r7, #24]
 800f686:	0151      	lsls	r1, r2, #5
 800f688:	69fa      	ldr	r2, [r7, #28]
 800f68a:	440a      	add	r2, r1
 800f68c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f690:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	e00f      	b.n	800f6b8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	015a      	lsls	r2, r3, #5
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	4413      	add	r3, r2
 800f6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	69ba      	ldr	r2, [r7, #24]
 800f6a8:	0151      	lsls	r1, r2, #5
 800f6aa:	69fa      	ldr	r2, [r7, #28]
 800f6ac:	440a      	add	r2, r1
 800f6ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f6b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	015a      	lsls	r2, r3, #5
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	4413      	add	r3, r2
 800f6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	69ba      	ldr	r2, [r7, #24]
 800f6c8:	0151      	lsls	r1, r2, #5
 800f6ca:	69fa      	ldr	r2, [r7, #28]
 800f6cc:	440a      	add	r2, r1
 800f6ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f6d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f6d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3720      	adds	r7, #32
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	1ff80000 	.word	0x1ff80000

0800f6e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b087      	sub	sp, #28
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	785b      	ldrb	r3, [r3, #1]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d14a      	bne.n	800f79c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	015a      	lsls	r2, r3, #5
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	4413      	add	r3, r2
 800f710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f71a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f71e:	f040 8086 	bne.w	800f82e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	015a      	lsls	r2, r3, #5
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	4413      	add	r3, r2
 800f72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	7812      	ldrb	r2, [r2, #0]
 800f736:	0151      	lsls	r1, r2, #5
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	440a      	add	r2, r1
 800f73c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f744:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	015a      	lsls	r2, r3, #5
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	4413      	add	r3, r2
 800f750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	683a      	ldr	r2, [r7, #0]
 800f758:	7812      	ldrb	r2, [r2, #0]
 800f75a:	0151      	lsls	r1, r2, #5
 800f75c:	693a      	ldr	r2, [r7, #16]
 800f75e:	440a      	add	r2, r1
 800f760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f764:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f768:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	3301      	adds	r3, #1
 800f76e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f776:	4293      	cmp	r3, r2
 800f778:	d902      	bls.n	800f780 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	75fb      	strb	r3, [r7, #23]
          break;
 800f77e:	e056      	b.n	800f82e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	015a      	lsls	r2, r3, #5
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	4413      	add	r3, r2
 800f78a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f798:	d0e7      	beq.n	800f76a <USB_EPStopXfer+0x82>
 800f79a:	e048      	b.n	800f82e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	015a      	lsls	r2, r3, #5
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7b4:	d13b      	bne.n	800f82e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	015a      	lsls	r2, r3, #5
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	4413      	add	r3, r2
 800f7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	7812      	ldrb	r2, [r2, #0]
 800f7ca:	0151      	lsls	r1, r2, #5
 800f7cc:	693a      	ldr	r2, [r7, #16]
 800f7ce:	440a      	add	r2, r1
 800f7d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f7d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	683a      	ldr	r2, [r7, #0]
 800f7ec:	7812      	ldrb	r2, [r2, #0]
 800f7ee:	0151      	lsls	r1, r2, #5
 800f7f0:	693a      	ldr	r2, [r7, #16]
 800f7f2:	440a      	add	r2, r1
 800f7f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f7f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f7fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	3301      	adds	r3, #1
 800f802:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d902      	bls.n	800f814 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f80e:	2301      	movs	r3, #1
 800f810:	75fb      	strb	r3, [r7, #23]
          break;
 800f812:	e00c      	b.n	800f82e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	015a      	lsls	r2, r3, #5
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	4413      	add	r3, r2
 800f81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f82c:	d0e7      	beq.n	800f7fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f830:	4618      	mov	r0, r3
 800f832:	371c      	adds	r7, #28
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b089      	sub	sp, #36	@ 0x24
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	4611      	mov	r1, r2
 800f848:	461a      	mov	r2, r3
 800f84a:	460b      	mov	r3, r1
 800f84c:	71fb      	strb	r3, [r7, #7]
 800f84e:	4613      	mov	r3, r2
 800f850:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f85a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d123      	bne.n	800f8aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f862:	88bb      	ldrh	r3, [r7, #4]
 800f864:	3303      	adds	r3, #3
 800f866:	089b      	lsrs	r3, r3, #2
 800f868:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f86a:	2300      	movs	r3, #0
 800f86c:	61bb      	str	r3, [r7, #24]
 800f86e:	e018      	b.n	800f8a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f870:	79fb      	ldrb	r3, [r7, #7]
 800f872:	031a      	lsls	r2, r3, #12
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	4413      	add	r3, r2
 800f878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f87c:	461a      	mov	r2, r3
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	3301      	adds	r3, #1
 800f888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	3301      	adds	r3, #1
 800f88e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	3301      	adds	r3, #1
 800f894:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	3301      	adds	r3, #1
 800f89a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	61bb      	str	r3, [r7, #24]
 800f8a2:	69ba      	ldr	r2, [r7, #24]
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d3e2      	bcc.n	800f870 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3724      	adds	r7, #36	@ 0x24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b08b      	sub	sp, #44	@ 0x2c
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f8ce:	88fb      	ldrh	r3, [r7, #6]
 800f8d0:	089b      	lsrs	r3, r3, #2
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f8d6:	88fb      	ldrh	r3, [r7, #6]
 800f8d8:	f003 0303 	and.w	r3, r3, #3
 800f8dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f8de:	2300      	movs	r3, #0
 800f8e0:	623b      	str	r3, [r7, #32]
 800f8e2:	e014      	b.n	800f90e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8fe:	3301      	adds	r3, #1
 800f900:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f904:	3301      	adds	r3, #1
 800f906:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	3301      	adds	r3, #1
 800f90c:	623b      	str	r3, [r7, #32]
 800f90e:	6a3a      	ldr	r2, [r7, #32]
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	429a      	cmp	r2, r3
 800f914:	d3e6      	bcc.n	800f8e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f916:	8bfb      	ldrh	r3, [r7, #30]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01e      	beq.n	800f95a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f91c:	2300      	movs	r3, #0
 800f91e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f926:	461a      	mov	r2, r3
 800f928:	f107 0310 	add.w	r3, r7, #16
 800f92c:	6812      	ldr	r2, [r2, #0]
 800f92e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	6a3b      	ldr	r3, [r7, #32]
 800f934:	b2db      	uxtb	r3, r3
 800f936:	00db      	lsls	r3, r3, #3
 800f938:	fa22 f303 	lsr.w	r3, r2, r3
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f940:	701a      	strb	r2, [r3, #0]
      i++;
 800f942:	6a3b      	ldr	r3, [r7, #32]
 800f944:	3301      	adds	r3, #1
 800f946:	623b      	str	r3, [r7, #32]
      pDest++;
 800f948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94a:	3301      	adds	r3, #1
 800f94c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f94e:	8bfb      	ldrh	r3, [r7, #30]
 800f950:	3b01      	subs	r3, #1
 800f952:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f954:	8bfb      	ldrh	r3, [r7, #30]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1ea      	bne.n	800f930 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	372c      	adds	r7, #44	@ 0x2c
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	785b      	ldrb	r3, [r3, #1]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d12c      	bne.n	800f9de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	015a      	lsls	r2, r3, #5
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	4413      	add	r3, r2
 800f98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	db12      	blt.n	800f9bc <USB_EPSetStall+0x54>
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00f      	beq.n	800f9bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	015a      	lsls	r2, r3, #5
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	0151      	lsls	r1, r2, #5
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	440a      	add	r2, r1
 800f9b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f9ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	0151      	lsls	r1, r2, #5
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	440a      	add	r2, r1
 800f9d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	e02b      	b.n	800fa36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	015a      	lsls	r2, r3, #5
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	db12      	blt.n	800fa16 <USB_EPSetStall+0xae>
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00f      	beq.n	800fa16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	015a      	lsls	r2, r3, #5
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	68ba      	ldr	r2, [r7, #8]
 800fa06:	0151      	lsls	r1, r2, #5
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	440a      	add	r2, r1
 800fa0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fa14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	015a      	lsls	r2, r3, #5
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	0151      	lsls	r1, r2, #5
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	440a      	add	r2, r1
 800fa2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fa34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fa36:	2300      	movs	r3, #0
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3714      	adds	r7, #20
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	785b      	ldrb	r3, [r3, #1]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d128      	bne.n	800fab2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	015a      	lsls	r2, r3, #5
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	4413      	add	r3, r2
 800fa68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	0151      	lsls	r1, r2, #5
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	440a      	add	r2, r1
 800fa76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fa7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	791b      	ldrb	r3, [r3, #4]
 800fa84:	2b03      	cmp	r3, #3
 800fa86:	d003      	beq.n	800fa90 <USB_EPClearStall+0x4c>
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	791b      	ldrb	r3, [r3, #4]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d138      	bne.n	800fb02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	015a      	lsls	r2, r3, #5
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	4413      	add	r3, r2
 800fa98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	0151      	lsls	r1, r2, #5
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	440a      	add	r2, r1
 800faa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800faaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800faae:	6013      	str	r3, [r2, #0]
 800fab0:	e027      	b.n	800fb02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	015a      	lsls	r2, r3, #5
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	4413      	add	r3, r2
 800faba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	0151      	lsls	r1, r2, #5
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	440a      	add	r2, r1
 800fac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800facc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fad0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	791b      	ldrb	r3, [r3, #4]
 800fad6:	2b03      	cmp	r3, #3
 800fad8:	d003      	beq.n	800fae2 <USB_EPClearStall+0x9e>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	791b      	ldrb	r3, [r3, #4]
 800fade:	2b02      	cmp	r3, #2
 800fae0:	d10f      	bne.n	800fb02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	015a      	lsls	r2, r3, #5
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	4413      	add	r3, r2
 800faea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	0151      	lsls	r1, r2, #5
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	440a      	add	r2, r1
 800faf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fafc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fb00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3714      	adds	r7, #20
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	460b      	mov	r3, r1
 800fb1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800fb32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	78fb      	ldrb	r3, [r7, #3]
 800fb3e:	011b      	lsls	r3, r3, #4
 800fb40:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800fb44:	68f9      	ldr	r1, [r7, #12]
 800fb46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3714      	adds	r7, #20
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b085      	sub	sp, #20
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fb76:	f023 0303 	bic.w	r3, r3, #3
 800fb7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb8a:	f023 0302 	bic.w	r3, r3, #2
 800fb8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3714      	adds	r7, #20
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fb9e:	b480      	push	{r7}
 800fba0:	b085      	sub	sp, #20
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fbb8:	f023 0303 	bic.w	r3, r3, #3
 800fbbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fbcc:	f043 0302 	orr.w	r3, r3, #2
 800fbd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3714      	adds	r7, #20
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	4013      	ands	r3, r2
 800fbf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc06:	b480      	push	{r7}
 800fc08:	b085      	sub	sp, #20
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc22:	69db      	ldr	r3, [r3, #28]
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	4013      	ands	r3, r2
 800fc28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	0c1b      	lsrs	r3, r3, #16
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3714      	adds	r7, #20
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr

0800fc3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b085      	sub	sp, #20
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc56:	69db      	ldr	r3, [r3, #28]
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	b29b      	uxth	r3, r3
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3714      	adds	r7, #20
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr

0800fc6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc6e:	b480      	push	{r7}
 800fc70:	b085      	sub	sp, #20
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	460b      	mov	r3, r1
 800fc78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fc7e:	78fb      	ldrb	r3, [r7, #3]
 800fc80:	015a      	lsls	r2, r3, #5
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc94:	695b      	ldr	r3, [r3, #20]
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	4013      	ands	r3, r2
 800fc9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc9c:	68bb      	ldr	r3, [r7, #8]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3714      	adds	r7, #20
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr

0800fcaa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fcaa:	b480      	push	{r7}
 800fcac:	b087      	sub	sp, #28
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fccc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fcce:	78fb      	ldrb	r3, [r7, #3]
 800fcd0:	f003 030f 	and.w	r3, r3, #15
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	fa22 f303 	lsr.w	r3, r2, r3
 800fcda:	01db      	lsls	r3, r3, #7
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	693a      	ldr	r2, [r7, #16]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fce4:	78fb      	ldrb	r3, [r7, #3]
 800fce6:	015a      	lsls	r2, r3, #5
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	4413      	add	r3, r2
 800fcec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	693a      	ldr	r2, [r7, #16]
 800fcf4:	4013      	ands	r3, r2
 800fcf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fcf8:	68bb      	ldr	r3, [r7, #8]
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	371c      	adds	r7, #28
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800fd06:	b480      	push	{r7}
 800fd08:	b083      	sub	sp, #12
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	f003 0301 	and.w	r3, r3, #1
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800fd22:	b480      	push	{r7}
 800fd24:	b085      	sub	sp, #20
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd3c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800fd40:	f023 0307 	bic.w	r3, r3, #7
 800fd44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fd54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b087      	sub	sp, #28
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	460b      	mov	r3, r1
 800fd72:	607a      	str	r2, [r7, #4]
 800fd74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	333c      	adds	r3, #60	@ 0x3c
 800fd7e:	3304      	adds	r3, #4
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	4a26      	ldr	r2, [pc, #152]	@ (800fe20 <USB_EP0_OutStart+0xb8>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d90a      	bls.n	800fda2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd9c:	d101      	bne.n	800fda2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e037      	b.n	800fe12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fda8:	461a      	mov	r2, r3
 800fdaa:	2300      	movs	r3, #0
 800fdac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	697a      	ldr	r2, [r7, #20]
 800fdb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fdbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fdc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdc8:	691b      	ldr	r3, [r3, #16]
 800fdca:	697a      	ldr	r2, [r7, #20]
 800fdcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fdd0:	f043 0318 	orr.w	r3, r3, #24
 800fdd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	697a      	ldr	r2, [r7, #20]
 800fde0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fde4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800fde8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fdea:	7afb      	ldrb	r3, [r7, #11]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d10f      	bne.n	800fe10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe0a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800fe0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	371c      	adds	r7, #28
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	4f54300a 	.word	0x4f54300a

0800fe24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	3301      	adds	r3, #1
 800fe34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe3c:	d901      	bls.n	800fe42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	e01b      	b.n	800fe7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	691b      	ldr	r3, [r3, #16]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	daf2      	bge.n	800fe30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	f043 0201 	orr.w	r2, r3, #1
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe66:	d901      	bls.n	800fe6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fe68:	2303      	movs	r3, #3
 800fe6a:	e006      	b.n	800fe7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	691b      	ldr	r3, [r3, #16]
 800fe70:	f003 0301 	and.w	r3, r3, #1
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d0f0      	beq.n	800fe5a <USB_CoreReset+0x36>

  return HAL_OK;
 800fe78:	2300      	movs	r3, #0
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3714      	adds	r7, #20
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
	...

0800fe88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fe94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fe98:	f002 fd00 	bl	801289c <USBD_static_malloc>
 800fe9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d109      	bne.n	800feb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	32b0      	adds	r2, #176	@ 0xb0
 800feae:	2100      	movs	r1, #0
 800feb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800feb4:	2302      	movs	r3, #2
 800feb6:	e0d4      	b.n	8010062 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800feb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800febc:	2100      	movs	r1, #0
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f002 fdae 	bl	8012a20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	32b0      	adds	r2, #176	@ 0xb0
 800fece:	68f9      	ldr	r1, [r7, #12]
 800fed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	32b0      	adds	r2, #176	@ 0xb0
 800fede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	7c1b      	ldrb	r3, [r3, #16]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d138      	bne.n	800ff62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fef0:	4b5e      	ldr	r3, [pc, #376]	@ (801006c <USBD_CDC_Init+0x1e4>)
 800fef2:	7819      	ldrb	r1, [r3, #0]
 800fef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fef8:	2202      	movs	r2, #2
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f002 fbab 	bl	8012656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ff00:	4b5a      	ldr	r3, [pc, #360]	@ (801006c <USBD_CDC_Init+0x1e4>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	f003 020f 	and.w	r2, r3, #15
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	4413      	add	r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	440b      	add	r3, r1
 800ff14:	3324      	adds	r3, #36	@ 0x24
 800ff16:	2201      	movs	r2, #1
 800ff18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ff1a:	4b55      	ldr	r3, [pc, #340]	@ (8010070 <USBD_CDC_Init+0x1e8>)
 800ff1c:	7819      	ldrb	r1, [r3, #0]
 800ff1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff22:	2202      	movs	r2, #2
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f002 fb96 	bl	8012656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ff2a:	4b51      	ldr	r3, [pc, #324]	@ (8010070 <USBD_CDC_Init+0x1e8>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	f003 020f 	and.w	r2, r3, #15
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	4613      	mov	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	4413      	add	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	440b      	add	r3, r1
 800ff3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ff42:	2201      	movs	r2, #1
 800ff44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ff46:	4b4b      	ldr	r3, [pc, #300]	@ (8010074 <USBD_CDC_Init+0x1ec>)
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	f003 020f 	and.w	r2, r3, #15
 800ff4e:	6879      	ldr	r1, [r7, #4]
 800ff50:	4613      	mov	r3, r2
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	009b      	lsls	r3, r3, #2
 800ff58:	440b      	add	r3, r1
 800ff5a:	3326      	adds	r3, #38	@ 0x26
 800ff5c:	2210      	movs	r2, #16
 800ff5e:	801a      	strh	r2, [r3, #0]
 800ff60:	e035      	b.n	800ffce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ff62:	4b42      	ldr	r3, [pc, #264]	@ (801006c <USBD_CDC_Init+0x1e4>)
 800ff64:	7819      	ldrb	r1, [r3, #0]
 800ff66:	2340      	movs	r3, #64	@ 0x40
 800ff68:	2202      	movs	r2, #2
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f002 fb73 	bl	8012656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ff70:	4b3e      	ldr	r3, [pc, #248]	@ (801006c <USBD_CDC_Init+0x1e4>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 020f 	and.w	r2, r3, #15
 800ff78:	6879      	ldr	r1, [r7, #4]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	440b      	add	r3, r1
 800ff84:	3324      	adds	r3, #36	@ 0x24
 800ff86:	2201      	movs	r2, #1
 800ff88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ff8a:	4b39      	ldr	r3, [pc, #228]	@ (8010070 <USBD_CDC_Init+0x1e8>)
 800ff8c:	7819      	ldrb	r1, [r3, #0]
 800ff8e:	2340      	movs	r3, #64	@ 0x40
 800ff90:	2202      	movs	r2, #2
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f002 fb5f 	bl	8012656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ff98:	4b35      	ldr	r3, [pc, #212]	@ (8010070 <USBD_CDC_Init+0x1e8>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	f003 020f 	and.w	r2, r3, #15
 800ffa0:	6879      	ldr	r1, [r7, #4]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4413      	add	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	440b      	add	r3, r1
 800ffac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ffb4:	4b2f      	ldr	r3, [pc, #188]	@ (8010074 <USBD_CDC_Init+0x1ec>)
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	f003 020f 	and.w	r2, r3, #15
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	440b      	add	r3, r1
 800ffc8:	3326      	adds	r3, #38	@ 0x26
 800ffca:	2210      	movs	r2, #16
 800ffcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ffce:	4b29      	ldr	r3, [pc, #164]	@ (8010074 <USBD_CDC_Init+0x1ec>)
 800ffd0:	7819      	ldrb	r1, [r3, #0]
 800ffd2:	2308      	movs	r3, #8
 800ffd4:	2203      	movs	r2, #3
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f002 fb3d 	bl	8012656 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ffdc:	4b25      	ldr	r3, [pc, #148]	@ (8010074 <USBD_CDC_Init+0x1ec>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 020f 	and.w	r2, r3, #15
 800ffe4:	6879      	ldr	r1, [r7, #4]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	4413      	add	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	440b      	add	r3, r1
 800fff0:	3324      	adds	r3, #36	@ 0x24
 800fff2:	2201      	movs	r2, #1
 800fff4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	33b0      	adds	r3, #176	@ 0xb0
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	4413      	add	r3, r2
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2200      	movs	r2, #0
 801001e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010028:	2b00      	cmp	r3, #0
 801002a:	d101      	bne.n	8010030 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801002c:	2302      	movs	r3, #2
 801002e:	e018      	b.n	8010062 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	7c1b      	ldrb	r3, [r3, #16]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d10a      	bne.n	801004e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010038:	4b0d      	ldr	r3, [pc, #52]	@ (8010070 <USBD_CDC_Init+0x1e8>)
 801003a:	7819      	ldrb	r1, [r3, #0]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f002 fbf4 	bl	8012834 <USBD_LL_PrepareReceive>
 801004c:	e008      	b.n	8010060 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801004e:	4b08      	ldr	r3, [pc, #32]	@ (8010070 <USBD_CDC_Init+0x1e8>)
 8010050:	7819      	ldrb	r1, [r3, #0]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010058:	2340      	movs	r3, #64	@ 0x40
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f002 fbea 	bl	8012834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	200000a3 	.word	0x200000a3
 8010070:	200000a4 	.word	0x200000a4
 8010074:	200000a5 	.word	0x200000a5

08010078 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	460b      	mov	r3, r1
 8010082:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010084:	4b3a      	ldr	r3, [pc, #232]	@ (8010170 <USBD_CDC_DeInit+0xf8>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	4619      	mov	r1, r3
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f002 fb09 	bl	80126a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010090:	4b37      	ldr	r3, [pc, #220]	@ (8010170 <USBD_CDC_DeInit+0xf8>)
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	f003 020f 	and.w	r2, r3, #15
 8010098:	6879      	ldr	r1, [r7, #4]
 801009a:	4613      	mov	r3, r2
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	4413      	add	r3, r2
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	440b      	add	r3, r1
 80100a4:	3324      	adds	r3, #36	@ 0x24
 80100a6:	2200      	movs	r2, #0
 80100a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80100aa:	4b32      	ldr	r3, [pc, #200]	@ (8010174 <USBD_CDC_DeInit+0xfc>)
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	4619      	mov	r1, r3
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f002 faf6 	bl	80126a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80100b6:	4b2f      	ldr	r3, [pc, #188]	@ (8010174 <USBD_CDC_DeInit+0xfc>)
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	f003 020f 	and.w	r2, r3, #15
 80100be:	6879      	ldr	r1, [r7, #4]
 80100c0:	4613      	mov	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	4413      	add	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	440b      	add	r3, r1
 80100ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80100ce:	2200      	movs	r2, #0
 80100d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80100d2:	4b29      	ldr	r3, [pc, #164]	@ (8010178 <USBD_CDC_DeInit+0x100>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f002 fae2 	bl	80126a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80100de:	4b26      	ldr	r3, [pc, #152]	@ (8010178 <USBD_CDC_DeInit+0x100>)
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	f003 020f 	and.w	r2, r3, #15
 80100e6:	6879      	ldr	r1, [r7, #4]
 80100e8:	4613      	mov	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	4413      	add	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	440b      	add	r3, r1
 80100f2:	3324      	adds	r3, #36	@ 0x24
 80100f4:	2200      	movs	r2, #0
 80100f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80100f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010178 <USBD_CDC_DeInit+0x100>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f003 020f 	and.w	r2, r3, #15
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	4613      	mov	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	4413      	add	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	440b      	add	r3, r1
 801010c:	3326      	adds	r3, #38	@ 0x26
 801010e:	2200      	movs	r2, #0
 8010110:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	32b0      	adds	r2, #176	@ 0xb0
 801011c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d01f      	beq.n	8010164 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801012a:	687a      	ldr	r2, [r7, #4]
 801012c:	33b0      	adds	r3, #176	@ 0xb0
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	4413      	add	r3, r2
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	32b0      	adds	r2, #176	@ 0xb0
 8010142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010146:	4618      	mov	r0, r3
 8010148:	f002 fbb6 	bl	80128b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	32b0      	adds	r2, #176	@ 0xb0
 8010156:	2100      	movs	r1, #0
 8010158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2200      	movs	r2, #0
 8010160:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010164:	2300      	movs	r3, #0
}
 8010166:	4618      	mov	r0, r3
 8010168:	3708      	adds	r7, #8
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	200000a3 	.word	0x200000a3
 8010174:	200000a4 	.word	0x200000a4
 8010178:	200000a5 	.word	0x200000a5

0801017c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b086      	sub	sp, #24
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	32b0      	adds	r2, #176	@ 0xb0
 8010190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010194:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010196:	2300      	movs	r3, #0
 8010198:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801019a:	2300      	movs	r3, #0
 801019c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80101a8:	2303      	movs	r3, #3
 80101aa:	e0bf      	b.n	801032c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d050      	beq.n	801025a <USBD_CDC_Setup+0xde>
 80101b8:	2b20      	cmp	r3, #32
 80101ba:	f040 80af 	bne.w	801031c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	88db      	ldrh	r3, [r3, #6]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d03a      	beq.n	801023c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	b25b      	sxtb	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	da1b      	bge.n	8010208 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	33b0      	adds	r3, #176	@ 0xb0
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4413      	add	r3, r2
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80101e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80101e8:	683a      	ldr	r2, [r7, #0]
 80101ea:	88d2      	ldrh	r2, [r2, #6]
 80101ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	88db      	ldrh	r3, [r3, #6]
 80101f2:	2b07      	cmp	r3, #7
 80101f4:	bf28      	it	cs
 80101f6:	2307      	movcs	r3, #7
 80101f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	89fa      	ldrh	r2, [r7, #14]
 80101fe:	4619      	mov	r1, r3
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f001 fd93 	bl	8011d2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010206:	e090      	b.n	801032a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	785a      	ldrb	r2, [r3, #1]
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	88db      	ldrh	r3, [r3, #6]
 8010216:	2b3f      	cmp	r3, #63	@ 0x3f
 8010218:	d803      	bhi.n	8010222 <USBD_CDC_Setup+0xa6>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	88db      	ldrh	r3, [r3, #6]
 801021e:	b2da      	uxtb	r2, r3
 8010220:	e000      	b.n	8010224 <USBD_CDC_Setup+0xa8>
 8010222:	2240      	movs	r2, #64	@ 0x40
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801022a:	6939      	ldr	r1, [r7, #16]
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010232:	461a      	mov	r2, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f001 fda5 	bl	8011d84 <USBD_CtlPrepareRx>
      break;
 801023a:	e076      	b.n	801032a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	33b0      	adds	r3, #176	@ 0xb0
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	4413      	add	r3, r2
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	683a      	ldr	r2, [r7, #0]
 8010250:	7850      	ldrb	r0, [r2, #1]
 8010252:	2200      	movs	r2, #0
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	4798      	blx	r3
      break;
 8010258:	e067      	b.n	801032a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	785b      	ldrb	r3, [r3, #1]
 801025e:	2b0b      	cmp	r3, #11
 8010260:	d851      	bhi.n	8010306 <USBD_CDC_Setup+0x18a>
 8010262:	a201      	add	r2, pc, #4	@ (adr r2, 8010268 <USBD_CDC_Setup+0xec>)
 8010264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010268:	08010299 	.word	0x08010299
 801026c:	08010315 	.word	0x08010315
 8010270:	08010307 	.word	0x08010307
 8010274:	08010307 	.word	0x08010307
 8010278:	08010307 	.word	0x08010307
 801027c:	08010307 	.word	0x08010307
 8010280:	08010307 	.word	0x08010307
 8010284:	08010307 	.word	0x08010307
 8010288:	08010307 	.word	0x08010307
 801028c:	08010307 	.word	0x08010307
 8010290:	080102c3 	.word	0x080102c3
 8010294:	080102ed 	.word	0x080102ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	2b03      	cmp	r3, #3
 80102a2:	d107      	bne.n	80102b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80102a4:	f107 030a 	add.w	r3, r7, #10
 80102a8:	2202      	movs	r2, #2
 80102aa:	4619      	mov	r1, r3
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f001 fd3d 	bl	8011d2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80102b2:	e032      	b.n	801031a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80102b4:	6839      	ldr	r1, [r7, #0]
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f001 fcbb 	bl	8011c32 <USBD_CtlError>
            ret = USBD_FAIL;
 80102bc:	2303      	movs	r3, #3
 80102be:	75fb      	strb	r3, [r7, #23]
          break;
 80102c0:	e02b      	b.n	801031a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d107      	bne.n	80102de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80102ce:	f107 030d 	add.w	r3, r7, #13
 80102d2:	2201      	movs	r2, #1
 80102d4:	4619      	mov	r1, r3
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f001 fd28 	bl	8011d2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80102dc:	e01d      	b.n	801031a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80102de:	6839      	ldr	r1, [r7, #0]
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f001 fca6 	bl	8011c32 <USBD_CtlError>
            ret = USBD_FAIL;
 80102e6:	2303      	movs	r3, #3
 80102e8:	75fb      	strb	r3, [r7, #23]
          break;
 80102ea:	e016      	b.n	801031a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	2b03      	cmp	r3, #3
 80102f6:	d00f      	beq.n	8010318 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f001 fc99 	bl	8011c32 <USBD_CtlError>
            ret = USBD_FAIL;
 8010300:	2303      	movs	r3, #3
 8010302:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010304:	e008      	b.n	8010318 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f001 fc92 	bl	8011c32 <USBD_CtlError>
          ret = USBD_FAIL;
 801030e:	2303      	movs	r3, #3
 8010310:	75fb      	strb	r3, [r7, #23]
          break;
 8010312:	e002      	b.n	801031a <USBD_CDC_Setup+0x19e>
          break;
 8010314:	bf00      	nop
 8010316:	e008      	b.n	801032a <USBD_CDC_Setup+0x1ae>
          break;
 8010318:	bf00      	nop
      }
      break;
 801031a:	e006      	b.n	801032a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f001 fc87 	bl	8011c32 <USBD_CtlError>
      ret = USBD_FAIL;
 8010324:	2303      	movs	r3, #3
 8010326:	75fb      	strb	r3, [r7, #23]
      break;
 8010328:	bf00      	nop
  }

  return (uint8_t)ret;
 801032a:	7dfb      	ldrb	r3, [r7, #23]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3718      	adds	r7, #24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	460b      	mov	r3, r1
 801033e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010346:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	32b0      	adds	r2, #176	@ 0xb0
 8010352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d101      	bne.n	801035e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801035a:	2303      	movs	r3, #3
 801035c:	e065      	b.n	801042a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	32b0      	adds	r2, #176	@ 0xb0
 8010368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801036c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801036e:	78fb      	ldrb	r3, [r7, #3]
 8010370:	f003 020f 	and.w	r2, r3, #15
 8010374:	6879      	ldr	r1, [r7, #4]
 8010376:	4613      	mov	r3, r2
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	4413      	add	r3, r2
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	440b      	add	r3, r1
 8010380:	3318      	adds	r3, #24
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d02f      	beq.n	80103e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010388:	78fb      	ldrb	r3, [r7, #3]
 801038a:	f003 020f 	and.w	r2, r3, #15
 801038e:	6879      	ldr	r1, [r7, #4]
 8010390:	4613      	mov	r3, r2
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	4413      	add	r3, r2
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	440b      	add	r3, r1
 801039a:	3318      	adds	r3, #24
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	78fb      	ldrb	r3, [r7, #3]
 80103a0:	f003 010f 	and.w	r1, r3, #15
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	460b      	mov	r3, r1
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	440b      	add	r3, r1
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	4403      	add	r3, r0
 80103b0:	331c      	adds	r3, #28
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80103b8:	fb01 f303 	mul.w	r3, r1, r3
 80103bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d112      	bne.n	80103e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80103c2:	78fb      	ldrb	r3, [r7, #3]
 80103c4:	f003 020f 	and.w	r2, r3, #15
 80103c8:	6879      	ldr	r1, [r7, #4]
 80103ca:	4613      	mov	r3, r2
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	4413      	add	r3, r2
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	440b      	add	r3, r1
 80103d4:	3318      	adds	r3, #24
 80103d6:	2200      	movs	r2, #0
 80103d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80103da:	78f9      	ldrb	r1, [r7, #3]
 80103dc:	2300      	movs	r3, #0
 80103de:	2200      	movs	r2, #0
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f002 fa06 	bl	80127f2 <USBD_LL_Transmit>
 80103e6:	e01f      	b.n	8010428 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	2200      	movs	r2, #0
 80103ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	33b0      	adds	r3, #176	@ 0xb0
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	4413      	add	r3, r2
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d010      	beq.n	8010428 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	33b0      	adds	r3, #176	@ 0xb0
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	4413      	add	r3, r2
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	68ba      	ldr	r2, [r7, #8]
 801041a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010424:	78fa      	ldrb	r2, [r7, #3]
 8010426:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b084      	sub	sp, #16
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	460b      	mov	r3, r1
 801043c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	32b0      	adds	r2, #176	@ 0xb0
 8010448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801044c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	32b0      	adds	r2, #176	@ 0xb0
 8010458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d101      	bne.n	8010464 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010460:	2303      	movs	r3, #3
 8010462:	e01a      	b.n	801049a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010464:	78fb      	ldrb	r3, [r7, #3]
 8010466:	4619      	mov	r1, r3
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f002 fa04 	bl	8012876 <USBD_LL_GetRxDataSize>
 801046e:	4602      	mov	r2, r0
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	33b0      	adds	r3, #176	@ 0xb0
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	68fa      	ldr	r2, [r7, #12]
 801048a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010494:	4611      	mov	r1, r2
 8010496:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b084      	sub	sp, #16
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	32b0      	adds	r2, #176	@ 0xb0
 80104b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80104c0:	2303      	movs	r3, #3
 80104c2:	e024      	b.n	801050e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	33b0      	adds	r3, #176	@ 0xb0
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	4413      	add	r3, r2
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d019      	beq.n	801050c <USBD_CDC_EP0_RxReady+0x6a>
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80104de:	2bff      	cmp	r3, #255	@ 0xff
 80104e0:	d014      	beq.n	801050c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80104e8:	687a      	ldr	r2, [r7, #4]
 80104ea:	33b0      	adds	r3, #176	@ 0xb0
 80104ec:	009b      	lsls	r3, r3, #2
 80104ee:	4413      	add	r3, r2
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80104fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010502:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	22ff      	movs	r2, #255	@ 0xff
 8010508:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
	...

08010518 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010520:	2182      	movs	r1, #130	@ 0x82
 8010522:	4818      	ldr	r0, [pc, #96]	@ (8010584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010524:	f000 fd4f 	bl	8010fc6 <USBD_GetEpDesc>
 8010528:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801052a:	2101      	movs	r1, #1
 801052c:	4815      	ldr	r0, [pc, #84]	@ (8010584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801052e:	f000 fd4a 	bl	8010fc6 <USBD_GetEpDesc>
 8010532:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010534:	2181      	movs	r1, #129	@ 0x81
 8010536:	4813      	ldr	r0, [pc, #76]	@ (8010584 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010538:	f000 fd45 	bl	8010fc6 <USBD_GetEpDesc>
 801053c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d002      	beq.n	801054a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	2210      	movs	r2, #16
 8010548:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d006      	beq.n	801055e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	2200      	movs	r2, #0
 8010554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010558:	711a      	strb	r2, [r3, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d006      	beq.n	8010572 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2200      	movs	r2, #0
 8010568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801056c:	711a      	strb	r2, [r3, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2243      	movs	r2, #67	@ 0x43
 8010576:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010578:	4b02      	ldr	r3, [pc, #8]	@ (8010584 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801057a:	4618      	mov	r0, r3
 801057c:	3718      	adds	r7, #24
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	20000060 	.word	0x20000060

08010588 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010590:	2182      	movs	r1, #130	@ 0x82
 8010592:	4818      	ldr	r0, [pc, #96]	@ (80105f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010594:	f000 fd17 	bl	8010fc6 <USBD_GetEpDesc>
 8010598:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801059a:	2101      	movs	r1, #1
 801059c:	4815      	ldr	r0, [pc, #84]	@ (80105f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801059e:	f000 fd12 	bl	8010fc6 <USBD_GetEpDesc>
 80105a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80105a4:	2181      	movs	r1, #129	@ 0x81
 80105a6:	4813      	ldr	r0, [pc, #76]	@ (80105f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80105a8:	f000 fd0d 	bl	8010fc6 <USBD_GetEpDesc>
 80105ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d002      	beq.n	80105ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	2210      	movs	r2, #16
 80105b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d006      	beq.n	80105ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	2200      	movs	r2, #0
 80105c4:	711a      	strb	r2, [r3, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f042 0202 	orr.w	r2, r2, #2
 80105cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d006      	beq.n	80105e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2200      	movs	r2, #0
 80105d8:	711a      	strb	r2, [r3, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	f042 0202 	orr.w	r2, r2, #2
 80105e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2243      	movs	r2, #67	@ 0x43
 80105e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80105e8:	4b02      	ldr	r3, [pc, #8]	@ (80105f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3718      	adds	r7, #24
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	20000060 	.word	0x20000060

080105f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b086      	sub	sp, #24
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010600:	2182      	movs	r1, #130	@ 0x82
 8010602:	4818      	ldr	r0, [pc, #96]	@ (8010664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010604:	f000 fcdf 	bl	8010fc6 <USBD_GetEpDesc>
 8010608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801060a:	2101      	movs	r1, #1
 801060c:	4815      	ldr	r0, [pc, #84]	@ (8010664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801060e:	f000 fcda 	bl	8010fc6 <USBD_GetEpDesc>
 8010612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010614:	2181      	movs	r1, #129	@ 0x81
 8010616:	4813      	ldr	r0, [pc, #76]	@ (8010664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010618:	f000 fcd5 	bl	8010fc6 <USBD_GetEpDesc>
 801061c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	2210      	movs	r2, #16
 8010628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d006      	beq.n	801063e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	2200      	movs	r2, #0
 8010634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010638:	711a      	strb	r2, [r3, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d006      	beq.n	8010652 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2200      	movs	r2, #0
 8010648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801064c:	711a      	strb	r2, [r3, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2243      	movs	r2, #67	@ 0x43
 8010656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010658:	4b02      	ldr	r3, [pc, #8]	@ (8010664 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801065a:	4618      	mov	r0, r3
 801065c:	3718      	adds	r7, #24
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	20000060 	.word	0x20000060

08010668 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	220a      	movs	r2, #10
 8010674:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010676:	4b03      	ldr	r3, [pc, #12]	@ (8010684 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr
 8010684:	2000001c 	.word	0x2000001c

08010688 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d101      	bne.n	801069c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010698:	2303      	movs	r3, #3
 801069a:	e009      	b.n	80106b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	33b0      	adds	r3, #176	@ 0xb0
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4413      	add	r3, r2
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80106bc:	b480      	push	{r7}
 80106be:	b087      	sub	sp, #28
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	32b0      	adds	r2, #176	@ 0xb0
 80106d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d101      	bne.n	80106e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80106de:	2303      	movs	r3, #3
 80106e0:	e008      	b.n	80106f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	68ba      	ldr	r2, [r7, #8]
 80106e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	371c      	adds	r7, #28
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	32b0      	adds	r2, #176	@ 0xb0
 8010714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010718:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d101      	bne.n	8010724 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010720:	2303      	movs	r3, #3
 8010722:	e004      	b.n	801072e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	683a      	ldr	r2, [r7, #0]
 8010728:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	3714      	adds	r7, #20
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr
	...

0801073c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	32b0      	adds	r2, #176	@ 0xb0
 801074e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010752:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010754:	2301      	movs	r3, #1
 8010756:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801075e:	2303      	movs	r3, #3
 8010760:	e025      	b.n	80107ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010768:	2b00      	cmp	r3, #0
 801076a:	d11f      	bne.n	80107ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	2201      	movs	r2, #1
 8010770:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010774:	4b10      	ldr	r3, [pc, #64]	@ (80107b8 <USBD_CDC_TransmitPacket+0x7c>)
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	f003 020f 	and.w	r2, r3, #15
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	4613      	mov	r3, r2
 8010786:	009b      	lsls	r3, r3, #2
 8010788:	4413      	add	r3, r2
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	4403      	add	r3, r0
 801078e:	3318      	adds	r3, #24
 8010790:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010792:	4b09      	ldr	r3, [pc, #36]	@ (80107b8 <USBD_CDC_TransmitPacket+0x7c>)
 8010794:	7819      	ldrb	r1, [r3, #0]
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f002 f825 	bl	80127f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80107ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3710      	adds	r7, #16
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	200000a3 	.word	0x200000a3

080107bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	32b0      	adds	r2, #176	@ 0xb0
 80107ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	32b0      	adds	r2, #176	@ 0xb0
 80107de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d101      	bne.n	80107ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80107e6:	2303      	movs	r3, #3
 80107e8:	e018      	b.n	801081c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	7c1b      	ldrb	r3, [r3, #16]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d10a      	bne.n	8010808 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80107f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010824 <USBD_CDC_ReceivePacket+0x68>)
 80107f4:	7819      	ldrb	r1, [r3, #0]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80107fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f002 f817 	bl	8012834 <USBD_LL_PrepareReceive>
 8010806:	e008      	b.n	801081a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010808:	4b06      	ldr	r3, [pc, #24]	@ (8010824 <USBD_CDC_ReceivePacket+0x68>)
 801080a:	7819      	ldrb	r1, [r3, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010812:	2340      	movs	r3, #64	@ 0x40
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f002 f80d 	bl	8012834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801081a:	2300      	movs	r3, #0
}
 801081c:	4618      	mov	r0, r3
 801081e:	3710      	adds	r7, #16
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	200000a4 	.word	0x200000a4

08010828 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	4613      	mov	r3, r2
 8010834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801083c:	2303      	movs	r3, #3
 801083e:	e01f      	b.n	8010880 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2200      	movs	r2, #0
 8010844:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2200      	movs	r2, #0
 801084c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2200      	movs	r2, #0
 8010854:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d003      	beq.n	8010866 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	68ba      	ldr	r2, [r7, #8]
 8010862:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2201      	movs	r2, #1
 801086a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	79fa      	ldrb	r2, [r7, #7]
 8010872:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f001 fe87 	bl	8012588 <USBD_LL_Init>
 801087a:	4603      	mov	r3, r0
 801087c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801087e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010880:	4618      	mov	r0, r3
 8010882:	3718      	adds	r7, #24
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010892:	2300      	movs	r3, #0
 8010894:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d101      	bne.n	80108a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801089c:	2303      	movs	r3, #3
 801089e:	e025      	b.n	80108ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	32ae      	adds	r2, #174	@ 0xae
 80108b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00f      	beq.n	80108dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	32ae      	adds	r2, #174	@ 0xae
 80108c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108cc:	f107 020e 	add.w	r2, r7, #14
 80108d0:	4610      	mov	r0, r2
 80108d2:	4798      	blx	r3
 80108d4:	4602      	mov	r2, r0
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f001 fe8f 	bl	8012620 <USBD_LL_Start>
 8010902:	4603      	mov	r3, r0
}
 8010904:	4618      	mov	r0, r3
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010914:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010916:	4618      	mov	r0, r3
 8010918:	370c      	adds	r7, #12
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b084      	sub	sp, #16
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	460b      	mov	r3, r1
 801092c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801092e:	2300      	movs	r3, #0
 8010930:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010938:	2b00      	cmp	r3, #0
 801093a:	d009      	beq.n	8010950 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	78fa      	ldrb	r2, [r7, #3]
 8010946:	4611      	mov	r1, r2
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	4798      	blx	r3
 801094c:	4603      	mov	r3, r0
 801094e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010950:	7bfb      	ldrb	r3, [r7, #15]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b084      	sub	sp, #16
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	460b      	mov	r3, r1
 8010964:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010966:	2300      	movs	r3, #0
 8010968:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	78fa      	ldrb	r2, [r7, #3]
 8010974:	4611      	mov	r1, r2
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	4798      	blx	r3
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d001      	beq.n	8010984 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010980:	2303      	movs	r3, #3
 8010982:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010984:	7bfb      	ldrb	r3, [r7, #15]
}
 8010986:	4618      	mov	r0, r3
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b084      	sub	sp, #16
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f001 f90c 	bl	8011bbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2201      	movs	r2, #1
 80109aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80109b4:	461a      	mov	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80109c2:	f003 031f 	and.w	r3, r3, #31
 80109c6:	2b02      	cmp	r3, #2
 80109c8:	d01a      	beq.n	8010a00 <USBD_LL_SetupStage+0x72>
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	d822      	bhi.n	8010a14 <USBD_LL_SetupStage+0x86>
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <USBD_LL_SetupStage+0x4a>
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d00a      	beq.n	80109ec <USBD_LL_SetupStage+0x5e>
 80109d6:	e01d      	b.n	8010a14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80109de:	4619      	mov	r1, r3
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fb63 	bl	80110ac <USBD_StdDevReq>
 80109e6:	4603      	mov	r3, r0
 80109e8:	73fb      	strb	r3, [r7, #15]
      break;
 80109ea:	e020      	b.n	8010a2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fbcb 	bl	8011190 <USBD_StdItfReq>
 80109fa:	4603      	mov	r3, r0
 80109fc:	73fb      	strb	r3, [r7, #15]
      break;
 80109fe:	e016      	b.n	8010a2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010a06:	4619      	mov	r1, r3
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 fc2d 	bl	8011268 <USBD_StdEPReq>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	73fb      	strb	r3, [r7, #15]
      break;
 8010a12:	e00c      	b.n	8010a2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010a1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	4619      	mov	r1, r3
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f001 fe5c 	bl	80126e0 <USBD_LL_StallEP>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8010a2c:	bf00      	nop
  }

  return ret;
 8010a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b086      	sub	sp, #24
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	460b      	mov	r3, r1
 8010a42:	607a      	str	r2, [r7, #4]
 8010a44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010a46:	2300      	movs	r3, #0
 8010a48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010a4a:	7afb      	ldrb	r3, [r7, #11]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d16e      	bne.n	8010b2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010a56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010a5e:	2b03      	cmp	r3, #3
 8010a60:	f040 8098 	bne.w	8010b94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	689a      	ldr	r2, [r3, #8]
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d913      	bls.n	8010a98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	689a      	ldr	r2, [r3, #8]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	1ad2      	subs	r2, r2, r3
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	68da      	ldr	r2, [r3, #12]
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	689b      	ldr	r3, [r3, #8]
 8010a86:	4293      	cmp	r3, r2
 8010a88:	bf28      	it	cs
 8010a8a:	4613      	movcs	r3, r2
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	6879      	ldr	r1, [r7, #4]
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f001 f994 	bl	8011dbe <USBD_CtlContinueRx>
 8010a96:	e07d      	b.n	8010b94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010a9e:	f003 031f 	and.w	r3, r3, #31
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d014      	beq.n	8010ad0 <USBD_LL_DataOutStage+0x98>
 8010aa6:	2b02      	cmp	r3, #2
 8010aa8:	d81d      	bhi.n	8010ae6 <USBD_LL_DataOutStage+0xae>
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <USBD_LL_DataOutStage+0x7c>
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d003      	beq.n	8010aba <USBD_LL_DataOutStage+0x82>
 8010ab2:	e018      	b.n	8010ae6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	75bb      	strb	r3, [r7, #22]
            break;
 8010ab8:	e018      	b.n	8010aec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	68f8      	ldr	r0, [r7, #12]
 8010ac6:	f000 fa64 	bl	8010f92 <USBD_CoreFindIF>
 8010aca:	4603      	mov	r3, r0
 8010acc:	75bb      	strb	r3, [r7, #22]
            break;
 8010ace:	e00d      	b.n	8010aec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	4619      	mov	r1, r3
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f000 fa66 	bl	8010fac <USBD_CoreFindEP>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	75bb      	strb	r3, [r7, #22]
            break;
 8010ae4:	e002      	b.n	8010aec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	75bb      	strb	r3, [r7, #22]
            break;
 8010aea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010aec:	7dbb      	ldrb	r3, [r7, #22]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d119      	bne.n	8010b26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	d113      	bne.n	8010b26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010afe:	7dba      	ldrb	r2, [r7, #22]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	32ae      	adds	r2, #174	@ 0xae
 8010b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00b      	beq.n	8010b26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010b0e:	7dba      	ldrb	r2, [r7, #22]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010b16:	7dba      	ldrb	r2, [r7, #22]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	32ae      	adds	r2, #174	@ 0xae
 8010b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f001 f95a 	bl	8011de0 <USBD_CtlSendStatus>
 8010b2c:	e032      	b.n	8010b94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010b2e:	7afb      	ldrb	r3, [r7, #11]
 8010b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	4619      	mov	r1, r3
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f000 fa37 	bl	8010fac <USBD_CoreFindEP>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010b42:	7dbb      	ldrb	r3, [r7, #22]
 8010b44:	2bff      	cmp	r3, #255	@ 0xff
 8010b46:	d025      	beq.n	8010b94 <USBD_LL_DataOutStage+0x15c>
 8010b48:	7dbb      	ldrb	r3, [r7, #22]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d122      	bne.n	8010b94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	2b03      	cmp	r3, #3
 8010b58:	d117      	bne.n	8010b8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010b5a:	7dba      	ldrb	r2, [r7, #22]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	32ae      	adds	r2, #174	@ 0xae
 8010b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b64:	699b      	ldr	r3, [r3, #24]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00f      	beq.n	8010b8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010b6a:	7dba      	ldrb	r2, [r7, #22]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010b72:	7dba      	ldrb	r2, [r7, #22]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	32ae      	adds	r2, #174	@ 0xae
 8010b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b7c:	699b      	ldr	r3, [r3, #24]
 8010b7e:	7afa      	ldrb	r2, [r7, #11]
 8010b80:	4611      	mov	r1, r2
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	4798      	blx	r3
 8010b86:	4603      	mov	r3, r0
 8010b88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010b8a:	7dfb      	ldrb	r3, [r7, #23]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010b90:	7dfb      	ldrb	r3, [r7, #23]
 8010b92:	e000      	b.n	8010b96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b086      	sub	sp, #24
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	60f8      	str	r0, [r7, #12]
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	607a      	str	r2, [r7, #4]
 8010baa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010bac:	7afb      	ldrb	r3, [r7, #11]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d16f      	bne.n	8010c92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	3314      	adds	r3, #20
 8010bb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010bbe:	2b02      	cmp	r3, #2
 8010bc0:	d15a      	bne.n	8010c78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	689a      	ldr	r2, [r3, #8]
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d914      	bls.n	8010bf8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	689a      	ldr	r2, [r3, #8]
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	1ad2      	subs	r2, r2, r3
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010bdc:	693b      	ldr	r3, [r7, #16]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	461a      	mov	r2, r3
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	f001 f8bc 	bl	8011d62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bea:	2300      	movs	r3, #0
 8010bec:	2200      	movs	r2, #0
 8010bee:	2100      	movs	r1, #0
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f001 fe1f 	bl	8012834 <USBD_LL_PrepareReceive>
 8010bf6:	e03f      	b.n	8010c78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	68da      	ldr	r2, [r3, #12]
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d11c      	bne.n	8010c3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	685a      	ldr	r2, [r3, #4]
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d316      	bcc.n	8010c3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	685a      	ldr	r2, [r3, #4]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d20f      	bcs.n	8010c3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010c1e:	2200      	movs	r2, #0
 8010c20:	2100      	movs	r1, #0
 8010c22:	68f8      	ldr	r0, [r7, #12]
 8010c24:	f001 f89d 	bl	8011d62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c30:	2300      	movs	r3, #0
 8010c32:	2200      	movs	r2, #0
 8010c34:	2100      	movs	r1, #0
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f001 fdfc 	bl	8012834 <USBD_LL_PrepareReceive>
 8010c3c:	e01c      	b.n	8010c78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	2b03      	cmp	r3, #3
 8010c48:	d10f      	bne.n	8010c6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c6a:	2180      	movs	r1, #128	@ 0x80
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f001 fd37 	bl	80126e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f001 f8c7 	bl	8011e06 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d03a      	beq.n	8010cf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010c82:	68f8      	ldr	r0, [r7, #12]
 8010c84:	f7ff fe42 	bl	801090c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010c90:	e032      	b.n	8010cf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010c92:	7afb      	ldrb	r3, [r7, #11]
 8010c94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 f985 	bl	8010fac <USBD_CoreFindEP>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ca6:	7dfb      	ldrb	r3, [r7, #23]
 8010ca8:	2bff      	cmp	r3, #255	@ 0xff
 8010caa:	d025      	beq.n	8010cf8 <USBD_LL_DataInStage+0x15a>
 8010cac:	7dfb      	ldrb	r3, [r7, #23]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d122      	bne.n	8010cf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	2b03      	cmp	r3, #3
 8010cbc:	d11c      	bne.n	8010cf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010cbe:	7dfa      	ldrb	r2, [r7, #23]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	32ae      	adds	r2, #174	@ 0xae
 8010cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d014      	beq.n	8010cf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010cce:	7dfa      	ldrb	r2, [r7, #23]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010cd6:	7dfa      	ldrb	r2, [r7, #23]
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	32ae      	adds	r2, #174	@ 0xae
 8010cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce0:	695b      	ldr	r3, [r3, #20]
 8010ce2:	7afa      	ldrb	r2, [r7, #11]
 8010ce4:	4611      	mov	r1, r2
 8010ce6:	68f8      	ldr	r0, [r7, #12]
 8010ce8:	4798      	blx	r3
 8010cea:	4603      	mov	r3, r0
 8010cec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010cee:	7dbb      	ldrb	r3, [r7, #22]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010cf4:	7dbb      	ldrb	r3, [r7, #22]
 8010cf6:	e000      	b.n	8010cfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3718      	adds	r7, #24
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b084      	sub	sp, #16
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2201      	movs	r2, #1
 8010d12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d014      	beq.n	8010d68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d00e      	beq.n	8010d68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	6852      	ldr	r2, [r2, #4]
 8010d56:	b2d2      	uxtb	r2, r2
 8010d58:	4611      	mov	r1, r2
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	4798      	blx	r3
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d001      	beq.n	8010d68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010d64:	2303      	movs	r3, #3
 8010d66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010d68:	2340      	movs	r3, #64	@ 0x40
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f001 fc71 	bl	8012656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2201      	movs	r2, #1
 8010d78:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2240      	movs	r2, #64	@ 0x40
 8010d80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010d84:	2340      	movs	r3, #64	@ 0x40
 8010d86:	2200      	movs	r2, #0
 8010d88:	2180      	movs	r1, #128	@ 0x80
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f001 fc63 	bl	8012656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2201      	movs	r2, #1
 8010d94:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2240      	movs	r2, #64	@ 0x40
 8010d9a:	621a      	str	r2, [r3, #32]

  return ret;
 8010d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b083      	sub	sp, #12
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	460b      	mov	r3, r1
 8010db0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	78fa      	ldrb	r2, [r7, #3]
 8010db6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	370c      	adds	r7, #12
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr

08010dc6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010dc6:	b480      	push	{r7}
 8010dc8:	b083      	sub	sp, #12
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	d006      	beq.n	8010de8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2204      	movs	r2, #4
 8010dec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr

08010dfe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010dfe:	b480      	push	{r7}
 8010e00:	b083      	sub	sp, #12
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	2b04      	cmp	r3, #4
 8010e10:	d106      	bne.n	8010e20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr

08010e2e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010e2e:	b580      	push	{r7, lr}
 8010e30:	b082      	sub	sp, #8
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	2b03      	cmp	r3, #3
 8010e40:	d110      	bne.n	8010e64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00b      	beq.n	8010e64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e52:	69db      	ldr	r3, [r3, #28]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e5e:	69db      	ldr	r3, [r3, #28]
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010e64:	2300      	movs	r3, #0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b082      	sub	sp, #8
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
 8010e76:	460b      	mov	r3, r1
 8010e78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	32ae      	adds	r2, #174	@ 0xae
 8010e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d101      	bne.n	8010e90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010e8c:	2303      	movs	r3, #3
 8010e8e:	e01c      	b.n	8010eca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b03      	cmp	r3, #3
 8010e9a:	d115      	bne.n	8010ec8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	32ae      	adds	r2, #174	@ 0xae
 8010ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eaa:	6a1b      	ldr	r3, [r3, #32]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00b      	beq.n	8010ec8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	32ae      	adds	r2, #174	@ 0xae
 8010eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ebe:	6a1b      	ldr	r3, [r3, #32]
 8010ec0:	78fa      	ldrb	r2, [r7, #3]
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	460b      	mov	r3, r1
 8010edc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	32ae      	adds	r2, #174	@ 0xae
 8010ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d101      	bne.n	8010ef4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010ef0:	2303      	movs	r3, #3
 8010ef2:	e01c      	b.n	8010f2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d115      	bne.n	8010f2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	32ae      	adds	r2, #174	@ 0xae
 8010f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00b      	beq.n	8010f2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	32ae      	adds	r2, #174	@ 0xae
 8010f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f24:	78fa      	ldrb	r2, [r7, #3]
 8010f26:	4611      	mov	r1, r2
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f2c:	2300      	movs	r3, #0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3708      	adds	r7, #8
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f36:	b480      	push	{r7}
 8010f38:	b083      	sub	sp, #12
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f3e:	2300      	movs	r3, #0
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010f54:	2300      	movs	r3, #0
 8010f56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00e      	beq.n	8010f88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	6852      	ldr	r2, [r2, #4]
 8010f76:	b2d2      	uxtb	r2, r2
 8010f78:	4611      	mov	r1, r2
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	4798      	blx	r3
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010f84:	2303      	movs	r3, #3
 8010f86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010f92:	b480      	push	{r7}
 8010f94:	b083      	sub	sp, #12
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010f9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	370c      	adds	r7, #12
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b083      	sub	sp, #12
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010fb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	370c      	adds	r7, #12
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr

08010fc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b086      	sub	sp, #24
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	460b      	mov	r3, r1
 8010fd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	885b      	ldrh	r3, [r3, #2]
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	68fa      	ldr	r2, [r7, #12]
 8010fe6:	7812      	ldrb	r2, [r2, #0]
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d91f      	bls.n	801102c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010ff2:	e013      	b.n	801101c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010ff4:	f107 030a 	add.w	r3, r7, #10
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6978      	ldr	r0, [r7, #20]
 8010ffc:	f000 f81b 	bl	8011036 <USBD_GetNextDesc>
 8011000:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	785b      	ldrb	r3, [r3, #1]
 8011006:	2b05      	cmp	r3, #5
 8011008:	d108      	bne.n	801101c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	789b      	ldrb	r3, [r3, #2]
 8011012:	78fa      	ldrb	r2, [r7, #3]
 8011014:	429a      	cmp	r2, r3
 8011016:	d008      	beq.n	801102a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011018:	2300      	movs	r3, #0
 801101a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	885b      	ldrh	r3, [r3, #2]
 8011020:	b29a      	uxth	r2, r3
 8011022:	897b      	ldrh	r3, [r7, #10]
 8011024:	429a      	cmp	r2, r3
 8011026:	d8e5      	bhi.n	8010ff4 <USBD_GetEpDesc+0x2e>
 8011028:	e000      	b.n	801102c <USBD_GetEpDesc+0x66>
          break;
 801102a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801102c:	693b      	ldr	r3, [r7, #16]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}

08011036 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011036:	b480      	push	{r7}
 8011038:	b085      	sub	sp, #20
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
 801103e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	7812      	ldrb	r2, [r2, #0]
 801104c:	4413      	add	r3, r2
 801104e:	b29a      	uxth	r2, r3
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	461a      	mov	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4413      	add	r3, r2
 801105e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011060:	68fb      	ldr	r3, [r7, #12]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr

0801106e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801106e:	b480      	push	{r7}
 8011070:	b087      	sub	sp, #28
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	3301      	adds	r3, #1
 8011084:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801108c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011090:	021b      	lsls	r3, r3, #8
 8011092:	b21a      	sxth	r2, r3
 8011094:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011098:	4313      	orrs	r3, r2
 801109a:	b21b      	sxth	r3, r3
 801109c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801109e:	89fb      	ldrh	r3, [r7, #14]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	371c      	adds	r7, #28
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110b6:	2300      	movs	r3, #0
 80110b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80110c2:	2b40      	cmp	r3, #64	@ 0x40
 80110c4:	d005      	beq.n	80110d2 <USBD_StdDevReq+0x26>
 80110c6:	2b40      	cmp	r3, #64	@ 0x40
 80110c8:	d857      	bhi.n	801117a <USBD_StdDevReq+0xce>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00f      	beq.n	80110ee <USBD_StdDevReq+0x42>
 80110ce:	2b20      	cmp	r3, #32
 80110d0:	d153      	bne.n	801117a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	32ae      	adds	r2, #174	@ 0xae
 80110dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	6839      	ldr	r1, [r7, #0]
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	4798      	blx	r3
 80110e8:	4603      	mov	r3, r0
 80110ea:	73fb      	strb	r3, [r7, #15]
      break;
 80110ec:	e04a      	b.n	8011184 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	785b      	ldrb	r3, [r3, #1]
 80110f2:	2b09      	cmp	r3, #9
 80110f4:	d83b      	bhi.n	801116e <USBD_StdDevReq+0xc2>
 80110f6:	a201      	add	r2, pc, #4	@ (adr r2, 80110fc <USBD_StdDevReq+0x50>)
 80110f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110fc:	08011151 	.word	0x08011151
 8011100:	08011165 	.word	0x08011165
 8011104:	0801116f 	.word	0x0801116f
 8011108:	0801115b 	.word	0x0801115b
 801110c:	0801116f 	.word	0x0801116f
 8011110:	0801112f 	.word	0x0801112f
 8011114:	08011125 	.word	0x08011125
 8011118:	0801116f 	.word	0x0801116f
 801111c:	08011147 	.word	0x08011147
 8011120:	08011139 	.word	0x08011139
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011124:	6839      	ldr	r1, [r7, #0]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fa3c 	bl	80115a4 <USBD_GetDescriptor>
          break;
 801112c:	e024      	b.n	8011178 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801112e:	6839      	ldr	r1, [r7, #0]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f000 fba1 	bl	8011878 <USBD_SetAddress>
          break;
 8011136:	e01f      	b.n	8011178 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fbe0 	bl	8011900 <USBD_SetConfig>
 8011140:	4603      	mov	r3, r0
 8011142:	73fb      	strb	r3, [r7, #15]
          break;
 8011144:	e018      	b.n	8011178 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 fc83 	bl	8011a54 <USBD_GetConfig>
          break;
 801114e:	e013      	b.n	8011178 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011150:	6839      	ldr	r1, [r7, #0]
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 fcb4 	bl	8011ac0 <USBD_GetStatus>
          break;
 8011158:	e00e      	b.n	8011178 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 fce3 	bl	8011b28 <USBD_SetFeature>
          break;
 8011162:	e009      	b.n	8011178 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011164:	6839      	ldr	r1, [r7, #0]
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f000 fd07 	bl	8011b7a <USBD_ClrFeature>
          break;
 801116c:	e004      	b.n	8011178 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801116e:	6839      	ldr	r1, [r7, #0]
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 fd5e 	bl	8011c32 <USBD_CtlError>
          break;
 8011176:	bf00      	nop
      }
      break;
 8011178:	e004      	b.n	8011184 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fd58 	bl	8011c32 <USBD_CtlError>
      break;
 8011182:	bf00      	nop
  }

  return ret;
 8011184:	7bfb      	ldrb	r3, [r7, #15]
}
 8011186:	4618      	mov	r0, r3
 8011188:	3710      	adds	r7, #16
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop

08011190 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801119a:	2300      	movs	r3, #0
 801119c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80111a6:	2b40      	cmp	r3, #64	@ 0x40
 80111a8:	d005      	beq.n	80111b6 <USBD_StdItfReq+0x26>
 80111aa:	2b40      	cmp	r3, #64	@ 0x40
 80111ac:	d852      	bhi.n	8011254 <USBD_StdItfReq+0xc4>
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d001      	beq.n	80111b6 <USBD_StdItfReq+0x26>
 80111b2:	2b20      	cmp	r3, #32
 80111b4:	d14e      	bne.n	8011254 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	3b01      	subs	r3, #1
 80111c0:	2b02      	cmp	r3, #2
 80111c2:	d840      	bhi.n	8011246 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	889b      	ldrh	r3, [r3, #4]
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d836      	bhi.n	801123c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	889b      	ldrh	r3, [r3, #4]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	4619      	mov	r1, r3
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fedb 	bl	8010f92 <USBD_CoreFindIF>
 80111dc:	4603      	mov	r3, r0
 80111de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
 80111e2:	2bff      	cmp	r3, #255	@ 0xff
 80111e4:	d01d      	beq.n	8011222 <USBD_StdItfReq+0x92>
 80111e6:	7bbb      	ldrb	r3, [r7, #14]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d11a      	bne.n	8011222 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80111ec:	7bba      	ldrb	r2, [r7, #14]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	32ae      	adds	r2, #174	@ 0xae
 80111f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d00f      	beq.n	801121c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80111fc:	7bba      	ldrb	r2, [r7, #14]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011204:	7bba      	ldrb	r2, [r7, #14]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	32ae      	adds	r2, #174	@ 0xae
 801120a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	6839      	ldr	r1, [r7, #0]
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	4798      	blx	r3
 8011216:	4603      	mov	r3, r0
 8011218:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801121a:	e004      	b.n	8011226 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801121c:	2303      	movs	r3, #3
 801121e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011220:	e001      	b.n	8011226 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011222:	2303      	movs	r3, #3
 8011224:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	88db      	ldrh	r3, [r3, #6]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d110      	bne.n	8011250 <USBD_StdItfReq+0xc0>
 801122e:	7bfb      	ldrb	r3, [r7, #15]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d10d      	bne.n	8011250 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f000 fdd3 	bl	8011de0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801123a:	e009      	b.n	8011250 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801123c:	6839      	ldr	r1, [r7, #0]
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fcf7 	bl	8011c32 <USBD_CtlError>
          break;
 8011244:	e004      	b.n	8011250 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fcf2 	bl	8011c32 <USBD_CtlError>
          break;
 801124e:	e000      	b.n	8011252 <USBD_StdItfReq+0xc2>
          break;
 8011250:	bf00      	nop
      }
      break;
 8011252:	e004      	b.n	801125e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011254:	6839      	ldr	r1, [r7, #0]
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 fceb 	bl	8011c32 <USBD_CtlError>
      break;
 801125c:	bf00      	nop
  }

  return ret;
 801125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011260:	4618      	mov	r0, r3
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	889b      	ldrh	r3, [r3, #4]
 801127a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011284:	2b40      	cmp	r3, #64	@ 0x40
 8011286:	d007      	beq.n	8011298 <USBD_StdEPReq+0x30>
 8011288:	2b40      	cmp	r3, #64	@ 0x40
 801128a:	f200 817f 	bhi.w	801158c <USBD_StdEPReq+0x324>
 801128e:	2b00      	cmp	r3, #0
 8011290:	d02a      	beq.n	80112e8 <USBD_StdEPReq+0x80>
 8011292:	2b20      	cmp	r3, #32
 8011294:	f040 817a 	bne.w	801158c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011298:	7bbb      	ldrb	r3, [r7, #14]
 801129a:	4619      	mov	r1, r3
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff fe85 	bl	8010fac <USBD_CoreFindEP>
 80112a2:	4603      	mov	r3, r0
 80112a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112a6:	7b7b      	ldrb	r3, [r7, #13]
 80112a8:	2bff      	cmp	r3, #255	@ 0xff
 80112aa:	f000 8174 	beq.w	8011596 <USBD_StdEPReq+0x32e>
 80112ae:	7b7b      	ldrb	r3, [r7, #13]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f040 8170 	bne.w	8011596 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80112b6:	7b7a      	ldrb	r2, [r7, #13]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80112be:	7b7a      	ldrb	r2, [r7, #13]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	32ae      	adds	r2, #174	@ 0xae
 80112c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 8163 	beq.w	8011596 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80112d0:	7b7a      	ldrb	r2, [r7, #13]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	32ae      	adds	r2, #174	@ 0xae
 80112d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	6839      	ldr	r1, [r7, #0]
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	4798      	blx	r3
 80112e2:	4603      	mov	r3, r0
 80112e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80112e6:	e156      	b.n	8011596 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	785b      	ldrb	r3, [r3, #1]
 80112ec:	2b03      	cmp	r3, #3
 80112ee:	d008      	beq.n	8011302 <USBD_StdEPReq+0x9a>
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	f300 8145 	bgt.w	8011580 <USBD_StdEPReq+0x318>
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 809b 	beq.w	8011432 <USBD_StdEPReq+0x1ca>
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d03c      	beq.n	801137a <USBD_StdEPReq+0x112>
 8011300:	e13e      	b.n	8011580 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b02      	cmp	r3, #2
 801130c:	d002      	beq.n	8011314 <USBD_StdEPReq+0xac>
 801130e:	2b03      	cmp	r3, #3
 8011310:	d016      	beq.n	8011340 <USBD_StdEPReq+0xd8>
 8011312:	e02c      	b.n	801136e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011314:	7bbb      	ldrb	r3, [r7, #14]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00d      	beq.n	8011336 <USBD_StdEPReq+0xce>
 801131a:	7bbb      	ldrb	r3, [r7, #14]
 801131c:	2b80      	cmp	r3, #128	@ 0x80
 801131e:	d00a      	beq.n	8011336 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011320:	7bbb      	ldrb	r3, [r7, #14]
 8011322:	4619      	mov	r1, r3
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f001 f9db 	bl	80126e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801132a:	2180      	movs	r1, #128	@ 0x80
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f001 f9d7 	bl	80126e0 <USBD_LL_StallEP>
 8011332:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011334:	e020      	b.n	8011378 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011336:	6839      	ldr	r1, [r7, #0]
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 fc7a 	bl	8011c32 <USBD_CtlError>
              break;
 801133e:	e01b      	b.n	8011378 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	885b      	ldrh	r3, [r3, #2]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d10e      	bne.n	8011366 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011348:	7bbb      	ldrb	r3, [r7, #14]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00b      	beq.n	8011366 <USBD_StdEPReq+0xfe>
 801134e:	7bbb      	ldrb	r3, [r7, #14]
 8011350:	2b80      	cmp	r3, #128	@ 0x80
 8011352:	d008      	beq.n	8011366 <USBD_StdEPReq+0xfe>
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	88db      	ldrh	r3, [r3, #6]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d104      	bne.n	8011366 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801135c:	7bbb      	ldrb	r3, [r7, #14]
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f001 f9bd 	bl	80126e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 fd3a 	bl	8011de0 <USBD_CtlSendStatus>

              break;
 801136c:	e004      	b.n	8011378 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 fc5e 	bl	8011c32 <USBD_CtlError>
              break;
 8011376:	bf00      	nop
          }
          break;
 8011378:	e107      	b.n	801158a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011380:	b2db      	uxtb	r3, r3
 8011382:	2b02      	cmp	r3, #2
 8011384:	d002      	beq.n	801138c <USBD_StdEPReq+0x124>
 8011386:	2b03      	cmp	r3, #3
 8011388:	d016      	beq.n	80113b8 <USBD_StdEPReq+0x150>
 801138a:	e04b      	b.n	8011424 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801138c:	7bbb      	ldrb	r3, [r7, #14]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00d      	beq.n	80113ae <USBD_StdEPReq+0x146>
 8011392:	7bbb      	ldrb	r3, [r7, #14]
 8011394:	2b80      	cmp	r3, #128	@ 0x80
 8011396:	d00a      	beq.n	80113ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011398:	7bbb      	ldrb	r3, [r7, #14]
 801139a:	4619      	mov	r1, r3
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f001 f99f 	bl	80126e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80113a2:	2180      	movs	r1, #128	@ 0x80
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f001 f99b 	bl	80126e0 <USBD_LL_StallEP>
 80113aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80113ac:	e040      	b.n	8011430 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80113ae:	6839      	ldr	r1, [r7, #0]
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 fc3e 	bl	8011c32 <USBD_CtlError>
              break;
 80113b6:	e03b      	b.n	8011430 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	885b      	ldrh	r3, [r3, #2]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d136      	bne.n	801142e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80113c0:	7bbb      	ldrb	r3, [r7, #14]
 80113c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d004      	beq.n	80113d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80113ca:	7bbb      	ldrb	r3, [r7, #14]
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f001 f9a5 	bl	801271e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 fd03 	bl	8011de0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80113da:	7bbb      	ldrb	r3, [r7, #14]
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7ff fde4 	bl	8010fac <USBD_CoreFindEP>
 80113e4:	4603      	mov	r3, r0
 80113e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80113e8:	7b7b      	ldrb	r3, [r7, #13]
 80113ea:	2bff      	cmp	r3, #255	@ 0xff
 80113ec:	d01f      	beq.n	801142e <USBD_StdEPReq+0x1c6>
 80113ee:	7b7b      	ldrb	r3, [r7, #13]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d11c      	bne.n	801142e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80113f4:	7b7a      	ldrb	r2, [r7, #13]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80113fc:	7b7a      	ldrb	r2, [r7, #13]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	32ae      	adds	r2, #174	@ 0xae
 8011402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d010      	beq.n	801142e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801140c:	7b7a      	ldrb	r2, [r7, #13]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	32ae      	adds	r2, #174	@ 0xae
 8011412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	6839      	ldr	r1, [r7, #0]
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	4798      	blx	r3
 801141e:	4603      	mov	r3, r0
 8011420:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011422:	e004      	b.n	801142e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011424:	6839      	ldr	r1, [r7, #0]
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 fc03 	bl	8011c32 <USBD_CtlError>
              break;
 801142c:	e000      	b.n	8011430 <USBD_StdEPReq+0x1c8>
              break;
 801142e:	bf00      	nop
          }
          break;
 8011430:	e0ab      	b.n	801158a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b02      	cmp	r3, #2
 801143c:	d002      	beq.n	8011444 <USBD_StdEPReq+0x1dc>
 801143e:	2b03      	cmp	r3, #3
 8011440:	d032      	beq.n	80114a8 <USBD_StdEPReq+0x240>
 8011442:	e097      	b.n	8011574 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011444:	7bbb      	ldrb	r3, [r7, #14]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d007      	beq.n	801145a <USBD_StdEPReq+0x1f2>
 801144a:	7bbb      	ldrb	r3, [r7, #14]
 801144c:	2b80      	cmp	r3, #128	@ 0x80
 801144e:	d004      	beq.n	801145a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011450:	6839      	ldr	r1, [r7, #0]
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f000 fbed 	bl	8011c32 <USBD_CtlError>
                break;
 8011458:	e091      	b.n	801157e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801145a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801145e:	2b00      	cmp	r3, #0
 8011460:	da0b      	bge.n	801147a <USBD_StdEPReq+0x212>
 8011462:	7bbb      	ldrb	r3, [r7, #14]
 8011464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011468:	4613      	mov	r3, r2
 801146a:	009b      	lsls	r3, r3, #2
 801146c:	4413      	add	r3, r2
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	3310      	adds	r3, #16
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	4413      	add	r3, r2
 8011476:	3304      	adds	r3, #4
 8011478:	e00b      	b.n	8011492 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801147a:	7bbb      	ldrb	r3, [r7, #14]
 801147c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011480:	4613      	mov	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	4413      	add	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	4413      	add	r3, r2
 8011490:	3304      	adds	r3, #4
 8011492:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	2200      	movs	r2, #0
 8011498:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	2202      	movs	r2, #2
 801149e:	4619      	mov	r1, r3
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f000 fc43 	bl	8011d2c <USBD_CtlSendData>
              break;
 80114a6:	e06a      	b.n	801157e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80114a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	da11      	bge.n	80114d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80114b0:	7bbb      	ldrb	r3, [r7, #14]
 80114b2:	f003 020f 	and.w	r2, r3, #15
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	4613      	mov	r3, r2
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4413      	add	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	440b      	add	r3, r1
 80114c2:	3324      	adds	r3, #36	@ 0x24
 80114c4:	881b      	ldrh	r3, [r3, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d117      	bne.n	80114fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80114ca:	6839      	ldr	r1, [r7, #0]
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f000 fbb0 	bl	8011c32 <USBD_CtlError>
                  break;
 80114d2:	e054      	b.n	801157e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80114d4:	7bbb      	ldrb	r3, [r7, #14]
 80114d6:	f003 020f 	and.w	r2, r3, #15
 80114da:	6879      	ldr	r1, [r7, #4]
 80114dc:	4613      	mov	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4413      	add	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	440b      	add	r3, r1
 80114e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80114ea:	881b      	ldrh	r3, [r3, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d104      	bne.n	80114fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 fb9d 	bl	8011c32 <USBD_CtlError>
                  break;
 80114f8:	e041      	b.n	801157e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	da0b      	bge.n	801151a <USBD_StdEPReq+0x2b2>
 8011502:	7bbb      	ldrb	r3, [r7, #14]
 8011504:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011508:	4613      	mov	r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	4413      	add	r3, r2
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	3310      	adds	r3, #16
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	4413      	add	r3, r2
 8011516:	3304      	adds	r3, #4
 8011518:	e00b      	b.n	8011532 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801151a:	7bbb      	ldrb	r3, [r7, #14]
 801151c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011520:	4613      	mov	r3, r2
 8011522:	009b      	lsls	r3, r3, #2
 8011524:	4413      	add	r3, r2
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	4413      	add	r3, r2
 8011530:	3304      	adds	r3, #4
 8011532:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011534:	7bbb      	ldrb	r3, [r7, #14]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d002      	beq.n	8011540 <USBD_StdEPReq+0x2d8>
 801153a:	7bbb      	ldrb	r3, [r7, #14]
 801153c:	2b80      	cmp	r3, #128	@ 0x80
 801153e:	d103      	bne.n	8011548 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2200      	movs	r2, #0
 8011544:	601a      	str	r2, [r3, #0]
 8011546:	e00e      	b.n	8011566 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011548:	7bbb      	ldrb	r3, [r7, #14]
 801154a:	4619      	mov	r1, r3
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f001 f905 	bl	801275c <USBD_LL_IsStallEP>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d003      	beq.n	8011560 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	2201      	movs	r2, #1
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	e002      	b.n	8011566 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	2202      	movs	r2, #2
 801156a:	4619      	mov	r1, r3
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 fbdd 	bl	8011d2c <USBD_CtlSendData>
              break;
 8011572:	e004      	b.n	801157e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 fb5b 	bl	8011c32 <USBD_CtlError>
              break;
 801157c:	bf00      	nop
          }
          break;
 801157e:	e004      	b.n	801158a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011580:	6839      	ldr	r1, [r7, #0]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 fb55 	bl	8011c32 <USBD_CtlError>
          break;
 8011588:	bf00      	nop
      }
      break;
 801158a:	e005      	b.n	8011598 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801158c:	6839      	ldr	r1, [r7, #0]
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 fb4f 	bl	8011c32 <USBD_CtlError>
      break;
 8011594:	e000      	b.n	8011598 <USBD_StdEPReq+0x330>
      break;
 8011596:	bf00      	nop
  }

  return ret;
 8011598:	7bfb      	ldrb	r3, [r7, #15]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
	...

080115a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80115ae:	2300      	movs	r3, #0
 80115b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80115b2:	2300      	movs	r3, #0
 80115b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80115b6:	2300      	movs	r3, #0
 80115b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	885b      	ldrh	r3, [r3, #2]
 80115be:	0a1b      	lsrs	r3, r3, #8
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	3b01      	subs	r3, #1
 80115c4:	2b06      	cmp	r3, #6
 80115c6:	f200 8128 	bhi.w	801181a <USBD_GetDescriptor+0x276>
 80115ca:	a201      	add	r2, pc, #4	@ (adr r2, 80115d0 <USBD_GetDescriptor+0x2c>)
 80115cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d0:	080115ed 	.word	0x080115ed
 80115d4:	08011605 	.word	0x08011605
 80115d8:	08011645 	.word	0x08011645
 80115dc:	0801181b 	.word	0x0801181b
 80115e0:	0801181b 	.word	0x0801181b
 80115e4:	080117bb 	.word	0x080117bb
 80115e8:	080117e7 	.word	0x080117e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	7c12      	ldrb	r2, [r2, #16]
 80115f8:	f107 0108 	add.w	r1, r7, #8
 80115fc:	4610      	mov	r0, r2
 80115fe:	4798      	blx	r3
 8011600:	60f8      	str	r0, [r7, #12]
      break;
 8011602:	e112      	b.n	801182a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	7c1b      	ldrb	r3, [r3, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10d      	bne.n	8011628 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011614:	f107 0208 	add.w	r2, r7, #8
 8011618:	4610      	mov	r0, r2
 801161a:	4798      	blx	r3
 801161c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3301      	adds	r3, #1
 8011622:	2202      	movs	r2, #2
 8011624:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011626:	e100      	b.n	801182a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011630:	f107 0208 	add.w	r2, r7, #8
 8011634:	4610      	mov	r0, r2
 8011636:	4798      	blx	r3
 8011638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	3301      	adds	r3, #1
 801163e:	2202      	movs	r2, #2
 8011640:	701a      	strb	r2, [r3, #0]
      break;
 8011642:	e0f2      	b.n	801182a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	885b      	ldrh	r3, [r3, #2]
 8011648:	b2db      	uxtb	r3, r3
 801164a:	2b05      	cmp	r3, #5
 801164c:	f200 80ac 	bhi.w	80117a8 <USBD_GetDescriptor+0x204>
 8011650:	a201      	add	r2, pc, #4	@ (adr r2, 8011658 <USBD_GetDescriptor+0xb4>)
 8011652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011656:	bf00      	nop
 8011658:	08011671 	.word	0x08011671
 801165c:	080116a5 	.word	0x080116a5
 8011660:	080116d9 	.word	0x080116d9
 8011664:	0801170d 	.word	0x0801170d
 8011668:	08011741 	.word	0x08011741
 801166c:	08011775 	.word	0x08011775
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00b      	beq.n	8011694 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	7c12      	ldrb	r2, [r2, #16]
 8011688:	f107 0108 	add.w	r1, r7, #8
 801168c:	4610      	mov	r0, r2
 801168e:	4798      	blx	r3
 8011690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011692:	e091      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011694:	6839      	ldr	r1, [r7, #0]
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 facb 	bl	8011c32 <USBD_CtlError>
            err++;
 801169c:	7afb      	ldrb	r3, [r7, #11]
 801169e:	3301      	adds	r3, #1
 80116a0:	72fb      	strb	r3, [r7, #11]
          break;
 80116a2:	e089      	b.n	80117b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00b      	beq.n	80116c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	7c12      	ldrb	r2, [r2, #16]
 80116bc:	f107 0108 	add.w	r1, r7, #8
 80116c0:	4610      	mov	r0, r2
 80116c2:	4798      	blx	r3
 80116c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116c6:	e077      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80116c8:	6839      	ldr	r1, [r7, #0]
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 fab1 	bl	8011c32 <USBD_CtlError>
            err++;
 80116d0:	7afb      	ldrb	r3, [r7, #11]
 80116d2:	3301      	adds	r3, #1
 80116d4:	72fb      	strb	r3, [r7, #11]
          break;
 80116d6:	e06f      	b.n	80117b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00b      	beq.n	80116fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	7c12      	ldrb	r2, [r2, #16]
 80116f0:	f107 0108 	add.w	r1, r7, #8
 80116f4:	4610      	mov	r0, r2
 80116f6:	4798      	blx	r3
 80116f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116fa:	e05d      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fa97 	bl	8011c32 <USBD_CtlError>
            err++;
 8011704:	7afb      	ldrb	r3, [r7, #11]
 8011706:	3301      	adds	r3, #1
 8011708:	72fb      	strb	r3, [r7, #11]
          break;
 801170a:	e055      	b.n	80117b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011712:	691b      	ldr	r3, [r3, #16]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00b      	beq.n	8011730 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	7c12      	ldrb	r2, [r2, #16]
 8011724:	f107 0108 	add.w	r1, r7, #8
 8011728:	4610      	mov	r0, r2
 801172a:	4798      	blx	r3
 801172c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801172e:	e043      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011730:	6839      	ldr	r1, [r7, #0]
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 fa7d 	bl	8011c32 <USBD_CtlError>
            err++;
 8011738:	7afb      	ldrb	r3, [r7, #11]
 801173a:	3301      	adds	r3, #1
 801173c:	72fb      	strb	r3, [r7, #11]
          break;
 801173e:	e03b      	b.n	80117b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011746:	695b      	ldr	r3, [r3, #20]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00b      	beq.n	8011764 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011752:	695b      	ldr	r3, [r3, #20]
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	7c12      	ldrb	r2, [r2, #16]
 8011758:	f107 0108 	add.w	r1, r7, #8
 801175c:	4610      	mov	r0, r2
 801175e:	4798      	blx	r3
 8011760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011762:	e029      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 fa63 	bl	8011c32 <USBD_CtlError>
            err++;
 801176c:	7afb      	ldrb	r3, [r7, #11]
 801176e:	3301      	adds	r3, #1
 8011770:	72fb      	strb	r3, [r7, #11]
          break;
 8011772:	e021      	b.n	80117b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801177a:	699b      	ldr	r3, [r3, #24]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00b      	beq.n	8011798 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011786:	699b      	ldr	r3, [r3, #24]
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	7c12      	ldrb	r2, [r2, #16]
 801178c:	f107 0108 	add.w	r1, r7, #8
 8011790:	4610      	mov	r0, r2
 8011792:	4798      	blx	r3
 8011794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011796:	e00f      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011798:	6839      	ldr	r1, [r7, #0]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 fa49 	bl	8011c32 <USBD_CtlError>
            err++;
 80117a0:	7afb      	ldrb	r3, [r7, #11]
 80117a2:	3301      	adds	r3, #1
 80117a4:	72fb      	strb	r3, [r7, #11]
          break;
 80117a6:	e007      	b.n	80117b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 fa41 	bl	8011c32 <USBD_CtlError>
          err++;
 80117b0:	7afb      	ldrb	r3, [r7, #11]
 80117b2:	3301      	adds	r3, #1
 80117b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80117b6:	bf00      	nop
      }
      break;
 80117b8:	e037      	b.n	801182a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7c1b      	ldrb	r3, [r3, #16]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d109      	bne.n	80117d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117ca:	f107 0208 	add.w	r2, r7, #8
 80117ce:	4610      	mov	r0, r2
 80117d0:	4798      	blx	r3
 80117d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80117d4:	e029      	b.n	801182a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80117d6:	6839      	ldr	r1, [r7, #0]
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 fa2a 	bl	8011c32 <USBD_CtlError>
        err++;
 80117de:	7afb      	ldrb	r3, [r7, #11]
 80117e0:	3301      	adds	r3, #1
 80117e2:	72fb      	strb	r3, [r7, #11]
      break;
 80117e4:	e021      	b.n	801182a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	7c1b      	ldrb	r3, [r3, #16]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d10d      	bne.n	801180a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117f6:	f107 0208 	add.w	r2, r7, #8
 80117fa:	4610      	mov	r0, r2
 80117fc:	4798      	blx	r3
 80117fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3301      	adds	r3, #1
 8011804:	2207      	movs	r2, #7
 8011806:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011808:	e00f      	b.n	801182a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801180a:	6839      	ldr	r1, [r7, #0]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 fa10 	bl	8011c32 <USBD_CtlError>
        err++;
 8011812:	7afb      	ldrb	r3, [r7, #11]
 8011814:	3301      	adds	r3, #1
 8011816:	72fb      	strb	r3, [r7, #11]
      break;
 8011818:	e007      	b.n	801182a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801181a:	6839      	ldr	r1, [r7, #0]
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 fa08 	bl	8011c32 <USBD_CtlError>
      err++;
 8011822:	7afb      	ldrb	r3, [r7, #11]
 8011824:	3301      	adds	r3, #1
 8011826:	72fb      	strb	r3, [r7, #11]
      break;
 8011828:	bf00      	nop
  }

  if (err != 0U)
 801182a:	7afb      	ldrb	r3, [r7, #11]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d11e      	bne.n	801186e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	88db      	ldrh	r3, [r3, #6]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d016      	beq.n	8011866 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011838:	893b      	ldrh	r3, [r7, #8]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d00e      	beq.n	801185c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	88da      	ldrh	r2, [r3, #6]
 8011842:	893b      	ldrh	r3, [r7, #8]
 8011844:	4293      	cmp	r3, r2
 8011846:	bf28      	it	cs
 8011848:	4613      	movcs	r3, r2
 801184a:	b29b      	uxth	r3, r3
 801184c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801184e:	893b      	ldrh	r3, [r7, #8]
 8011850:	461a      	mov	r2, r3
 8011852:	68f9      	ldr	r1, [r7, #12]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f000 fa69 	bl	8011d2c <USBD_CtlSendData>
 801185a:	e009      	b.n	8011870 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801185c:	6839      	ldr	r1, [r7, #0]
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 f9e7 	bl	8011c32 <USBD_CtlError>
 8011864:	e004      	b.n	8011870 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f000 faba 	bl	8011de0 <USBD_CtlSendStatus>
 801186c:	e000      	b.n	8011870 <USBD_GetDescriptor+0x2cc>
    return;
 801186e:	bf00      	nop
  }
}
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop

08011878 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	889b      	ldrh	r3, [r3, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d131      	bne.n	80118ee <USBD_SetAddress+0x76>
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	88db      	ldrh	r3, [r3, #6]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d12d      	bne.n	80118ee <USBD_SetAddress+0x76>
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	885b      	ldrh	r3, [r3, #2]
 8011896:	2b7f      	cmp	r3, #127	@ 0x7f
 8011898:	d829      	bhi.n	80118ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	885b      	ldrh	r3, [r3, #2]
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d104      	bne.n	80118bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80118b2:	6839      	ldr	r1, [r7, #0]
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f9bc 	bl	8011c32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118ba:	e01d      	b.n	80118f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	7bfa      	ldrb	r2, [r7, #15]
 80118c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
 80118c6:	4619      	mov	r1, r3
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 ff73 	bl	80127b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 fa86 	bl	8011de0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d004      	beq.n	80118e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2202      	movs	r2, #2
 80118de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118e2:	e009      	b.n	80118f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2201      	movs	r2, #1
 80118e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118ec:	e004      	b.n	80118f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80118ee:	6839      	ldr	r1, [r7, #0]
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 f99e 	bl	8011c32 <USBD_CtlError>
  }
}
 80118f6:	bf00      	nop
 80118f8:	bf00      	nop
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b084      	sub	sp, #16
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801190a:	2300      	movs	r3, #0
 801190c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	885b      	ldrh	r3, [r3, #2]
 8011912:	b2da      	uxtb	r2, r3
 8011914:	4b4e      	ldr	r3, [pc, #312]	@ (8011a50 <USBD_SetConfig+0x150>)
 8011916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011918:	4b4d      	ldr	r3, [pc, #308]	@ (8011a50 <USBD_SetConfig+0x150>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b01      	cmp	r3, #1
 801191e:	d905      	bls.n	801192c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011920:	6839      	ldr	r1, [r7, #0]
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 f985 	bl	8011c32 <USBD_CtlError>
    return USBD_FAIL;
 8011928:	2303      	movs	r3, #3
 801192a:	e08c      	b.n	8011a46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011932:	b2db      	uxtb	r3, r3
 8011934:	2b02      	cmp	r3, #2
 8011936:	d002      	beq.n	801193e <USBD_SetConfig+0x3e>
 8011938:	2b03      	cmp	r3, #3
 801193a:	d029      	beq.n	8011990 <USBD_SetConfig+0x90>
 801193c:	e075      	b.n	8011a2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801193e:	4b44      	ldr	r3, [pc, #272]	@ (8011a50 <USBD_SetConfig+0x150>)
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d020      	beq.n	8011988 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011946:	4b42      	ldr	r3, [pc, #264]	@ (8011a50 <USBD_SetConfig+0x150>)
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	461a      	mov	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011950:	4b3f      	ldr	r3, [pc, #252]	@ (8011a50 <USBD_SetConfig+0x150>)
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	4619      	mov	r1, r3
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7fe ffe3 	bl	8010922 <USBD_SetClassConfig>
 801195c:	4603      	mov	r3, r0
 801195e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d008      	beq.n	8011978 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011966:	6839      	ldr	r1, [r7, #0]
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f000 f962 	bl	8011c32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2202      	movs	r2, #2
 8011972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011976:	e065      	b.n	8011a44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 fa31 	bl	8011de0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2203      	movs	r2, #3
 8011982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011986:	e05d      	b.n	8011a44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 fa29 	bl	8011de0 <USBD_CtlSendStatus>
      break;
 801198e:	e059      	b.n	8011a44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011990:	4b2f      	ldr	r3, [pc, #188]	@ (8011a50 <USBD_SetConfig+0x150>)
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d112      	bne.n	80119be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2202      	movs	r2, #2
 801199c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80119a0:	4b2b      	ldr	r3, [pc, #172]	@ (8011a50 <USBD_SetConfig+0x150>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	461a      	mov	r2, r3
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80119aa:	4b29      	ldr	r3, [pc, #164]	@ (8011a50 <USBD_SetConfig+0x150>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	4619      	mov	r1, r3
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7fe ffd2 	bl	801095a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fa12 	bl	8011de0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80119bc:	e042      	b.n	8011a44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80119be:	4b24      	ldr	r3, [pc, #144]	@ (8011a50 <USBD_SetConfig+0x150>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	461a      	mov	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d02a      	beq.n	8011a22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	4619      	mov	r1, r3
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7fe ffc0 	bl	801095a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80119da:	4b1d      	ldr	r3, [pc, #116]	@ (8011a50 <USBD_SetConfig+0x150>)
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80119e4:	4b1a      	ldr	r3, [pc, #104]	@ (8011a50 <USBD_SetConfig+0x150>)
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	4619      	mov	r1, r3
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7fe ff99 	bl	8010922 <USBD_SetClassConfig>
 80119f0:	4603      	mov	r3, r0
 80119f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80119f4:	7bfb      	ldrb	r3, [r7, #15]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00f      	beq.n	8011a1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80119fa:	6839      	ldr	r1, [r7, #0]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 f918 	bl	8011c32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	4619      	mov	r1, r3
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7fe ffa5 	bl	801095a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2202      	movs	r2, #2
 8011a14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011a18:	e014      	b.n	8011a44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 f9e0 	bl	8011de0 <USBD_CtlSendStatus>
      break;
 8011a20:	e010      	b.n	8011a44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f9dc 	bl	8011de0 <USBD_CtlSendStatus>
      break;
 8011a28:	e00c      	b.n	8011a44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011a2a:	6839      	ldr	r1, [r7, #0]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 f900 	bl	8011c32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a32:	4b07      	ldr	r3, [pc, #28]	@ (8011a50 <USBD_SetConfig+0x150>)
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	4619      	mov	r1, r3
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7fe ff8e 	bl	801095a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011a3e:	2303      	movs	r3, #3
 8011a40:	73fb      	strb	r3, [r7, #15]
      break;
 8011a42:	bf00      	nop
  }

  return ret;
 8011a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	20001730 	.word	0x20001730

08011a54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	88db      	ldrh	r3, [r3, #6]
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d004      	beq.n	8011a70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011a66:	6839      	ldr	r1, [r7, #0]
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 f8e2 	bl	8011c32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011a6e:	e023      	b.n	8011ab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	dc02      	bgt.n	8011a82 <USBD_GetConfig+0x2e>
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	dc03      	bgt.n	8011a88 <USBD_GetConfig+0x34>
 8011a80:	e015      	b.n	8011aae <USBD_GetConfig+0x5a>
 8011a82:	2b03      	cmp	r3, #3
 8011a84:	d00b      	beq.n	8011a9e <USBD_GetConfig+0x4a>
 8011a86:	e012      	b.n	8011aae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	3308      	adds	r3, #8
 8011a92:	2201      	movs	r2, #1
 8011a94:	4619      	mov	r1, r3
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 f948 	bl	8011d2c <USBD_CtlSendData>
        break;
 8011a9c:	e00c      	b.n	8011ab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3304      	adds	r3, #4
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 f940 	bl	8011d2c <USBD_CtlSendData>
        break;
 8011aac:	e004      	b.n	8011ab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011aae:	6839      	ldr	r1, [r7, #0]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 f8be 	bl	8011c32 <USBD_CtlError>
        break;
 8011ab6:	bf00      	nop
}
 8011ab8:	bf00      	nop
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	2b02      	cmp	r3, #2
 8011ad6:	d81e      	bhi.n	8011b16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	88db      	ldrh	r3, [r3, #6]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d004      	beq.n	8011aea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 f8a5 	bl	8011c32 <USBD_CtlError>
        break;
 8011ae8:	e01a      	b.n	8011b20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2201      	movs	r2, #1
 8011aee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d005      	beq.n	8011b06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	f043 0202 	orr.w	r2, r3, #2
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	330c      	adds	r3, #12
 8011b0a:	2202      	movs	r2, #2
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 f90c 	bl	8011d2c <USBD_CtlSendData>
      break;
 8011b14:	e004      	b.n	8011b20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 f88a 	bl	8011c32 <USBD_CtlError>
      break;
 8011b1e:	bf00      	nop
  }
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	885b      	ldrh	r3, [r3, #2]
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d107      	bne.n	8011b4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f000 f94c 	bl	8011de0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011b48:	e013      	b.n	8011b72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	885b      	ldrh	r3, [r3, #2]
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d10b      	bne.n	8011b6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	889b      	ldrh	r3, [r3, #4]
 8011b56:	0a1b      	lsrs	r3, r3, #8
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 f93c 	bl	8011de0 <USBD_CtlSendStatus>
}
 8011b68:	e003      	b.n	8011b72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011b6a:	6839      	ldr	r1, [r7, #0]
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f000 f860 	bl	8011c32 <USBD_CtlError>
}
 8011b72:	bf00      	nop
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
 8011b82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	3b01      	subs	r3, #1
 8011b8e:	2b02      	cmp	r3, #2
 8011b90:	d80b      	bhi.n	8011baa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	885b      	ldrh	r3, [r3, #2]
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d10c      	bne.n	8011bb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 f91c 	bl	8011de0 <USBD_CtlSendStatus>
      }
      break;
 8011ba8:	e004      	b.n	8011bb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011baa:	6839      	ldr	r1, [r7, #0]
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f000 f840 	bl	8011c32 <USBD_CtlError>
      break;
 8011bb2:	e000      	b.n	8011bb6 <USBD_ClrFeature+0x3c>
      break;
 8011bb4:	bf00      	nop
  }
}
 8011bb6:	bf00      	nop
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	781a      	ldrb	r2, [r3, #0]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	781a      	ldrb	r2, [r3, #0]
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3301      	adds	r3, #1
 8011be6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f7ff fa40 	bl	801106e <SWAPBYTE>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f7ff fa33 	bl	801106e <SWAPBYTE>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	3301      	adds	r3, #1
 8011c14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	3301      	adds	r3, #1
 8011c1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f7ff fa26 	bl	801106e <SWAPBYTE>
 8011c22:	4603      	mov	r3, r0
 8011c24:	461a      	mov	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	80da      	strh	r2, [r3, #6]
}
 8011c2a:	bf00      	nop
 8011c2c:	3710      	adds	r7, #16
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b082      	sub	sp, #8
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
 8011c3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c3c:	2180      	movs	r1, #128	@ 0x80
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fd4e 	bl	80126e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011c44:	2100      	movs	r1, #0
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f000 fd4a 	bl	80126e0 <USBD_LL_StallEP>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	60b9      	str	r1, [r7, #8]
 8011c5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011c60:	2300      	movs	r3, #0
 8011c62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d042      	beq.n	8011cf0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011c6e:	6938      	ldr	r0, [r7, #16]
 8011c70:	f000 f842 	bl	8011cf8 <USBD_GetLen>
 8011c74:	4603      	mov	r3, r0
 8011c76:	3301      	adds	r3, #1
 8011c78:	005b      	lsls	r3, r3, #1
 8011c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c7e:	d808      	bhi.n	8011c92 <USBD_GetString+0x3e>
 8011c80:	6938      	ldr	r0, [r7, #16]
 8011c82:	f000 f839 	bl	8011cf8 <USBD_GetLen>
 8011c86:	4603      	mov	r3, r0
 8011c88:	3301      	adds	r3, #1
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	005b      	lsls	r3, r3, #1
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	e001      	b.n	8011c96 <USBD_GetString+0x42>
 8011c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	4413      	add	r3, r2
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	7812      	ldrb	r2, [r2, #0]
 8011ca4:	701a      	strb	r2, [r3, #0]
  idx++;
 8011ca6:	7dfb      	ldrb	r3, [r7, #23]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011cac:	7dfb      	ldrb	r3, [r7, #23]
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	2203      	movs	r2, #3
 8011cb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011cbc:	e013      	b.n	8011ce6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011cbe:	7dfb      	ldrb	r3, [r7, #23]
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	4413      	add	r3, r2
 8011cc4:	693a      	ldr	r2, [r7, #16]
 8011cc6:	7812      	ldrb	r2, [r2, #0]
 8011cc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	613b      	str	r3, [r7, #16]
    idx++;
 8011cd0:	7dfb      	ldrb	r3, [r7, #23]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011cd6:	7dfb      	ldrb	r3, [r7, #23]
 8011cd8:	68ba      	ldr	r2, [r7, #8]
 8011cda:	4413      	add	r3, r2
 8011cdc:	2200      	movs	r2, #0
 8011cde:	701a      	strb	r2, [r3, #0]
    idx++;
 8011ce0:	7dfb      	ldrb	r3, [r7, #23]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d1e7      	bne.n	8011cbe <USBD_GetString+0x6a>
 8011cee:	e000      	b.n	8011cf2 <USBD_GetString+0x9e>
    return;
 8011cf0:	bf00      	nop
  }
}
 8011cf2:	3718      	adds	r7, #24
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011d00:	2300      	movs	r3, #0
 8011d02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011d08:	e005      	b.n	8011d16 <USBD_GetLen+0x1e>
  {
    len++;
 8011d0a:	7bfb      	ldrb	r3, [r7, #15]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	3301      	adds	r3, #1
 8011d14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d1f5      	bne.n	8011d0a <USBD_GetLen+0x12>
  }

  return len;
 8011d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3714      	adds	r7, #20
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2202      	movs	r2, #2
 8011d3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	68ba      	ldr	r2, [r7, #8]
 8011d50:	2100      	movs	r1, #0
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f000 fd4d 	bl	80127f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	60f8      	str	r0, [r7, #12]
 8011d6a:	60b9      	str	r1, [r7, #8]
 8011d6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	2100      	movs	r1, #0
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f000 fd3c 	bl	80127f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2203      	movs	r2, #3
 8011d94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	2100      	movs	r1, #0
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f000 fd40 	bl	8012834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b084      	sub	sp, #16
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	60f8      	str	r0, [r7, #12]
 8011dc6:	60b9      	str	r1, [r7, #8]
 8011dc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	2100      	movs	r1, #0
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f000 fd2f 	bl	8012834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3710      	adds	r7, #16
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2204      	movs	r2, #4
 8011dec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011df0:	2300      	movs	r3, #0
 8011df2:	2200      	movs	r2, #0
 8011df4:	2100      	movs	r1, #0
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 fcfb 	bl	80127f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b082      	sub	sp, #8
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2205      	movs	r2, #5
 8011e12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e16:	2300      	movs	r3, #0
 8011e18:	2200      	movs	r2, #0
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f000 fd09 	bl	8012834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011e30:	2200      	movs	r2, #0
 8011e32:	4912      	ldr	r1, [pc, #72]	@ (8011e7c <MX_USB_DEVICE_Init+0x50>)
 8011e34:	4812      	ldr	r0, [pc, #72]	@ (8011e80 <MX_USB_DEVICE_Init+0x54>)
 8011e36:	f7fe fcf7 	bl	8010828 <USBD_Init>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d001      	beq.n	8011e44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011e40:	f7f3 fabe 	bl	80053c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011e44:	490f      	ldr	r1, [pc, #60]	@ (8011e84 <MX_USB_DEVICE_Init+0x58>)
 8011e46:	480e      	ldr	r0, [pc, #56]	@ (8011e80 <MX_USB_DEVICE_Init+0x54>)
 8011e48:	f7fe fd1e 	bl	8010888 <USBD_RegisterClass>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d001      	beq.n	8011e56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011e52:	f7f3 fab5 	bl	80053c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011e56:	490c      	ldr	r1, [pc, #48]	@ (8011e88 <MX_USB_DEVICE_Init+0x5c>)
 8011e58:	4809      	ldr	r0, [pc, #36]	@ (8011e80 <MX_USB_DEVICE_Init+0x54>)
 8011e5a:	f7fe fc15 	bl	8010688 <USBD_CDC_RegisterInterface>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d001      	beq.n	8011e68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011e64:	f7f3 faac 	bl	80053c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011e68:	4805      	ldr	r0, [pc, #20]	@ (8011e80 <MX_USB_DEVICE_Init+0x54>)
 8011e6a:	f7fe fd43 	bl	80108f4 <USBD_Start>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011e74:	f7f3 faa4 	bl	80053c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011e78:	bf00      	nop
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	200000c4 	.word	0x200000c4
 8011e80:	20001734 	.word	0x20001734
 8011e84:	20000028 	.word	0x20000028
 8011e88:	200000b0 	.word	0x200000b0

08011e8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011e90:	2200      	movs	r2, #0
 8011e92:	4905      	ldr	r1, [pc, #20]	@ (8011ea8 <CDC_Init_FS+0x1c>)
 8011e94:	4805      	ldr	r0, [pc, #20]	@ (8011eac <CDC_Init_FS+0x20>)
 8011e96:	f7fe fc11 	bl	80106bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011e9a:	4905      	ldr	r1, [pc, #20]	@ (8011eb0 <CDC_Init_FS+0x24>)
 8011e9c:	4803      	ldr	r0, [pc, #12]	@ (8011eac <CDC_Init_FS+0x20>)
 8011e9e:	f7fe fc2f 	bl	8010700 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011ea2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	20001c10 	.word	0x20001c10
 8011eac:	20001734 	.word	0x20001734
 8011eb0:	20001a10 	.word	0x20001a10

08011eb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011eb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	6039      	str	r1, [r7, #0]
 8011ece:	71fb      	strb	r3, [r7, #7]
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011ed4:	79fb      	ldrb	r3, [r7, #7]
 8011ed6:	2b23      	cmp	r3, #35	@ 0x23
 8011ed8:	f200 8097 	bhi.w	801200a <CDC_Control_FS+0x146>
 8011edc:	a201      	add	r2, pc, #4	@ (adr r2, 8011ee4 <CDC_Control_FS+0x20>)
 8011ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee2:	bf00      	nop
 8011ee4:	0801200b 	.word	0x0801200b
 8011ee8:	0801200b 	.word	0x0801200b
 8011eec:	0801200b 	.word	0x0801200b
 8011ef0:	0801200b 	.word	0x0801200b
 8011ef4:	0801200b 	.word	0x0801200b
 8011ef8:	0801200b 	.word	0x0801200b
 8011efc:	0801200b 	.word	0x0801200b
 8011f00:	0801200b 	.word	0x0801200b
 8011f04:	0801200b 	.word	0x0801200b
 8011f08:	0801200b 	.word	0x0801200b
 8011f0c:	0801200b 	.word	0x0801200b
 8011f10:	0801200b 	.word	0x0801200b
 8011f14:	0801200b 	.word	0x0801200b
 8011f18:	0801200b 	.word	0x0801200b
 8011f1c:	0801200b 	.word	0x0801200b
 8011f20:	0801200b 	.word	0x0801200b
 8011f24:	0801200b 	.word	0x0801200b
 8011f28:	0801200b 	.word	0x0801200b
 8011f2c:	0801200b 	.word	0x0801200b
 8011f30:	0801200b 	.word	0x0801200b
 8011f34:	0801200b 	.word	0x0801200b
 8011f38:	0801200b 	.word	0x0801200b
 8011f3c:	0801200b 	.word	0x0801200b
 8011f40:	0801200b 	.word	0x0801200b
 8011f44:	0801200b 	.word	0x0801200b
 8011f48:	0801200b 	.word	0x0801200b
 8011f4c:	0801200b 	.word	0x0801200b
 8011f50:	0801200b 	.word	0x0801200b
 8011f54:	0801200b 	.word	0x0801200b
 8011f58:	0801200b 	.word	0x0801200b
 8011f5c:	0801200b 	.word	0x0801200b
 8011f60:	0801200b 	.word	0x0801200b
 8011f64:	08011f75 	.word	0x08011f75
 8011f68:	08011fb7 	.word	0x08011fb7
 8011f6c:	0801200b 	.word	0x0801200b
 8011f70:	0801200b 	.word	0x0801200b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	461a      	mov	r2, r3
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	021b      	lsls	r3, r3, #8
 8011f82:	431a      	orrs	r2, r3
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	3302      	adds	r3, #2
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	041b      	lsls	r3, r3, #16
 8011f8c:	431a      	orrs	r2, r3
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	3303      	adds	r3, #3
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	061b      	lsls	r3, r3, #24
 8011f96:	4313      	orrs	r3, r2
 8011f98:	4a20      	ldr	r2, [pc, #128]	@ (801201c <CDC_Control_FS+0x158>)
 8011f9a:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	791a      	ldrb	r2, [r3, #4]
 8011fa0:	4b1e      	ldr	r3, [pc, #120]	@ (801201c <CDC_Control_FS+0x158>)
 8011fa2:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	795a      	ldrb	r2, [r3, #5]
 8011fa8:	4b1c      	ldr	r3, [pc, #112]	@ (801201c <CDC_Control_FS+0x158>)
 8011faa:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	799a      	ldrb	r2, [r3, #6]
 8011fb0:	4b1a      	ldr	r3, [pc, #104]	@ (801201c <CDC_Control_FS+0x158>)
 8011fb2:	719a      	strb	r2, [r3, #6]
    break;
 8011fb4:	e02a      	b.n	801200c <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8011fb6:	4b19      	ldr	r3, [pc, #100]	@ (801201c <CDC_Control_FS+0x158>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8011fc0:	4b16      	ldr	r3, [pc, #88]	@ (801201c <CDC_Control_FS+0x158>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	0a1a      	lsrs	r2, r3, #8
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	3301      	adds	r3, #1
 8011fca:	b2d2      	uxtb	r2, r2
 8011fcc:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8011fce:	4b13      	ldr	r3, [pc, #76]	@ (801201c <CDC_Control_FS+0x158>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	0c1a      	lsrs	r2, r3, #16
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	3302      	adds	r3, #2
 8011fd8:	b2d2      	uxtb	r2, r2
 8011fda:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8011fdc:	4b0f      	ldr	r3, [pc, #60]	@ (801201c <CDC_Control_FS+0x158>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	0e1a      	lsrs	r2, r3, #24
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	3303      	adds	r3, #3
 8011fe6:	b2d2      	uxtb	r2, r2
 8011fe8:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	3304      	adds	r3, #4
 8011fee:	4a0b      	ldr	r2, [pc, #44]	@ (801201c <CDC_Control_FS+0x158>)
 8011ff0:	7912      	ldrb	r2, [r2, #4]
 8011ff2:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	3305      	adds	r3, #5
 8011ff8:	4a08      	ldr	r2, [pc, #32]	@ (801201c <CDC_Control_FS+0x158>)
 8011ffa:	7952      	ldrb	r2, [r2, #5]
 8011ffc:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	3306      	adds	r3, #6
 8012002:	4a06      	ldr	r2, [pc, #24]	@ (801201c <CDC_Control_FS+0x158>)
 8012004:	7992      	ldrb	r2, [r2, #6]
 8012006:	701a      	strb	r2, [r3, #0]
	break;
 8012008:	e000      	b.n	801200c <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801200a:	bf00      	nop
  }

  return (USBD_OK);
 801200c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801200e:	4618      	mov	r0, r3
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	200000a8 	.word	0x200000a8

08012020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 801202a:	4b0b      	ldr	r3, [pc, #44]	@ (8012058 <CDC_Receive_FS+0x38>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d006      	beq.n	8012040 <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 8012032:	4b09      	ldr	r3, [pc, #36]	@ (8012058 <CDC_Receive_FS+0x38>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	683a      	ldr	r2, [r7, #0]
 8012038:	6812      	ldr	r2, [r2, #0]
 801203a:	4611      	mov	r1, r2
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012040:	6879      	ldr	r1, [r7, #4]
 8012042:	4806      	ldr	r0, [pc, #24]	@ (801205c <CDC_Receive_FS+0x3c>)
 8012044:	f7fe fb5c 	bl	8010700 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012048:	4804      	ldr	r0, [pc, #16]	@ (801205c <CDC_Receive_FS+0x3c>)
 801204a:	f7fe fbb7 	bl	80107bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801204e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012050:	4618      	mov	r0, r3
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	20001e10 	.word	0x20001e10
 801205c:	20001734 	.word	0x20001734

08012060 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	460b      	mov	r3, r1
 801206a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801206c:	2300      	movs	r3, #0
 801206e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012070:	4b0d      	ldr	r3, [pc, #52]	@ (80120a8 <CDC_Transmit_FS+0x48>)
 8012072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012076:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801207e:	2b00      	cmp	r3, #0
 8012080:	d001      	beq.n	8012086 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012082:	2301      	movs	r3, #1
 8012084:	e00b      	b.n	801209e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012086:	887b      	ldrh	r3, [r7, #2]
 8012088:	461a      	mov	r2, r3
 801208a:	6879      	ldr	r1, [r7, #4]
 801208c:	4806      	ldr	r0, [pc, #24]	@ (80120a8 <CDC_Transmit_FS+0x48>)
 801208e:	f7fe fb15 	bl	80106bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012092:	4805      	ldr	r0, [pc, #20]	@ (80120a8 <CDC_Transmit_FS+0x48>)
 8012094:	f7fe fb52 	bl	801073c <USBD_CDC_TransmitPacket>
 8012098:	4603      	mov	r3, r0
 801209a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801209c:	7bfb      	ldrb	r3, [r7, #15]
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	20001734 	.word	0x20001734

080120ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80120ac:	b480      	push	{r7}
 80120ae:	b087      	sub	sp, #28
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	4613      	mov	r3, r2
 80120b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80120ba:	2300      	movs	r3, #0
 80120bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80120be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	371c      	adds	r7, #28
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
	...

080120d0 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 80120d8:	4a04      	ldr	r2, [pc, #16]	@ (80120ec <CDC_Attach_Rx+0x1c>)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6013      	str	r3, [r2, #0]
}
 80120de:	bf00      	nop
 80120e0:	370c      	adds	r7, #12
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr
 80120ea:	bf00      	nop
 80120ec:	20001e10 	.word	0x20001e10

080120f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	4603      	mov	r3, r0
 80120f8:	6039      	str	r1, [r7, #0]
 80120fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2212      	movs	r2, #18
 8012100:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012102:	4b03      	ldr	r3, [pc, #12]	@ (8012110 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012104:	4618      	mov	r0, r3
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr
 8012110:	200000e0 	.word	0x200000e0

08012114 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	4603      	mov	r3, r0
 801211c:	6039      	str	r1, [r7, #0]
 801211e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	2204      	movs	r2, #4
 8012124:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012126:	4b03      	ldr	r3, [pc, #12]	@ (8012134 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012128:	4618      	mov	r0, r3
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr
 8012134:	200000f4 	.word	0x200000f4

08012138 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	6039      	str	r1, [r7, #0]
 8012142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012144:	79fb      	ldrb	r3, [r7, #7]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d105      	bne.n	8012156 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801214a:	683a      	ldr	r2, [r7, #0]
 801214c:	4907      	ldr	r1, [pc, #28]	@ (801216c <USBD_FS_ProductStrDescriptor+0x34>)
 801214e:	4808      	ldr	r0, [pc, #32]	@ (8012170 <USBD_FS_ProductStrDescriptor+0x38>)
 8012150:	f7ff fd80 	bl	8011c54 <USBD_GetString>
 8012154:	e004      	b.n	8012160 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012156:	683a      	ldr	r2, [r7, #0]
 8012158:	4904      	ldr	r1, [pc, #16]	@ (801216c <USBD_FS_ProductStrDescriptor+0x34>)
 801215a:	4805      	ldr	r0, [pc, #20]	@ (8012170 <USBD_FS_ProductStrDescriptor+0x38>)
 801215c:	f7ff fd7a 	bl	8011c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012160:	4b02      	ldr	r3, [pc, #8]	@ (801216c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012162:	4618      	mov	r0, r3
 8012164:	3708      	adds	r7, #8
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	20001e14 	.word	0x20001e14
 8012170:	080137d0 	.word	0x080137d0

08012174 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	4603      	mov	r3, r0
 801217c:	6039      	str	r1, [r7, #0]
 801217e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012180:	683a      	ldr	r2, [r7, #0]
 8012182:	4904      	ldr	r1, [pc, #16]	@ (8012194 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012184:	4804      	ldr	r0, [pc, #16]	@ (8012198 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012186:	f7ff fd65 	bl	8011c54 <USBD_GetString>
  return USBD_StrDesc;
 801218a:	4b02      	ldr	r3, [pc, #8]	@ (8012194 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801218c:	4618      	mov	r0, r3
 801218e:	3708      	adds	r7, #8
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	20001e14 	.word	0x20001e14
 8012198:	080137e8 	.word	0x080137e8

0801219c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	4603      	mov	r3, r0
 80121a4:	6039      	str	r1, [r7, #0]
 80121a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	221a      	movs	r2, #26
 80121ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80121ae:	f000 f843 	bl	8012238 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80121b2:	4b02      	ldr	r3, [pc, #8]	@ (80121bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}
 80121bc:	200000f8 	.word	0x200000f8

080121c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	4603      	mov	r3, r0
 80121c8:	6039      	str	r1, [r7, #0]
 80121ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80121cc:	79fb      	ldrb	r3, [r7, #7]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d105      	bne.n	80121de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80121d2:	683a      	ldr	r2, [r7, #0]
 80121d4:	4907      	ldr	r1, [pc, #28]	@ (80121f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80121d6:	4808      	ldr	r0, [pc, #32]	@ (80121f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80121d8:	f7ff fd3c 	bl	8011c54 <USBD_GetString>
 80121dc:	e004      	b.n	80121e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	4904      	ldr	r1, [pc, #16]	@ (80121f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80121e2:	4805      	ldr	r0, [pc, #20]	@ (80121f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80121e4:	f7ff fd36 	bl	8011c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 80121e8:	4b02      	ldr	r3, [pc, #8]	@ (80121f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3708      	adds	r7, #8
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	20001e14 	.word	0x20001e14
 80121f8:	080137fc 	.word	0x080137fc

080121fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	4603      	mov	r3, r0
 8012204:	6039      	str	r1, [r7, #0]
 8012206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012208:	79fb      	ldrb	r3, [r7, #7]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d105      	bne.n	801221a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801220e:	683a      	ldr	r2, [r7, #0]
 8012210:	4907      	ldr	r1, [pc, #28]	@ (8012230 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012212:	4808      	ldr	r0, [pc, #32]	@ (8012234 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012214:	f7ff fd1e 	bl	8011c54 <USBD_GetString>
 8012218:	e004      	b.n	8012224 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	4904      	ldr	r1, [pc, #16]	@ (8012230 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801221e:	4805      	ldr	r0, [pc, #20]	@ (8012234 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012220:	f7ff fd18 	bl	8011c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012224:	4b02      	ldr	r3, [pc, #8]	@ (8012230 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012226:	4618      	mov	r0, r3
 8012228:	3708      	adds	r7, #8
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	20001e14 	.word	0x20001e14
 8012234:	08013808 	.word	0x08013808

08012238 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801223e:	4b0f      	ldr	r3, [pc, #60]	@ (801227c <Get_SerialNum+0x44>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012244:	4b0e      	ldr	r3, [pc, #56]	@ (8012280 <Get_SerialNum+0x48>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801224a:	4b0e      	ldr	r3, [pc, #56]	@ (8012284 <Get_SerialNum+0x4c>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	4413      	add	r3, r2
 8012256:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d009      	beq.n	8012272 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801225e:	2208      	movs	r2, #8
 8012260:	4909      	ldr	r1, [pc, #36]	@ (8012288 <Get_SerialNum+0x50>)
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f000 f814 	bl	8012290 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012268:	2204      	movs	r2, #4
 801226a:	4908      	ldr	r1, [pc, #32]	@ (801228c <Get_SerialNum+0x54>)
 801226c:	68b8      	ldr	r0, [r7, #8]
 801226e:	f000 f80f 	bl	8012290 <IntToUnicode>
  }
}
 8012272:	bf00      	nop
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	1fff7a10 	.word	0x1fff7a10
 8012280:	1fff7a14 	.word	0x1fff7a14
 8012284:	1fff7a18 	.word	0x1fff7a18
 8012288:	200000fa 	.word	0x200000fa
 801228c:	2000010a 	.word	0x2000010a

08012290 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012290:	b480      	push	{r7}
 8012292:	b087      	sub	sp, #28
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	4613      	mov	r3, r2
 801229c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801229e:	2300      	movs	r3, #0
 80122a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80122a2:	2300      	movs	r3, #0
 80122a4:	75fb      	strb	r3, [r7, #23]
 80122a6:	e027      	b.n	80122f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	0f1b      	lsrs	r3, r3, #28
 80122ac:	2b09      	cmp	r3, #9
 80122ae:	d80b      	bhi.n	80122c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	0f1b      	lsrs	r3, r3, #28
 80122b4:	b2da      	uxtb	r2, r3
 80122b6:	7dfb      	ldrb	r3, [r7, #23]
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	4619      	mov	r1, r3
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	440b      	add	r3, r1
 80122c0:	3230      	adds	r2, #48	@ 0x30
 80122c2:	b2d2      	uxtb	r2, r2
 80122c4:	701a      	strb	r2, [r3, #0]
 80122c6:	e00a      	b.n	80122de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	0f1b      	lsrs	r3, r3, #28
 80122cc:	b2da      	uxtb	r2, r3
 80122ce:	7dfb      	ldrb	r3, [r7, #23]
 80122d0:	005b      	lsls	r3, r3, #1
 80122d2:	4619      	mov	r1, r3
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	440b      	add	r3, r1
 80122d8:	3237      	adds	r2, #55	@ 0x37
 80122da:	b2d2      	uxtb	r2, r2
 80122dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	011b      	lsls	r3, r3, #4
 80122e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80122e4:	7dfb      	ldrb	r3, [r7, #23]
 80122e6:	005b      	lsls	r3, r3, #1
 80122e8:	3301      	adds	r3, #1
 80122ea:	68ba      	ldr	r2, [r7, #8]
 80122ec:	4413      	add	r3, r2
 80122ee:	2200      	movs	r2, #0
 80122f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80122f2:	7dfb      	ldrb	r3, [r7, #23]
 80122f4:	3301      	adds	r3, #1
 80122f6:	75fb      	strb	r3, [r7, #23]
 80122f8:	7dfa      	ldrb	r2, [r7, #23]
 80122fa:	79fb      	ldrb	r3, [r7, #7]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d3d3      	bcc.n	80122a8 <IntToUnicode+0x18>
  }
}
 8012300:	bf00      	nop
 8012302:	bf00      	nop
 8012304:	371c      	adds	r7, #28
 8012306:	46bd      	mov	sp, r7
 8012308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230c:	4770      	bx	lr
	...

08012310 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b08a      	sub	sp, #40	@ 0x28
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012318:	f107 0314 	add.w	r3, r7, #20
 801231c:	2200      	movs	r2, #0
 801231e:	601a      	str	r2, [r3, #0]
 8012320:	605a      	str	r2, [r3, #4]
 8012322:	609a      	str	r2, [r3, #8]
 8012324:	60da      	str	r2, [r3, #12]
 8012326:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012330:	d13a      	bne.n	80123a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012332:	2300      	movs	r3, #0
 8012334:	613b      	str	r3, [r7, #16]
 8012336:	4b1e      	ldr	r3, [pc, #120]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 8012338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801233a:	4a1d      	ldr	r2, [pc, #116]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 801233c:	f043 0301 	orr.w	r3, r3, #1
 8012340:	6313      	str	r3, [r2, #48]	@ 0x30
 8012342:	4b1b      	ldr	r3, [pc, #108]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 8012344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012346:	f003 0301 	and.w	r3, r3, #1
 801234a:	613b      	str	r3, [r7, #16]
 801234c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801234e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012354:	2302      	movs	r3, #2
 8012356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012358:	2300      	movs	r3, #0
 801235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801235c:	2303      	movs	r3, #3
 801235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012360:	230a      	movs	r3, #10
 8012362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012364:	f107 0314 	add.w	r3, r7, #20
 8012368:	4619      	mov	r1, r3
 801236a:	4812      	ldr	r0, [pc, #72]	@ (80123b4 <HAL_PCD_MspInit+0xa4>)
 801236c:	f7f4 fe86 	bl	800707c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012370:	4b0f      	ldr	r3, [pc, #60]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 8012372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012374:	4a0e      	ldr	r2, [pc, #56]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 8012376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801237a:	6353      	str	r3, [r2, #52]	@ 0x34
 801237c:	2300      	movs	r3, #0
 801237e:	60fb      	str	r3, [r7, #12]
 8012380:	4b0b      	ldr	r3, [pc, #44]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 8012382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012384:	4a0a      	ldr	r2, [pc, #40]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 8012386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801238a:	6453      	str	r3, [r2, #68]	@ 0x44
 801238c:	4b08      	ldr	r3, [pc, #32]	@ (80123b0 <HAL_PCD_MspInit+0xa0>)
 801238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012398:	2200      	movs	r2, #0
 801239a:	2100      	movs	r1, #0
 801239c:	2043      	movs	r0, #67	@ 0x43
 801239e:	f7f4 fa1a 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80123a2:	2043      	movs	r0, #67	@ 0x43
 80123a4:	f7f4 fa33 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80123a8:	bf00      	nop
 80123aa:	3728      	adds	r7, #40	@ 0x28
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	40023800 	.word	0x40023800
 80123b4:	40020000 	.word	0x40020000

080123b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80123cc:	4619      	mov	r1, r3
 80123ce:	4610      	mov	r0, r2
 80123d0:	f7fe fadd 	bl	801098e <USBD_LL_SetupStage>
}
 80123d4:	bf00      	nop
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	460b      	mov	r3, r1
 80123e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80123ee:	78fa      	ldrb	r2, [r7, #3]
 80123f0:	6879      	ldr	r1, [r7, #4]
 80123f2:	4613      	mov	r3, r2
 80123f4:	00db      	lsls	r3, r3, #3
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	440b      	add	r3, r1
 80123fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	78fb      	ldrb	r3, [r7, #3]
 8012404:	4619      	mov	r1, r3
 8012406:	f7fe fb17 	bl	8010a38 <USBD_LL_DataOutStage>
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
 801241a:	460b      	mov	r3, r1
 801241c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012424:	78fa      	ldrb	r2, [r7, #3]
 8012426:	6879      	ldr	r1, [r7, #4]
 8012428:	4613      	mov	r3, r2
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	4413      	add	r3, r2
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	440b      	add	r3, r1
 8012432:	3320      	adds	r3, #32
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	78fb      	ldrb	r3, [r7, #3]
 8012438:	4619      	mov	r1, r3
 801243a:	f7fe fbb0 	bl	8010b9e <USBD_LL_DataInStage>
}
 801243e:	bf00      	nop
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b082      	sub	sp, #8
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012454:	4618      	mov	r0, r3
 8012456:	f7fe fcea 	bl	8010e2e <USBD_LL_SOF>
}
 801245a:	bf00      	nop
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b084      	sub	sp, #16
 8012466:	af00      	add	r7, sp, #0
 8012468:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801246a:	2301      	movs	r3, #1
 801246c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	79db      	ldrb	r3, [r3, #7]
 8012472:	2b02      	cmp	r3, #2
 8012474:	d001      	beq.n	801247a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012476:	f7f2 ffa3 	bl	80053c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012480:	7bfa      	ldrb	r2, [r7, #15]
 8012482:	4611      	mov	r1, r2
 8012484:	4618      	mov	r0, r3
 8012486:	f7fe fc8e 	bl	8010da6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012490:	4618      	mov	r0, r3
 8012492:	f7fe fc36 	bl	8010d02 <USBD_LL_Reset>
}
 8012496:	bf00      	nop
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
	...

080124a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fe fc89 	bl	8010dc6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	6812      	ldr	r2, [r2, #0]
 80124c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80124c6:	f043 0301 	orr.w	r3, r3, #1
 80124ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	7adb      	ldrb	r3, [r3, #11]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d005      	beq.n	80124e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124d4:	4b04      	ldr	r3, [pc, #16]	@ (80124e8 <HAL_PCD_SuspendCallback+0x48>)
 80124d6:	691b      	ldr	r3, [r3, #16]
 80124d8:	4a03      	ldr	r2, [pc, #12]	@ (80124e8 <HAL_PCD_SuspendCallback+0x48>)
 80124da:	f043 0306 	orr.w	r3, r3, #6
 80124de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80124e0:	bf00      	nop
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	e000ed00 	.word	0xe000ed00

080124ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fe fc7f 	bl	8010dfe <USBD_LL_Resume>
}
 8012500:	bf00      	nop
 8012502:	3708      	adds	r7, #8
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	460b      	mov	r3, r1
 8012512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801251a:	78fa      	ldrb	r2, [r7, #3]
 801251c:	4611      	mov	r1, r2
 801251e:	4618      	mov	r0, r3
 8012520:	f7fe fcd7 	bl	8010ed2 <USBD_LL_IsoOUTIncomplete>
}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	460b      	mov	r3, r1
 8012536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801253e:	78fa      	ldrb	r2, [r7, #3]
 8012540:	4611      	mov	r1, r2
 8012542:	4618      	mov	r0, r3
 8012544:	f7fe fc93 	bl	8010e6e <USBD_LL_IsoINIncomplete>
}
 8012548:	bf00      	nop
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801255e:	4618      	mov	r0, r3
 8012560:	f7fe fce9 	bl	8010f36 <USBD_LL_DevConnected>
}
 8012564:	bf00      	nop
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801257a:	4618      	mov	r0, r3
 801257c:	f7fe fce6 	bl	8010f4c <USBD_LL_DevDisconnected>
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d13c      	bne.n	8012612 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012598:	4a20      	ldr	r2, [pc, #128]	@ (801261c <USBD_LL_Init+0x94>)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a1e      	ldr	r2, [pc, #120]	@ (801261c <USBD_LL_Init+0x94>)
 80125a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80125a8:	4b1c      	ldr	r3, [pc, #112]	@ (801261c <USBD_LL_Init+0x94>)
 80125aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80125ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80125b0:	4b1a      	ldr	r3, [pc, #104]	@ (801261c <USBD_LL_Init+0x94>)
 80125b2:	2204      	movs	r2, #4
 80125b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80125b6:	4b19      	ldr	r3, [pc, #100]	@ (801261c <USBD_LL_Init+0x94>)
 80125b8:	2202      	movs	r2, #2
 80125ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80125bc:	4b17      	ldr	r3, [pc, #92]	@ (801261c <USBD_LL_Init+0x94>)
 80125be:	2200      	movs	r2, #0
 80125c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80125c2:	4b16      	ldr	r3, [pc, #88]	@ (801261c <USBD_LL_Init+0x94>)
 80125c4:	2202      	movs	r2, #2
 80125c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80125c8:	4b14      	ldr	r3, [pc, #80]	@ (801261c <USBD_LL_Init+0x94>)
 80125ca:	2200      	movs	r2, #0
 80125cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80125ce:	4b13      	ldr	r3, [pc, #76]	@ (801261c <USBD_LL_Init+0x94>)
 80125d0:	2200      	movs	r2, #0
 80125d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80125d4:	4b11      	ldr	r3, [pc, #68]	@ (801261c <USBD_LL_Init+0x94>)
 80125d6:	2200      	movs	r2, #0
 80125d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80125da:	4b10      	ldr	r3, [pc, #64]	@ (801261c <USBD_LL_Init+0x94>)
 80125dc:	2200      	movs	r2, #0
 80125de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80125e0:	4b0e      	ldr	r3, [pc, #56]	@ (801261c <USBD_LL_Init+0x94>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80125e6:	480d      	ldr	r0, [pc, #52]	@ (801261c <USBD_LL_Init+0x94>)
 80125e8:	f7f8 fb09 	bl	800abfe <HAL_PCD_Init>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d001      	beq.n	80125f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80125f2:	f7f2 fee5 	bl	80053c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80125f6:	2180      	movs	r1, #128	@ 0x80
 80125f8:	4808      	ldr	r0, [pc, #32]	@ (801261c <USBD_LL_Init+0x94>)
 80125fa:	f7f9 fd36 	bl	800c06a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80125fe:	2240      	movs	r2, #64	@ 0x40
 8012600:	2100      	movs	r1, #0
 8012602:	4806      	ldr	r0, [pc, #24]	@ (801261c <USBD_LL_Init+0x94>)
 8012604:	f7f9 fcea 	bl	800bfdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012608:	2280      	movs	r2, #128	@ 0x80
 801260a:	2101      	movs	r1, #1
 801260c:	4803      	ldr	r0, [pc, #12]	@ (801261c <USBD_LL_Init+0x94>)
 801260e:	f7f9 fce5 	bl	800bfdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	20002014 	.word	0x20002014

08012620 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801262c:	2300      	movs	r3, #0
 801262e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012636:	4618      	mov	r0, r3
 8012638:	f7f8 fbf0 	bl	800ae1c <HAL_PCD_Start>
 801263c:	4603      	mov	r3, r0
 801263e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012640:	7bfb      	ldrb	r3, [r7, #15]
 8012642:	4618      	mov	r0, r3
 8012644:	f000 f942 	bl	80128cc <USBD_Get_USB_Status>
 8012648:	4603      	mov	r3, r0
 801264a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801264c:	7bbb      	ldrb	r3, [r7, #14]
}
 801264e:	4618      	mov	r0, r3
 8012650:	3710      	adds	r7, #16
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012656:	b580      	push	{r7, lr}
 8012658:	b084      	sub	sp, #16
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
 801265e:	4608      	mov	r0, r1
 8012660:	4611      	mov	r1, r2
 8012662:	461a      	mov	r2, r3
 8012664:	4603      	mov	r3, r0
 8012666:	70fb      	strb	r3, [r7, #3]
 8012668:	460b      	mov	r3, r1
 801266a:	70bb      	strb	r3, [r7, #2]
 801266c:	4613      	mov	r3, r2
 801266e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012670:	2300      	movs	r3, #0
 8012672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801267e:	78bb      	ldrb	r3, [r7, #2]
 8012680:	883a      	ldrh	r2, [r7, #0]
 8012682:	78f9      	ldrb	r1, [r7, #3]
 8012684:	f7f9 f8c4 	bl	800b810 <HAL_PCD_EP_Open>
 8012688:	4603      	mov	r3, r0
 801268a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801268c:	7bfb      	ldrb	r3, [r7, #15]
 801268e:	4618      	mov	r0, r3
 8012690:	f000 f91c 	bl	80128cc <USBD_Get_USB_Status>
 8012694:	4603      	mov	r3, r0
 8012696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012698:	7bbb      	ldrb	r3, [r7, #14]
}
 801269a:	4618      	mov	r0, r3
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}

080126a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b084      	sub	sp, #16
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	460b      	mov	r3, r1
 80126ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126ae:	2300      	movs	r3, #0
 80126b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126b2:	2300      	movs	r3, #0
 80126b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126bc:	78fa      	ldrb	r2, [r7, #3]
 80126be:	4611      	mov	r1, r2
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7f9 f90f 	bl	800b8e4 <HAL_PCD_EP_Close>
 80126c6:	4603      	mov	r3, r0
 80126c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f000 f8fd 	bl	80128cc <USBD_Get_USB_Status>
 80126d2:	4603      	mov	r3, r0
 80126d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	460b      	mov	r3, r1
 80126ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126ec:	2300      	movs	r3, #0
 80126ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126f0:	2300      	movs	r3, #0
 80126f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126fa:	78fa      	ldrb	r2, [r7, #3]
 80126fc:	4611      	mov	r1, r2
 80126fe:	4618      	mov	r0, r3
 8012700:	f7f9 f9c7 	bl	800ba92 <HAL_PCD_EP_SetStall>
 8012704:	4603      	mov	r3, r0
 8012706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012708:	7bfb      	ldrb	r3, [r7, #15]
 801270a:	4618      	mov	r0, r3
 801270c:	f000 f8de 	bl	80128cc <USBD_Get_USB_Status>
 8012710:	4603      	mov	r3, r0
 8012712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012714:	7bbb      	ldrb	r3, [r7, #14]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3710      	adds	r7, #16
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b084      	sub	sp, #16
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	460b      	mov	r3, r1
 8012728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801272a:	2300      	movs	r3, #0
 801272c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801272e:	2300      	movs	r3, #0
 8012730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012738:	78fa      	ldrb	r2, [r7, #3]
 801273a:	4611      	mov	r1, r2
 801273c:	4618      	mov	r0, r3
 801273e:	f7f9 fa0b 	bl	800bb58 <HAL_PCD_EP_ClrStall>
 8012742:	4603      	mov	r3, r0
 8012744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012746:	7bfb      	ldrb	r3, [r7, #15]
 8012748:	4618      	mov	r0, r3
 801274a:	f000 f8bf 	bl	80128cc <USBD_Get_USB_Status>
 801274e:	4603      	mov	r3, r0
 8012750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012752:	7bbb      	ldrb	r3, [r7, #14]
}
 8012754:	4618      	mov	r0, r3
 8012756:	3710      	adds	r7, #16
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801275c:	b480      	push	{r7}
 801275e:	b085      	sub	sp, #20
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	460b      	mov	r3, r1
 8012766:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801276e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012774:	2b00      	cmp	r3, #0
 8012776:	da0b      	bge.n	8012790 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012778:	78fb      	ldrb	r3, [r7, #3]
 801277a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801277e:	68f9      	ldr	r1, [r7, #12]
 8012780:	4613      	mov	r3, r2
 8012782:	00db      	lsls	r3, r3, #3
 8012784:	4413      	add	r3, r2
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	440b      	add	r3, r1
 801278a:	3316      	adds	r3, #22
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	e00b      	b.n	80127a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012790:	78fb      	ldrb	r3, [r7, #3]
 8012792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012796:	68f9      	ldr	r1, [r7, #12]
 8012798:	4613      	mov	r3, r2
 801279a:	00db      	lsls	r3, r3, #3
 801279c:	4413      	add	r3, r2
 801279e:	009b      	lsls	r3, r3, #2
 80127a0:	440b      	add	r3, r1
 80127a2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80127a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3714      	adds	r7, #20
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr

080127b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	460b      	mov	r3, r1
 80127be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127c4:	2300      	movs	r3, #0
 80127c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80127ce:	78fa      	ldrb	r2, [r7, #3]
 80127d0:	4611      	mov	r1, r2
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7f8 fff8 	bl	800b7c8 <HAL_PCD_SetAddress>
 80127d8:	4603      	mov	r3, r0
 80127da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127dc:	7bfb      	ldrb	r3, [r7, #15]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 f874 	bl	80128cc <USBD_Get_USB_Status>
 80127e4:	4603      	mov	r3, r0
 80127e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b086      	sub	sp, #24
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	60f8      	str	r0, [r7, #12]
 80127fa:	607a      	str	r2, [r7, #4]
 80127fc:	603b      	str	r3, [r7, #0]
 80127fe:	460b      	mov	r3, r1
 8012800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012802:	2300      	movs	r3, #0
 8012804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012806:	2300      	movs	r3, #0
 8012808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012810:	7af9      	ldrb	r1, [r7, #11]
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	f7f9 f902 	bl	800ba1e <HAL_PCD_EP_Transmit>
 801281a:	4603      	mov	r3, r0
 801281c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801281e:	7dfb      	ldrb	r3, [r7, #23]
 8012820:	4618      	mov	r0, r3
 8012822:	f000 f853 	bl	80128cc <USBD_Get_USB_Status>
 8012826:	4603      	mov	r3, r0
 8012828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801282a:	7dbb      	ldrb	r3, [r7, #22]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3718      	adds	r7, #24
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	607a      	str	r2, [r7, #4]
 801283e:	603b      	str	r3, [r7, #0]
 8012840:	460b      	mov	r3, r1
 8012842:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012844:	2300      	movs	r3, #0
 8012846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012848:	2300      	movs	r3, #0
 801284a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012852:	7af9      	ldrb	r1, [r7, #11]
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	f7f9 f88e 	bl	800b978 <HAL_PCD_EP_Receive>
 801285c:	4603      	mov	r3, r0
 801285e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012860:	7dfb      	ldrb	r3, [r7, #23]
 8012862:	4618      	mov	r0, r3
 8012864:	f000 f832 	bl	80128cc <USBD_Get_USB_Status>
 8012868:	4603      	mov	r3, r0
 801286a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801286c:	7dbb      	ldrb	r3, [r7, #22]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3718      	adds	r7, #24
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b082      	sub	sp, #8
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
 801287e:	460b      	mov	r3, r1
 8012880:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012888:	78fa      	ldrb	r2, [r7, #3]
 801288a:	4611      	mov	r1, r2
 801288c:	4618      	mov	r0, r3
 801288e:	f7f9 f8ae 	bl	800b9ee <HAL_PCD_EP_GetRxCount>
 8012892:	4603      	mov	r3, r0
}
 8012894:	4618      	mov	r0, r3
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801289c:	b480      	push	{r7}
 801289e:	b083      	sub	sp, #12
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80128a4:	4b03      	ldr	r3, [pc, #12]	@ (80128b4 <USBD_static_malloc+0x18>)
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	370c      	adds	r7, #12
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	200024f8 	.word	0x200024f8

080128b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]

}
 80128c0:	bf00      	nop
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	4603      	mov	r3, r0
 80128d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128d6:	2300      	movs	r3, #0
 80128d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80128da:	79fb      	ldrb	r3, [r7, #7]
 80128dc:	2b03      	cmp	r3, #3
 80128de:	d817      	bhi.n	8012910 <USBD_Get_USB_Status+0x44>
 80128e0:	a201      	add	r2, pc, #4	@ (adr r2, 80128e8 <USBD_Get_USB_Status+0x1c>)
 80128e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128e6:	bf00      	nop
 80128e8:	080128f9 	.word	0x080128f9
 80128ec:	080128ff 	.word	0x080128ff
 80128f0:	08012905 	.word	0x08012905
 80128f4:	0801290b 	.word	0x0801290b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80128f8:	2300      	movs	r3, #0
 80128fa:	73fb      	strb	r3, [r7, #15]
    break;
 80128fc:	e00b      	b.n	8012916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80128fe:	2303      	movs	r3, #3
 8012900:	73fb      	strb	r3, [r7, #15]
    break;
 8012902:	e008      	b.n	8012916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012904:	2301      	movs	r3, #1
 8012906:	73fb      	strb	r3, [r7, #15]
    break;
 8012908:	e005      	b.n	8012916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801290a:	2303      	movs	r3, #3
 801290c:	73fb      	strb	r3, [r7, #15]
    break;
 801290e:	e002      	b.n	8012916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012910:	2303      	movs	r3, #3
 8012912:	73fb      	strb	r3, [r7, #15]
    break;
 8012914:	bf00      	nop
  }
  return usb_status;
 8012916:	7bfb      	ldrb	r3, [r7, #15]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3714      	adds	r7, #20
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <__itoa>:
 8012924:	1e93      	subs	r3, r2, #2
 8012926:	2b22      	cmp	r3, #34	@ 0x22
 8012928:	b510      	push	{r4, lr}
 801292a:	460c      	mov	r4, r1
 801292c:	d904      	bls.n	8012938 <__itoa+0x14>
 801292e:	2300      	movs	r3, #0
 8012930:	700b      	strb	r3, [r1, #0]
 8012932:	461c      	mov	r4, r3
 8012934:	4620      	mov	r0, r4
 8012936:	bd10      	pop	{r4, pc}
 8012938:	2a0a      	cmp	r2, #10
 801293a:	d109      	bne.n	8012950 <__itoa+0x2c>
 801293c:	2800      	cmp	r0, #0
 801293e:	da07      	bge.n	8012950 <__itoa+0x2c>
 8012940:	232d      	movs	r3, #45	@ 0x2d
 8012942:	700b      	strb	r3, [r1, #0]
 8012944:	4240      	negs	r0, r0
 8012946:	2101      	movs	r1, #1
 8012948:	4421      	add	r1, r4
 801294a:	f000 f805 	bl	8012958 <__utoa>
 801294e:	e7f1      	b.n	8012934 <__itoa+0x10>
 8012950:	2100      	movs	r1, #0
 8012952:	e7f9      	b.n	8012948 <__itoa+0x24>

08012954 <itoa>:
 8012954:	f7ff bfe6 	b.w	8012924 <__itoa>

08012958 <__utoa>:
 8012958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295a:	4c1f      	ldr	r4, [pc, #124]	@ (80129d8 <__utoa+0x80>)
 801295c:	b08b      	sub	sp, #44	@ 0x2c
 801295e:	4605      	mov	r5, r0
 8012960:	460b      	mov	r3, r1
 8012962:	466e      	mov	r6, sp
 8012964:	f104 0c20 	add.w	ip, r4, #32
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	6861      	ldr	r1, [r4, #4]
 801296c:	4637      	mov	r7, r6
 801296e:	c703      	stmia	r7!, {r0, r1}
 8012970:	3408      	adds	r4, #8
 8012972:	4564      	cmp	r4, ip
 8012974:	463e      	mov	r6, r7
 8012976:	d1f7      	bne.n	8012968 <__utoa+0x10>
 8012978:	7921      	ldrb	r1, [r4, #4]
 801297a:	7139      	strb	r1, [r7, #4]
 801297c:	1e91      	subs	r1, r2, #2
 801297e:	6820      	ldr	r0, [r4, #0]
 8012980:	6038      	str	r0, [r7, #0]
 8012982:	2922      	cmp	r1, #34	@ 0x22
 8012984:	f04f 0100 	mov.w	r1, #0
 8012988:	d904      	bls.n	8012994 <__utoa+0x3c>
 801298a:	7019      	strb	r1, [r3, #0]
 801298c:	460b      	mov	r3, r1
 801298e:	4618      	mov	r0, r3
 8012990:	b00b      	add	sp, #44	@ 0x2c
 8012992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012994:	1e58      	subs	r0, r3, #1
 8012996:	4684      	mov	ip, r0
 8012998:	fbb5 f7f2 	udiv	r7, r5, r2
 801299c:	fb02 5617 	mls	r6, r2, r7, r5
 80129a0:	3628      	adds	r6, #40	@ 0x28
 80129a2:	446e      	add	r6, sp
 80129a4:	460c      	mov	r4, r1
 80129a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80129aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80129ae:	462e      	mov	r6, r5
 80129b0:	42b2      	cmp	r2, r6
 80129b2:	f101 0101 	add.w	r1, r1, #1
 80129b6:	463d      	mov	r5, r7
 80129b8:	d9ee      	bls.n	8012998 <__utoa+0x40>
 80129ba:	2200      	movs	r2, #0
 80129bc:	545a      	strb	r2, [r3, r1]
 80129be:	1919      	adds	r1, r3, r4
 80129c0:	1aa5      	subs	r5, r4, r2
 80129c2:	42aa      	cmp	r2, r5
 80129c4:	dae3      	bge.n	801298e <__utoa+0x36>
 80129c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80129ca:	780e      	ldrb	r6, [r1, #0]
 80129cc:	7006      	strb	r6, [r0, #0]
 80129ce:	3201      	adds	r2, #1
 80129d0:	f801 5901 	strb.w	r5, [r1], #-1
 80129d4:	e7f4      	b.n	80129c0 <__utoa+0x68>
 80129d6:	bf00      	nop
 80129d8:	08014b98 	.word	0x08014b98

080129dc <siprintf>:
 80129dc:	b40e      	push	{r1, r2, r3}
 80129de:	b510      	push	{r4, lr}
 80129e0:	b09d      	sub	sp, #116	@ 0x74
 80129e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80129e4:	9002      	str	r0, [sp, #8]
 80129e6:	9006      	str	r0, [sp, #24]
 80129e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80129ec:	480a      	ldr	r0, [pc, #40]	@ (8012a18 <siprintf+0x3c>)
 80129ee:	9107      	str	r1, [sp, #28]
 80129f0:	9104      	str	r1, [sp, #16]
 80129f2:	490a      	ldr	r1, [pc, #40]	@ (8012a1c <siprintf+0x40>)
 80129f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80129f8:	9105      	str	r1, [sp, #20]
 80129fa:	2400      	movs	r4, #0
 80129fc:	a902      	add	r1, sp, #8
 80129fe:	6800      	ldr	r0, [r0, #0]
 8012a00:	9301      	str	r3, [sp, #4]
 8012a02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012a04:	f000 f9b6 	bl	8012d74 <_svfiprintf_r>
 8012a08:	9b02      	ldr	r3, [sp, #8]
 8012a0a:	701c      	strb	r4, [r3, #0]
 8012a0c:	b01d      	add	sp, #116	@ 0x74
 8012a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a12:	b003      	add	sp, #12
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop
 8012a18:	20000114 	.word	0x20000114
 8012a1c:	ffff0208 	.word	0xffff0208

08012a20 <memset>:
 8012a20:	4402      	add	r2, r0
 8012a22:	4603      	mov	r3, r0
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d100      	bne.n	8012a2a <memset+0xa>
 8012a28:	4770      	bx	lr
 8012a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8012a2e:	e7f9      	b.n	8012a24 <memset+0x4>

08012a30 <strncpy>:
 8012a30:	b510      	push	{r4, lr}
 8012a32:	3901      	subs	r1, #1
 8012a34:	4603      	mov	r3, r0
 8012a36:	b132      	cbz	r2, 8012a46 <strncpy+0x16>
 8012a38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a3c:	f803 4b01 	strb.w	r4, [r3], #1
 8012a40:	3a01      	subs	r2, #1
 8012a42:	2c00      	cmp	r4, #0
 8012a44:	d1f7      	bne.n	8012a36 <strncpy+0x6>
 8012a46:	441a      	add	r2, r3
 8012a48:	2100      	movs	r1, #0
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d100      	bne.n	8012a50 <strncpy+0x20>
 8012a4e:	bd10      	pop	{r4, pc}
 8012a50:	f803 1b01 	strb.w	r1, [r3], #1
 8012a54:	e7f9      	b.n	8012a4a <strncpy+0x1a>
	...

08012a58 <__errno>:
 8012a58:	4b01      	ldr	r3, [pc, #4]	@ (8012a60 <__errno+0x8>)
 8012a5a:	6818      	ldr	r0, [r3, #0]
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	20000114 	.word	0x20000114

08012a64 <__libc_init_array>:
 8012a64:	b570      	push	{r4, r5, r6, lr}
 8012a66:	4d0d      	ldr	r5, [pc, #52]	@ (8012a9c <__libc_init_array+0x38>)
 8012a68:	4c0d      	ldr	r4, [pc, #52]	@ (8012aa0 <__libc_init_array+0x3c>)
 8012a6a:	1b64      	subs	r4, r4, r5
 8012a6c:	10a4      	asrs	r4, r4, #2
 8012a6e:	2600      	movs	r6, #0
 8012a70:	42a6      	cmp	r6, r4
 8012a72:	d109      	bne.n	8012a88 <__libc_init_array+0x24>
 8012a74:	4d0b      	ldr	r5, [pc, #44]	@ (8012aa4 <__libc_init_array+0x40>)
 8012a76:	4c0c      	ldr	r4, [pc, #48]	@ (8012aa8 <__libc_init_array+0x44>)
 8012a78:	f000 fc64 	bl	8013344 <_init>
 8012a7c:	1b64      	subs	r4, r4, r5
 8012a7e:	10a4      	asrs	r4, r4, #2
 8012a80:	2600      	movs	r6, #0
 8012a82:	42a6      	cmp	r6, r4
 8012a84:	d105      	bne.n	8012a92 <__libc_init_array+0x2e>
 8012a86:	bd70      	pop	{r4, r5, r6, pc}
 8012a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a8c:	4798      	blx	r3
 8012a8e:	3601      	adds	r6, #1
 8012a90:	e7ee      	b.n	8012a70 <__libc_init_array+0xc>
 8012a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a96:	4798      	blx	r3
 8012a98:	3601      	adds	r6, #1
 8012a9a:	e7f2      	b.n	8012a82 <__libc_init_array+0x1e>
 8012a9c:	08014bf8 	.word	0x08014bf8
 8012aa0:	08014bf8 	.word	0x08014bf8
 8012aa4:	08014bf8 	.word	0x08014bf8
 8012aa8:	08014bfc 	.word	0x08014bfc

08012aac <__retarget_lock_acquire_recursive>:
 8012aac:	4770      	bx	lr

08012aae <__retarget_lock_release_recursive>:
 8012aae:	4770      	bx	lr

08012ab0 <memcpy>:
 8012ab0:	440a      	add	r2, r1
 8012ab2:	4291      	cmp	r1, r2
 8012ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ab8:	d100      	bne.n	8012abc <memcpy+0xc>
 8012aba:	4770      	bx	lr
 8012abc:	b510      	push	{r4, lr}
 8012abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ac6:	4291      	cmp	r1, r2
 8012ac8:	d1f9      	bne.n	8012abe <memcpy+0xe>
 8012aca:	bd10      	pop	{r4, pc}

08012acc <_free_r>:
 8012acc:	b538      	push	{r3, r4, r5, lr}
 8012ace:	4605      	mov	r5, r0
 8012ad0:	2900      	cmp	r1, #0
 8012ad2:	d041      	beq.n	8012b58 <_free_r+0x8c>
 8012ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ad8:	1f0c      	subs	r4, r1, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	bfb8      	it	lt
 8012ade:	18e4      	addlt	r4, r4, r3
 8012ae0:	f000 f8e0 	bl	8012ca4 <__malloc_lock>
 8012ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8012b5c <_free_r+0x90>)
 8012ae6:	6813      	ldr	r3, [r2, #0]
 8012ae8:	b933      	cbnz	r3, 8012af8 <_free_r+0x2c>
 8012aea:	6063      	str	r3, [r4, #4]
 8012aec:	6014      	str	r4, [r2, #0]
 8012aee:	4628      	mov	r0, r5
 8012af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012af4:	f000 b8dc 	b.w	8012cb0 <__malloc_unlock>
 8012af8:	42a3      	cmp	r3, r4
 8012afa:	d908      	bls.n	8012b0e <_free_r+0x42>
 8012afc:	6820      	ldr	r0, [r4, #0]
 8012afe:	1821      	adds	r1, r4, r0
 8012b00:	428b      	cmp	r3, r1
 8012b02:	bf01      	itttt	eq
 8012b04:	6819      	ldreq	r1, [r3, #0]
 8012b06:	685b      	ldreq	r3, [r3, #4]
 8012b08:	1809      	addeq	r1, r1, r0
 8012b0a:	6021      	streq	r1, [r4, #0]
 8012b0c:	e7ed      	b.n	8012aea <_free_r+0x1e>
 8012b0e:	461a      	mov	r2, r3
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	b10b      	cbz	r3, 8012b18 <_free_r+0x4c>
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	d9fa      	bls.n	8012b0e <_free_r+0x42>
 8012b18:	6811      	ldr	r1, [r2, #0]
 8012b1a:	1850      	adds	r0, r2, r1
 8012b1c:	42a0      	cmp	r0, r4
 8012b1e:	d10b      	bne.n	8012b38 <_free_r+0x6c>
 8012b20:	6820      	ldr	r0, [r4, #0]
 8012b22:	4401      	add	r1, r0
 8012b24:	1850      	adds	r0, r2, r1
 8012b26:	4283      	cmp	r3, r0
 8012b28:	6011      	str	r1, [r2, #0]
 8012b2a:	d1e0      	bne.n	8012aee <_free_r+0x22>
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	6053      	str	r3, [r2, #4]
 8012b32:	4408      	add	r0, r1
 8012b34:	6010      	str	r0, [r2, #0]
 8012b36:	e7da      	b.n	8012aee <_free_r+0x22>
 8012b38:	d902      	bls.n	8012b40 <_free_r+0x74>
 8012b3a:	230c      	movs	r3, #12
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	e7d6      	b.n	8012aee <_free_r+0x22>
 8012b40:	6820      	ldr	r0, [r4, #0]
 8012b42:	1821      	adds	r1, r4, r0
 8012b44:	428b      	cmp	r3, r1
 8012b46:	bf04      	itt	eq
 8012b48:	6819      	ldreq	r1, [r3, #0]
 8012b4a:	685b      	ldreq	r3, [r3, #4]
 8012b4c:	6063      	str	r3, [r4, #4]
 8012b4e:	bf04      	itt	eq
 8012b50:	1809      	addeq	r1, r1, r0
 8012b52:	6021      	streq	r1, [r4, #0]
 8012b54:	6054      	str	r4, [r2, #4]
 8012b56:	e7ca      	b.n	8012aee <_free_r+0x22>
 8012b58:	bd38      	pop	{r3, r4, r5, pc}
 8012b5a:	bf00      	nop
 8012b5c:	2000285c 	.word	0x2000285c

08012b60 <sbrk_aligned>:
 8012b60:	b570      	push	{r4, r5, r6, lr}
 8012b62:	4e0f      	ldr	r6, [pc, #60]	@ (8012ba0 <sbrk_aligned+0x40>)
 8012b64:	460c      	mov	r4, r1
 8012b66:	6831      	ldr	r1, [r6, #0]
 8012b68:	4605      	mov	r5, r0
 8012b6a:	b911      	cbnz	r1, 8012b72 <sbrk_aligned+0x12>
 8012b6c:	f000 fba4 	bl	80132b8 <_sbrk_r>
 8012b70:	6030      	str	r0, [r6, #0]
 8012b72:	4621      	mov	r1, r4
 8012b74:	4628      	mov	r0, r5
 8012b76:	f000 fb9f 	bl	80132b8 <_sbrk_r>
 8012b7a:	1c43      	adds	r3, r0, #1
 8012b7c:	d103      	bne.n	8012b86 <sbrk_aligned+0x26>
 8012b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8012b82:	4620      	mov	r0, r4
 8012b84:	bd70      	pop	{r4, r5, r6, pc}
 8012b86:	1cc4      	adds	r4, r0, #3
 8012b88:	f024 0403 	bic.w	r4, r4, #3
 8012b8c:	42a0      	cmp	r0, r4
 8012b8e:	d0f8      	beq.n	8012b82 <sbrk_aligned+0x22>
 8012b90:	1a21      	subs	r1, r4, r0
 8012b92:	4628      	mov	r0, r5
 8012b94:	f000 fb90 	bl	80132b8 <_sbrk_r>
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d1f2      	bne.n	8012b82 <sbrk_aligned+0x22>
 8012b9c:	e7ef      	b.n	8012b7e <sbrk_aligned+0x1e>
 8012b9e:	bf00      	nop
 8012ba0:	20002858 	.word	0x20002858

08012ba4 <_malloc_r>:
 8012ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ba8:	1ccd      	adds	r5, r1, #3
 8012baa:	f025 0503 	bic.w	r5, r5, #3
 8012bae:	3508      	adds	r5, #8
 8012bb0:	2d0c      	cmp	r5, #12
 8012bb2:	bf38      	it	cc
 8012bb4:	250c      	movcc	r5, #12
 8012bb6:	2d00      	cmp	r5, #0
 8012bb8:	4606      	mov	r6, r0
 8012bba:	db01      	blt.n	8012bc0 <_malloc_r+0x1c>
 8012bbc:	42a9      	cmp	r1, r5
 8012bbe:	d904      	bls.n	8012bca <_malloc_r+0x26>
 8012bc0:	230c      	movs	r3, #12
 8012bc2:	6033      	str	r3, [r6, #0]
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ca0 <_malloc_r+0xfc>
 8012bce:	f000 f869 	bl	8012ca4 <__malloc_lock>
 8012bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8012bd6:	461c      	mov	r4, r3
 8012bd8:	bb44      	cbnz	r4, 8012c2c <_malloc_r+0x88>
 8012bda:	4629      	mov	r1, r5
 8012bdc:	4630      	mov	r0, r6
 8012bde:	f7ff ffbf 	bl	8012b60 <sbrk_aligned>
 8012be2:	1c43      	adds	r3, r0, #1
 8012be4:	4604      	mov	r4, r0
 8012be6:	d158      	bne.n	8012c9a <_malloc_r+0xf6>
 8012be8:	f8d8 4000 	ldr.w	r4, [r8]
 8012bec:	4627      	mov	r7, r4
 8012bee:	2f00      	cmp	r7, #0
 8012bf0:	d143      	bne.n	8012c7a <_malloc_r+0xd6>
 8012bf2:	2c00      	cmp	r4, #0
 8012bf4:	d04b      	beq.n	8012c8e <_malloc_r+0xea>
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	4639      	mov	r1, r7
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	eb04 0903 	add.w	r9, r4, r3
 8012c00:	f000 fb5a 	bl	80132b8 <_sbrk_r>
 8012c04:	4581      	cmp	r9, r0
 8012c06:	d142      	bne.n	8012c8e <_malloc_r+0xea>
 8012c08:	6821      	ldr	r1, [r4, #0]
 8012c0a:	1a6d      	subs	r5, r5, r1
 8012c0c:	4629      	mov	r1, r5
 8012c0e:	4630      	mov	r0, r6
 8012c10:	f7ff ffa6 	bl	8012b60 <sbrk_aligned>
 8012c14:	3001      	adds	r0, #1
 8012c16:	d03a      	beq.n	8012c8e <_malloc_r+0xea>
 8012c18:	6823      	ldr	r3, [r4, #0]
 8012c1a:	442b      	add	r3, r5
 8012c1c:	6023      	str	r3, [r4, #0]
 8012c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c22:	685a      	ldr	r2, [r3, #4]
 8012c24:	bb62      	cbnz	r2, 8012c80 <_malloc_r+0xdc>
 8012c26:	f8c8 7000 	str.w	r7, [r8]
 8012c2a:	e00f      	b.n	8012c4c <_malloc_r+0xa8>
 8012c2c:	6822      	ldr	r2, [r4, #0]
 8012c2e:	1b52      	subs	r2, r2, r5
 8012c30:	d420      	bmi.n	8012c74 <_malloc_r+0xd0>
 8012c32:	2a0b      	cmp	r2, #11
 8012c34:	d917      	bls.n	8012c66 <_malloc_r+0xc2>
 8012c36:	1961      	adds	r1, r4, r5
 8012c38:	42a3      	cmp	r3, r4
 8012c3a:	6025      	str	r5, [r4, #0]
 8012c3c:	bf18      	it	ne
 8012c3e:	6059      	strne	r1, [r3, #4]
 8012c40:	6863      	ldr	r3, [r4, #4]
 8012c42:	bf08      	it	eq
 8012c44:	f8c8 1000 	streq.w	r1, [r8]
 8012c48:	5162      	str	r2, [r4, r5]
 8012c4a:	604b      	str	r3, [r1, #4]
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	f000 f82f 	bl	8012cb0 <__malloc_unlock>
 8012c52:	f104 000b 	add.w	r0, r4, #11
 8012c56:	1d23      	adds	r3, r4, #4
 8012c58:	f020 0007 	bic.w	r0, r0, #7
 8012c5c:	1ac2      	subs	r2, r0, r3
 8012c5e:	bf1c      	itt	ne
 8012c60:	1a1b      	subne	r3, r3, r0
 8012c62:	50a3      	strne	r3, [r4, r2]
 8012c64:	e7af      	b.n	8012bc6 <_malloc_r+0x22>
 8012c66:	6862      	ldr	r2, [r4, #4]
 8012c68:	42a3      	cmp	r3, r4
 8012c6a:	bf0c      	ite	eq
 8012c6c:	f8c8 2000 	streq.w	r2, [r8]
 8012c70:	605a      	strne	r2, [r3, #4]
 8012c72:	e7eb      	b.n	8012c4c <_malloc_r+0xa8>
 8012c74:	4623      	mov	r3, r4
 8012c76:	6864      	ldr	r4, [r4, #4]
 8012c78:	e7ae      	b.n	8012bd8 <_malloc_r+0x34>
 8012c7a:	463c      	mov	r4, r7
 8012c7c:	687f      	ldr	r7, [r7, #4]
 8012c7e:	e7b6      	b.n	8012bee <_malloc_r+0x4a>
 8012c80:	461a      	mov	r2, r3
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	42a3      	cmp	r3, r4
 8012c86:	d1fb      	bne.n	8012c80 <_malloc_r+0xdc>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	6053      	str	r3, [r2, #4]
 8012c8c:	e7de      	b.n	8012c4c <_malloc_r+0xa8>
 8012c8e:	230c      	movs	r3, #12
 8012c90:	6033      	str	r3, [r6, #0]
 8012c92:	4630      	mov	r0, r6
 8012c94:	f000 f80c 	bl	8012cb0 <__malloc_unlock>
 8012c98:	e794      	b.n	8012bc4 <_malloc_r+0x20>
 8012c9a:	6005      	str	r5, [r0, #0]
 8012c9c:	e7d6      	b.n	8012c4c <_malloc_r+0xa8>
 8012c9e:	bf00      	nop
 8012ca0:	2000285c 	.word	0x2000285c

08012ca4 <__malloc_lock>:
 8012ca4:	4801      	ldr	r0, [pc, #4]	@ (8012cac <__malloc_lock+0x8>)
 8012ca6:	f7ff bf01 	b.w	8012aac <__retarget_lock_acquire_recursive>
 8012caa:	bf00      	nop
 8012cac:	20002854 	.word	0x20002854

08012cb0 <__malloc_unlock>:
 8012cb0:	4801      	ldr	r0, [pc, #4]	@ (8012cb8 <__malloc_unlock+0x8>)
 8012cb2:	f7ff befc 	b.w	8012aae <__retarget_lock_release_recursive>
 8012cb6:	bf00      	nop
 8012cb8:	20002854 	.word	0x20002854

08012cbc <__ssputs_r>:
 8012cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc0:	688e      	ldr	r6, [r1, #8]
 8012cc2:	461f      	mov	r7, r3
 8012cc4:	42be      	cmp	r6, r7
 8012cc6:	680b      	ldr	r3, [r1, #0]
 8012cc8:	4682      	mov	sl, r0
 8012cca:	460c      	mov	r4, r1
 8012ccc:	4690      	mov	r8, r2
 8012cce:	d82d      	bhi.n	8012d2c <__ssputs_r+0x70>
 8012cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012cd8:	d026      	beq.n	8012d28 <__ssputs_r+0x6c>
 8012cda:	6965      	ldr	r5, [r4, #20]
 8012cdc:	6909      	ldr	r1, [r1, #16]
 8012cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ce2:	eba3 0901 	sub.w	r9, r3, r1
 8012ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012cea:	1c7b      	adds	r3, r7, #1
 8012cec:	444b      	add	r3, r9
 8012cee:	106d      	asrs	r5, r5, #1
 8012cf0:	429d      	cmp	r5, r3
 8012cf2:	bf38      	it	cc
 8012cf4:	461d      	movcc	r5, r3
 8012cf6:	0553      	lsls	r3, r2, #21
 8012cf8:	d527      	bpl.n	8012d4a <__ssputs_r+0x8e>
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	f7ff ff52 	bl	8012ba4 <_malloc_r>
 8012d00:	4606      	mov	r6, r0
 8012d02:	b360      	cbz	r0, 8012d5e <__ssputs_r+0xa2>
 8012d04:	6921      	ldr	r1, [r4, #16]
 8012d06:	464a      	mov	r2, r9
 8012d08:	f7ff fed2 	bl	8012ab0 <memcpy>
 8012d0c:	89a3      	ldrh	r3, [r4, #12]
 8012d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d16:	81a3      	strh	r3, [r4, #12]
 8012d18:	6126      	str	r6, [r4, #16]
 8012d1a:	6165      	str	r5, [r4, #20]
 8012d1c:	444e      	add	r6, r9
 8012d1e:	eba5 0509 	sub.w	r5, r5, r9
 8012d22:	6026      	str	r6, [r4, #0]
 8012d24:	60a5      	str	r5, [r4, #8]
 8012d26:	463e      	mov	r6, r7
 8012d28:	42be      	cmp	r6, r7
 8012d2a:	d900      	bls.n	8012d2e <__ssputs_r+0x72>
 8012d2c:	463e      	mov	r6, r7
 8012d2e:	6820      	ldr	r0, [r4, #0]
 8012d30:	4632      	mov	r2, r6
 8012d32:	4641      	mov	r1, r8
 8012d34:	f000 faa6 	bl	8013284 <memmove>
 8012d38:	68a3      	ldr	r3, [r4, #8]
 8012d3a:	1b9b      	subs	r3, r3, r6
 8012d3c:	60a3      	str	r3, [r4, #8]
 8012d3e:	6823      	ldr	r3, [r4, #0]
 8012d40:	4433      	add	r3, r6
 8012d42:	6023      	str	r3, [r4, #0]
 8012d44:	2000      	movs	r0, #0
 8012d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d4a:	462a      	mov	r2, r5
 8012d4c:	f000 fac4 	bl	80132d8 <_realloc_r>
 8012d50:	4606      	mov	r6, r0
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d1e0      	bne.n	8012d18 <__ssputs_r+0x5c>
 8012d56:	6921      	ldr	r1, [r4, #16]
 8012d58:	4650      	mov	r0, sl
 8012d5a:	f7ff feb7 	bl	8012acc <_free_r>
 8012d5e:	230c      	movs	r3, #12
 8012d60:	f8ca 3000 	str.w	r3, [sl]
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d6a:	81a3      	strh	r3, [r4, #12]
 8012d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d70:	e7e9      	b.n	8012d46 <__ssputs_r+0x8a>
	...

08012d74 <_svfiprintf_r>:
 8012d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d78:	4698      	mov	r8, r3
 8012d7a:	898b      	ldrh	r3, [r1, #12]
 8012d7c:	061b      	lsls	r3, r3, #24
 8012d7e:	b09d      	sub	sp, #116	@ 0x74
 8012d80:	4607      	mov	r7, r0
 8012d82:	460d      	mov	r5, r1
 8012d84:	4614      	mov	r4, r2
 8012d86:	d510      	bpl.n	8012daa <_svfiprintf_r+0x36>
 8012d88:	690b      	ldr	r3, [r1, #16]
 8012d8a:	b973      	cbnz	r3, 8012daa <_svfiprintf_r+0x36>
 8012d8c:	2140      	movs	r1, #64	@ 0x40
 8012d8e:	f7ff ff09 	bl	8012ba4 <_malloc_r>
 8012d92:	6028      	str	r0, [r5, #0]
 8012d94:	6128      	str	r0, [r5, #16]
 8012d96:	b930      	cbnz	r0, 8012da6 <_svfiprintf_r+0x32>
 8012d98:	230c      	movs	r3, #12
 8012d9a:	603b      	str	r3, [r7, #0]
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012da0:	b01d      	add	sp, #116	@ 0x74
 8012da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da6:	2340      	movs	r3, #64	@ 0x40
 8012da8:	616b      	str	r3, [r5, #20]
 8012daa:	2300      	movs	r3, #0
 8012dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dae:	2320      	movs	r3, #32
 8012db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012db8:	2330      	movs	r3, #48	@ 0x30
 8012dba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012f58 <_svfiprintf_r+0x1e4>
 8012dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012dc2:	f04f 0901 	mov.w	r9, #1
 8012dc6:	4623      	mov	r3, r4
 8012dc8:	469a      	mov	sl, r3
 8012dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dce:	b10a      	cbz	r2, 8012dd4 <_svfiprintf_r+0x60>
 8012dd0:	2a25      	cmp	r2, #37	@ 0x25
 8012dd2:	d1f9      	bne.n	8012dc8 <_svfiprintf_r+0x54>
 8012dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8012dd8:	d00b      	beq.n	8012df2 <_svfiprintf_r+0x7e>
 8012dda:	465b      	mov	r3, fp
 8012ddc:	4622      	mov	r2, r4
 8012dde:	4629      	mov	r1, r5
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7ff ff6b 	bl	8012cbc <__ssputs_r>
 8012de6:	3001      	adds	r0, #1
 8012de8:	f000 80a7 	beq.w	8012f3a <_svfiprintf_r+0x1c6>
 8012dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012dee:	445a      	add	r2, fp
 8012df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8012df2:	f89a 3000 	ldrb.w	r3, [sl]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f000 809f 	beq.w	8012f3a <_svfiprintf_r+0x1c6>
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8012e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e06:	f10a 0a01 	add.w	sl, sl, #1
 8012e0a:	9304      	str	r3, [sp, #16]
 8012e0c:	9307      	str	r3, [sp, #28]
 8012e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e14:	4654      	mov	r4, sl
 8012e16:	2205      	movs	r2, #5
 8012e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e1c:	484e      	ldr	r0, [pc, #312]	@ (8012f58 <_svfiprintf_r+0x1e4>)
 8012e1e:	f7ed f9e7 	bl	80001f0 <memchr>
 8012e22:	9a04      	ldr	r2, [sp, #16]
 8012e24:	b9d8      	cbnz	r0, 8012e5e <_svfiprintf_r+0xea>
 8012e26:	06d0      	lsls	r0, r2, #27
 8012e28:	bf44      	itt	mi
 8012e2a:	2320      	movmi	r3, #32
 8012e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e30:	0711      	lsls	r1, r2, #28
 8012e32:	bf44      	itt	mi
 8012e34:	232b      	movmi	r3, #43	@ 0x2b
 8012e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e40:	d015      	beq.n	8012e6e <_svfiprintf_r+0xfa>
 8012e42:	9a07      	ldr	r2, [sp, #28]
 8012e44:	4654      	mov	r4, sl
 8012e46:	2000      	movs	r0, #0
 8012e48:	f04f 0c0a 	mov.w	ip, #10
 8012e4c:	4621      	mov	r1, r4
 8012e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e52:	3b30      	subs	r3, #48	@ 0x30
 8012e54:	2b09      	cmp	r3, #9
 8012e56:	d94b      	bls.n	8012ef0 <_svfiprintf_r+0x17c>
 8012e58:	b1b0      	cbz	r0, 8012e88 <_svfiprintf_r+0x114>
 8012e5a:	9207      	str	r2, [sp, #28]
 8012e5c:	e014      	b.n	8012e88 <_svfiprintf_r+0x114>
 8012e5e:	eba0 0308 	sub.w	r3, r0, r8
 8012e62:	fa09 f303 	lsl.w	r3, r9, r3
 8012e66:	4313      	orrs	r3, r2
 8012e68:	9304      	str	r3, [sp, #16]
 8012e6a:	46a2      	mov	sl, r4
 8012e6c:	e7d2      	b.n	8012e14 <_svfiprintf_r+0xa0>
 8012e6e:	9b03      	ldr	r3, [sp, #12]
 8012e70:	1d19      	adds	r1, r3, #4
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	9103      	str	r1, [sp, #12]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	bfbb      	ittet	lt
 8012e7a:	425b      	neglt	r3, r3
 8012e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8012e80:	9307      	strge	r3, [sp, #28]
 8012e82:	9307      	strlt	r3, [sp, #28]
 8012e84:	bfb8      	it	lt
 8012e86:	9204      	strlt	r2, [sp, #16]
 8012e88:	7823      	ldrb	r3, [r4, #0]
 8012e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e8c:	d10a      	bne.n	8012ea4 <_svfiprintf_r+0x130>
 8012e8e:	7863      	ldrb	r3, [r4, #1]
 8012e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e92:	d132      	bne.n	8012efa <_svfiprintf_r+0x186>
 8012e94:	9b03      	ldr	r3, [sp, #12]
 8012e96:	1d1a      	adds	r2, r3, #4
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	9203      	str	r2, [sp, #12]
 8012e9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ea0:	3402      	adds	r4, #2
 8012ea2:	9305      	str	r3, [sp, #20]
 8012ea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012f68 <_svfiprintf_r+0x1f4>
 8012ea8:	7821      	ldrb	r1, [r4, #0]
 8012eaa:	2203      	movs	r2, #3
 8012eac:	4650      	mov	r0, sl
 8012eae:	f7ed f99f 	bl	80001f0 <memchr>
 8012eb2:	b138      	cbz	r0, 8012ec4 <_svfiprintf_r+0x150>
 8012eb4:	9b04      	ldr	r3, [sp, #16]
 8012eb6:	eba0 000a 	sub.w	r0, r0, sl
 8012eba:	2240      	movs	r2, #64	@ 0x40
 8012ebc:	4082      	lsls	r2, r0
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	3401      	adds	r4, #1
 8012ec2:	9304      	str	r3, [sp, #16]
 8012ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ec8:	4824      	ldr	r0, [pc, #144]	@ (8012f5c <_svfiprintf_r+0x1e8>)
 8012eca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ece:	2206      	movs	r2, #6
 8012ed0:	f7ed f98e 	bl	80001f0 <memchr>
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	d036      	beq.n	8012f46 <_svfiprintf_r+0x1d2>
 8012ed8:	4b21      	ldr	r3, [pc, #132]	@ (8012f60 <_svfiprintf_r+0x1ec>)
 8012eda:	bb1b      	cbnz	r3, 8012f24 <_svfiprintf_r+0x1b0>
 8012edc:	9b03      	ldr	r3, [sp, #12]
 8012ede:	3307      	adds	r3, #7
 8012ee0:	f023 0307 	bic.w	r3, r3, #7
 8012ee4:	3308      	adds	r3, #8
 8012ee6:	9303      	str	r3, [sp, #12]
 8012ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eea:	4433      	add	r3, r6
 8012eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eee:	e76a      	b.n	8012dc6 <_svfiprintf_r+0x52>
 8012ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ef4:	460c      	mov	r4, r1
 8012ef6:	2001      	movs	r0, #1
 8012ef8:	e7a8      	b.n	8012e4c <_svfiprintf_r+0xd8>
 8012efa:	2300      	movs	r3, #0
 8012efc:	3401      	adds	r4, #1
 8012efe:	9305      	str	r3, [sp, #20]
 8012f00:	4619      	mov	r1, r3
 8012f02:	f04f 0c0a 	mov.w	ip, #10
 8012f06:	4620      	mov	r0, r4
 8012f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f0c:	3a30      	subs	r2, #48	@ 0x30
 8012f0e:	2a09      	cmp	r2, #9
 8012f10:	d903      	bls.n	8012f1a <_svfiprintf_r+0x1a6>
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d0c6      	beq.n	8012ea4 <_svfiprintf_r+0x130>
 8012f16:	9105      	str	r1, [sp, #20]
 8012f18:	e7c4      	b.n	8012ea4 <_svfiprintf_r+0x130>
 8012f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f1e:	4604      	mov	r4, r0
 8012f20:	2301      	movs	r3, #1
 8012f22:	e7f0      	b.n	8012f06 <_svfiprintf_r+0x192>
 8012f24:	ab03      	add	r3, sp, #12
 8012f26:	9300      	str	r3, [sp, #0]
 8012f28:	462a      	mov	r2, r5
 8012f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8012f64 <_svfiprintf_r+0x1f0>)
 8012f2c:	a904      	add	r1, sp, #16
 8012f2e:	4638      	mov	r0, r7
 8012f30:	f3af 8000 	nop.w
 8012f34:	1c42      	adds	r2, r0, #1
 8012f36:	4606      	mov	r6, r0
 8012f38:	d1d6      	bne.n	8012ee8 <_svfiprintf_r+0x174>
 8012f3a:	89ab      	ldrh	r3, [r5, #12]
 8012f3c:	065b      	lsls	r3, r3, #25
 8012f3e:	f53f af2d 	bmi.w	8012d9c <_svfiprintf_r+0x28>
 8012f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f44:	e72c      	b.n	8012da0 <_svfiprintf_r+0x2c>
 8012f46:	ab03      	add	r3, sp, #12
 8012f48:	9300      	str	r3, [sp, #0]
 8012f4a:	462a      	mov	r2, r5
 8012f4c:	4b05      	ldr	r3, [pc, #20]	@ (8012f64 <_svfiprintf_r+0x1f0>)
 8012f4e:	a904      	add	r1, sp, #16
 8012f50:	4638      	mov	r0, r7
 8012f52:	f000 f879 	bl	8013048 <_printf_i>
 8012f56:	e7ed      	b.n	8012f34 <_svfiprintf_r+0x1c0>
 8012f58:	08014bbd 	.word	0x08014bbd
 8012f5c:	08014bc7 	.word	0x08014bc7
 8012f60:	00000000 	.word	0x00000000
 8012f64:	08012cbd 	.word	0x08012cbd
 8012f68:	08014bc3 	.word	0x08014bc3

08012f6c <_printf_common>:
 8012f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f70:	4616      	mov	r6, r2
 8012f72:	4698      	mov	r8, r3
 8012f74:	688a      	ldr	r2, [r1, #8]
 8012f76:	690b      	ldr	r3, [r1, #16]
 8012f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	bfb8      	it	lt
 8012f80:	4613      	movlt	r3, r2
 8012f82:	6033      	str	r3, [r6, #0]
 8012f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012f88:	4607      	mov	r7, r0
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	b10a      	cbz	r2, 8012f92 <_printf_common+0x26>
 8012f8e:	3301      	adds	r3, #1
 8012f90:	6033      	str	r3, [r6, #0]
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	0699      	lsls	r1, r3, #26
 8012f96:	bf42      	ittt	mi
 8012f98:	6833      	ldrmi	r3, [r6, #0]
 8012f9a:	3302      	addmi	r3, #2
 8012f9c:	6033      	strmi	r3, [r6, #0]
 8012f9e:	6825      	ldr	r5, [r4, #0]
 8012fa0:	f015 0506 	ands.w	r5, r5, #6
 8012fa4:	d106      	bne.n	8012fb4 <_printf_common+0x48>
 8012fa6:	f104 0a19 	add.w	sl, r4, #25
 8012faa:	68e3      	ldr	r3, [r4, #12]
 8012fac:	6832      	ldr	r2, [r6, #0]
 8012fae:	1a9b      	subs	r3, r3, r2
 8012fb0:	42ab      	cmp	r3, r5
 8012fb2:	dc26      	bgt.n	8013002 <_printf_common+0x96>
 8012fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012fb8:	6822      	ldr	r2, [r4, #0]
 8012fba:	3b00      	subs	r3, #0
 8012fbc:	bf18      	it	ne
 8012fbe:	2301      	movne	r3, #1
 8012fc0:	0692      	lsls	r2, r2, #26
 8012fc2:	d42b      	bmi.n	801301c <_printf_common+0xb0>
 8012fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012fc8:	4641      	mov	r1, r8
 8012fca:	4638      	mov	r0, r7
 8012fcc:	47c8      	blx	r9
 8012fce:	3001      	adds	r0, #1
 8012fd0:	d01e      	beq.n	8013010 <_printf_common+0xa4>
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	6922      	ldr	r2, [r4, #16]
 8012fd6:	f003 0306 	and.w	r3, r3, #6
 8012fda:	2b04      	cmp	r3, #4
 8012fdc:	bf02      	ittt	eq
 8012fde:	68e5      	ldreq	r5, [r4, #12]
 8012fe0:	6833      	ldreq	r3, [r6, #0]
 8012fe2:	1aed      	subeq	r5, r5, r3
 8012fe4:	68a3      	ldr	r3, [r4, #8]
 8012fe6:	bf0c      	ite	eq
 8012fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fec:	2500      	movne	r5, #0
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	bfc4      	itt	gt
 8012ff2:	1a9b      	subgt	r3, r3, r2
 8012ff4:	18ed      	addgt	r5, r5, r3
 8012ff6:	2600      	movs	r6, #0
 8012ff8:	341a      	adds	r4, #26
 8012ffa:	42b5      	cmp	r5, r6
 8012ffc:	d11a      	bne.n	8013034 <_printf_common+0xc8>
 8012ffe:	2000      	movs	r0, #0
 8013000:	e008      	b.n	8013014 <_printf_common+0xa8>
 8013002:	2301      	movs	r3, #1
 8013004:	4652      	mov	r2, sl
 8013006:	4641      	mov	r1, r8
 8013008:	4638      	mov	r0, r7
 801300a:	47c8      	blx	r9
 801300c:	3001      	adds	r0, #1
 801300e:	d103      	bne.n	8013018 <_printf_common+0xac>
 8013010:	f04f 30ff 	mov.w	r0, #4294967295
 8013014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013018:	3501      	adds	r5, #1
 801301a:	e7c6      	b.n	8012faa <_printf_common+0x3e>
 801301c:	18e1      	adds	r1, r4, r3
 801301e:	1c5a      	adds	r2, r3, #1
 8013020:	2030      	movs	r0, #48	@ 0x30
 8013022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013026:	4422      	add	r2, r4
 8013028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801302c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013030:	3302      	adds	r3, #2
 8013032:	e7c7      	b.n	8012fc4 <_printf_common+0x58>
 8013034:	2301      	movs	r3, #1
 8013036:	4622      	mov	r2, r4
 8013038:	4641      	mov	r1, r8
 801303a:	4638      	mov	r0, r7
 801303c:	47c8      	blx	r9
 801303e:	3001      	adds	r0, #1
 8013040:	d0e6      	beq.n	8013010 <_printf_common+0xa4>
 8013042:	3601      	adds	r6, #1
 8013044:	e7d9      	b.n	8012ffa <_printf_common+0x8e>
	...

08013048 <_printf_i>:
 8013048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801304c:	7e0f      	ldrb	r7, [r1, #24]
 801304e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013050:	2f78      	cmp	r7, #120	@ 0x78
 8013052:	4691      	mov	r9, r2
 8013054:	4680      	mov	r8, r0
 8013056:	460c      	mov	r4, r1
 8013058:	469a      	mov	sl, r3
 801305a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801305e:	d807      	bhi.n	8013070 <_printf_i+0x28>
 8013060:	2f62      	cmp	r7, #98	@ 0x62
 8013062:	d80a      	bhi.n	801307a <_printf_i+0x32>
 8013064:	2f00      	cmp	r7, #0
 8013066:	f000 80d1 	beq.w	801320c <_printf_i+0x1c4>
 801306a:	2f58      	cmp	r7, #88	@ 0x58
 801306c:	f000 80b8 	beq.w	80131e0 <_printf_i+0x198>
 8013070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013078:	e03a      	b.n	80130f0 <_printf_i+0xa8>
 801307a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801307e:	2b15      	cmp	r3, #21
 8013080:	d8f6      	bhi.n	8013070 <_printf_i+0x28>
 8013082:	a101      	add	r1, pc, #4	@ (adr r1, 8013088 <_printf_i+0x40>)
 8013084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013088:	080130e1 	.word	0x080130e1
 801308c:	080130f5 	.word	0x080130f5
 8013090:	08013071 	.word	0x08013071
 8013094:	08013071 	.word	0x08013071
 8013098:	08013071 	.word	0x08013071
 801309c:	08013071 	.word	0x08013071
 80130a0:	080130f5 	.word	0x080130f5
 80130a4:	08013071 	.word	0x08013071
 80130a8:	08013071 	.word	0x08013071
 80130ac:	08013071 	.word	0x08013071
 80130b0:	08013071 	.word	0x08013071
 80130b4:	080131f3 	.word	0x080131f3
 80130b8:	0801311f 	.word	0x0801311f
 80130bc:	080131ad 	.word	0x080131ad
 80130c0:	08013071 	.word	0x08013071
 80130c4:	08013071 	.word	0x08013071
 80130c8:	08013215 	.word	0x08013215
 80130cc:	08013071 	.word	0x08013071
 80130d0:	0801311f 	.word	0x0801311f
 80130d4:	08013071 	.word	0x08013071
 80130d8:	08013071 	.word	0x08013071
 80130dc:	080131b5 	.word	0x080131b5
 80130e0:	6833      	ldr	r3, [r6, #0]
 80130e2:	1d1a      	adds	r2, r3, #4
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	6032      	str	r2, [r6, #0]
 80130e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80130f0:	2301      	movs	r3, #1
 80130f2:	e09c      	b.n	801322e <_printf_i+0x1e6>
 80130f4:	6833      	ldr	r3, [r6, #0]
 80130f6:	6820      	ldr	r0, [r4, #0]
 80130f8:	1d19      	adds	r1, r3, #4
 80130fa:	6031      	str	r1, [r6, #0]
 80130fc:	0606      	lsls	r6, r0, #24
 80130fe:	d501      	bpl.n	8013104 <_printf_i+0xbc>
 8013100:	681d      	ldr	r5, [r3, #0]
 8013102:	e003      	b.n	801310c <_printf_i+0xc4>
 8013104:	0645      	lsls	r5, r0, #25
 8013106:	d5fb      	bpl.n	8013100 <_printf_i+0xb8>
 8013108:	f9b3 5000 	ldrsh.w	r5, [r3]
 801310c:	2d00      	cmp	r5, #0
 801310e:	da03      	bge.n	8013118 <_printf_i+0xd0>
 8013110:	232d      	movs	r3, #45	@ 0x2d
 8013112:	426d      	negs	r5, r5
 8013114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013118:	4858      	ldr	r0, [pc, #352]	@ (801327c <_printf_i+0x234>)
 801311a:	230a      	movs	r3, #10
 801311c:	e011      	b.n	8013142 <_printf_i+0xfa>
 801311e:	6821      	ldr	r1, [r4, #0]
 8013120:	6833      	ldr	r3, [r6, #0]
 8013122:	0608      	lsls	r0, r1, #24
 8013124:	f853 5b04 	ldr.w	r5, [r3], #4
 8013128:	d402      	bmi.n	8013130 <_printf_i+0xe8>
 801312a:	0649      	lsls	r1, r1, #25
 801312c:	bf48      	it	mi
 801312e:	b2ad      	uxthmi	r5, r5
 8013130:	2f6f      	cmp	r7, #111	@ 0x6f
 8013132:	4852      	ldr	r0, [pc, #328]	@ (801327c <_printf_i+0x234>)
 8013134:	6033      	str	r3, [r6, #0]
 8013136:	bf14      	ite	ne
 8013138:	230a      	movne	r3, #10
 801313a:	2308      	moveq	r3, #8
 801313c:	2100      	movs	r1, #0
 801313e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013142:	6866      	ldr	r6, [r4, #4]
 8013144:	60a6      	str	r6, [r4, #8]
 8013146:	2e00      	cmp	r6, #0
 8013148:	db05      	blt.n	8013156 <_printf_i+0x10e>
 801314a:	6821      	ldr	r1, [r4, #0]
 801314c:	432e      	orrs	r6, r5
 801314e:	f021 0104 	bic.w	r1, r1, #4
 8013152:	6021      	str	r1, [r4, #0]
 8013154:	d04b      	beq.n	80131ee <_printf_i+0x1a6>
 8013156:	4616      	mov	r6, r2
 8013158:	fbb5 f1f3 	udiv	r1, r5, r3
 801315c:	fb03 5711 	mls	r7, r3, r1, r5
 8013160:	5dc7      	ldrb	r7, [r0, r7]
 8013162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013166:	462f      	mov	r7, r5
 8013168:	42bb      	cmp	r3, r7
 801316a:	460d      	mov	r5, r1
 801316c:	d9f4      	bls.n	8013158 <_printf_i+0x110>
 801316e:	2b08      	cmp	r3, #8
 8013170:	d10b      	bne.n	801318a <_printf_i+0x142>
 8013172:	6823      	ldr	r3, [r4, #0]
 8013174:	07df      	lsls	r7, r3, #31
 8013176:	d508      	bpl.n	801318a <_printf_i+0x142>
 8013178:	6923      	ldr	r3, [r4, #16]
 801317a:	6861      	ldr	r1, [r4, #4]
 801317c:	4299      	cmp	r1, r3
 801317e:	bfde      	ittt	le
 8013180:	2330      	movle	r3, #48	@ 0x30
 8013182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013186:	f106 36ff 	addle.w	r6, r6, #4294967295
 801318a:	1b92      	subs	r2, r2, r6
 801318c:	6122      	str	r2, [r4, #16]
 801318e:	f8cd a000 	str.w	sl, [sp]
 8013192:	464b      	mov	r3, r9
 8013194:	aa03      	add	r2, sp, #12
 8013196:	4621      	mov	r1, r4
 8013198:	4640      	mov	r0, r8
 801319a:	f7ff fee7 	bl	8012f6c <_printf_common>
 801319e:	3001      	adds	r0, #1
 80131a0:	d14a      	bne.n	8013238 <_printf_i+0x1f0>
 80131a2:	f04f 30ff 	mov.w	r0, #4294967295
 80131a6:	b004      	add	sp, #16
 80131a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ac:	6823      	ldr	r3, [r4, #0]
 80131ae:	f043 0320 	orr.w	r3, r3, #32
 80131b2:	6023      	str	r3, [r4, #0]
 80131b4:	4832      	ldr	r0, [pc, #200]	@ (8013280 <_printf_i+0x238>)
 80131b6:	2778      	movs	r7, #120	@ 0x78
 80131b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80131bc:	6823      	ldr	r3, [r4, #0]
 80131be:	6831      	ldr	r1, [r6, #0]
 80131c0:	061f      	lsls	r7, r3, #24
 80131c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80131c6:	d402      	bmi.n	80131ce <_printf_i+0x186>
 80131c8:	065f      	lsls	r7, r3, #25
 80131ca:	bf48      	it	mi
 80131cc:	b2ad      	uxthmi	r5, r5
 80131ce:	6031      	str	r1, [r6, #0]
 80131d0:	07d9      	lsls	r1, r3, #31
 80131d2:	bf44      	itt	mi
 80131d4:	f043 0320 	orrmi.w	r3, r3, #32
 80131d8:	6023      	strmi	r3, [r4, #0]
 80131da:	b11d      	cbz	r5, 80131e4 <_printf_i+0x19c>
 80131dc:	2310      	movs	r3, #16
 80131de:	e7ad      	b.n	801313c <_printf_i+0xf4>
 80131e0:	4826      	ldr	r0, [pc, #152]	@ (801327c <_printf_i+0x234>)
 80131e2:	e7e9      	b.n	80131b8 <_printf_i+0x170>
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	f023 0320 	bic.w	r3, r3, #32
 80131ea:	6023      	str	r3, [r4, #0]
 80131ec:	e7f6      	b.n	80131dc <_printf_i+0x194>
 80131ee:	4616      	mov	r6, r2
 80131f0:	e7bd      	b.n	801316e <_printf_i+0x126>
 80131f2:	6833      	ldr	r3, [r6, #0]
 80131f4:	6825      	ldr	r5, [r4, #0]
 80131f6:	6961      	ldr	r1, [r4, #20]
 80131f8:	1d18      	adds	r0, r3, #4
 80131fa:	6030      	str	r0, [r6, #0]
 80131fc:	062e      	lsls	r6, r5, #24
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	d501      	bpl.n	8013206 <_printf_i+0x1be>
 8013202:	6019      	str	r1, [r3, #0]
 8013204:	e002      	b.n	801320c <_printf_i+0x1c4>
 8013206:	0668      	lsls	r0, r5, #25
 8013208:	d5fb      	bpl.n	8013202 <_printf_i+0x1ba>
 801320a:	8019      	strh	r1, [r3, #0]
 801320c:	2300      	movs	r3, #0
 801320e:	6123      	str	r3, [r4, #16]
 8013210:	4616      	mov	r6, r2
 8013212:	e7bc      	b.n	801318e <_printf_i+0x146>
 8013214:	6833      	ldr	r3, [r6, #0]
 8013216:	1d1a      	adds	r2, r3, #4
 8013218:	6032      	str	r2, [r6, #0]
 801321a:	681e      	ldr	r6, [r3, #0]
 801321c:	6862      	ldr	r2, [r4, #4]
 801321e:	2100      	movs	r1, #0
 8013220:	4630      	mov	r0, r6
 8013222:	f7ec ffe5 	bl	80001f0 <memchr>
 8013226:	b108      	cbz	r0, 801322c <_printf_i+0x1e4>
 8013228:	1b80      	subs	r0, r0, r6
 801322a:	6060      	str	r0, [r4, #4]
 801322c:	6863      	ldr	r3, [r4, #4]
 801322e:	6123      	str	r3, [r4, #16]
 8013230:	2300      	movs	r3, #0
 8013232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013236:	e7aa      	b.n	801318e <_printf_i+0x146>
 8013238:	6923      	ldr	r3, [r4, #16]
 801323a:	4632      	mov	r2, r6
 801323c:	4649      	mov	r1, r9
 801323e:	4640      	mov	r0, r8
 8013240:	47d0      	blx	sl
 8013242:	3001      	adds	r0, #1
 8013244:	d0ad      	beq.n	80131a2 <_printf_i+0x15a>
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	079b      	lsls	r3, r3, #30
 801324a:	d413      	bmi.n	8013274 <_printf_i+0x22c>
 801324c:	68e0      	ldr	r0, [r4, #12]
 801324e:	9b03      	ldr	r3, [sp, #12]
 8013250:	4298      	cmp	r0, r3
 8013252:	bfb8      	it	lt
 8013254:	4618      	movlt	r0, r3
 8013256:	e7a6      	b.n	80131a6 <_printf_i+0x15e>
 8013258:	2301      	movs	r3, #1
 801325a:	4632      	mov	r2, r6
 801325c:	4649      	mov	r1, r9
 801325e:	4640      	mov	r0, r8
 8013260:	47d0      	blx	sl
 8013262:	3001      	adds	r0, #1
 8013264:	d09d      	beq.n	80131a2 <_printf_i+0x15a>
 8013266:	3501      	adds	r5, #1
 8013268:	68e3      	ldr	r3, [r4, #12]
 801326a:	9903      	ldr	r1, [sp, #12]
 801326c:	1a5b      	subs	r3, r3, r1
 801326e:	42ab      	cmp	r3, r5
 8013270:	dcf2      	bgt.n	8013258 <_printf_i+0x210>
 8013272:	e7eb      	b.n	801324c <_printf_i+0x204>
 8013274:	2500      	movs	r5, #0
 8013276:	f104 0619 	add.w	r6, r4, #25
 801327a:	e7f5      	b.n	8013268 <_printf_i+0x220>
 801327c:	08014bce 	.word	0x08014bce
 8013280:	08014bdf 	.word	0x08014bdf

08013284 <memmove>:
 8013284:	4288      	cmp	r0, r1
 8013286:	b510      	push	{r4, lr}
 8013288:	eb01 0402 	add.w	r4, r1, r2
 801328c:	d902      	bls.n	8013294 <memmove+0x10>
 801328e:	4284      	cmp	r4, r0
 8013290:	4623      	mov	r3, r4
 8013292:	d807      	bhi.n	80132a4 <memmove+0x20>
 8013294:	1e43      	subs	r3, r0, #1
 8013296:	42a1      	cmp	r1, r4
 8013298:	d008      	beq.n	80132ac <memmove+0x28>
 801329a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801329e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132a2:	e7f8      	b.n	8013296 <memmove+0x12>
 80132a4:	4402      	add	r2, r0
 80132a6:	4601      	mov	r1, r0
 80132a8:	428a      	cmp	r2, r1
 80132aa:	d100      	bne.n	80132ae <memmove+0x2a>
 80132ac:	bd10      	pop	{r4, pc}
 80132ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132b6:	e7f7      	b.n	80132a8 <memmove+0x24>

080132b8 <_sbrk_r>:
 80132b8:	b538      	push	{r3, r4, r5, lr}
 80132ba:	4d06      	ldr	r5, [pc, #24]	@ (80132d4 <_sbrk_r+0x1c>)
 80132bc:	2300      	movs	r3, #0
 80132be:	4604      	mov	r4, r0
 80132c0:	4608      	mov	r0, r1
 80132c2:	602b      	str	r3, [r5, #0]
 80132c4:	f7f2 fb88 	bl	80059d8 <_sbrk>
 80132c8:	1c43      	adds	r3, r0, #1
 80132ca:	d102      	bne.n	80132d2 <_sbrk_r+0x1a>
 80132cc:	682b      	ldr	r3, [r5, #0]
 80132ce:	b103      	cbz	r3, 80132d2 <_sbrk_r+0x1a>
 80132d0:	6023      	str	r3, [r4, #0]
 80132d2:	bd38      	pop	{r3, r4, r5, pc}
 80132d4:	20002850 	.word	0x20002850

080132d8 <_realloc_r>:
 80132d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	4607      	mov	r7, r0
 80132de:	4614      	mov	r4, r2
 80132e0:	460d      	mov	r5, r1
 80132e2:	b921      	cbnz	r1, 80132ee <_realloc_r+0x16>
 80132e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132e8:	4611      	mov	r1, r2
 80132ea:	f7ff bc5b 	b.w	8012ba4 <_malloc_r>
 80132ee:	b92a      	cbnz	r2, 80132fc <_realloc_r+0x24>
 80132f0:	f7ff fbec 	bl	8012acc <_free_r>
 80132f4:	4625      	mov	r5, r4
 80132f6:	4628      	mov	r0, r5
 80132f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fc:	f000 f81a 	bl	8013334 <_malloc_usable_size_r>
 8013300:	4284      	cmp	r4, r0
 8013302:	4606      	mov	r6, r0
 8013304:	d802      	bhi.n	801330c <_realloc_r+0x34>
 8013306:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801330a:	d8f4      	bhi.n	80132f6 <_realloc_r+0x1e>
 801330c:	4621      	mov	r1, r4
 801330e:	4638      	mov	r0, r7
 8013310:	f7ff fc48 	bl	8012ba4 <_malloc_r>
 8013314:	4680      	mov	r8, r0
 8013316:	b908      	cbnz	r0, 801331c <_realloc_r+0x44>
 8013318:	4645      	mov	r5, r8
 801331a:	e7ec      	b.n	80132f6 <_realloc_r+0x1e>
 801331c:	42b4      	cmp	r4, r6
 801331e:	4622      	mov	r2, r4
 8013320:	4629      	mov	r1, r5
 8013322:	bf28      	it	cs
 8013324:	4632      	movcs	r2, r6
 8013326:	f7ff fbc3 	bl	8012ab0 <memcpy>
 801332a:	4629      	mov	r1, r5
 801332c:	4638      	mov	r0, r7
 801332e:	f7ff fbcd 	bl	8012acc <_free_r>
 8013332:	e7f1      	b.n	8013318 <_realloc_r+0x40>

08013334 <_malloc_usable_size_r>:
 8013334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013338:	1f18      	subs	r0, r3, #4
 801333a:	2b00      	cmp	r3, #0
 801333c:	bfbc      	itt	lt
 801333e:	580b      	ldrlt	r3, [r1, r0]
 8013340:	18c0      	addlt	r0, r0, r3
 8013342:	4770      	bx	lr

08013344 <_init>:
 8013344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013346:	bf00      	nop
 8013348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801334a:	bc08      	pop	{r3}
 801334c:	469e      	mov	lr, r3
 801334e:	4770      	bx	lr

08013350 <_fini>:
 8013350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013352:	bf00      	nop
 8013354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013356:	bc08      	pop	{r3}
 8013358:	469e      	mov	lr, r3
 801335a:	4770      	bx	lr
