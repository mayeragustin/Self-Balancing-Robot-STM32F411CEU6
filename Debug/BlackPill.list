
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015dc  08012768  08012768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d44  08013d44  00015168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013d44  08013d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d4c  08013d4c  00015168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d4c  08013d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d50  08013d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08013d54  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027ac  20000168  08013ebc  00015168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002914  08013ebc  00015914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc87  00000000  00000000  00015198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e4d  00000000  00000000  00034e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00039c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b7  00000000  00000000  0003b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbb3  00000000  00000000  0003ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002569c  00000000  00000000  000599f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a366a  00000000  00000000  0007f08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001226f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b44  00000000  00000000  0012273c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012750 	.word	0x08012750

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	08012750 	.word	0x08012750

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003c4 	.word	0x200003c4
 8000670:	200003d6 	.word	0x200003d6
 8000674:	20000184 	.word	0x20000184

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003e4 	.word	0x200003e4
 80007a0:	200003d8 	.word	0x200003d8

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003e4 	.word	0x200003e4
 8000808:	200003d8 	.word	0x200003d8

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d8 	.word	0x200003d8

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e8 	.word	0x200003e8
 8000898:	200003ec 	.word	0x200003ec

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b0b7      	sub	sp, #220	@ 0xdc
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b51      	ldr	r3, [pc, #324]	@ (80009f8 <MPU6050_Init+0x15c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	f040 8084 	bne.w	80009ea <MPU6050_Init+0x14e>
		data = 0x00;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e8:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <MPU6050_Init+0x160>)
 80008ea:	681c      	ldr	r4, [r3, #0]
 80008ec:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80008f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	2201      	movs	r2, #1
 80008fc:	216b      	movs	r1, #107	@ 0x6b
 80008fe:	20d0      	movs	r0, #208	@ 0xd0
 8000900:	47a0      	blx	r4
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800090a:	4413      	add	r3, r2
 800090c:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000910:	2307      	movs	r3, #7
 8000912:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000916:	4b39      	ldr	r3, [pc, #228]	@ (80009fc <MPU6050_Init+0x160>)
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800091e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000922:	9201      	str	r2, [sp, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	9200      	str	r2, [sp, #0]
 8000928:	2201      	movs	r2, #1
 800092a:	2119      	movs	r1, #25
 800092c:	20d0      	movs	r0, #208	@ 0xd0
 800092e:	47a0      	blx	r4
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000938:	4413      	add	r3, r2
 800093a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000944:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <MPU6050_Init+0x160>)
 8000946:	681c      	ldr	r4, [r3, #0]
 8000948:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800094c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000950:	9201      	str	r2, [sp, #4]
 8000952:	2201      	movs	r2, #1
 8000954:	9200      	str	r2, [sp, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	211c      	movs	r1, #28
 800095a:	20d0      	movs	r0, #208	@ 0xd0
 800095c:	47a0      	blx	r4
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000966:	4413      	add	r3, r2
 8000968:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MPU6050_Init+0x160>)
 8000974:	681c      	ldr	r4, [r3, #0]
 8000976:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800097a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800097e:	9201      	str	r2, [sp, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	211b      	movs	r1, #27
 8000988:	20d0      	movs	r0, #208	@ 0xd0
 800098a:	47a0      	blx	r4
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000994:	4413      	add	r3, r2
 8000996:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 800099a:	2303      	movs	r3, #3
 800099c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MPU6050_Init+0x160>)
 80009a2:	681c      	ldr	r4, [r3, #0]
 80009a4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80009a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	2201      	movs	r2, #1
 80009b4:	211a      	movs	r1, #26
 80009b6:	20d0      	movs	r0, #208	@ 0xd0
 80009b8:	47a0      	blx	r4
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009c2:	4413      	add	r3, r2
 80009c4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	23c4      	movs	r3, #196	@ 0xc4
 80009ce:	461a      	mov	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f011 fa2b 	bl	8011e2c <memset>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80009de:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <MPU6050_Init+0x152>
			return SYS_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e002      	b.n	80009f0 <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	37d4      	adds	r7, #212	@ 0xd4
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	200003ec 	.word	0x200003ec
 80009fc:	200003e8 	.word	0x200003e8

08000a00 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08d      	sub	sp, #52	@ 0x34
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000a1e:	e069      	b.n	8000af4 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 8000a20:	4b47      	ldr	r3, [pc, #284]	@ (8000b40 <MPU6050_Calibrate+0x140>)
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	33b4      	adds	r3, #180	@ 0xb4
 8000a28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	220e      	movs	r2, #14
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	2201      	movs	r2, #1
 8000a34:	213b      	movs	r1, #59	@ 0x3b
 8000a36:	20d0      	movs	r0, #208	@ 0xd0
 8000a38:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 8000a42:	b212      	sxth	r2, r2
 8000a44:	0212      	lsls	r2, r2, #8
 8000a46:	b211      	sxth	r1, r2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 8000a4e:	b212      	sxth	r2, r2
 8000a50:	430a      	orrs	r2, r1
 8000a52:	b212      	sxth	r2, r2
 8000a54:	4413      	add	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 8000a60:	b212      	sxth	r2, r2
 8000a62:	0212      	lsls	r2, r2, #8
 8000a64:	b211      	sxth	r1, r2
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8000a6c:	b212      	sxth	r2, r2
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	b212      	sxth	r2, r2
 8000a72:	4413      	add	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 8000a7e:	b212      	sxth	r2, r2
 8000a80:	0212      	lsls	r2, r2, #8
 8000a82:	b211      	sxth	r1, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8000a8a:	b212      	sxth	r2, r2
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	b212      	sxth	r2, r2
 8000a90:	4413      	add	r3, r2
 8000a92:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8000a9c:	b212      	sxth	r2, r2
 8000a9e:	0212      	lsls	r2, r2, #8
 8000aa0:	b211      	sxth	r1, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 8000aa8:	b212      	sxth	r2, r2
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	b212      	sxth	r2, r2
 8000aae:	4413      	add	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 8000aba:	b212      	sxth	r2, r2
 8000abc:	0212      	lsls	r2, r2, #8
 8000abe:	b211      	sxth	r1, r2
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 8000ac6:	b212      	sxth	r2, r2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	b212      	sxth	r2, r2
 8000acc:	4413      	add	r3, r2
 8000ace:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8000ad8:	b212      	sxth	r2, r2
 8000ada:	0212      	lsls	r2, r2, #8
 8000adc:	b211      	sxth	r1, r2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 8000ae4:	b212      	sxth	r2, r2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	b212      	sxth	r2, r2
 8000aea:	4413      	add	r3, r2
 8000aec:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000aee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000af0:	3301      	adds	r3, #1
 8000af2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000af4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000afa:	d391      	bcc.n	8000a20 <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	131b      	asrs	r3, r3, #12
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS)/* - SCALE_FACTOR*/;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	131b      	asrs	r3, r3, #12
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	131b      	asrs	r3, r3, #12
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	131b      	asrs	r3, r3, #12
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 8000b38:	bf00      	nop
 8000b3a:	372c      	adds	r7, #44	@ 0x2c
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	200003ec 	.word	0x200003ec

08000b44 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8000c14:	b490      	push	{r4, r7}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80b8 	beq.w	8000d98 <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e04e      	b.n	8000cd4 <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[channel] -= mpu->MAF.mediaBuffer[mpu->MAF.index][channel];
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000c46:	461c      	mov	r4, r3
 8000c48:	7bf8      	ldrb	r0, [r7, #15]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4423      	add	r3, r4
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4403      	add	r3, r0
 8000c56:	331c      	adds	r3, #28
 8000c58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[channel] += mpu->MAF.rawData[channel];
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	7bf9      	ldrb	r1, [r7, #15]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	314c      	adds	r1, #76	@ 0x4c
 8000c78:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	4419      	add	r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][channel] = mpu->MAF.rawData[channel];
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000c92:	4618      	mov	r0, r3
 8000c94:	7bf9      	ldrb	r1, [r7, #15]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	324c      	adds	r2, #76	@ 0x4c
 8000c9a:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4403      	add	r3, r0
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	440b      	add	r3, r1
 8000caa:	331c      	adds	r3, #28
 8000cac:	4621      	mov	r1, r4
 8000cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[channel] = (mpu->MAF.sumData[channel] >> NUM_MAF_BITS);
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	10da      	asrs	r2, r3, #3
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	b211      	sxth	r1, r2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	3350      	adds	r3, #80	@ 0x50
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	460a      	mov	r2, r1
 8000ccc:	809a      	strh	r2, [r3, #4]
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d9ad      	bls.n	8000c36 <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	821a      	strh	r2, [r3, #16]
	}
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc90      	pop	{r4, r7}
 8000da0:	4770      	bx	lr
	...

08000da4 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000dae:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <Display_Set_I2C_Master_Transmit+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000db4:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <Display_Set_I2C_Master_Transmit+0x28>)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200003f8 	.word	0x200003f8
 8000dcc:	200003fc 	.word	0x200003fc

08000dd0 <Display_Init>:

e_system Display_Init(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000dda:	22ae      	movs	r2, #174	@ 0xae
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2078      	movs	r0, #120	@ 0x78
 8000de0:	f000 f94a 	bl	8001078 <ssd1306_I2C_Write>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4413      	add	r3, r2
 8000dec:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	@ 0x78
 8000df4:	f000 f940 	bl	8001078 <ssd1306_I2C_Write>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4413      	add	r3, r2
 8000e00:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e02:	2210      	movs	r2, #16
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	@ 0x78
 8000e08:	f000 f936 	bl	8001078 <ssd1306_I2C_Write>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4413      	add	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000e16:	22b0      	movs	r2, #176	@ 0xb0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	@ 0x78
 8000e1c:	f000 f92c 	bl	8001078 <ssd1306_I2C_Write>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4413      	add	r3, r2
 8000e28:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000e2a:	22c8      	movs	r2, #200	@ 0xc8
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2078      	movs	r0, #120	@ 0x78
 8000e30:	f000 f922 	bl	8001078 <ssd1306_I2C_Write>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2078      	movs	r0, #120	@ 0x78
 8000e44:	f000 f918 	bl	8001078 <ssd1306_I2C_Write>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4413      	add	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000e52:	2210      	movs	r2, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	2078      	movs	r0, #120	@ 0x78
 8000e58:	f000 f90e 	bl	8001078 <ssd1306_I2C_Write>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4413      	add	r3, r2
 8000e64:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000e66:	2240      	movs	r2, #64	@ 0x40
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2078      	movs	r0, #120	@ 0x78
 8000e6c:	f000 f904 	bl	8001078 <ssd1306_I2C_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4413      	add	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000e7a:	2281      	movs	r2, #129	@ 0x81
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2078      	movs	r0, #120	@ 0x78
 8000e80:	f000 f8fa 	bl	8001078 <ssd1306_I2C_Write>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000e8e:	22ff      	movs	r2, #255	@ 0xff
 8000e90:	2100      	movs	r1, #0
 8000e92:	2078      	movs	r0, #120	@ 0x78
 8000e94:	f000 f8f0 	bl	8001078 <ssd1306_I2C_Write>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000ea2:	22a1      	movs	r2, #161	@ 0xa1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2078      	movs	r0, #120	@ 0x78
 8000ea8:	f000 f8e6 	bl	8001078 <ssd1306_I2C_Write>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000eb6:	22a6      	movs	r2, #166	@ 0xa6
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2078      	movs	r0, #120	@ 0x78
 8000ebc:	f000 f8dc 	bl	8001078 <ssd1306_I2C_Write>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000eca:	22a8      	movs	r2, #168	@ 0xa8
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2078      	movs	r0, #120	@ 0x78
 8000ed0:	f000 f8d2 	bl	8001078 <ssd1306_I2C_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4413      	add	r3, r2
 8000edc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000ede:	223f      	movs	r2, #63	@ 0x3f
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2078      	movs	r0, #120	@ 0x78
 8000ee4:	f000 f8c8 	bl	8001078 <ssd1306_I2C_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4413      	add	r3, r2
 8000ef0:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ef2:	22a4      	movs	r2, #164	@ 0xa4
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2078      	movs	r0, #120	@ 0x78
 8000ef8:	f000 f8be 	bl	8001078 <ssd1306_I2C_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4413      	add	r3, r2
 8000f04:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000f06:	22d3      	movs	r2, #211	@ 0xd3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2078      	movs	r0, #120	@ 0x78
 8000f0c:	f000 f8b4 	bl	8001078 <ssd1306_I2C_Write>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4413      	add	r3, r2
 8000f18:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2078      	movs	r0, #120	@ 0x78
 8000f20:	f000 f8aa 	bl	8001078 <ssd1306_I2C_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000f2e:	22d5      	movs	r2, #213	@ 0xd5
 8000f30:	2100      	movs	r1, #0
 8000f32:	2078      	movs	r0, #120	@ 0x78
 8000f34:	f000 f8a0 	bl	8001078 <ssd1306_I2C_Write>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4413      	add	r3, r2
 8000f40:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000f42:	22f0      	movs	r2, #240	@ 0xf0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2078      	movs	r0, #120	@ 0x78
 8000f48:	f000 f896 	bl	8001078 <ssd1306_I2C_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4413      	add	r3, r2
 8000f54:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000f56:	22d9      	movs	r2, #217	@ 0xd9
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2078      	movs	r0, #120	@ 0x78
 8000f5c:	f000 f88c 	bl	8001078 <ssd1306_I2C_Write>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4413      	add	r3, r2
 8000f68:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000f6a:	2222      	movs	r2, #34	@ 0x22
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2078      	movs	r0, #120	@ 0x78
 8000f70:	f000 f882 	bl	8001078 <ssd1306_I2C_Write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000f7e:	22da      	movs	r2, #218	@ 0xda
 8000f80:	2100      	movs	r1, #0
 8000f82:	2078      	movs	r0, #120	@ 0x78
 8000f84:	f000 f878 	bl	8001078 <ssd1306_I2C_Write>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4413      	add	r3, r2
 8000f90:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000f92:	2212      	movs	r2, #18
 8000f94:	2100      	movs	r1, #0
 8000f96:	2078      	movs	r0, #120	@ 0x78
 8000f98:	f000 f86e 	bl	8001078 <ssd1306_I2C_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000fa6:	22db      	movs	r2, #219	@ 0xdb
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2078      	movs	r0, #120	@ 0x78
 8000fac:	f000 f864 	bl	8001078 <ssd1306_I2C_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2078      	movs	r0, #120	@ 0x78
 8000fc0:	f000 f85a 	bl	8001078 <ssd1306_I2C_Write>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4413      	add	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000fce:	228d      	movs	r2, #141	@ 0x8d
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	@ 0x78
 8000fd4:	f000 f850 	bl	8001078 <ssd1306_I2C_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4413      	add	r3, r2
 8000fe0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000fe2:	2214      	movs	r2, #20
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	f000 f846 	bl	8001078 <ssd1306_I2C_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000ff6:	22af      	movs	r2, #175	@ 0xaf
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	@ 0x78
 8000ffc:	f000 f83c 	bl	8001078 <ssd1306_I2C_Write>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4413      	add	r3, r2
 8001008:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800100a:	222e      	movs	r2, #46	@ 0x2e
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	@ 0x78
 8001010:	f000 f832 	bl	8001078 <ssd1306_I2C_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4413      	add	r3, r2
 800101c:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f8e8 	bl	80011f4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <Display_Init+0x2a0>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <Display_Init+0x2a0>)
 800102c:	2200      	movs	r2, #0
 800102e:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <Display_Init+0x2a0>)
 8001032:	2201      	movs	r2, #1
 8001034:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <Display_Init+0x2a4>)
 8001038:	2200      	movs	r2, #0
 800103a:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <Display_Init+0x2a4>)
 800103e:	2200      	movs	r2, #0
 8001040:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <Display_Init+0x2a4>)
 8001044:	2201      	movs	r2, #1
 8001046:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <Display_Init+0x2a4>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <Display_Init+0x2a4>)
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	3b50      	subs	r3, #80	@ 0x50
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <Display_Init+0x2a4>)
 8001058:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <Display_Init+0x2a4>)
 800105c:	2200      	movs	r2, #0
 800105e:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <Display_Init+0x2a4>)
 8001062:	2210      	movs	r2, #16
 8001064:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 8001066:	79fb      	ldrb	r3, [r7, #7]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200003f0 	.word	0x200003f0
 8001074:	20000800 	.word	0x20000800

08001078 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	460b      	mov	r3, r1
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	4613      	mov	r3, r2
 8001088:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <ssd1306_I2C_Write+0x38>)
 8001094:	681c      	ldr	r4, [r3, #0]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	b298      	uxth	r0, r3
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	230a      	movs	r3, #10
 80010a0:	2202      	movs	r2, #2
 80010a2:	47a0      	blx	r4
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200003fc 	.word	0x200003fc

080010b4 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80010b4:	b598      	push	{r3, r4, r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d054      	beq.n	800116a <Display_UpdateScreen_Task+0xb6>
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d050      	beq.n	800116a <Display_UpdateScreen_Task+0xb6>
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <Display_UpdateScreen_Task+0xc0>)
 80010ca:	795b      	ldrb	r3, [r3, #5]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d04c      	beq.n	800116a <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <Display_UpdateScreen_Task+0x2a>
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d01c      	beq.n	8001116 <Display_UpdateScreen_Task+0x62>
 80010dc:	e038      	b.n	8001150 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	3b50      	subs	r3, #80	@ 0x50
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010e8:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <Display_UpdateScreen_Task+0xc4>)
 80010f8:	681c      	ldr	r4, [r3, #0]
 80010fa:	2303      	movs	r3, #3
 80010fc:	4a1f      	ldr	r2, [pc, #124]	@ (800117c <Display_UpdateScreen_Task+0xc8>)
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	@ 0x78
 8001102:	47a0      	blx	r4
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 800110c:	2201      	movs	r2, #1
 800110e:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001110:	e021      	b.n	8001156 <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e02a      	b.n	800116c <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <Display_UpdateScreen_Task+0xc4>)
 8001118:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <Display_UpdateScreen_Task+0xcc>)
 8001122:	441a      	add	r2, r3
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	2140      	movs	r1, #64	@ 0x40
 8001128:	2078      	movs	r0, #120	@ 0x78
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001134:	789b      	ldrb	r3, [r3, #2]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 800113c:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001140:	2200      	movs	r2, #0
 8001142:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 800114a:	e004      	b.n	8001156 <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00d      	b.n	800116c <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001152:	2208      	movs	r2, #8
 8001154:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	2b07      	cmp	r3, #7
 800115c:	d905      	bls.n	800116a <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001164:	4b02      	ldr	r3, [pc, #8]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd98      	pop	{r3, r4, r7, pc}
 8001170:	20000800 	.word	0x20000800
 8001174:	200003f0 	.word	0x200003f0
 8001178:	200003f8 	.word	0x200003f8
 800117c:	20000804 	.word	0x20000804
 8001180:	20000400 	.word	0x20000400

08001184 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <Display_I2C_DMA_Ready+0x1c>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	7053      	strb	r3, [r2, #1]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000800 	.word	0x20000800

080011a4 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <Display_I2C_Refresh_Ready+0x1c>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	7013      	strb	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000800 	.word	0x20000800

080011c4 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <Display_SetCursor+0x2c>)
 80011da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <Display_SetCursor+0x2c>)
 80011e2:	805a      	strh	r2, [r3, #2]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200003f0 	.word	0x200003f0

080011f4 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e00d      	b.n	8001220 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <Display_Fill+0x1a>
 800120a:	2100      	movs	r1, #0
 800120c:	e000      	b.n	8001210 <Display_Fill+0x1c>
 800120e:	21ff      	movs	r1, #255	@ 0xff
 8001210:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <Display_Fill+0x44>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001226:	d3ed      	bcc.n	8001204 <Display_Fill+0x10>
	}
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000400 	.word	0x20000400

0800123c <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	70fb      	strb	r3, [r7, #3]
	if (
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	2b7f      	cmp	r3, #127	@ 0x7f
 8001252:	d848      	bhi.n	80012e6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	2b3f      	cmp	r3, #63	@ 0x3f
 8001258:	d845      	bhi.n	80012e6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <Display_DrawPixel+0xb8>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d11a      	bne.n	80012ac <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001276:	88fa      	ldrh	r2, [r7, #6]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	b298      	uxth	r0, r3
 800127e:	4603      	mov	r3, r0
 8001280:	01db      	lsls	r3, r3, #7
 8001282:	4413      	add	r3, r2
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <Display_DrawPixel+0xbc>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b259      	sxtb	r1, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	4603      	mov	r3, r0
 80012a0:	01db      	lsls	r3, r3, #7
 80012a2:	4413      	add	r3, r2
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <Display_DrawPixel+0xbc>)
 80012a8:	54d1      	strb	r1, [r2, r3]
 80012aa:	e01d      	b.n	80012e8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	b298      	uxth	r0, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4413      	add	r3, r2
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <Display_DrawPixel+0xbc>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	4013      	ands	r3, r2
 80012d4:	b259      	sxtb	r1, r3
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	4603      	mov	r3, r0
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	4413      	add	r3, r2
 80012de:	b2c9      	uxtb	r1, r1
 80012e0:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <Display_DrawPixel+0xbc>)
 80012e2:	54d1      	strb	r1, [r2, r3]
 80012e4:	e000      	b.n	80012e8 <Display_DrawPixel+0xac>
		return;
 80012e6:	bf00      	nop
	}
}
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200003f0 	.word	0x200003f0
 80012f8:	20000400 	.word	0x20000400

080012fc <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60ba      	str	r2, [r7, #8]
 8001304:	461a      	mov	r2, r3
 8001306:	4603      	mov	r3, r0
 8001308:	81fb      	strh	r3, [r7, #14]
 800130a:	460b      	mov	r3, r1
 800130c:	81bb      	strh	r3, [r7, #12]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	3307      	adds	r3, #7
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <Display_DrawBitmap+0x22>
 800131c:	3307      	adds	r3, #7
 800131e:	10db      	asrs	r3, r3, #3
 8001320:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001326:	2300      	movs	r3, #0
 8001328:	82bb      	strh	r3, [r7, #20]
 800132a:	e044      	b.n	80013b6 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	827b      	strh	r3, [r7, #18]
 8001330:	e02f      	b.n	8001392 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001332:	8a7b      	ldrh	r3, [r7, #18]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
 8001342:	e012      	b.n	800136a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001348:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001354:	2b00      	cmp	r3, #0
 8001356:	da00      	bge.n	800135a <Display_DrawBitmap+0x5e>
 8001358:	3307      	adds	r3, #7
 800135a:	10db      	asrs	r3, r3, #3
 800135c:	b21b      	sxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800136a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da09      	bge.n	8001386 <Display_DrawBitmap+0x8a>
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	8a7b      	ldrh	r3, [r7, #18]
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	89b9      	ldrh	r1, [r7, #12]
 800137c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5b 	bl	800123c <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001386:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800138a:	b29b      	uxth	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b29b      	uxth	r3, r3
 8001390:	827b      	strh	r3, [r7, #18]
 8001392:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbc9      	blt.n	8001332 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800139e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	82bb      	strh	r3, [r7, #20]
 80013aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81bb      	strh	r3, [r7, #12]
 80013b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbb4      	blt.n	800132c <Display_DrawBitmap+0x30>
        }
    }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	1d38      	adds	r0, r7, #4
 80013d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	4613      	mov	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80013e4:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <Display_WriteChar+0xf4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	793b      	ldrb	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f0:	dc06      	bgt.n	8001400 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80013f2:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Display_WriteChar+0xf4>)
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	461a      	mov	r2, r3
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80013fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80013fe:	dd01      	ble.n	8001404 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001400:	2300      	movs	r3, #0
 8001402:	e058      	b.n	80014b6 <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e048      	b.n	800149c <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3b20      	subs	r3, #32
 8001410:	7979      	ldrb	r1, [r7, #5]
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4619      	mov	r1, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	440b      	add	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	e030      	b.n	800148c <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <Display_WriteChar+0xf4>)
 800143c:	881a      	ldrh	r2, [r3, #0]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	b298      	uxth	r0, r3
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Display_WriteChar+0xf4>)
 8001448:	885a      	ldrh	r2, [r3, #2]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	7bba      	ldrb	r2, [r7, #14]
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fef1 	bl	800123c <Display_DrawPixel>
 800145a:	e014      	b.n	8001486 <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <Display_WriteChar+0xf4>)
 800145e:	881a      	ldrh	r2, [r3, #0]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4413      	add	r3, r2
 8001466:	b298      	uxth	r0, r3
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <Display_WriteChar+0xf4>)
 800146a:	885a      	ldrh	r2, [r3, #2]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4413      	add	r3, r2
 8001472:	b299      	uxth	r1, r3
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	f7ff fedb 	bl	800123c <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	3301      	adds	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	793b      	ldrb	r3, [r7, #4]
 800148e:	461a      	mov	r2, r3
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	4293      	cmp	r3, r2
 8001494:	d3c9      	bcc.n	800142a <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	461a      	mov	r2, r3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d3b1      	bcc.n	800140a <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <Display_WriteChar+0xf4>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	793a      	ldrb	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <Display_WriteChar+0xf4>)
 80014b2:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	200003f0 	.word	0x200003f0

080014c4 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	1d38      	adds	r0, r7, #4
 80014ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d2:	70fb      	strb	r3, [r7, #3]
    while (*str){
 80014d4:	e012      	b.n	80014fc <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	7818      	ldrb	r0, [r3, #0]
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	1d3a      	adds	r2, r7, #4
 80014de:	ca06      	ldmia	r2, {r1, r2}
 80014e0:	f7ff ff74 	bl	80013cc <Display_WriteChar>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d002      	beq.n	80014f6 <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	e008      	b.n	8001508 <Display_WriteString+0x44>

        str++;	// Next char
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
    while (*str){
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e8      	bne.n	80014d6 <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4623      	mov	r3, r4
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	4603      	mov	r3, r0
 8001524:	80bb      	strh	r3, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]
 800152a:	4613      	mov	r3, r2
 800152c:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	429a      	cmp	r2, r3
 8001534:	d004      	beq.n	8001540 <Display_DrawLine+0x30>
 8001536:	88ba      	ldrh	r2, [r7, #4]
 8001538:	883b      	ldrh	r3, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	f040 8090 	bne.w	8001660 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2b7f      	cmp	r3, #127	@ 0x7f
 8001544:	d901      	bls.n	800154a <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001546:	237f      	movs	r3, #127	@ 0x7f
 8001548:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d901      	bls.n	8001554 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001550:	237f      	movs	r3, #127	@ 0x7f
 8001552:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	2b3f      	cmp	r3, #63	@ 0x3f
 8001558:	d901      	bls.n	800155e <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 800155a:	233f      	movs	r3, #63	@ 0x3f
 800155c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800155e:	883b      	ldrh	r3, [r7, #0]
 8001560:	2b3f      	cmp	r3, #63	@ 0x3f
 8001562:	d901      	bls.n	8001568 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001564:	233f      	movs	r3, #63	@ 0x3f
 8001566:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	429a      	cmp	r2, r3
 800156e:	d205      	bcs.n	800157c <Display_DrawLine+0x6c>
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	b21b      	sxth	r3, r3
 800157a:	e004      	b.n	8001586 <Display_DrawLine+0x76>
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	b21b      	sxth	r3, r3
 8001586:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001588:	88ba      	ldrh	r2, [r7, #4]
 800158a:	883b      	ldrh	r3, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d205      	bcs.n	800159c <Display_DrawLine+0x8c>
 8001590:	883a      	ldrh	r2, [r7, #0]
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21b      	sxth	r3, r3
 800159a:	e004      	b.n	80015a6 <Display_DrawLine+0x96>
 800159c:	88ba      	ldrh	r2, [r7, #4]
 800159e:	883b      	ldrh	r3, [r7, #0]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 80015a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 80015b0:	883a      	ldrh	r2, [r7, #0]
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d205      	bcs.n	80015c4 <Display_DrawLine+0xb4>
			tmp = y1;
 80015b8:	883b      	ldrh	r3, [r7, #0]
 80015ba:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015c0:	893b      	ldrh	r3, [r7, #8]
 80015c2:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d205      	bcs.n	80015d8 <Display_DrawLine+0xc8>
			tmp = x1;
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015d4:	893b      	ldrh	r3, [r7, #8]
 80015d6:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	e00c      	b.n	80015f8 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 80015de:	89f9      	ldrh	r1, [r7, #14]
 80015e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fe28 	bl	800123c <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80015ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015fc:	883b      	ldrh	r3, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	dded      	ble.n	80015de <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 8001602:	e030      	b.n	8001666 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 8001604:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d12b      	bne.n	8001664 <Display_DrawLine+0x154>
		if (y1 < y0) {
 800160c:	883a      	ldrh	r2, [r7, #0]
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d205      	bcs.n	8001620 <Display_DrawLine+0x110>
			tmp = y1;
 8001614:	883b      	ldrh	r3, [r7, #0]
 8001616:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001618:	88bb      	ldrh	r3, [r7, #4]
 800161a:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800161c:	893b      	ldrh	r3, [r7, #8]
 800161e:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	429a      	cmp	r2, r3
 8001626:	d205      	bcs.n	8001634 <Display_DrawLine+0x124>
			tmp = x1;
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001630:	893b      	ldrh	r3, [r7, #8]
 8001632:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	81fb      	strh	r3, [r7, #14]
 8001638:	e00c      	b.n	8001654 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001640:	88b9      	ldrh	r1, [r7, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fdfa 	bl	800123c <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164c:	b29b      	uxth	r3, r3
 800164e:	3301      	adds	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	429a      	cmp	r2, r3
 800165c:	dded      	ble.n	800163a <Display_DrawLine+0x12a>
		}
	}
	return;
 800165e:	e001      	b.n	8001664 <Display_DrawLine+0x154>
		return;
 8001660:	bf00      	nop
 8001662:	e000      	b.n	8001666 <Display_DrawLine+0x156>
	return;
 8001664:	bf00      	nop
}
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af02      	add	r7, sp, #8
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2b7f      	cmp	r3, #127	@ 0x7f
 800168e:	d836      	bhi.n	80016fe <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	2b3f      	cmp	r3, #63	@ 0x3f
 8001694:	d833      	bhi.n	80016fe <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4413      	add	r3, r2
 800169c:	2b7f      	cmp	r3, #127	@ 0x7f
 800169e:	dd03      	ble.n	80016a8 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016a6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80016a8:	88ba      	ldrh	r2, [r7, #4]
 80016aa:	883b      	ldrh	r3, [r7, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80016b0:	dd03      	ble.n	80016ba <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80016b8:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e018      	b.n	80016f2 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	b299      	uxth	r1, r3
 80016ca:	88fa      	ldrh	r2, [r7, #6]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4413      	add	r3, r2
 80016d0:	b29c      	uxth	r4, r3
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	88f8      	ldrh	r0, [r7, #6]
 80016de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	4622      	mov	r2, r4
 80016e8:	f7ff ff12 	bl	8001510 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	883a      	ldrh	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d2e1      	bcs.n	80016c0 <Display_DrawFilledRectangle+0x54>
 80016fc:	e000      	b.n	8001700 <Display_DrawFilledRectangle+0x94>
		return;
 80016fe:	bf00      	nop
	}
}
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}

08001706 <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800172e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	729a      	strb	r2, [r3, #10]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	885b      	ldrh	r3, [r3, #2]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10e      	bne.n	800177e <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	88da      	ldrh	r2, [r3, #6]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	4413      	add	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a9b      	ldrb	r3, [r3, #10]
 8001782:	3b01      	subs	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a9b      	ldrb	r3, [r3, #10]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <Encoder_Task+0x54>
		enc->pps = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	811a      	strh	r2, [r3, #8]
	}
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	809a      	strh	r2, [r3, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	88da      	ldrh	r2, [r3, #6]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	80da      	strh	r2, [r3, #6]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	819a      	strh	r2, [r3, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d050      	beq.n	80018da <Motor_Set_Speed+0xb6>
		return;
	if(speed > 100)
 8001838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183c:	2b64      	cmp	r3, #100	@ 0x64
 800183e:	dd01      	ble.n	8001844 <Motor_Set_Speed+0x20>
		speed = 100;
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 8001844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001848:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800184c:	da01      	bge.n	8001852 <Motor_Set_Speed+0x2e>
		speed = -100;
 800184e:	239c      	movs	r3, #156	@ 0x9c
 8001850:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 8001852:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	429a      	cmp	r2, r3
 800185c:	d03f      	beq.n	80018de <Motor_Set_Speed+0xba>
		return;

	motor->vel = speed * 600;
 800185e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001862:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001866:	fb03 f202 	mul.w	r2, r3, r2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 800186e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	dd10      	ble.n	8001898 <Motor_Set_Speed+0x74>
		motor->direction = FORWARD;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 800187c:	2102      	movs	r1, #2
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f832 	bl	80018e8 <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel-1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6892      	ldr	r2, [r2, #8]
 800188c:	b292      	uxth	r2, r2
 800188e:	3a01      	subs	r2, #1
 8001890:	b292      	uxth	r2, r2
 8001892:	4610      	mov	r0, r2
 8001894:	4798      	blx	r3
 8001896:	e023      	b.n	80018e0 <Motor_Set_Speed+0xbc>
	}else if(speed < 0){
 8001898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189c:	2b00      	cmp	r3, #0
 800189e:	da10      	bge.n	80018c2 <Motor_Set_Speed+0x9e>
		motor->direction = BACKWARD;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80018a6:	2103      	movs	r1, #3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f81d 	bl	80018e8 <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6892      	ldr	r2, [r2, #8]
 80018b6:	b292      	uxth	r2, r2
 80018b8:	43d2      	mvns	r2, r2
 80018ba:	b292      	uxth	r2, r2
 80018bc:	4610      	mov	r0, r2
 80018be:	4798      	blx	r3
 80018c0:	e00e      	b.n	80018e0 <Motor_Set_Speed+0xbc>
	}else{
		motor->direction = FREE_WHEEL;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80018c8:	2101      	movs	r1, #1
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f80c 	bl	80018e8 <Motor_Set_Direction>
		motor->setPWM(0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	2000      	movs	r0, #0
 80018d6:	4798      	blx	r3
 80018d8:	e002      	b.n	80018e0 <Motor_Set_Speed+0xbc>
		return;
 80018da:	bf00      	nop
 80018dc:	e000      	b.n	80018e0 <Motor_Set_Speed+0xbc>
		return;
 80018de:	bf00      	nop
	}
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d027      	beq.n	800194c <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d825      	bhi.n	800194e <Motor_Set_Direction+0x66>
 8001902:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <Motor_Set_Direction+0x20>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	0800194f 	.word	0x0800194f
 800190c:	0800191d 	.word	0x0800191d
 8001910:	08001929 	.word	0x08001929
 8001914:	08001935 	.word	0x08001935
 8001918:	08001941 	.word	0x08001941
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2100      	movs	r1, #0
 8001922:	2000      	movs	r0, #0
 8001924:	4798      	blx	r3
			break;
 8001926:	e012      	b.n	800194e <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	4798      	blx	r3
			break;
 8001932:	e00c      	b.n	800194e <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2101      	movs	r1, #1
 800193a:	2000      	movs	r0, #0
 800193c:	4798      	blx	r3
			break;
 800193e:	e006      	b.n	800194e <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2101      	movs	r1, #1
 8001946:	2001      	movs	r0, #1
 8001948:	4798      	blx	r3
			break;
 800194a:	e000      	b.n	800194e <Motor_Set_Direction+0x66>
		return;
 800194c:	bf00      	nop
	}
}
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d10c      	bne.n	800197e <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	899b      	ldrh	r3, [r3, #12]
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	899b      	ldrh	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
	}
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <Comm_Task>:

void Comm_Task(s_commData* comm){
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d002      	beq.n	8001a10 <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f81a 	bl	8001a44 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	789a      	ldrb	r2, [r3, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	78db      	ldrb	r3, [r3, #3]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d00e      	beq.n	8001a3a <Comm_Task+0x48>
		if(!comm->isESP01){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <Comm_Task+0x48>
				comm->dataWriter(comm);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a52:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001a54:	e11b      	b.n	8001c8e <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	f200 810e 	bhi.w	8001c7e <decodeProtocol+0x23a>
 8001a62:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <decodeProtocol+0x24>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001a85 	.word	0x08001a85
 8001a6c:	08001ab7 	.word	0x08001ab7
 8001a70:	08001af9 	.word	0x08001af9
 8001a74:	08001b3b 	.word	0x08001b3b
 8001a78:	08001b7d 	.word	0x08001b7d
 8001a7c:	08001baf 	.word	0x08001baf
 8001a80:	08001c01 	.word	0x08001c01
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	b2d1      	uxtb	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a9e:	2b55      	cmp	r3, #85	@ 0x55
 8001aa0:	f040 80f2 	bne.w	8001c88 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001ab4:	e0e8      	b.n	8001c88 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001ad0:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ad2:	d104      	bne.n	8001ade <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001adc:	e0d7      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001af6:	e0ca      	b.n	8001c8e <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	b2d1      	uxtb	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b12:	2b45      	cmp	r3, #69	@ 0x45
 8001b14:	d104      	bne.n	8001b20 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b1e:	e0b6      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b38:	e0a9      	b.n	8001c8e <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	b2d1      	uxtb	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b54:	2b52      	cmp	r3, #82	@ 0x52
 8001b56:	d104      	bne.n	8001b62 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b60:	e095      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b7a:	e088      	b.n	8001c8e <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001ba0:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <decodeProtocol+0x264>)
 8001ba2:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001bac:	e06f      	b.n	8001c8e <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	b2d1      	uxtb	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001bc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bca:	d10c      	bne.n	8001be6 <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2206      	movs	r2, #6
 8001bd0:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <decodeProtocol+0x264>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001be4:	e053      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001bfe:	e046      	b.n	8001c8e <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d914      	bls.n	8001c32 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	b2d1      	uxtb	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001c28:	4053      	eors	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c3c:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d122      	bne.n	8001c8c <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	440b      	add	r3, r1
 8001c60:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d111      	bne.n	8001c8c <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
				}
			}
			break;
 8001c7c:	e006      	b.n	8001c8c <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001c86:	e002      	b.n	8001c8e <decodeProtocol+0x24a>
			break;
 8001c88:	bf00      	nop
 8001c8a:	e000      	b.n	8001c8e <decodeProtocol+0x24a>
			break;
 8001c8c:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	f47f aedd 	bne.w	8001a56 <decodeProtocol+0x12>
		}
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000082d 	.word	0x2000082d

08001cac <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	460b      	mov	r3, r1
 8001cba:	72fb      	strb	r3, [r7, #11]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001cc0:	4b62      	ldr	r3, [pc, #392]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001cc6:	4b62      	ldr	r3, [pc, #392]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001ccc:	4b60      	ldr	r3, [pc, #384]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	b2d1      	uxtb	r1, r2
 8001cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cd6:	7011      	strb	r1, [r2, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001cdc:	2155      	movs	r1, #85	@ 0x55
 8001cde:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	b2d1      	uxtb	r1, r2
 8001ce8:	4a59      	ldr	r2, [pc, #356]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cea:	7011      	strb	r1, [r2, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001cf0:	214e      	movs	r1, #78	@ 0x4e
 8001cf2:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001cf4:	4b56      	ldr	r3, [pc, #344]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	b2d1      	uxtb	r1, r2
 8001cfc:	4a54      	ldr	r2, [pc, #336]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cfe:	7011      	strb	r1, [r2, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b54      	ldr	r3, [pc, #336]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d04:	2145      	movs	r1, #69	@ 0x45
 8001d06:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001d08:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	b2d1      	uxtb	r1, r2
 8001d10:	4a4f      	ldr	r2, [pc, #316]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d12:	7011      	strb	r1, [r2, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b4f      	ldr	r3, [pc, #316]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d18:	2152      	movs	r1, #82	@ 0x52
 8001d1a:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <comm_sendCMD+0x1ac>)
 8001d22:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001d24:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	b2d1      	uxtb	r1, r2
 8001d2c:	4a48      	ldr	r2, [pc, #288]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d2e:	7011      	strb	r1, [r2, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b48      	ldr	r3, [pc, #288]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001d38:	4b45      	ldr	r3, [pc, #276]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	b2d1      	uxtb	r1, r2
 8001d40:	4a43      	ldr	r2, [pc, #268]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d42:	7011      	strb	r1, [r2, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d48:	213a      	movs	r1, #58	@ 0x3a
 8001d4a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001d4c:	4b40      	ldr	r3, [pc, #256]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	b2d1      	uxtb	r1, r2
 8001d54:	4a3e      	ldr	r2, [pc, #248]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d56:	7011      	strb	r1, [r2, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	2bb1      	cmp	r3, #177	@ 0xb1
 8001d64:	d002      	beq.n	8001d6c <comm_sendCMD+0xc0>
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	2bee      	cmp	r3, #238	@ 0xee
 8001d6a:	d109      	bne.n	8001d80 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	b2d1      	uxtb	r1, r2
 8001d74:	4a36      	ldr	r2, [pc, #216]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d76:	7011      	strb	r1, [r2, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4a36      	ldr	r2, [pc, #216]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d7c:	7abb      	ldrb	r3, [r7, #10]
 8001d7e:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d013      	beq.n	8001dae <comm_sendCMD+0x102>
 8001d86:	7abb      	ldrb	r3, [r7, #10]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d010      	beq.n	8001dae <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001d8c:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d94:	4413      	add	r3, r2
 8001d96:	7aba      	ldrb	r2, [r7, #10]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f010 f88e 	bl	8011ebc <memcpy>
        auxIndex += len;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	7abb      	ldrb	r3, [r7, #10]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001dac:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <comm_sendCMD+0x1ac>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <comm_sendCMD+0x1b0>)
 8001dc0:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <comm_sendCMD+0x1ac>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <comm_sendCMD+0x1b0>)
 8001dca:	7819      	ldrb	r1, [r3, #0]
 8001dcc:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001dce:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e01f      	b.n	8001e1e <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001de6:	5c9a      	ldrb	r2, [r3, r2]
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4053      	eors	r3, r2
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001df2:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001df4:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	78db      	ldrb	r3, [r3, #3]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	b2d1      	uxtb	r1, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	70d1      	strb	r1, [r2, #3]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001e0a:	5c1a      	ldrb	r2, [r3, r0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	440b      	add	r3, r1
 8001e10:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3d9      	bcc.n	8001dde <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	b2d1      	uxtb	r1, r2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	70d1      	strb	r1, [r2, #3]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	440b      	add	r3, r1
 8001e40:	711a      	strb	r2, [r3, #4]
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000080a 	.word	0x2000080a
 8001e50:	2000080b 	.word	0x2000080b
 8001e54:	2000080c 	.word	0x2000080c
 8001e58:	2000082a 	.word	0x2000082a
 8001e5c:	2000082b 	.word	0x2000082b
 8001e60:	2000082c 	.word	0x2000082c

08001e64 <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
	esp01ATSate = ESP01ATIDLE;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <ESP01_SetWIFI+0x54>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <ESP01_SetWIFI+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <ESP01_SetWIFI+0x5c>)
 8001e80:	f00f ffdc 	bl	8011e3c <strncpy>
	esp01SSID[63] = '\0';
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <ESP01_SetWIFI+0x5c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <ESP01_SetWIFI+0x60>)
 8001e92:	f00f ffd3 	bl	8011e3c <strncpy>
	esp01PASSWORD[31] = '\0';
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <ESP01_SetWIFI+0x60>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <ESP01_SetWIFI+0x64>)
 8001e9e:	2232      	movs	r2, #50	@ 0x32
 8001ea0:	601a      	str	r2, [r3, #0]
	esp01ATSate = ESP01ATHARDRST0;
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <ESP01_SetWIFI+0x54>)
 8001ea4:	220d      	movs	r2, #13
 8001ea6:	701a      	strb	r2, [r3, #0]

	esp01TriesAT = 0;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <ESP01_SetWIFI+0x68>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000082e 	.word	0x2000082e
 8001ebc:	20000830 	.word	0x20000830
 8001ec0:	20000848 	.word	0x20000848
 8001ec4:	20000888 	.word	0x20000888
 8001ec8:	20000834 	.word	0x20000834
 8001ecc:	20000a64 	.word	0x20000a64

08001ed0 <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <ESP01_StartUDP+0x88>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	e02f      	b.n	8001f4e <ESP01_StartUDP+0x7e>

	if(LocalPORT == 0)
 8001eee:	883b      	ldrh	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8001ef4:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001ef8:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <ESP01_StartUDP+0x8c>)
 8001efc:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <ESP01_StartUDP+0x90>)
 8001efe:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 8001f00:	220f      	movs	r2, #15
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4817      	ldr	r0, [pc, #92]	@ (8001f64 <ESP01_StartUDP+0x94>)
 8001f06:	f00f ff99 	bl	8011e3c <strncpy>
	esp01RemoteIP[15] = '\0';
 8001f0a:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <ESP01_StartUDP+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	220a      	movs	r2, #10
 8001f14:	4914      	ldr	r1, [pc, #80]	@ (8001f68 <ESP01_StartUDP+0x98>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00f ff22 	bl	8011d60 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8001f1c:	883b      	ldrh	r3, [r7, #0]
 8001f1e:	220a      	movs	r2, #10
 8001f20:	4912      	ldr	r1, [pc, #72]	@ (8001f6c <ESP01_StartUDP+0x9c>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00f ff1c 	bl	8011d60 <itoa>

	if(esp01SSID[0] == '\0')
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <ESP01_StartUDP+0xa0>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e00c      	b.n	8001f4e <ESP01_StartUDP+0x7e>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <ESP01_StartUDP+0xa4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e003      	b.n	8001f4e <ESP01_StartUDP+0x7e>

	esp01ATSate = ESP01ATCIPCLOSE;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <ESP01_StartUDP+0xa8>)
 8001f48:	2209      	movs	r2, #9
 8001f4a:	701a      	strb	r2, [r3, #0]

	return ESP01_UDPTCP_CONNECTING;
 8001f4c:	2306      	movs	r3, #6
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000a68 	.word	0x20000a68
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	00504455 	.word	0x00504455
 8001f64:	200008a8 	.word	0x200008a8
 8001f68:	200008b8 	.word	0x200008b8
 8001f6c:	200008d0 	.word	0x200008d0
 8001f70:	20000848 	.word	0x20000848
 8001f74:	20000830 	.word	0x20000830
 8001f78:	2000082e 	.word	0x2000082e

08001f7c <ESP01_StateWIFI>:
		return;

	esp01ATSate = ESP01ATCIPCLOSE;
}

_eESP01STATUS ESP01_StateWIFI(){
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	if(esp01Handle.WriteUSARTByte == NULL)
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <ESP01_StateWIFI+0x30>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <ESP01_StateWIFI+0x12>
		return ESP01_NOT_INIT;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	e009      	b.n	8001fa2 <ESP01_StateWIFI+0x26>

	if(esp01Flags.bit.WIFICONNECTED)
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <ESP01_StateWIFI+0x34>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <ESP01_StateWIFI+0x24>
		return ESP01_WIFI_CONNECTED;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <ESP01_StateWIFI+0x26>
	else
		return ESP01_WIFI_DISCONNECTED;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20000a68 	.word	0x20000a68
 8001fb0:	20000830 	.word	0x20000830

08001fb4 <ESP01_GetLocalIP>:

char *ESP01_GetLocalIP(){
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	if(esp01Flags.bit.WIFICONNECTED &&  esp01LocalIP[0]!='\0')
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <ESP01_GetLocalIP+0x2c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <ESP01_GetLocalIP+0x1e>
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <ESP01_GetLocalIP+0x30>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <ESP01_GetLocalIP+0x1e>
		return esp01LocalIP;
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <ESP01_GetLocalIP+0x30>)
 8001fd0:	e000      	b.n	8001fd4 <ESP01_GetLocalIP+0x20>

	return NULL;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000830 	.word	0x20000830
 8001fe4:	200008c0 	.word	0x200008c0

08001fe8 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <ESP01_WriteRX+0x38>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	b291      	uxth	r1, r2
 8001ffa:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <ESP01_WriteRX+0x38>)
 8001ffc:	8011      	strh	r1, [r2, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <ESP01_WriteRX+0x3c>)
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <ESP01_WriteRX+0x38>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	2b80      	cmp	r3, #128	@ 0x80
 800200c:	d102      	bne.n	8002014 <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 800200e:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <ESP01_WriteRX+0x38>)
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	20000a5c 	.word	0x20000a5c
 8002024:	200008dc 	.word	0x200008dc

08002028 <ESP01_Init>:

	return ESP01_SEND_BUSY;
}


void ESP01_Init(_sESP01Handle *hESP01){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002030:	220c      	movs	r2, #12
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4810      	ldr	r0, [pc, #64]	@ (8002078 <ESP01_Init+0x50>)
 8002036:	f00f ff41 	bl	8011ebc <memcpy>

	esp01ATSate = ESP01ATIDLE;
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <ESP01_Init+0x54>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <ESP01_Init+0x58>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <ESP01_Init+0x5c>)
 8002048:	2200      	movs	r2, #0
 800204a:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 800204c:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <ESP01_Init+0x60>)
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <ESP01_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <ESP01_Init+0x68>)
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <ESP01_Init+0x6c>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <ESP01_Init+0x70>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <ESP01_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000a68 	.word	0x20000a68
 800207c:	2000082e 	.word	0x2000082e
 8002080:	200008d6 	.word	0x200008d6
 8002084:	20000a60 	.word	0x20000a60
 8002088:	20000a62 	.word	0x20000a62
 800208c:	20000a5e 	.word	0x20000a5e
 8002090:	20000a5c 	.word	0x20000a5c
 8002094:	20000830 	.word	0x20000830
 8002098:	20000840 	.word	0x20000840
 800209c:	20000844 	.word	0x20000844

080020a0 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <ESP01_Timeout10ms+0x54>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <ESP01_Timeout10ms+0x54>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	4a10      	ldr	r2, [pc, #64]	@ (80020f4 <ESP01_Timeout10ms+0x54>)
 80020b4:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <ESP01_Timeout10ms+0x58>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <ESP01_Timeout10ms+0x58>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <ESP01_Timeout10ms+0x58>)
 80020c6:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <ESP01_Timeout10ms+0x58>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <ESP01_Timeout10ms+0x5c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <ESP01_Timeout10ms+0x60>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <ESP01_Timeout10ms+0x60>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4a06      	ldr	r2, [pc, #24]	@ (8002100 <ESP01_Timeout10ms+0x60>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000834 	.word	0x20000834
 80020f8:	20000838 	.word	0x20000838
 80020fc:	200008d6 	.word	0x200008d6
 8002100:	2000083c 	.word	0x2000083c

08002104 <ESP01_Task>:

void ESP01_Task(){
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0

	if(esp01irRXAT != esp01iwRXAT)
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <ESP01_Task+0x28>)
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <ESP01_Task+0x2c>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <ESP01_Task+0x14>
		ESP01ATDecode();
 8002114:	f000 f830 	bl	8002178 <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <ESP01_Task+0x30>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <ESP01_Task+0x20>
		ESP01DOConnection();
 8002120:	f000 fbe0 	bl	80028e4 <ESP01DOConnection>

	ESP01SENDData();
 8002124:	f000 fde8 	bl	8002cf8 <ESP01SENDData>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000a5e 	.word	0x20000a5e
 8002130:	20000a5c 	.word	0x20000a5c
 8002134:	20000834 	.word	0x20000834

08002138 <ESP01_AttachChangeState>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	ESP01ChangeState = aESP01ChangeState;
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <ESP01_AttachChangeState+0x1c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000840 	.word	0x20000840

08002158 <ESP01_AttachDebugStr>:

void ESP01_AttachDebugStr(void (*aESP01DbgStr)(const char *dbgStr)){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	ESP01DbgStr = aESP01DbgStr;
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <ESP01_AttachDebugStr+0x1c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000844 	.word	0x20000844

08002178 <ESP01ATDecode>:




/* Private Functions */
static void ESP01ATDecode(){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;

	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 800217e:	4b7f      	ldr	r3, [pc, #508]	@ (800237c <ESP01ATDecode+0x204>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b0d      	cmp	r3, #13
 8002184:	d007      	beq.n	8002196 <ESP01ATDecode+0x1e>
 8002186:	4b7d      	ldr	r3, [pc, #500]	@ (800237c <ESP01ATDecode+0x204>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b0e      	cmp	r3, #14
 800218c:	d003      	beq.n	8002196 <ESP01ATDecode+0x1e>
	   esp01ATSate==ESP01ATHARDRSTSTOP){
 800218e:	4b7b      	ldr	r3, [pc, #492]	@ (800237c <ESP01ATDecode+0x204>)
 8002190:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATSate==ESP01ATHARDRST0 || esp01ATSate==ESP01ATHARDRST1 ||
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d104      	bne.n	80021a0 <ESP01ATDecode+0x28>
		esp01irRXAT = esp01iwRXAT;
 8002196:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <ESP01ATDecode+0x208>)
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	4b7a      	ldr	r3, [pc, #488]	@ (8002384 <ESP01ATDecode+0x20c>)
 800219c:	801a      	strh	r2, [r3, #0]
		return;
 800219e:	e381      	b.n	80028a4 <ESP01ATDecode+0x72c>
	}


	i = esp01iwRXAT;
 80021a0:	4b77      	ldr	r3, [pc, #476]	@ (8002380 <ESP01ATDecode+0x208>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 80021a6:	4b78      	ldr	r3, [pc, #480]	@ (8002388 <ESP01ATDecode+0x210>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 80021ac:	e374      	b.n	8002898 <ESP01ATDecode+0x720>
		value = esp01RXATBuf[esp01irRXAT];
 80021ae:	4b75      	ldr	r3, [pc, #468]	@ (8002384 <ESP01ATDecode+0x20c>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b75      	ldr	r3, [pc, #468]	@ (800238c <ESP01ATDecode+0x214>)
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 80021ba:	4b75      	ldr	r3, [pc, #468]	@ (8002390 <ESP01ATDecode+0x218>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	f200 834b 	bhi.w	800285a <ESP01ATDecode+0x6e2>
 80021c4:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <ESP01ATDecode+0x54>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	08002201 	.word	0x08002201
 80021d0:	080022f1 	.word	0x080022f1
 80021d4:	080024d3 	.word	0x080024d3
 80021d8:	0800285b 	.word	0x0800285b
 80021dc:	0800285b 	.word	0x0800285b
 80021e0:	080026cb 	.word	0x080026cb
 80021e4:	08002711 	.word	0x08002711
 80021e8:	08002727 	.word	0x08002727
 80021ec:	08002753 	.word	0x08002753
 80021f0:	0800285b 	.word	0x0800285b
 80021f4:	0800279f 	.word	0x0800279f
 80021f8:	080027c7 	.word	0x080027c7
 80021fc:	0800281d 	.word	0x0800281d
		case 0:
            indexResponse = 0;
 8002200:	4b64      	ldr	r3, [pc, #400]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 8002206:	4b64      	ldr	r3, [pc, #400]	@ (8002398 <ESP01ATDecode+0x220>)
 8002208:	2204      	movs	r2, #4
 800220a:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 800220c:	e03e      	b.n	800228c <ESP01ATDecode+0x114>
                if(value == responses[indexResponse][indexResponseChar]){
 800220e:	4b61      	ldr	r3, [pc, #388]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b61      	ldr	r3, [pc, #388]	@ (800239c <ESP01ATDecode+0x224>)
 8002216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221a:	4a5f      	ldr	r2, [pc, #380]	@ (8002398 <ESP01ATDecode+0x220>)
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	797a      	ldrb	r2, [r7, #5]
 8002224:	429a      	cmp	r2, r3
 8002226:	d12b      	bne.n	8002280 <ESP01ATDecode+0x108>
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8002228:	4b5a      	ldr	r3, [pc, #360]	@ (8002394 <ESP01ATDecode+0x21c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b5b      	ldr	r3, [pc, #364]	@ (800239c <ESP01ATDecode+0x224>)
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3b30      	subs	r3, #48	@ 0x30
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <ESP01ATDecode+0x228>)
 800223c:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 800223e:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <ESP01ATDecode+0x228>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b54      	ldr	r3, [pc, #336]	@ (80023a0 <ESP01ATDecode+0x228>)
 800224e:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002250:	4b50      	ldr	r3, [pc, #320]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b51      	ldr	r3, [pc, #324]	@ (800239c <ESP01ATDecode+0x224>)
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	3301      	adds	r3, #1
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <ESP01ATDecode+0x228>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b30      	subs	r3, #48	@ 0x30
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b4c      	ldr	r3, [pc, #304]	@ (80023a0 <ESP01ATDecode+0x228>)
 8002270:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <ESP01ATDecode+0x228>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b49      	ldr	r3, [pc, #292]	@ (80023a0 <ESP01ATDecode+0x228>)
 800227c:	801a      	strh	r2, [r3, #0]
                    break;
 800227e:	e00d      	b.n	800229c <ESP01ATDecode+0x124>
                }
                indexResponse++;
 8002280:	4b44      	ldr	r3, [pc, #272]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b42      	ldr	r3, [pc, #264]	@ (8002394 <ESP01ATDecode+0x21c>)
 800228a:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 800228c:	4b41      	ldr	r3, [pc, #260]	@ (8002394 <ESP01ATDecode+0x21c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b42      	ldr	r3, [pc, #264]	@ (800239c <ESP01ATDecode+0x224>)
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1b8      	bne.n	800220e <ESP01ATDecode+0x96>
            }
            if(responses[indexResponse] != NULL){
 800229c:	4b3d      	ldr	r3, [pc, #244]	@ (8002394 <ESP01ATDecode+0x21c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b3e      	ldr	r3, [pc, #248]	@ (800239c <ESP01ATDecode+0x224>)
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <ESP01ATDecode+0x148>
                esp01HState = 1;
 80022ac:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <ESP01ATDecode+0x218>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 80022b2:	4b39      	ldr	r3, [pc, #228]	@ (8002398 <ESP01ATDecode+0x220>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b37      	ldr	r3, [pc, #220]	@ (8002398 <ESP01ATDecode+0x220>)
 80022bc:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 80022be:	e2d3      	b.n	8002868 <ESP01ATDecode+0x6f0>
				esp01TimeoutDataRx = 0;
 80022c0:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <ESP01ATDecode+0x210>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 80022c6:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <ESP01ATDecode+0x22c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 82c9 	beq.w	8002868 <ESP01ATDecode+0x6f0>
					if(value == '>'){
 80022d6:	797b      	ldrb	r3, [r7, #5]
 80022d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80022da:	f040 82c5 	bne.w	8002868 <ESP01ATDecode+0x6f0>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 80022de:	4a31      	ldr	r2, [pc, #196]	@ (80023a4 <ESP01ATDecode+0x22c>)
 80022e0:	7813      	ldrb	r3, [r2, #0]
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 80022e8:	4b2f      	ldr	r3, [pc, #188]	@ (80023a8 <ESP01ATDecode+0x230>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
			break;
 80022ee:	e2bb      	b.n	8002868 <ESP01ATDecode+0x6f0>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 80022f0:	4b28      	ldr	r3, [pc, #160]	@ (8002394 <ESP01ATDecode+0x21c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b29      	ldr	r3, [pc, #164]	@ (800239c <ESP01ATDecode+0x224>)
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	4a26      	ldr	r2, [pc, #152]	@ (8002398 <ESP01ATDecode+0x220>)
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	797a      	ldrb	r2, [r7, #5]
 8002306:	429a      	cmp	r2, r3
 8002308:	d133      	bne.n	8002372 <ESP01ATDecode+0x1fa>
                esp01nBytes--;
 800230a:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <ESP01ATDecode+0x228>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <ESP01ATDecode+0x228>)
 8002314:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <ESP01ATDecode+0x228>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <ESP01ATDecode+0x1ae>
 800231e:	797b      	ldrb	r3, [r7, #5]
 8002320:	2b0d      	cmp	r3, #13
 8002322:	f040 80cf 	bne.w	80024c4 <ESP01ATDecode+0x34c>
                    esp01HState = (responses[indexResponse][2] - '0');
 8002326:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <ESP01ATDecode+0x224>)
 800232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002332:	3302      	adds	r3, #2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3b30      	subs	r3, #48	@ 0x30
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <ESP01ATDecode+0x218>)
 800233c:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 800233e:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <ESP01ATDecode+0x218>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <ESP01ATDecode+0x218>)
 800234e:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <ESP01ATDecode+0x224>)
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	3303      	adds	r3, #3
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <ESP01ATDecode+0x218>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4413      	add	r3, r2
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3b30      	subs	r3, #48	@ 0x30
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <ESP01ATDecode+0x218>)
 800236e:	701a      	strb	r2, [r3, #0]
                    break;
 8002370:	e285      	b.n	800287e <ESP01ATDecode+0x706>
                }
            }
            else{
                indexResponse = 0;
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <ESP01ATDecode+0x21c>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002378:	e088      	b.n	800248c <ESP01ATDecode+0x314>
 800237a:	bf00      	nop
 800237c:	2000082e 	.word	0x2000082e
 8002380:	20000a5c 	.word	0x20000a5c
 8002384:	20000a5e 	.word	0x20000a5e
 8002388:	20000838 	.word	0x20000838
 800238c:	200008dc 	.word	0x200008dc
 8002390:	200008d6 	.word	0x200008d6
 8002394:	20000a74 	.word	0x20000a74
 8002398:	20000a75 	.word	0x20000a75
 800239c:	08013c80 	.word	0x08013c80
 80023a0:	200008d8 	.word	0x200008d8
 80023a4:	20000830 	.word	0x20000830
 80023a8:	2000083c 	.word	0x2000083c
                    esp01nBytes = (responses[indexResponse][0] - '0');
 80023ac:	4ba4      	ldr	r3, [pc, #656]	@ (8002640 <ESP01ATDecode+0x4c8>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4ba4      	ldr	r3, [pc, #656]	@ (8002644 <ESP01ATDecode+0x4cc>)
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3b30      	subs	r3, #48	@ 0x30
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4ba2      	ldr	r3, [pc, #648]	@ (8002648 <ESP01ATDecode+0x4d0>)
 80023c0:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 80023c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002648 <ESP01ATDecode+0x4d0>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002648 <ESP01ATDecode+0x4d0>)
 80023d2:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 80023d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002640 <ESP01ATDecode+0x4c8>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b9a      	ldr	r3, [pc, #616]	@ (8002644 <ESP01ATDecode+0x4cc>)
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	3301      	adds	r3, #1
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b98      	ldr	r3, [pc, #608]	@ (8002648 <ESP01ATDecode+0x4d0>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b30      	subs	r3, #48	@ 0x30
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	4b95      	ldr	r3, [pc, #596]	@ (8002648 <ESP01ATDecode+0x4d0>)
 80023f4:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 80023f6:	4b94      	ldr	r3, [pc, #592]	@ (8002648 <ESP01ATDecode+0x4d0>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	4a94      	ldr	r2, [pc, #592]	@ (800264c <ESP01ATDecode+0x4d4>)
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	b29b      	uxth	r3, r3
 8002402:	3303      	adds	r3, #3
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b90      	ldr	r3, [pc, #576]	@ (8002648 <ESP01ATDecode+0x4d0>)
 8002408:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 800240a:	4b8f      	ldr	r3, [pc, #572]	@ (8002648 <ESP01ATDecode+0x4d0>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002410:	d836      	bhi.n	8002480 <ESP01ATDecode+0x308>
 8002412:	4b8b      	ldr	r3, [pc, #556]	@ (8002640 <ESP01ATDecode+0x4c8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	4b8a      	ldr	r3, [pc, #552]	@ (8002644 <ESP01ATDecode+0x4cc>)
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	4a8b      	ldr	r2, [pc, #556]	@ (800264c <ESP01ATDecode+0x4d4>)
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	797a      	ldrb	r2, [r7, #5]
 8002428:	429a      	cmp	r2, r3
 800242a:	d129      	bne.n	8002480 <ESP01ATDecode+0x308>
                        if(esp01nBytes == 0){
 800242c:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <ESP01ATDecode+0x4d0>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d134      	bne.n	800249e <ESP01ATDecode+0x326>
                            esp01HState = (responses[indexResponse][2] - '0');
 8002434:	4b82      	ldr	r3, [pc, #520]	@ (8002640 <ESP01ATDecode+0x4c8>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b82      	ldr	r3, [pc, #520]	@ (8002644 <ESP01ATDecode+0x4cc>)
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	3302      	adds	r3, #2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3b30      	subs	r3, #48	@ 0x30
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b81      	ldr	r3, [pc, #516]	@ (8002650 <ESP01ATDecode+0x4d8>)
 800244a:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 800244c:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <ESP01ATDecode+0x4d8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b7d      	ldr	r3, [pc, #500]	@ (8002650 <ESP01ATDecode+0x4d8>)
 800245c:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 800245e:	4b78      	ldr	r3, [pc, #480]	@ (8002640 <ESP01ATDecode+0x4c8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	4b77      	ldr	r3, [pc, #476]	@ (8002644 <ESP01ATDecode+0x4cc>)
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	3303      	adds	r3, #3
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	4b78      	ldr	r3, [pc, #480]	@ (8002650 <ESP01ATDecode+0x4d8>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3b30      	subs	r3, #48	@ 0x30
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b75      	ldr	r3, [pc, #468]	@ (8002650 <ESP01ATDecode+0x4d8>)
 800247c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800247e:	e00e      	b.n	800249e <ESP01ATDecode+0x326>
                    }
                    indexResponse++;
 8002480:	4b6f      	ldr	r3, [pc, #444]	@ (8002640 <ESP01ATDecode+0x4c8>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b6d      	ldr	r3, [pc, #436]	@ (8002640 <ESP01ATDecode+0x4c8>)
 800248a:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 800248c:	4b6c      	ldr	r3, [pc, #432]	@ (8002640 <ESP01ATDecode+0x4c8>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b6c      	ldr	r3, [pc, #432]	@ (8002644 <ESP01ATDecode+0x4cc>)
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d187      	bne.n	80023ac <ESP01ATDecode+0x234>
 800249c:	e000      	b.n	80024a0 <ESP01ATDecode+0x328>
                        break;
 800249e:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 80024a0:	4b67      	ldr	r3, [pc, #412]	@ (8002640 <ESP01ATDecode+0x4c8>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b67      	ldr	r3, [pc, #412]	@ (8002644 <ESP01ATDecode+0x4cc>)
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <ESP01ATDecode+0x34c>
                    esp01HState = 0;
 80024b0:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <ESP01ATDecode+0x4d8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <ESP01ATDecode+0x4dc>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <ESP01ATDecode+0x4dc>)
 80024c0:	801a      	strh	r2, [r3, #0]
                    break;
 80024c2:	e1dc      	b.n	800287e <ESP01ATDecode+0x706>
                }
            }
			indexResponseChar++;
 80024c4:	4b61      	ldr	r3, [pc, #388]	@ (800264c <ESP01ATDecode+0x4d4>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <ESP01ATDecode+0x4d4>)
 80024ce:	701a      	strb	r2, [r3, #0]
			break;
 80024d0:	e1d5      	b.n	800287e <ESP01ATDecode+0x706>
		case 2:
			if(value == '\n'){
 80024d2:	797b      	ldrb	r3, [r7, #5]
 80024d4:	2b0a      	cmp	r3, #10
 80024d6:	f040 81c9 	bne.w	800286c <ESP01ATDecode+0x6f4>
				esp01HState = 0;
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <ESP01ATDecode+0x4d8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 80024e0:	4b57      	ldr	r3, [pc, #348]	@ (8002640 <ESP01ATDecode+0x4c8>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	f200 81c1 	bhi.w	800286c <ESP01ATDecode+0x6f4>
 80024ea:	a201      	add	r2, pc, #4	@ (adr r2, 80024f0 <ESP01ATDecode+0x378>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	080026af 	.word	0x080026af
 80024f4:	080026af 	.word	0x080026af
 80024f8:	08002539 	.word	0x08002539
 80024fc:	08002555 	.word	0x08002555
 8002500:	08002583 	.word	0x08002583
 8002504:	080026af 	.word	0x080026af
 8002508:	080025b9 	.word	0x080025b9
 800250c:	080025b9 	.word	0x080025b9
 8002510:	080025ed 	.word	0x080025ed
 8002514:	080025f9 	.word	0x080025f9
 8002518:	08002615 	.word	0x08002615
 800251c:	08002671 	.word	0x08002671
 8002520:	0800286d 	.word	0x0800286d
 8002524:	0800267d 	.word	0x0800267d
 8002528:	0800286d 	.word	0x0800286d
 800252c:	08002693 	.word	0x08002693
 8002530:	080026af 	.word	0x080026af
 8002534:	080026af 	.word	0x080026af
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATSate == ESP01ATRESPONSE){
 8002538:	4b47      	ldr	r3, [pc, #284]	@ (8002658 <ESP01ATDecode+0x4e0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	f040 80b8 	bne.w	80026b2 <ESP01ATDecode+0x53a>
						esp01TimeoutTask = 0;
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <ESP01ATDecode+0x4e4>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002548:	4a45      	ldr	r2, [pc, #276]	@ (8002660 <ESP01ATDecode+0x4e8>)
 800254a:	7813      	ldrb	r3, [r2, #0]
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	7013      	strb	r3, [r2, #0]
					}
					break;
 8002552:	e0ae      	b.n	80026b2 <ESP01ATDecode+0x53a>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8002554:	4b42      	ldr	r3, [pc, #264]	@ (8002660 <ESP01ATDecode+0x4e8>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80a9 	beq.w	80026b6 <ESP01ATDecode+0x53e>
						esp01Flags.bit.SENDINGDATA = 0;
 8002564:	4a3e      	ldr	r2, [pc, #248]	@ (8002660 <ESP01ATDecode+0x4e8>)
 8002566:	7813      	ldrb	r3, [r2, #0]
 8002568:	f023 0308 	bic.w	r3, r3, #8
 800256c:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 800256e:	4a3c      	ldr	r2, [pc, #240]	@ (8002660 <ESP01ATDecode+0x4e8>)
 8002570:	7813      	ldrb	r3, [r2, #0]
 8002572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002576:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8002578:	4b3a      	ldr	r3, [pc, #232]	@ (8002664 <ESP01ATDecode+0x4ec>)
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <ESP01ATDecode+0x4f0>)
 800257e:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002580:	e099      	b.n	80026b6 <ESP01ATDecode+0x53e>
				case 4://WIFI GOT IP
					esp01TimeoutTask = 0;
 8002582:	4b36      	ldr	r3, [pc, #216]	@ (800265c <ESP01ATDecode+0x4e4>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 8002588:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <ESP01ATDecode+0x4e0>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d104      	bne.n	800259a <ESP01ATDecode+0x422>
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002590:	4a33      	ldr	r2, [pc, #204]	@ (8002660 <ESP01ATDecode+0x4e8>)
 8002592:	7813      	ldrb	r3, [r2, #0]
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 1;
 800259a:	4a31      	ldr	r2, [pc, #196]	@ (8002660 <ESP01ATDecode+0x4e8>)
 800259c:	7813      	ldrb	r3, [r2, #0]
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80025a4:	4b31      	ldr	r3, [pc, #196]	@ (800266c <ESP01ATDecode+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8086 	beq.w	80026ba <ESP01ATDecode+0x542>
						ESP01ChangeState(ESP01_WIFI_CONNECTED);
 80025ae:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <ESP01ATDecode+0x4f4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2003      	movs	r0, #3
 80025b4:	4798      	blx	r3
					break;
 80025b6:	e080      	b.n	80026ba <ESP01ATDecode+0x542>
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80025b8:	4a29      	ldr	r2, [pc, #164]	@ (8002660 <ESP01ATDecode+0x4e8>)
 80025ba:	7813      	ldrb	r3, [r2, #0]
 80025bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025c0:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 80025c2:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <ESP01ATDecode+0x4e8>)
 80025c4:	7813      	ldrb	r3, [r2, #0]
 80025c6:	f023 0302 	bic.w	r3, r3, #2
 80025ca:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <ESP01ATDecode+0x4f4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <ESP01ATDecode+0x464>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <ESP01ATDecode+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2000      	movs	r0, #0
 80025da:	4798      	blx	r3
					if(esp01ATSate == ESP01CWJAPRESPONSE)
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <ESP01ATDecode+0x4e0>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d06c      	beq.n	80026be <ESP01ATDecode+0x546>
						break;
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <ESP01ATDecode+0x4e0>)
 80025e6:	220f      	movs	r2, #15
 80025e8:	701a      	strb	r2, [r3, #0]
					break;
 80025ea:	e06d      	b.n	80026c8 <ESP01ATDecode+0x550>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 80025ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002660 <ESP01ATDecode+0x4e8>)
 80025ee:	7813      	ldrb	r3, [r2, #0]
 80025f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025f4:	7013      	strb	r3, [r2, #0]
					break;
 80025f6:	e067      	b.n	80026c8 <ESP01ATDecode+0x550>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 80025f8:	4a19      	ldr	r2, [pc, #100]	@ (8002660 <ESP01ATDecode+0x4e8>)
 80025fa:	7813      	ldrb	r3, [r2, #0]
 80025fc:	f023 0308 	bic.w	r3, r3, #8
 8002600:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002602:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <ESP01ATDecode+0x4f4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d05b      	beq.n	80026c2 <ESP01ATDecode+0x54a>
						ESP01ChangeState(ESP01_SEND_OK);
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <ESP01ATDecode+0x4f4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	200a      	movs	r0, #10
 8002610:	4798      	blx	r3
					break;
 8002612:	e056      	b.n	80026c2 <ESP01ATDecode+0x54a>
				case 10://CONNECT
					esp01TimeoutTask = 0;
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <ESP01ATDecode+0x4e4>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
					esp01Flags.bit.ATRESPONSEOK = 1;
 800261a:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <ESP01ATDecode+0x4e8>)
 800261c:	7813      	ldrb	r3, [r2, #0]
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.UDPTCPCONNECTED = 1;
 8002624:	4a0e      	ldr	r2, [pc, #56]	@ (8002660 <ESP01ATDecode+0x4e8>)
 8002626:	7813      	ldrb	r3, [r2, #0]
 8002628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800262c:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <ESP01ATDecode+0x4f4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d047      	beq.n	80026c6 <ESP01ATDecode+0x54e>
						ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <ESP01ATDecode+0x4f4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2007      	movs	r0, #7
 800263c:	4798      	blx	r3
					break;
 800263e:	e042      	b.n	80026c6 <ESP01ATDecode+0x54e>
 8002640:	20000a74 	.word	0x20000a74
 8002644:	08013c80 	.word	0x08013c80
 8002648:	200008d8 	.word	0x200008d8
 800264c:	20000a75 	.word	0x20000a75
 8002650:	200008d6 	.word	0x200008d6
 8002654:	20000a5e 	.word	0x20000a5e
 8002658:	2000082e 	.word	0x2000082e
 800265c:	20000834 	.word	0x20000834
 8002660:	20000830 	.word	0x20000830
 8002664:	20000a62 	.word	0x20000a62
 8002668:	20000a60 	.word	0x20000a60
 800266c:	20000840 	.word	0x20000840
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002670:	4a8e      	ldr	r2, [pc, #568]	@ (80028ac <ESP01ATDecode+0x734>)
 8002672:	7813      	ldrb	r3, [r2, #0]
 8002674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002678:	7013      	strb	r3, [r2, #0]
					break;
 800267a:	e025      	b.n	80026c8 <ESP01ATDecode+0x550>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 800267c:	4a8b      	ldr	r2, [pc, #556]	@ (80028ac <ESP01ATDecode+0x734>)
 800267e:	7813      	ldrb	r3, [r2, #0]
 8002680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002684:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002686:	4a89      	ldr	r2, [pc, #548]	@ (80028ac <ESP01ATDecode+0x734>)
 8002688:	7813      	ldrb	r3, [r2, #0]
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	7013      	strb	r3, [r2, #0]
					break;
 8002690:	e01a      	b.n	80026c8 <ESP01ATDecode+0x550>
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002692:	4a86      	ldr	r2, [pc, #536]	@ (80028ac <ESP01ATDecode+0x734>)
 8002694:	7813      	ldrb	r3, [r2, #0]
 8002696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269a:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 800269c:	4a83      	ldr	r2, [pc, #524]	@ (80028ac <ESP01ATDecode+0x734>)
 800269e:	7813      	ldrb	r3, [r2, #0]
 80026a0:	f023 0302 	bic.w	r3, r3, #2
 80026a4:	7013      	strb	r3, [r2, #0]
					esp01ATSate = ESP01ATHARDRSTSTOP;
 80026a6:	4b82      	ldr	r3, [pc, #520]	@ (80028b0 <ESP01ATDecode+0x738>)
 80026a8:	220f      	movs	r2, #15
 80026aa:	701a      	strb	r2, [r3, #0]
					break;
 80026ac:	e00c      	b.n	80026c8 <ESP01ATDecode+0x550>
					break;
 80026ae:	bf00      	nop
 80026b0:	e0dc      	b.n	800286c <ESP01ATDecode+0x6f4>
					break;
 80026b2:	bf00      	nop
 80026b4:	e0da      	b.n	800286c <ESP01ATDecode+0x6f4>
					break;
 80026b6:	bf00      	nop
 80026b8:	e0d8      	b.n	800286c <ESP01ATDecode+0x6f4>
					break;
 80026ba:	bf00      	nop
 80026bc:	e0d6      	b.n	800286c <ESP01ATDecode+0x6f4>
						break;
 80026be:	bf00      	nop
 80026c0:	e0d4      	b.n	800286c <ESP01ATDecode+0x6f4>
					break;
 80026c2:	bf00      	nop
 80026c4:	e0d2      	b.n	800286c <ESP01ATDecode+0x6f4>
					break;
 80026c6:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 80026c8:	e0d0      	b.n	800286c <ESP01ATDecode+0x6f4>
		case 5://CIFR,STAIP
			if(value == ','){
 80026ca:	797b      	ldrb	r3, [r7, #5]
 80026cc:	2b2c      	cmp	r3, #44	@ 0x2c
 80026ce:	d10c      	bne.n	80026ea <ESP01ATDecode+0x572>
				esp01HState = 6;
 80026d0:	4b78      	ldr	r3, [pc, #480]	@ (80028b4 <ESP01ATDecode+0x73c>)
 80026d2:	2206      	movs	r2, #6
 80026d4:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 80026d6:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <ESP01ATDecode+0x740>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80c8 	beq.w	8002870 <ESP01ATDecode+0x6f8>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <ESP01ATDecode+0x740>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4875      	ldr	r0, [pc, #468]	@ (80028bc <ESP01ATDecode+0x744>)
 80026e6:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 80026e8:	e0c2      	b.n	8002870 <ESP01ATDecode+0x6f8>
				esp01HState = 0;
 80026ea:	4b72      	ldr	r3, [pc, #456]	@ (80028b4 <ESP01ATDecode+0x73c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80026f0:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <ESP01ATDecode+0x748>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b71      	ldr	r3, [pc, #452]	@ (80028c0 <ESP01ATDecode+0x748>)
 80026fa:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 80026fc:	4b6e      	ldr	r3, [pc, #440]	@ (80028b8 <ESP01ATDecode+0x740>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80b5 	beq.w	8002870 <ESP01ATDecode+0x6f8>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 8002706:	4b6c      	ldr	r3, [pc, #432]	@ (80028b8 <ESP01ATDecode+0x740>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	486e      	ldr	r0, [pc, #440]	@ (80028c4 <ESP01ATDecode+0x74c>)
 800270c:	4798      	blx	r3
			break;
 800270e:	e0af      	b.n	8002870 <ESP01ATDecode+0x6f8>
		case 6:
			if(value == '\"'){
 8002710:	797b      	ldrb	r3, [r7, #5]
 8002712:	2b22      	cmp	r3, #34	@ 0x22
 8002714:	f040 80ae 	bne.w	8002874 <ESP01ATDecode+0x6fc>
				esp01HState = 7;
 8002718:	4b66      	ldr	r3, [pc, #408]	@ (80028b4 <ESP01ATDecode+0x73c>)
 800271a:	2207      	movs	r2, #7
 800271c:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 800271e:	4b6a      	ldr	r3, [pc, #424]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
			}
			break;
 8002724:	e0a6      	b.n	8002874 <ESP01ATDecode+0x6fc>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8002726:	797b      	ldrb	r3, [r7, #5]
 8002728:	2b22      	cmp	r3, #34	@ 0x22
 800272a:	d003      	beq.n	8002734 <ESP01ATDecode+0x5bc>
 800272c:	4b66      	ldr	r3, [pc, #408]	@ (80028c8 <ESP01ATDecode+0x750>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d103      	bne.n	800273c <ESP01ATDecode+0x5c4>
				esp01HState = 8;
 8002734:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <ESP01ATDecode+0x73c>)
 8002736:	2208      	movs	r2, #8
 8002738:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 800273a:	e0a0      	b.n	800287e <ESP01ATDecode+0x706>
				esp01LocalIP[esp01nBytes++] = value;
 800273c:	4b62      	ldr	r3, [pc, #392]	@ (80028c8 <ESP01ATDecode+0x750>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	b291      	uxth	r1, r2
 8002744:	4a60      	ldr	r2, [pc, #384]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002746:	8011      	strh	r1, [r2, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	4a60      	ldr	r2, [pc, #384]	@ (80028cc <ESP01ATDecode+0x754>)
 800274c:	797b      	ldrb	r3, [r7, #5]
 800274e:	5453      	strb	r3, [r2, r1]
			break;
 8002750:	e095      	b.n	800287e <ESP01ATDecode+0x706>
		case 8:
			if(value == '\n'){
 8002752:	797b      	ldrb	r3, [r7, #5]
 8002754:	2b0a      	cmp	r3, #10
 8002756:	f040 808f 	bne.w	8002878 <ESP01ATDecode+0x700>
				esp01HState = 0;
 800275a:	4b56      	ldr	r3, [pc, #344]	@ (80028b4 <ESP01ATDecode+0x73c>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 8002760:	4b59      	ldr	r3, [pc, #356]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80e      	bhi.n	8002786 <ESP01ATDecode+0x60e>
					esp01LocalIP[esp01nBytes] = '\0';
 8002768:	4b57      	ldr	r3, [pc, #348]	@ (80028c8 <ESP01ATDecode+0x750>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <ESP01ATDecode+0x754>)
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 8002774:	4a4d      	ldr	r2, [pc, #308]	@ (80028ac <ESP01ATDecode+0x734>)
 8002776:	7813      	ldrb	r3, [r2, #0]
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 800277e:	4b54      	ldr	r3, [pc, #336]	@ (80028d0 <ESP01ATDecode+0x758>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e002      	b.n	800278c <ESP01ATDecode+0x614>
				}
				else
					esp01LocalIP[0] = '\0';
 8002786:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <ESP01ATDecode+0x754>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 800278c:	4b51      	ldr	r3, [pc, #324]	@ (80028d4 <ESP01ATDecode+0x75c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d071      	beq.n	8002878 <ESP01ATDecode+0x700>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 8002794:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <ESP01ATDecode+0x75c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2004      	movs	r0, #4
 800279a:	4798      	blx	r3
			}
			break;
 800279c:	e06c      	b.n	8002878 <ESP01ATDecode+0x700>
		case 10://IPD
			if(value == ','){
 800279e:	797b      	ldrb	r3, [r7, #5]
 80027a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80027a2:	d106      	bne.n	80027b2 <ESP01ATDecode+0x63a>
				esp01HState = 11;
 80027a4:	4b43      	ldr	r3, [pc, #268]	@ (80028b4 <ESP01ATDecode+0x73c>)
 80027a6:	220b      	movs	r2, #11
 80027a8:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80027aa:	4b47      	ldr	r3, [pc, #284]	@ (80028c8 <ESP01ATDecode+0x750>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80027b0:	e065      	b.n	800287e <ESP01ATDecode+0x706>
				esp01HState = 0;
 80027b2:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <ESP01ATDecode+0x73c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80027b8:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <ESP01ATDecode+0x748>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <ESP01ATDecode+0x748>)
 80027c2:	801a      	strh	r2, [r3, #0]
			break;
 80027c4:	e05b      	b.n	800287e <ESP01ATDecode+0x706>
		case 11:
			if(value == ':')
 80027c6:	797b      	ldrb	r3, [r7, #5]
 80027c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80027ca:	d103      	bne.n	80027d4 <ESP01ATDecode+0x65c>
				esp01HState = 12;
 80027cc:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <ESP01ATDecode+0x73c>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	701a      	strb	r2, [r3, #0]
				else{
					esp01nBytes *= 10;
					esp01nBytes += (value - '0');
				}
			}
			break;
 80027d2:	e054      	b.n	800287e <ESP01ATDecode+0x706>
				if(value<'0' || value>'9'){
 80027d4:	797b      	ldrb	r3, [r7, #5]
 80027d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80027d8:	d902      	bls.n	80027e0 <ESP01ATDecode+0x668>
 80027da:	797b      	ldrb	r3, [r7, #5]
 80027dc:	2b39      	cmp	r3, #57	@ 0x39
 80027de:	d909      	bls.n	80027f4 <ESP01ATDecode+0x67c>
					esp01HState = 0;
 80027e0:	4b34      	ldr	r3, [pc, #208]	@ (80028b4 <ESP01ATDecode+0x73c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 80027e6:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <ESP01ATDecode+0x748>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <ESP01ATDecode+0x748>)
 80027f0:	801a      	strh	r2, [r3, #0]
			break;
 80027f2:	e044      	b.n	800287e <ESP01ATDecode+0x706>
					esp01nBytes *= 10;
 80027f4:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <ESP01ATDecode+0x750>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002804:	801a      	strh	r2, [r3, #0]
					esp01nBytes += (value - '0');
 8002806:	797b      	ldrb	r3, [r7, #5]
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b2f      	ldr	r3, [pc, #188]	@ (80028c8 <ESP01ATDecode+0x750>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b30      	subs	r3, #48	@ 0x30
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002818:	801a      	strh	r2, [r3, #0]
			break;
 800281a:	e030      	b.n	800287e <ESP01ATDecode+0x706>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 800281c:	4b2e      	ldr	r3, [pc, #184]	@ (80028d8 <ESP01ATDecode+0x760>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <ESP01ATDecode+0x6b6>
				esp01Handle.WriteByteToBufRX(value);
 8002824:	4b2c      	ldr	r3, [pc, #176]	@ (80028d8 <ESP01ATDecode+0x760>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	797a      	ldrb	r2, [r7, #5]
 800282a:	4610      	mov	r0, r2
 800282c:	4798      	blx	r3
			esp01nBytes--;
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <ESP01ATDecode+0x750>)
 8002838:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 800283a:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <ESP01ATDecode+0x750>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11c      	bne.n	800287c <ESP01ATDecode+0x704>
				esp01HState = 0;
 8002842:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <ESP01ATDecode+0x73c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <ESP01ATDecode+0x740>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <ESP01ATDecode+0x704>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <ESP01ATDecode+0x740>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4821      	ldr	r0, [pc, #132]	@ (80028dc <ESP01ATDecode+0x764>)
 8002856:	4798      	blx	r3
			}
			break;
 8002858:	e010      	b.n	800287c <ESP01ATDecode+0x704>
		default:
			esp01HState = 0;
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <ESP01ATDecode+0x73c>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <ESP01ATDecode+0x768>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e00a      	b.n	800287e <ESP01ATDecode+0x706>
			break;
 8002868:	bf00      	nop
 800286a:	e008      	b.n	800287e <ESP01ATDecode+0x706>
			break;
 800286c:	bf00      	nop
 800286e:	e006      	b.n	800287e <ESP01ATDecode+0x706>
			break;
 8002870:	bf00      	nop
 8002872:	e004      	b.n	800287e <ESP01ATDecode+0x706>
			break;
 8002874:	bf00      	nop
 8002876:	e002      	b.n	800287e <ESP01ATDecode+0x706>
			break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <ESP01ATDecode+0x706>
			break;
 800287c:	bf00      	nop
		}

		esp01irRXAT++;
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <ESP01ATDecode+0x748>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <ESP01ATDecode+0x748>)
 8002888:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <ESP01ATDecode+0x748>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	2b80      	cmp	r3, #128	@ 0x80
 8002890:	d102      	bne.n	8002898 <ESP01ATDecode+0x720>
			esp01irRXAT = 0;
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <ESP01ATDecode+0x748>)
 8002894:	2200      	movs	r2, #0
 8002896:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <ESP01ATDecode+0x748>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	429a      	cmp	r2, r3
 80028a0:	f47f ac85 	bne.w	80021ae <ESP01ATDecode+0x36>
	}

}
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000830 	.word	0x20000830
 80028b0:	2000082e 	.word	0x2000082e
 80028b4:	200008d6 	.word	0x200008d6
 80028b8:	20000844 	.word	0x20000844
 80028bc:	0801279c 	.word	0x0801279c
 80028c0:	20000a5e 	.word	0x20000a5e
 80028c4:	080127b4 	.word	0x080127b4
 80028c8:	200008d8 	.word	0x200008d8
 80028cc:	200008c0 	.word	0x200008c0
 80028d0:	20000834 	.word	0x20000834
 80028d4:	20000840 	.word	0x20000840
 80028d8:	20000a68 	.word	0x20000a68
 80028dc:	080127c8 	.word	0x080127c8
 80028e0:	20000838 	.word	0x20000838

080028e4 <ESP01DOConnection>:

static void ESP01DOConnection(){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 80028e8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b5c <ESP01DOConnection+0x278>)
 80028ea:	2264      	movs	r2, #100	@ 0x64
 80028ec:	601a      	str	r2, [r3, #0]
	switch(esp01ATSate){
 80028ee:	4b9c      	ldr	r3, [pc, #624]	@ (8002b60 <ESP01DOConnection+0x27c>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	f200 81e5 	bhi.w	8002cc2 <ESP01DOConnection+0x3de>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <ESP01DOConnection+0x1c>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002941 	.word	0x08002941
 8002904:	0800299f 	.word	0x0800299f
 8002908:	080029f1 	.word	0x080029f1
 800290c:	08002a0f 	.word	0x08002a0f
 8002910:	08002a2d 	.word	0x08002a2d
 8002914:	08002a4b 	.word	0x08002a4b
 8002918:	08002ad1 	.word	0x08002ad1
 800291c:	08002af5 	.word	0x08002af5
 8002920:	08002b23 	.word	0x08002b23
 8002924:	08002bb1 	.word	0x08002bb1
 8002928:	08002bd9 	.word	0x08002bd9
 800292c:	08002c6b 	.word	0x08002c6b
 8002930:	08002c89 	.word	0x08002c89
 8002934:	08002949 	.word	0x08002949
 8002938:	08002969 	.word	0x08002969
 800293c:	08002991 	.word	0x08002991
	case ESP01ATIDLE:
		esp01TimeoutTask = 0;
 8002940:	4b86      	ldr	r3, [pc, #536]	@ (8002b5c <ESP01DOConnection+0x278>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
		break;
 8002946:	e1bc      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 8002948:	4b86      	ldr	r3, [pc, #536]	@ (8002b64 <ESP01DOConnection+0x280>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2000      	movs	r0, #0
 800294e:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8002950:	4b85      	ldr	r3, [pc, #532]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <ESP01DOConnection+0x7c>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 8002958:	4b83      	ldr	r3, [pc, #524]	@ (8002b68 <ESP01DOConnection+0x284>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4883      	ldr	r0, [pc, #524]	@ (8002b6c <ESP01DOConnection+0x288>)
 800295e:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRST1;
 8002960:	4b7f      	ldr	r3, [pc, #508]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002962:	220e      	movs	r2, #14
 8002964:	701a      	strb	r2, [r3, #0]
		break;
 8002966:	e1ac      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 8002968:	4b7e      	ldr	r3, [pc, #504]	@ (8002b64 <ESP01DOConnection+0x280>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2001      	movs	r0, #1
 800296e:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 8002970:	4b7d      	ldr	r3, [pc, #500]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <ESP01DOConnection+0x9c>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 8002978:	4b7b      	ldr	r3, [pc, #492]	@ (8002b68 <ESP01DOConnection+0x284>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	487c      	ldr	r0, [pc, #496]	@ (8002b70 <ESP01DOConnection+0x28c>)
 800297e:	4798      	blx	r3
		esp01ATSate = ESP01ATHARDRSTSTOP;
 8002980:	4b77      	ldr	r3, [pc, #476]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002982:	220f      	movs	r2, #15
 8002984:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8002986:	4b75      	ldr	r3, [pc, #468]	@ (8002b5c <ESP01DOConnection+0x278>)
 8002988:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800298c:	601a      	str	r2, [r3, #0]
		break;
 800298e:	e198      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATHARDRSTSTOP:
		esp01ATSate = ESP01ATAT;
 8002990:	4b73      	ldr	r3, [pc, #460]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 8002996:	4b77      	ldr	r3, [pc, #476]	@ (8002b74 <ESP01DOConnection+0x290>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
		break;
 800299c:	e191      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATAT:
		if(esp01TriesAT){
 800299e:	4b75      	ldr	r3, [pc, #468]	@ (8002b74 <ESP01DOConnection+0x290>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <ESP01DOConnection+0xde>
			esp01TriesAT--;
 80029a6:	4b73      	ldr	r3, [pc, #460]	@ (8002b74 <ESP01DOConnection+0x290>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <ESP01DOConnection+0x290>)
 80029b0:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 80029b2:	4b70      	ldr	r3, [pc, #448]	@ (8002b74 <ESP01DOConnection+0x290>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <ESP01DOConnection+0xe4>
				esp01ATSate = ESP01ATHARDRST0;
 80029ba:	4b69      	ldr	r3, [pc, #420]	@ (8002b60 <ESP01DOConnection+0x27c>)
 80029bc:	220d      	movs	r2, #13
 80029be:	701a      	strb	r2, [r3, #0]
				break;
 80029c0:	e17f      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			}
		}
		else
			esp01TriesAT = 4;
 80029c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b74 <ESP01DOConnection+0x290>)
 80029c4:	2204      	movs	r2, #4
 80029c6:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 80029c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b78 <ESP01DOConnection+0x294>)
 80029ca:	7813      	ldrb	r3, [r2, #0]
 80029cc:	f023 0320 	bic.w	r3, r3, #32
 80029d0:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 80029d2:	486a      	ldr	r0, [pc, #424]	@ (8002b7c <ESP01DOConnection+0x298>)
 80029d4:	f000 fa0c 	bl	8002df0 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80029d8:	4b63      	ldr	r3, [pc, #396]	@ (8002b68 <ESP01DOConnection+0x284>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <ESP01DOConnection+0x104>
			ESP01DbgStr("+&DBGESP01AT\n");
 80029e0:	4b61      	ldr	r3, [pc, #388]	@ (8002b68 <ESP01DOConnection+0x284>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4866      	ldr	r0, [pc, #408]	@ (8002b80 <ESP01DOConnection+0x29c>)
 80029e6:	4798      	blx	r3
		esp01ATSate = ESP01ATRESPONSE;
 80029e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002b60 <ESP01DOConnection+0x27c>)
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
		break;
 80029ee:	e168      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 80029f0:	4b61      	ldr	r3, [pc, #388]	@ (8002b78 <ESP01DOConnection+0x294>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <ESP01DOConnection+0x122>
			esp01ATSate = ESP01ATCWMODE;
 80029fe:	4b58      	ldr	r3, [pc, #352]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002a00:	2203      	movs	r2, #3
 8002a02:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002a04:	e15d      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8002a06:	4b56      	ldr	r3, [pc, #344]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
		break;
 8002a0c:	e159      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATCWMODE:
		ESP01StrToBufTX(ATCWMODE);
 8002a0e:	485d      	ldr	r0, [pc, #372]	@ (8002b84 <ESP01DOConnection+0x2a0>)
 8002a10:	f000 f9ee 	bl	8002df0 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002a14:	4b54      	ldr	r3, [pc, #336]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <ESP01DOConnection+0x140>
			ESP01DbgStr("+&DBGESP01ATCWMODE\n");
 8002a1c:	4b52      	ldr	r3, [pc, #328]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4859      	ldr	r0, [pc, #356]	@ (8002b88 <ESP01DOConnection+0x2a4>)
 8002a22:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPMUX;
 8002a24:	4b4e      	ldr	r3, [pc, #312]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002a26:	2204      	movs	r2, #4
 8002a28:	701a      	strb	r2, [r3, #0]
		break;
 8002a2a:	e14a      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 8002a2c:	4857      	ldr	r0, [pc, #348]	@ (8002b8c <ESP01DOConnection+0x2a8>)
 8002a2e:	f000 f9df 	bl	8002df0 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002a32:	4b4d      	ldr	r3, [pc, #308]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <ESP01DOConnection+0x15e>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4854      	ldr	r0, [pc, #336]	@ (8002b90 <ESP01DOConnection+0x2ac>)
 8002a40:	4798      	blx	r3
		esp01ATSate = ESP01ATCWJAP;
 8002a42:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002a44:	2205      	movs	r2, #5
 8002a46:	701a      	strb	r2, [r3, #0]
		break;
 8002a48:	e13b      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <ESP01DOConnection+0x294>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <ESP01DOConnection+0x17c>
			esp01ATSate = ESP01ATCIFSR;
 8002a58:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	701a      	strb	r2, [r3, #0]
			break;
 8002a5e:	e130      	b.n	8002cc2 <ESP01DOConnection+0x3de>
		}
		if(esp01SSID[0] == '\0')
 8002a60:	4b4c      	ldr	r3, [pc, #304]	@ (8002b94 <ESP01DOConnection+0x2b0>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8129 	beq.w	8002cbc <ESP01DOConnection+0x3d8>
			break;
		ESP01StrToBufTX(ATCWJAP);
 8002a6a:	484b      	ldr	r0, [pc, #300]	@ (8002b98 <ESP01DOConnection+0x2b4>)
 8002a6c:	f000 f9c0 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002a70:	2022      	movs	r0, #34	@ 0x22
 8002a72:	f000 f9ed 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 8002a76:	4847      	ldr	r0, [pc, #284]	@ (8002b94 <ESP01DOConnection+0x2b0>)
 8002a78:	f000 f9ba 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002a7c:	2022      	movs	r0, #34	@ 0x22
 8002a7e:	f000 f9e7 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002a82:	202c      	movs	r0, #44	@ 0x2c
 8002a84:	f000 f9e4 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8002a88:	2022      	movs	r0, #34	@ 0x22
 8002a8a:	f000 f9e1 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 8002a8e:	4843      	ldr	r0, [pc, #268]	@ (8002b9c <ESP01DOConnection+0x2b8>)
 8002a90:	f000 f9ae 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002a94:	2022      	movs	r0, #34	@ 0x22
 8002a96:	f000 f9db 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8002a9a:	200d      	movs	r0, #13
 8002a9c:	f000 f9d8 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f000 f9d5 	bl	8002e50 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8002aa6:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <ESP01DOConnection+0x1d2>
			ESP01DbgStr("+&DBGESP01ATCWJAP\n");
 8002aae:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	483b      	ldr	r0, [pc, #236]	@ (8002ba0 <ESP01DOConnection+0x2bc>)
 8002ab4:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002ab6:	4a30      	ldr	r2, [pc, #192]	@ (8002b78 <ESP01DOConnection+0x294>)
 8002ab8:	7813      	ldrb	r3, [r2, #0]
 8002aba:	f023 0320 	bic.w	r3, r3, #32
 8002abe:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CWJAPRESPONSE;
 8002ac0:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 1500;
 8002ac6:	4b25      	ldr	r3, [pc, #148]	@ (8002b5c <ESP01DOConnection+0x278>)
 8002ac8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002acc:	601a      	str	r2, [r3, #0]
		break;
 8002ace:	e0f8      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8002ad0:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <ESP01DOConnection+0x294>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <ESP01DOConnection+0x208>
			esp01ATSate = ESP01ATCIFSR;
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8002ae4:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <ESP01DOConnection+0x290>)
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002aea:	e0ea      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8002aec:	4b1c      	ldr	r3, [pc, #112]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
		break;
 8002af2:	e0e6      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8002af4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <ESP01DOConnection+0x2c0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 8002afa:	482b      	ldr	r0, [pc, #172]	@ (8002ba8 <ESP01DOConnection+0x2c4>)
 8002afc:	f000 f978 	bl	8002df0 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <ESP01DOConnection+0x22c>
			ESP01DbgStr("+&DBGESP01CIFSR\n");
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <ESP01DOConnection+0x284>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4827      	ldr	r0, [pc, #156]	@ (8002bac <ESP01DOConnection+0x2c8>)
 8002b0e:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002b10:	4a19      	ldr	r2, [pc, #100]	@ (8002b78 <ESP01DOConnection+0x294>)
 8002b12:	7813      	ldrb	r3, [r2, #0]
 8002b14:	f023 0320 	bic.w	r3, r3, #32
 8002b18:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIFSRRESPONSE;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	701a      	strb	r2, [r3, #0]
		break;
 8002b20:	e0cf      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <ESP01DOConnection+0x294>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <ESP01DOConnection+0x254>
			esp01ATSate = ESP01ATCIPCLOSE;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002b32:	2209      	movs	r2, #9
 8002b34:	701a      	strb	r2, [r3, #0]
				esp01ATSate = ESP01ATAT;
				break;
			}
			esp01ATSate = ESP01ATCIFSR;
		}
		break;
 8002b36:	e0c4      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			esp01TriesAT--;
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <ESP01DOConnection+0x290>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <ESP01DOConnection+0x290>)
 8002b42:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <ESP01DOConnection+0x290>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <ESP01DOConnection+0x270>
				esp01ATSate = ESP01ATAT;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
				break;
 8002b52:	e0b6      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATCIFSR;
 8002b54:	4b02      	ldr	r3, [pc, #8]	@ (8002b60 <ESP01DOConnection+0x27c>)
 8002b56:	2207      	movs	r2, #7
 8002b58:	701a      	strb	r2, [r3, #0]
		break;
 8002b5a:	e0b2      	b.n	8002cc2 <ESP01DOConnection+0x3de>
 8002b5c:	20000834 	.word	0x20000834
 8002b60:	2000082e 	.word	0x2000082e
 8002b64:	20000a68 	.word	0x20000a68
 8002b68:	20000844 	.word	0x20000844
 8002b6c:	080127dc 	.word	0x080127dc
 8002b70:	080127f4 	.word	0x080127f4
 8002b74:	20000a64 	.word	0x20000a64
 8002b78:	20000830 	.word	0x20000830
 8002b7c:	08013b08 	.word	0x08013b08
 8002b80:	0801280c 	.word	0x0801280c
 8002b84:	08013b20 	.word	0x08013b20
 8002b88:	0801281c 	.word	0x0801281c
 8002b8c:	08013b10 	.word	0x08013b10
 8002b90:	08012830 	.word	0x08012830
 8002b94:	20000848 	.word	0x20000848
 8002b98:	08013b30 	.word	0x08013b30
 8002b9c:	20000888 	.word	0x20000888
 8002ba0:	08012844 	.word	0x08012844
 8002ba4:	200008c0 	.word	0x200008c0
 8002ba8:	08013b3c 	.word	0x08013b3c
 8002bac:	08012858 	.word	0x08012858
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 8002bb0:	4b45      	ldr	r3, [pc, #276]	@ (8002cc8 <ESP01DOConnection+0x3e4>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8083 	beq.w	8002cc0 <ESP01DOConnection+0x3dc>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8002bba:	4844      	ldr	r0, [pc, #272]	@ (8002ccc <ESP01DOConnection+0x3e8>)
 8002bbc:	f000 f918 	bl	8002df0 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8002bc0:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <ESP01DOConnection+0x3ec>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <ESP01DOConnection+0x2ec>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE\n");
 8002bc8:	4b41      	ldr	r3, [pc, #260]	@ (8002cd0 <ESP01DOConnection+0x3ec>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4841      	ldr	r0, [pc, #260]	@ (8002cd4 <ESP01DOConnection+0x3f0>)
 8002bce:	4798      	blx	r3
		esp01ATSate = ESP01ATCIPSTART;
 8002bd0:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <ESP01DOConnection+0x3f4>)
 8002bd2:	220a      	movs	r2, #10
 8002bd4:	701a      	strb	r2, [r3, #0]
		break;
 8002bd6:	e074      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 8002bd8:	4840      	ldr	r0, [pc, #256]	@ (8002cdc <ESP01DOConnection+0x3f8>)
 8002bda:	f000 f909 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002bde:	2022      	movs	r0, #34	@ 0x22
 8002be0:	f000 f936 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 8002be4:	483e      	ldr	r0, [pc, #248]	@ (8002ce0 <ESP01DOConnection+0x3fc>)
 8002be6:	f000 f903 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002bea:	2022      	movs	r0, #34	@ 0x22
 8002bec:	f000 f930 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002bf0:	202c      	movs	r0, #44	@ 0x2c
 8002bf2:	f000 f92d 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 8002bf6:	2022      	movs	r0, #34	@ 0x22
 8002bf8:	f000 f92a 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 8002bfc:	4832      	ldr	r0, [pc, #200]	@ (8002cc8 <ESP01DOConnection+0x3e4>)
 8002bfe:	f000 f8f7 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 8002c02:	2022      	movs	r0, #34	@ 0x22
 8002c04:	f000 f924 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 8002c08:	202c      	movs	r0, #44	@ 0x2c
 8002c0a:	f000 f921 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 8002c0e:	4835      	ldr	r0, [pc, #212]	@ (8002ce4 <ESP01DOConnection+0x400>)
 8002c10:	f000 f8ee 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8002c14:	202c      	movs	r0, #44	@ 0x2c
 8002c16:	f000 f91b 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 8002c1a:	4833      	ldr	r0, [pc, #204]	@ (8002ce8 <ESP01DOConnection+0x404>)
 8002c1c:	f000 f8e8 	bl	8002df0 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 8002c20:	202c      	movs	r0, #44	@ 0x2c
 8002c22:	f000 f915 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 8002c26:	2030      	movs	r0, #48	@ 0x30
 8002c28:	f000 f912 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8002c2c:	200d      	movs	r0, #13
 8002c2e:	f000 f90f 	bl	8002e50 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 8002c32:	200a      	movs	r0, #10
 8002c34:	f000 f90c 	bl	8002e50 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8002c38:	4b25      	ldr	r3, [pc, #148]	@ (8002cd0 <ESP01DOConnection+0x3ec>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <ESP01DOConnection+0x364>
			ESP01DbgStr("+&DBGESP01ATCIPSTART\n");
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <ESP01DOConnection+0x3ec>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4829      	ldr	r0, [pc, #164]	@ (8002cec <ESP01DOConnection+0x408>)
 8002c46:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8002c48:	4a29      	ldr	r2, [pc, #164]	@ (8002cf0 <ESP01DOConnection+0x40c>)
 8002c4a:	7813      	ldrb	r3, [r2, #0]
 8002c4c:	f023 0320 	bic.w	r3, r3, #32
 8002c50:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002c52:	4a27      	ldr	r2, [pc, #156]	@ (8002cf0 <ESP01DOConnection+0x40c>)
 8002c54:	7813      	ldrb	r3, [r2, #0]
 8002c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c5a:	7013      	strb	r3, [r2, #0]
		esp01ATSate = ESP01CIPSTARTRESPONSE;
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <ESP01DOConnection+0x3f4>)
 8002c5e:	220b      	movs	r2, #11
 8002c60:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 200;
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <ESP01DOConnection+0x410>)
 8002c64:	22c8      	movs	r2, #200	@ 0xc8
 8002c66:	601a      	str	r2, [r3, #0]
		break;
 8002c68:	e02b      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8002c6a:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <ESP01DOConnection+0x40c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <ESP01DOConnection+0x39c>
			esp01ATSate = ESP01ATCONNECTED;
 8002c78:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <ESP01DOConnection+0x3f4>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	701a      	strb	r2, [r3, #0]
		else
			esp01ATSate = ESP01ATAT;
		break;
 8002c7e:	e020      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			esp01ATSate = ESP01ATAT;
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <ESP01DOConnection+0x3f4>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
		break;
 8002c86:	e01c      	b.n	8002cc2 <ESP01DOConnection+0x3de>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 8002c88:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <ESP01DOConnection+0x40c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <ESP01DOConnection+0x3ba>
			esp01ATSate = ESP01ATAT;
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <ESP01DOConnection+0x3f4>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
			break;
 8002c9c:	e011      	b.n	8002cc2 <ESP01DOConnection+0x3de>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 8002c9e:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <ESP01DOConnection+0x40c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <ESP01DOConnection+0x3d0>
			esp01ATSate = ESP01ATCIPCLOSE;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <ESP01DOConnection+0x3f4>)
 8002cae:	2209      	movs	r2, #9
 8002cb0:	701a      	strb	r2, [r3, #0]
			break;
 8002cb2:	e006      	b.n	8002cc2 <ESP01DOConnection+0x3de>
		}
		esp01TimeoutTask = 0;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <ESP01DOConnection+0x410>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
		break;
 8002cba:	e002      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			break;
 8002cbc:	bf00      	nop
 8002cbe:	e000      	b.n	8002cc2 <ESP01DOConnection+0x3de>
			break;
 8002cc0:	bf00      	nop
	}
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200008a8 	.word	0x200008a8
 8002ccc:	08013b58 	.word	0x08013b58
 8002cd0:	20000844 	.word	0x20000844
 8002cd4:	0801286c 	.word	0x0801286c
 8002cd8:	2000082e 	.word	0x2000082e
 8002cdc:	08013b48 	.word	0x08013b48
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	200008b8 	.word	0x200008b8
 8002ce8:	200008d0 	.word	0x200008d0
 8002cec:	08012884 	.word	0x08012884
 8002cf0:	20000830 	.word	0x20000830
 8002cf4:	20000834 	.word	0x20000834

08002cf8 <ESP01SENDData>:

static void ESP01SENDData(){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
	uint8_t value;

	if(esp01Flags.bit.WAITINGSYMBOL){
 8002cfe:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <ESP01SENDData+0xd8>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <ESP01SENDData+0xdc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d159      	bne.n	8002dc8 <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8002d14:	4b30      	ldr	r3, [pc, #192]	@ (8002dd8 <ESP01SENDData+0xe0>)
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	4b30      	ldr	r3, [pc, #192]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002d1a:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <ESP01SENDData+0xd8>)
 8002d1e:	7813      	ldrb	r3, [r2, #0]
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	7013      	strb	r3, [r2, #0]
			esp01ATSate = ESP01ATAT;
 8002d26:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <ESP01SENDData+0xe8>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <ESP01SENDData+0xec>)
 8002d2e:	220a      	movs	r2, #10
 8002d30:	601a      	str	r2, [r3, #0]
		}
		return;
 8002d32:	e049      	b.n	8002dc8 <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8002d34:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002d36:	881a      	ldrh	r2, [r3, #0]
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <ESP01SENDData+0xe0>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d044      	beq.n	8002dca <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8002d40:	4b26      	ldr	r3, [pc, #152]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <ESP01SENDData+0xf0>)
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <ESP01SENDData+0xd8>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <ESP01SENDData+0x6c>
			if(value == '>')
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d5e:	d101      	bne.n	8002d64 <ESP01SENDData+0x6c>
				value = '\n';
 8002d60:	230a      	movs	r3, #10
 8002d62:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8002d64:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <ESP01SENDData+0xf4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	79fa      	ldrb	r2, [r7, #7]
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4798      	blx	r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02a      	beq.n	8002dca <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <ESP01SENDData+0xd8>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d013      	beq.n	8002daa <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <ESP01SENDData+0xf0>)
 8002d8a:	5c9b      	ldrb	r3, [r3, r2]
 8002d8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d8e:	d10c      	bne.n	8002daa <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8002d90:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd0 <ESP01SENDData+0xd8>)
 8002d92:	7813      	ldrb	r3, [r2, #0]
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8002d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <ESP01SENDData+0xd8>)
 8002d9c:	7813      	ldrb	r3, [r2, #0]
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <ESP01SENDData+0xdc>)
 8002da6:	2205      	movs	r2, #5
 8002da8:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002db4:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dbe:	d104      	bne.n	8002dca <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <ESP01SENDData+0xe4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	e000      	b.n	8002dca <ESP01SENDData+0xd2>
		return;
 8002dc8:	bf00      	nop
		}
	}
}
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000830 	.word	0x20000830
 8002dd4:	2000083c 	.word	0x2000083c
 8002dd8:	20000a62 	.word	0x20000a62
 8002ddc:	20000a60 	.word	0x20000a60
 8002de0:	2000082e 	.word	0x2000082e
 8002de4:	20000834 	.word	0x20000834
 8002de8:	2000095c 	.word	0x2000095c
 8002dec:	20000a68 	.word	0x20000a68

08002df0 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e017      	b.n	8002e2e <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	441a      	add	r2, r3
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <ESP01StrToBufTX+0x58>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	b288      	uxth	r0, r1
 8002e0c:	490e      	ldr	r1, [pc, #56]	@ (8002e48 <ESP01StrToBufTX+0x58>)
 8002e0e:	8008      	strh	r0, [r1, #0]
 8002e10:	4619      	mov	r1, r3
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <ESP01StrToBufTX+0x5c>)
 8002e16:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8002e18:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <ESP01StrToBufTX+0x58>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e20:	d102      	bne.n	8002e28 <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <ESP01StrToBufTX+0x58>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e1      	bne.n	8002dfe <ESP01StrToBufTX+0xe>
	}
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	20000a62 	.word	0x20000a62
 8002e4c:	2000095c 	.word	0x2000095c

08002e50 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <ESP01ByteToBufTX+0x3c>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	b291      	uxth	r1, r2
 8002e62:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <ESP01ByteToBufTX+0x3c>)
 8002e64:	8011      	strh	r1, [r2, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <ESP01ByteToBufTX+0x40>)
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8002e6e:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <ESP01ByteToBufTX+0x3c>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e76:	d102      	bne.n	8002e7e <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <ESP01ByteToBufTX+0x3c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	801a      	strh	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000a62 	.word	0x20000a62
 8002e90:	2000095c 	.word	0x2000095c

08002e94 <OLED_Print_Data_Task>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void OLED_Print_Data_Task(){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af02      	add	r7, sp, #8
	uint8_t auxPos = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	717b      	strb	r3, [r7, #5]
	if(Display.isInit){
 8002e9e:	4ba3      	ldr	r3, [pc, #652]	@ (800312c <OLED_Print_Data_Task+0x298>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 812b 	beq.w	80030fe <OLED_Print_Data_Task+0x26a>
		switch(Display.state){
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800312c <OLED_Print_Data_Task+0x298>)
 8002eaa:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d023      	beq.n	8002efa <OLED_Print_Data_Task+0x66>
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	f300 8123 	bgt.w	80030fe <OLED_Print_Data_Task+0x26a>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <OLED_Print_Data_Task+0x2c>
 8002ebc:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8002ebe:	e11e      	b.n	80030fe <OLED_Print_Data_Task+0x26a>
			if(HAL_GetTick() - Display.timer > 2000){
 8002ec0:	f002 f832 	bl	8004f28 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b99      	ldr	r3, [pc, #612]	@ (800312c <OLED_Print_Data_Task+0x298>)
 8002ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ed2:	f240 8111 	bls.w	80030f8 <OLED_Print_Data_Task+0x264>
				Display_Fill(SSD1306_COLOR_BLACK);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fe f98c 	bl	80011f4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8002edc:	2301      	movs	r3, #1
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	2340      	movs	r3, #64	@ 0x40
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	4a92      	ldr	r2, [pc, #584]	@ (8003130 <OLED_Print_Data_Task+0x29c>)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fe fa06 	bl	80012fc <Display_DrawBitmap>
				Display.state = INPUTS;
 8002ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800312c <OLED_Print_Data_Task+0x298>)
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8002ef8:	e0fe      	b.n	80030f8 <OLED_Print_Data_Task+0x264>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8002efa:	2300      	movs	r3, #0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	232c      	movs	r3, #44	@ 0x2c
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2325      	movs	r3, #37	@ 0x25
 8002f04:	4a8b      	ldr	r2, [pc, #556]	@ (8003134 <OLED_Print_Data_Task+0x2a0>)
 8002f06:	2111      	movs	r1, #17
 8002f08:	2002      	movs	r0, #2
 8002f0a:	f7fe f9f7 	bl	80012fc <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8002f0e:	2300      	movs	r3, #0
 8002f10:	71fb      	strb	r3, [r7, #7]
 8002f12:	e03f      	b.n	8002f94 <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8002f14:	2300      	movs	r3, #0
 8002f16:	71bb      	strb	r3, [r7, #6]
 8002f18:	e036      	b.n	8002f88 <OLED_Print_Data_Task+0xf4>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4a86      	ldr	r2, [pc, #536]	@ (8003138 <OLED_Print_Data_Task+0x2a4>)
 8002f1e:	3308      	adds	r3, #8
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	885a      	ldrh	r2, [r3, #2]
 8002f26:	79bb      	ldrb	r3, [r7, #6]
 8002f28:	4984      	ldr	r1, [pc, #528]	@ (800313c <OLED_Print_Data_Task+0x2a8>)
 8002f2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d827      	bhi.n	8002f82 <OLED_Print_Data_Task+0xee>
						auxPos = 2 + i * 3;
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	461a      	mov	r2, r3
 8002f36:	0052      	lsls	r2, r2, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	717b      	strb	r3, [r7, #5]
						Display_DrawLine(auxPos, 61,  auxPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8002f40:	797b      	ldrb	r3, [r7, #5]
 8002f42:	b298      	uxth	r0, r3
 8002f44:	797b      	ldrb	r3, [r7, #5]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	497d      	ldr	r1, [pc, #500]	@ (8003140 <OLED_Print_Data_Task+0x2ac>)
 8002f4c:	5ccb      	ldrb	r3, [r1, r3]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	2301      	movs	r3, #1
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	460b      	mov	r3, r1
 8002f56:	213d      	movs	r1, #61	@ 0x3d
 8002f58:	f7fe fada 	bl	8001510 <Display_DrawLine>
						Display_DrawLine(auxPos+1, 61,  auxPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8002f5c:	797b      	ldrb	r3, [r7, #5]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	b298      	uxth	r0, r3
 8002f64:	797b      	ldrb	r3, [r7, #5]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	79bb      	ldrb	r3, [r7, #6]
 8002f6e:	4974      	ldr	r1, [pc, #464]	@ (8003140 <OLED_Print_Data_Task+0x2ac>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	4619      	mov	r1, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	213d      	movs	r1, #61	@ 0x3d
 8002f7c:	f7fe fac8 	bl	8001510 <Display_DrawLine>
						break;
 8002f80:	e005      	b.n	8002f8e <OLED_Print_Data_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 8002f82:	79bb      	ldrb	r3, [r7, #6]
 8002f84:	3301      	adds	r3, #1
 8002f86:	71bb      	strb	r3, [r7, #6]
 8002f88:	79bb      	ldrb	r3, [r7, #6]
 8002f8a:	2b2c      	cmp	r3, #44	@ 0x2c
 8002f8c:	d9c5      	bls.n	8002f1a <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	3301      	adds	r3, #1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b07      	cmp	r3, #7
 8002f98:	d9bc      	bls.n	8002f14 <OLED_Print_Data_Task+0x80>
					}
				}
			}

			if(MPU6050.isInit){
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8002f9c:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80ab 	beq.w	80030fc <OLED_Print_Data_Task+0x268>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8002fa6:	4b67      	ldr	r3, [pc, #412]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8002fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fac:	139b      	asrs	r3, r3, #14
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	ee07 3a90 	vmov	s15, r3
 8002fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb8:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003148 <OLED_Print_Data_Task+0x2b4>
 8002fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc4:	ee17 3a90 	vmov	r3, s15
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8002fcc:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8002fce:	4b5d      	ldr	r3, [pc, #372]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8002fd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fd4:	139b      	asrs	r3, r3, #14
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003148 <OLED_Print_Data_Task+0x2b4>
 8002fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fec:	ee17 3a90 	vmov	r3, s15
 8002ff0:	b21a      	sxth	r2, r3
 8002ff2:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8002ff4:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8002ff6:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8002ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ffc:	139b      	asrs	r3, r3, #14
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003008:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003148 <OLED_Print_Data_Task+0x2b4>
 800300c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003014:	ee17 3a90 	vmov	r3, s15
 8003018:	b21a      	sxth	r2, r3
 800301a:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 800301c:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 800301e:	4b49      	ldr	r3, [pc, #292]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8003020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003024:	461a      	mov	r2, r3
 8003026:	4949      	ldr	r1, [pc, #292]	@ (800314c <OLED_Print_Data_Task+0x2b8>)
 8003028:	4849      	ldr	r0, [pc, #292]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 800302a:	f00e fedd 	bl	8011de8 <siprintf>
				Display_SetCursor(25, 17);
 800302e:	2111      	movs	r1, #17
 8003030:	2019      	movs	r0, #25
 8003032:	f7fe f8c7 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8003036:	4a47      	ldr	r2, [pc, #284]	@ (8003154 <OLED_Print_Data_Task+0x2c0>)
 8003038:	2301      	movs	r3, #1
 800303a:	ca06      	ldmia	r2, {r1, r2}
 800303c:	4844      	ldr	r0, [pc, #272]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 800303e:	f7fe fa41 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8003042:	4b40      	ldr	r3, [pc, #256]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8003044:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003048:	461a      	mov	r2, r3
 800304a:	4943      	ldr	r1, [pc, #268]	@ (8003158 <OLED_Print_Data_Task+0x2c4>)
 800304c:	4840      	ldr	r0, [pc, #256]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 800304e:	f00e fecb 	bl	8011de8 <siprintf>
				Display_SetCursor(25, 34);
 8003052:	2122      	movs	r1, #34	@ 0x22
 8003054:	2019      	movs	r0, #25
 8003056:	f7fe f8b5 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800305a:	4a3e      	ldr	r2, [pc, #248]	@ (8003154 <OLED_Print_Data_Task+0x2c0>)
 800305c:	2301      	movs	r3, #1
 800305e:	ca06      	ldmia	r2, {r1, r2}
 8003060:	483b      	ldr	r0, [pc, #236]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 8003062:	f7fe fa2f 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8003066:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 8003068:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800306c:	461a      	mov	r2, r3
 800306e:	493b      	ldr	r1, [pc, #236]	@ (800315c <OLED_Print_Data_Task+0x2c8>)
 8003070:	4837      	ldr	r0, [pc, #220]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 8003072:	f00e feb9 	bl	8011de8 <siprintf>
				Display_SetCursor(25, 51);
 8003076:	2133      	movs	r1, #51	@ 0x33
 8003078:	2019      	movs	r0, #25
 800307a:	f7fe f8a3 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800307e:	4a35      	ldr	r2, [pc, #212]	@ (8003154 <OLED_Print_Data_Task+0x2c0>)
 8003080:	2301      	movs	r3, #1
 8003082:	ca06      	ldmia	r2, {r1, r2}
 8003084:	4832      	ldr	r0, [pc, #200]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 8003086:	f7fe fa1d 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 800308a:	4b2e      	ldr	r3, [pc, #184]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 800308c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003090:	461a      	mov	r2, r3
 8003092:	4933      	ldr	r1, [pc, #204]	@ (8003160 <OLED_Print_Data_Task+0x2cc>)
 8003094:	482e      	ldr	r0, [pc, #184]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 8003096:	f00e fea7 	bl	8011de8 <siprintf>
				Display_SetCursor(73, 17);
 800309a:	2111      	movs	r1, #17
 800309c:	2049      	movs	r0, #73	@ 0x49
 800309e:	f7fe f891 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80030a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <OLED_Print_Data_Task+0x2c0>)
 80030a4:	2301      	movs	r3, #1
 80030a6:	ca06      	ldmia	r2, {r1, r2}
 80030a8:	4829      	ldr	r0, [pc, #164]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 80030aa:	f7fe fa0b 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 80030ae:	4b25      	ldr	r3, [pc, #148]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 80030b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030b4:	461a      	mov	r2, r3
 80030b6:	492b      	ldr	r1, [pc, #172]	@ (8003164 <OLED_Print_Data_Task+0x2d0>)
 80030b8:	4825      	ldr	r0, [pc, #148]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 80030ba:	f00e fe95 	bl	8011de8 <siprintf>
				Display_SetCursor(73, 34);
 80030be:	2122      	movs	r1, #34	@ 0x22
 80030c0:	2049      	movs	r0, #73	@ 0x49
 80030c2:	f7fe f87f 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80030c6:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <OLED_Print_Data_Task+0x2c0>)
 80030c8:	2301      	movs	r3, #1
 80030ca:	ca06      	ldmia	r2, {r1, r2}
 80030cc:	4820      	ldr	r0, [pc, #128]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 80030ce:	f7fe f9f9 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 80030d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <OLED_Print_Data_Task+0x2b0>)
 80030d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030d8:	461a      	mov	r2, r3
 80030da:	4923      	ldr	r1, [pc, #140]	@ (8003168 <OLED_Print_Data_Task+0x2d4>)
 80030dc:	481c      	ldr	r0, [pc, #112]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 80030de:	f00e fe83 	bl	8011de8 <siprintf>
				Display_SetCursor(73, 51);
 80030e2:	2133      	movs	r1, #51	@ 0x33
 80030e4:	2049      	movs	r0, #73	@ 0x49
 80030e6:	f7fe f86d 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80030ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003154 <OLED_Print_Data_Task+0x2c0>)
 80030ec:	2301      	movs	r3, #1
 80030ee:	ca06      	ldmia	r2, {r1, r2}
 80030f0:	4817      	ldr	r0, [pc, #92]	@ (8003150 <OLED_Print_Data_Task+0x2bc>)
 80030f2:	f7fe f9e7 	bl	80014c4 <Display_WriteString>
			}

			break;
 80030f6:	e001      	b.n	80030fc <OLED_Print_Data_Task+0x268>
			break;
 80030f8:	bf00      	nop
 80030fa:	e000      	b.n	80030fe <OLED_Print_Data_Task+0x26a>
			break;
 80030fc:	bf00      	nop
		}
	}

	is30s--;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <OLED_Print_Data_Task+0x2d8>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <OLED_Print_Data_Task+0x2d8>)
 8003108:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 800310a:	4b18      	ldr	r3, [pc, #96]	@ (800316c <OLED_Print_Data_Task+0x2d8>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d105      	bne.n	800311e <OLED_Print_Data_Task+0x28a>
		is30s = 300;
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <OLED_Print_Data_Task+0x2d8>)
 8003114:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003118:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 800311a:	f000 f829 	bl	8003170 <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 800311e:	2001      	movs	r0, #1
 8003120:	f7fe f840 	bl	80011a4 <Display_I2C_Refresh_Ready>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000e24 	.word	0x20000e24
 8003130:	08012f9c 	.word	0x08012f9c
 8003134:	08012ac0 	.word	0x08012ac0
 8003138:	20001238 	.word	0x20001238
 800313c:	08012a64 	.word	0x08012a64
 8003140:	08012a34 	.word	0x08012a34
 8003144:	20000d60 	.word	0x20000d60
 8003148:	411ccccd 	.word	0x411ccccd
 800314c:	0801289c 	.word	0x0801289c
 8003150:	2000122c 	.word	0x2000122c
 8003154:	20000000 	.word	0x20000000
 8003158:	080128a4 	.word	0x080128a4
 800315c:	080128ac 	.word	0x080128ac
 8003160:	080128b4 	.word	0x080128b4
 8003164:	080128bc 	.word	0x080128bc
 8003168:	080128c4 	.word	0x080128c4
 800316c:	20000010 	.word	0x20000010

08003170 <BateryLevel_Set>:

void BateryLevel_Set(){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2309      	movs	r3, #9
 800317c:	2206      	movs	r2, #6
 800317e:	2104      	movs	r1, #4
 8003180:	2003      	movs	r0, #3
 8003182:	f7fe fa73 	bl	800166c <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8003186:	4b1f      	ldr	r3, [pc, #124]	@ (8003204 <BateryLevel_Set+0x94>)
 8003188:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800318a:	f640 723b 	movw	r2, #3899	@ 0xf3b
 800318e:	4293      	cmp	r3, r2
 8003190:	d908      	bls.n	80031a4 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8003192:	2301      	movs	r3, #1
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2309      	movs	r3, #9
 8003198:	2206      	movs	r2, #6
 800319a:	2104      	movs	r1, #4
 800319c:	2003      	movs	r0, #3
 800319e:	f7fe fa65 	bl	800166c <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 80031a2:	e02b      	b.n	80031fc <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 80031a4:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <BateryLevel_Set+0x94>)
 80031a6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031a8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d908      	bls.n	80031c2 <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 80031b0:	2301      	movs	r3, #1
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2307      	movs	r3, #7
 80031b6:	2206      	movs	r2, #6
 80031b8:	2106      	movs	r1, #6
 80031ba:	2003      	movs	r0, #3
 80031bc:	f7fe fa56 	bl	800166c <Display_DrawFilledRectangle>
}
 80031c0:	e01c      	b.n	80031fc <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 80031c2:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <BateryLevel_Set+0x94>)
 80031c4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031c6:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d908      	bls.n	80031e0 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 80031ce:	2301      	movs	r3, #1
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2305      	movs	r3, #5
 80031d4:	2206      	movs	r2, #6
 80031d6:	2108      	movs	r1, #8
 80031d8:	2003      	movs	r0, #3
 80031da:	f7fe fa47 	bl	800166c <Display_DrawFilledRectangle>
}
 80031de:	e00d      	b.n	80031fc <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <BateryLevel_Set+0x94>)
 80031e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80031e4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d907      	bls.n	80031fc <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 80031ec:	2301      	movs	r3, #1
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2302      	movs	r3, #2
 80031f2:	2206      	movs	r2, #6
 80031f4:	210b      	movs	r1, #11
 80031f6:	2003      	movs	r0, #3
 80031f8:	f7fe fa38 	bl	800166c <Display_DrawFilledRectangle>
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20001238 	.word	0x20001238

08003208 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	3302      	adds	r3, #2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800321e:	2bf1      	cmp	r3, #241	@ 0xf1
 8003220:	f000 81c9 	beq.w	80035b6 <decodeOn_USB+0x3ae>
 8003224:	2bf1      	cmp	r3, #241	@ 0xf1
 8003226:	f300 81bf 	bgt.w	80035a8 <decodeOn_USB+0x3a0>
 800322a:	2bf0      	cmp	r3, #240	@ 0xf0
 800322c:	d036      	beq.n	800329c <decodeOn_USB+0x94>
 800322e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003230:	f300 81ba 	bgt.w	80035a8 <decodeOn_USB+0x3a0>
 8003234:	2bb1      	cmp	r3, #177	@ 0xb1
 8003236:	dc2d      	bgt.n	8003294 <decodeOn_USB+0x8c>
 8003238:	2ba0      	cmp	r3, #160	@ 0xa0
 800323a:	f2c0 81b5 	blt.w	80035a8 <decodeOn_USB+0x3a0>
 800323e:	3ba0      	subs	r3, #160	@ 0xa0
 8003240:	2b11      	cmp	r3, #17
 8003242:	f200 81b1 	bhi.w	80035a8 <decodeOn_USB+0x3a0>
 8003246:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <decodeOn_USB+0x44>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	080032b7 	.word	0x080032b7
 8003250:	0800332d 	.word	0x0800332d
 8003254:	08003387 	.word	0x08003387
 8003258:	08003413 	.word	0x08003413
 800325c:	080034b1 	.word	0x080034b1
 8003260:	080035a9 	.word	0x080035a9
 8003264:	080035a9 	.word	0x080035a9
 8003268:	080035a9 	.word	0x080035a9
 800326c:	080035a9 	.word	0x080035a9
 8003270:	080035a9 	.word	0x080035a9
 8003274:	080035a9 	.word	0x080035a9
 8003278:	080035a9 	.word	0x080035a9
 800327c:	080035a9 	.word	0x080035a9
 8003280:	080035a9 	.word	0x080035a9
 8003284:	080035a9 	.word	0x080035a9
 8003288:	080035a9 	.word	0x080035a9
 800328c:	080035a9 	.word	0x080035a9
 8003290:	080035bb 	.word	0x080035bb
 8003294:	2bde      	cmp	r3, #222	@ 0xde
 8003296:	f000 8192 	beq.w	80035be <decodeOn_USB+0x3b6>
 800329a:	e185      	b.n	80035a8 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	220d      	movs	r2, #13
 80032a0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80032aa:	2301      	movs	r3, #1
 80032ac:	21f0      	movs	r1, #240	@ 0xf0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe fcfc 	bl	8001cac <comm_sendCMD>
		break;
 80032b4:	e184      	b.n	80035c0 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	3303      	adds	r3, #3
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d82a      	bhi.n	800331e <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	3303      	adds	r3, #3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80032d6:	4aa8      	ldr	r2, [pc, #672]	@ (8003578 <decodeOn_USB+0x370>)
 80032d8:	3308      	adds	r3, #8
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	885a      	ldrh	r2, [r3, #2]
 80032e0:	4ba6      	ldr	r3, [pc, #664]	@ (800357c <decodeOn_USB+0x374>)
 80032e2:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	3303      	adds	r3, #3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80032f8:	4ba0      	ldr	r3, [pc, #640]	@ (800357c <decodeOn_USB+0x374>)
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003302:	4b9e      	ldr	r3, [pc, #632]	@ (800357c <decodeOn_USB+0x374>)
 8003304:	785a      	ldrb	r2, [r3, #1]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003312:	2303      	movs	r3, #3
 8003314:	21a0      	movs	r1, #160	@ 0xa0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe fcc8 	bl	8001cac <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 800331c:	e150      	b.n	80035c0 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 800331e:	2306      	movs	r3, #6
 8003320:	4a97      	ldr	r2, [pc, #604]	@ (8003580 <decodeOn_USB+0x378>)
 8003322:	21ef      	movs	r1, #239	@ 0xef
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fe fcc1 	bl	8001cac <comm_sendCMD>
		break;
 800332a:	e149      	b.n	80035c0 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e01d      	b.n	800336e <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	4a90      	ldr	r2, [pc, #576]	@ (8003578 <decodeOn_USB+0x370>)
 8003336:	3308      	adds	r3, #8
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	885a      	ldrh	r2, [r3, #2]
 800333e:	4b8f      	ldr	r3, [pc, #572]	@ (800357c <decodeOn_USB+0x374>)
 8003340:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4a8d      	ldr	r2, [pc, #564]	@ (800357c <decodeOn_USB+0x374>)
 8003348:	7811      	ldrb	r1, [r2, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	460a      	mov	r2, r1
 8003350:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	3301      	adds	r3, #1
 800335a:	4a88      	ldr	r2, [pc, #544]	@ (800357c <decodeOn_USB+0x374>)
 800335c:	7851      	ldrb	r1, [r2, #1]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	460a      	mov	r2, r1
 8003364:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	3301      	adds	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d9de      	bls.n	8003332 <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800337a:	2311      	movs	r3, #17
 800337c:	21a1      	movs	r1, #161	@ 0xa1
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe fc94 	bl	8001cac <comm_sendCMD>
		break;
 8003384:	e11c      	b.n	80035c0 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	3303      	adds	r3, #3
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003394:	2b00      	cmp	r3, #0
 8003396:	d115      	bne.n	80033c4 <decodeOn_USB+0x1bc>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	3304      	adds	r3, #4
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033a6:	b25b      	sxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	4876      	ldr	r0, [pc, #472]	@ (8003584 <decodeOn_USB+0x37c>)
 80033ac:	f7fe fa3a 	bl	8001824 <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80033b0:	4b75      	ldr	r3, [pc, #468]	@ (8003588 <decodeOn_USB+0x380>)
 80033b2:	220d      	movs	r2, #13
 80033b4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80033b8:	2301      	movs	r3, #1
 80033ba:	4a74      	ldr	r2, [pc, #464]	@ (800358c <decodeOn_USB+0x384>)
 80033bc:	21a2      	movs	r1, #162	@ 0xa2
 80033be:	4872      	ldr	r0, [pc, #456]	@ (8003588 <decodeOn_USB+0x380>)
 80033c0:	f7fe fc74 	bl	8001cac <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	3303      	adds	r3, #3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d116      	bne.n	8003404 <decodeOn_USB+0x1fc>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	3304      	adds	r3, #4
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	4869      	ldr	r0, [pc, #420]	@ (8003590 <decodeOn_USB+0x388>)
 80033ea:	f7fe fa1b 	bl	8001824 <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80033ee:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <decodeOn_USB+0x380>)
 80033f0:	220d      	movs	r2, #13
 80033f2:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80033f6:	2301      	movs	r3, #1
 80033f8:	4a64      	ldr	r2, [pc, #400]	@ (800358c <decodeOn_USB+0x384>)
 80033fa:	21a2      	movs	r1, #162	@ 0xa2
 80033fc:	4862      	ldr	r0, [pc, #392]	@ (8003588 <decodeOn_USB+0x380>)
 80033fe:	f7fe fc55 	bl	8001cac <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8003402:	e0dd      	b.n	80035c0 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 8003404:	2308      	movs	r3, #8
 8003406:	4a63      	ldr	r2, [pc, #396]	@ (8003594 <decodeOn_USB+0x38c>)
 8003408:	21ef      	movs	r1, #239	@ 0xef
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fc4e 	bl	8001cac <comm_sendCMD>
		break;
 8003410:	e0d6      	b.n	80035c0 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	3303      	adds	r3, #3
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11a      	bne.n	800345a <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 8003424:	4b5c      	ldr	r3, [pc, #368]	@ (8003598 <decodeOn_USB+0x390>)
 8003426:	891a      	ldrh	r2, [r3, #8]
 8003428:	4b54      	ldr	r3, [pc, #336]	@ (800357c <decodeOn_USB+0x374>)
 800342a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8003434:	4b51      	ldr	r3, [pc, #324]	@ (800357c <decodeOn_USB+0x374>)
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800343e:	4b4f      	ldr	r3, [pc, #316]	@ (800357c <decodeOn_USB+0x374>)
 8003440:	785a      	ldrb	r2, [r3, #1]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800344e:	2303      	movs	r3, #3
 8003450:	21a3      	movs	r1, #163	@ 0xa3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fe fc2a 	bl	8001cac <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8003458:	e0b2      	b.n	80035c0 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	3303      	adds	r3, #3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003468:	2b01      	cmp	r3, #1
 800346a:	d11a      	bne.n	80034a2 <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 800346c:	4b4b      	ldr	r3, [pc, #300]	@ (800359c <decodeOn_USB+0x394>)
 800346e:	891a      	ldrh	r2, [r3, #8]
 8003470:	4b42      	ldr	r3, [pc, #264]	@ (800357c <decodeOn_USB+0x374>)
 8003472:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <decodeOn_USB+0x374>)
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8003486:	4b3d      	ldr	r3, [pc, #244]	@ (800357c <decodeOn_USB+0x374>)
 8003488:	785a      	ldrb	r2, [r3, #1]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8003496:	2303      	movs	r3, #3
 8003498:	21a3      	movs	r1, #163	@ 0xa3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fc06 	bl	8001cac <comm_sendCMD>
		break;
 80034a0:	e08e      	b.n	80035c0 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 80034a2:	230a      	movs	r3, #10
 80034a4:	4a3e      	ldr	r2, [pc, #248]	@ (80035a0 <decodeOn_USB+0x398>)
 80034a6:	21ef      	movs	r1, #239	@ 0xef
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe fbff 	bl	8001cac <comm_sendCMD>
		break;
 80034ae:	e087      	b.n	80035c0 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 80034b0:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <decodeOn_USB+0x39c>)
 80034b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034b6:	4b31      	ldr	r3, [pc, #196]	@ (800357c <decodeOn_USB+0x374>)
 80034b8:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 80034ba:	4b30      	ldr	r3, [pc, #192]	@ (800357c <decodeOn_USB+0x374>)
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <decodeOn_USB+0x374>)
 80034c6:	785a      	ldrb	r2, [r3, #1]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 80034ce:	4b35      	ldr	r3, [pc, #212]	@ (80035a4 <decodeOn_USB+0x39c>)
 80034d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80034d4:	4b29      	ldr	r3, [pc, #164]	@ (800357c <decodeOn_USB+0x374>)
 80034d6:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 80034d8:	4b28      	ldr	r3, [pc, #160]	@ (800357c <decodeOn_USB+0x374>)
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 80034e2:	4b26      	ldr	r3, [pc, #152]	@ (800357c <decodeOn_USB+0x374>)
 80034e4:	785a      	ldrb	r2, [r3, #1]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 80034ec:	4b2d      	ldr	r3, [pc, #180]	@ (80035a4 <decodeOn_USB+0x39c>)
 80034ee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80034f2:	4b22      	ldr	r3, [pc, #136]	@ (800357c <decodeOn_USB+0x374>)
 80034f4:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 80034f6:	4b21      	ldr	r3, [pc, #132]	@ (800357c <decodeOn_USB+0x374>)
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8003500:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <decodeOn_USB+0x374>)
 8003502:	785a      	ldrb	r2, [r3, #1]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 800350a:	4b26      	ldr	r3, [pc, #152]	@ (80035a4 <decodeOn_USB+0x39c>)
 800350c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003510:	4b1a      	ldr	r3, [pc, #104]	@ (800357c <decodeOn_USB+0x374>)
 8003512:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <decodeOn_USB+0x374>)
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 800351e:	4b17      	ldr	r3, [pc, #92]	@ (800357c <decodeOn_USB+0x374>)
 8003520:	785a      	ldrb	r2, [r3, #1]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8003528:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <decodeOn_USB+0x39c>)
 800352a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800352e:	4b13      	ldr	r3, [pc, #76]	@ (800357c <decodeOn_USB+0x374>)
 8003530:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <decodeOn_USB+0x374>)
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 800353c:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <decodeOn_USB+0x374>)
 800353e:	785a      	ldrb	r2, [r3, #1]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8003546:	4b17      	ldr	r3, [pc, #92]	@ (80035a4 <decodeOn_USB+0x39c>)
 8003548:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <decodeOn_USB+0x374>)
 800354e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8003550:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <decodeOn_USB+0x374>)
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <decodeOn_USB+0x374>)
 800355c:	785a      	ldrb	r2, [r3, #1]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800356a:	230c      	movs	r3, #12
 800356c:	21a4      	movs	r1, #164	@ 0xa4
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe fb9c 	bl	8001cac <comm_sendCMD>
		break;
 8003574:	e024      	b.n	80035c0 <decodeOn_USB+0x3b8>
 8003576:	bf00      	nop
 8003578:	20001238 	.word	0x20001238
 800357c:	20000d10 	.word	0x20000d10
 8003580:	080128cc 	.word	0x080128cc
 8003584:	20000d18 	.word	0x20000d18
 8003588:	2000125c 	.word	0x2000125c
 800358c:	2000146c 	.word	0x2000146c
 8003590:	20000d30 	.word	0x20000d30
 8003594:	080128d4 	.word	0x080128d4
 8003598:	20000d48 	.word	0x20000d48
 800359c:	20000d54 	.word	0x20000d54
 80035a0:	080128e0 	.word	0x080128e0
 80035a4:	20000d60 	.word	0x20000d60
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 80035a8:	2306      	movs	r3, #6
 80035aa:	4a07      	ldr	r2, [pc, #28]	@ (80035c8 <decodeOn_USB+0x3c0>)
 80035ac:	21ef      	movs	r1, #239	@ 0xef
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe fb7c 	bl	8001cac <comm_sendCMD>
		break;
 80035b4:	e004      	b.n	80035c0 <decodeOn_USB+0x3b8>
		break;
 80035b6:	bf00      	nop
 80035b8:	e002      	b.n	80035c0 <decodeOn_USB+0x3b8>
		break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <decodeOn_USB+0x3b8>
		break;
 80035be:	bf00      	nop
	}
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	080128ec 	.word	0x080128ec

080035cc <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]

}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <onESP01ChangeState>:

void onESP01ChangeState(_eESP01STATUS esp01State){
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]

}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <onESP01Debug>:

void onESP01Debug(const char *dbgStr){
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <setESP01_CHPD>:

void setESP01_CHPD(uint8_t val){
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	461a      	mov	r2, r3
 800361a:	2104      	movs	r1, #4
 800361c:	4803      	ldr	r0, [pc, #12]	@ (800362c <setESP01_CHPD+0x20>)
 800361e:	f003 f899 	bl	8006754 <HAL_GPIO_WritePin>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40020400 	.word	0x40020400

08003630 <task_10ms>:

void task_10ms(){
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 8003636:	4a5e      	ldr	r2, [pc, #376]	@ (80037b0 <task_10ms+0x180>)
 8003638:	7813      	ldrb	r3, [r2, #0]
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 8003640:	4b5c      	ldr	r3, [pc, #368]	@ (80037b4 <task_10ms+0x184>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b5a      	ldr	r3, [pc, #360]	@ (80037b4 <task_10ms+0x184>)
 800364a:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 800364c:	4b59      	ldr	r3, [pc, #356]	@ (80037b4 <task_10ms+0x184>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 8084 	bne.w	800375e <task_10ms+0x12e>
		is100ms1 = 10;
 8003656:	4b57      	ldr	r3, [pc, #348]	@ (80037b4 <task_10ms+0x184>)
 8003658:	220a      	movs	r2, #10
 800365a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800365c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003660:	4855      	ldr	r0, [pc, #340]	@ (80037b8 <task_10ms+0x188>)
 8003662:	f003 f890 	bl	8006786 <HAL_GPIO_TogglePin>
		is1s--;
 8003666:	4b55      	ldr	r3, [pc, #340]	@ (80037bc <task_10ms+0x18c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b53      	ldr	r3, [pc, #332]	@ (80037bc <task_10ms+0x18c>)
 8003670:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 8003672:	4b52      	ldr	r3, [pc, #328]	@ (80037bc <task_10ms+0x18c>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d171      	bne.n	800375e <task_10ms+0x12e>
			is1s = 10;
 800367a:	4b50      	ldr	r3, [pc, #320]	@ (80037bc <task_10ms+0x18c>)
 800367c:	220a      	movs	r2, #10
 800367e:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 8003680:	484f      	ldr	r0, [pc, #316]	@ (80037c0 <task_10ms+0x190>)
 8003682:	f7fe f89f 	bl	80017c4 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 8003686:	484f      	ldr	r0, [pc, #316]	@ (80037c4 <task_10ms+0x194>)
 8003688:	f7fe f89c 	bl	80017c4 <Encoder_1s_Elapsed>

			is20s--;
 800368c:	4b4e      	ldr	r3, [pc, #312]	@ (80037c8 <task_10ms+0x198>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	3b01      	subs	r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b4c      	ldr	r3, [pc, #304]	@ (80037c8 <task_10ms+0x198>)
 8003696:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 8003698:	4b4b      	ldr	r3, [pc, #300]	@ (80037c8 <task_10ms+0x198>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d15e      	bne.n	800375e <task_10ms+0x12e>
				is20s = 20;
 80036a0:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <task_10ms+0x198>)
 80036a2:	2214      	movs	r2, #20
 80036a4:	701a      	strb	r2, [r3, #0]
				if(ESP01_StateWIFI() != ESP01_WIFI_CONNECTED){
 80036a6:	f7fe fc69 	bl	8001f7c <ESP01_StateWIFI>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d04e      	beq.n	800374e <task_10ms+0x11e>
					switch(ESP01_StartUDP("192.168.1.8", 30010, 30000) != ESP01_UDPTCP_CONNECTING){
 80036b0:	f247 5230 	movw	r2, #30000	@ 0x7530
 80036b4:	f247 513a 	movw	r1, #30010	@ 0x753a
 80036b8:	4844      	ldr	r0, [pc, #272]	@ (80037cc <task_10ms+0x19c>)
 80036ba:	f7fe fc09 	bl	8001ed0 <ESP01_StartUDP>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	3301      	adds	r3, #1
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d846      	bhi.n	800375e <task_10ms+0x12e>
 80036d0:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <task_10ms+0xa8>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036f9 	.word	0x080036f9
 80036dc:	08003715 	.word	0x08003715
 80036e0:	08003707 	.word	0x08003707
 80036e4:	0800375f 	.word	0x0800375f
 80036e8:	0800375f 	.word	0x0800375f
 80036ec:	0800375f 	.word	0x0800375f
 80036f0:	0800375f 	.word	0x0800375f
 80036f4:	08003723 	.word	0x08003723
					case ESP01_NOT_INIT:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI NOT INIT", 13);
 80036f8:	230d      	movs	r3, #13
 80036fa:	4a35      	ldr	r2, [pc, #212]	@ (80037d0 <task_10ms+0x1a0>)
 80036fc:	21b1      	movs	r1, #177	@ 0xb1
 80036fe:	4835      	ldr	r0, [pc, #212]	@ (80037d4 <task_10ms+0x1a4>)
 8003700:	f7fe fad4 	bl	8001cac <comm_sendCMD>
						break;
 8003704:	e02b      	b.n	800375e <task_10ms+0x12e>
					case ESP01_WIFI_NOT_SETED:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI NOT SETED", 14);
 8003706:	230e      	movs	r3, #14
 8003708:	4a33      	ldr	r2, [pc, #204]	@ (80037d8 <task_10ms+0x1a8>)
 800370a:	21b1      	movs	r1, #177	@ 0xb1
 800370c:	4831      	ldr	r0, [pc, #196]	@ (80037d4 <task_10ms+0x1a4>)
 800370e:	f7fe facd 	bl	8001cac <comm_sendCMD>
						break;
 8003712:	e024      	b.n	800375e <task_10ms+0x12e>
					case ESP01_WIFI_DISCONNECTED:
						comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI DISCONECT", 14);
 8003714:	230e      	movs	r3, #14
 8003716:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <task_10ms+0x1ac>)
 8003718:	21b1      	movs	r1, #177	@ 0xb1
 800371a:	482e      	ldr	r0, [pc, #184]	@ (80037d4 <task_10ms+0x1a4>)
 800371c:	f7fe fac6 	bl	8001cac <comm_sendCMD>
						break;
 8003720:	e01d      	b.n	800375e <task_10ms+0x12e>
					case ESP01_UDPTCP_CONNECTING:
						if(ESP01_GetLocalIP() != NULL){
 8003722:	f7fe fc47 	bl	8001fb4 <ESP01_GetLocalIP>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <task_10ms+0x12c>
							uint8_t len = sprintf((char*)&USB.data.auxBuffer[0], "IP: %s", ESP01_GetLocalIP());
 800372c:	f7fe fc42 	bl	8001fb4 <ESP01_GetLocalIP>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	492a      	ldr	r1, [pc, #168]	@ (80037e0 <task_10ms+0x1b0>)
 8003736:	482b      	ldr	r0, [pc, #172]	@ (80037e4 <task_10ms+0x1b4>)
 8003738:	f00e fb56 	bl	8011de8 <siprintf>
 800373c:	4603      	mov	r3, r0
 800373e:	71fb      	strb	r3, [r7, #7]
							comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, len);
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <task_10ms+0x1b4>)
 8003744:	21b1      	movs	r1, #177	@ 0xb1
 8003746:	4823      	ldr	r0, [pc, #140]	@ (80037d4 <task_10ms+0x1a4>)
 8003748:	f7fe fab0 	bl	8001cac <comm_sendCMD>
						}
						break;
 800374c:	e006      	b.n	800375c <task_10ms+0x12c>
					}
				}else{
					comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"WIFI CONNECTED", 14);
 800374e:	230e      	movs	r3, #14
 8003750:	4a25      	ldr	r2, [pc, #148]	@ (80037e8 <task_10ms+0x1b8>)
 8003752:	21b1      	movs	r1, #177	@ 0xb1
 8003754:	481f      	ldr	r0, [pc, #124]	@ (80037d4 <task_10ms+0x1a4>)
 8003756:	f7fe faa9 	bl	8001cac <comm_sendCMD>
 800375a:	e000      	b.n	800375e <task_10ms+0x12e>
						break;
 800375c:	bf00      	nop
			}
		}

	}

	Display.refreshCounter_10ms--;
 800375e:	4b23      	ldr	r3, [pc, #140]	@ (80037ec <task_10ms+0x1bc>)
 8003760:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8003764:	3b01      	subs	r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <task_10ms+0x1bc>)
 800376a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ //Tasa de refresco variable
 800376e:	4b1f      	ldr	r3, [pc, #124]	@ (80037ec <task_10ms+0x1bc>)
 8003770:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <task_10ms+0x158>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 8003778:	4b1c      	ldr	r3, [pc, #112]	@ (80037ec <task_10ms+0x1bc>)
 800377a:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800377e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <task_10ms+0x1bc>)
 8003780:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8003784:	f7ff fb86 	bl	8002e94 <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 8003788:	f7fe fc8a 	bl	80020a0 <ESP01_Timeout10ms>
	Debouncer_Task();
 800378c:	f7fd f83e 	bl	800080c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 8003790:	4817      	ldr	r0, [pc, #92]	@ (80037f0 <task_10ms+0x1c0>)
 8003792:	f7fe f8df 	bl	8001954 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 8003796:	4817      	ldr	r0, [pc, #92]	@ (80037f4 <task_10ms+0x1c4>)
 8003798:	f7fe f8dc 	bl	8001954 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 800379c:	4808      	ldr	r0, [pc, #32]	@ (80037c0 <task_10ms+0x190>)
 800379e:	f7fd ffd1 	bl	8001744 <Encoder_Task>
	Encoder_Task(&EncoderR);
 80037a2:	4808      	ldr	r0, [pc, #32]	@ (80037c4 <task_10ms+0x194>)
 80037a4:	f7fd ffce 	bl	8001744 <Encoder_Task>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000d0c 	.word	0x20000d0c
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	40020800 	.word	0x40020800
 80037bc:	2000000d 	.word	0x2000000d
 80037c0:	20000d48 	.word	0x20000d48
 80037c4:	20000d54 	.word	0x20000d54
 80037c8:	2000000f 	.word	0x2000000f
 80037cc:	080128f4 	.word	0x080128f4
 80037d0:	08012900 	.word	0x08012900
 80037d4:	2000125c 	.word	0x2000125c
 80037d8:	08012910 	.word	0x08012910
 80037dc:	08012920 	.word	0x08012920
 80037e0:	08012930 	.word	0x08012930
 80037e4:	2000146c 	.word	0x2000146c
 80037e8:	08012938 	.word	0x08012938
 80037ec:	20000e24 	.word	0x20000e24
 80037f0:	20000d18 	.word	0x20000d18
 80037f4:	20000d30 	.word	0x20000d30

080037f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037fc:	f001 fb2e 	bl	8004e5c <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8003800:	4b76      	ldr	r3, [pc, #472]	@ (80039dc <main+0x1e4>)
 8003802:	2200      	movs	r2, #0
 8003804:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 8003808:	4b75      	ldr	r3, [pc, #468]	@ (80039e0 <main+0x1e8>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800380e:	4b74      	ldr	r3, [pc, #464]	@ (80039e0 <main+0x1e8>)
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401

  ESP.password = "wlan412877";
 8003816:	4b73      	ldr	r3, [pc, #460]	@ (80039e4 <main+0x1ec>)
 8003818:	4a73      	ldr	r2, [pc, #460]	@ (80039e8 <main+0x1f0>)
 800381a:	611a      	str	r2, [r3, #16]
  ESP.ssid = "InternetPlus_bed788";
 800381c:	4b71      	ldr	r3, [pc, #452]	@ (80039e4 <main+0x1ec>)
 800381e:	4a73      	ldr	r2, [pc, #460]	@ (80039ec <main+0x1f4>)
 8003820:	60da      	str	r2, [r3, #12]
  ESP.iR = 0;
 8003822:	4b70      	ldr	r3, [pc, #448]	@ (80039e4 <main+0x1ec>)
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2345 	strb.w	r2, [r3, #837]	@ 0x345
  ESP.iW = 0;
 800382a:	4b6e      	ldr	r3, [pc, #440]	@ (80039e4 <main+0x1ec>)
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2346 	strb.w	r2, [r3, #838]	@ 0x346



  ESP.Config.DoCHPD = setESP01_CHPD;
 8003832:	4b6c      	ldr	r3, [pc, #432]	@ (80039e4 <main+0x1ec>)
 8003834:	4a6e      	ldr	r2, [pc, #440]	@ (80039f0 <main+0x1f8>)
 8003836:	601a      	str	r2, [r3, #0]
  ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 8003838:	4b6a      	ldr	r3, [pc, #424]	@ (80039e4 <main+0x1ec>)
 800383a:	4a6e      	ldr	r2, [pc, #440]	@ (80039f4 <main+0x1fc>)
 800383c:	609a      	str	r2, [r3, #8]
  ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 800383e:	4b69      	ldr	r3, [pc, #420]	@ (80039e4 <main+0x1ec>)
 8003840:	4a6d      	ldr	r2, [pc, #436]	@ (80039f8 <main+0x200>)
 8003842:	605a      	str	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003844:	f000 f90e 	bl	8003a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003848:	f000 fba0 	bl	8003f8c <MX_GPIO_Init>
  MX_DMA_Init();
 800384c:	f000 fb60 	bl	8003f10 <MX_DMA_Init>
  MX_ADC1_Init();
 8003850:	f000 f972 	bl	8003b38 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8003854:	f00d fcf0 	bl	8011238 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8003858:	f000 fa5e 	bl	8003d18 <MX_TIM1_Init>
  MX_I2C1_Init();
 800385c:	f000 fa2e 	bl	8003cbc <MX_I2C1_Init>
  MX_TIM3_Init();
 8003860:	f000 faaa 	bl	8003db8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003864:	f000 fb2a 	bl	8003ebc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 8003868:	4a64      	ldr	r2, [pc, #400]	@ (80039fc <main+0x204>)
 800386a:	4965      	ldr	r1, [pc, #404]	@ (8003a00 <main+0x208>)
 800386c:	4865      	ldr	r0, [pc, #404]	@ (8003a04 <main+0x20c>)
 800386e:	f7fe f88c 	bl	800198a <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 8003872:	4865      	ldr	r0, [pc, #404]	@ (8003a08 <main+0x210>)
 8003874:	f00d fe32 	bl	80114dc <CDC_Attach_Rx>

  //HAL_UART_Receive_IT(&huart1, &dataRx, 1);
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 8003878:	f7fc ff60 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 800387c:	4963      	ldr	r1, [pc, #396]	@ (8003a0c <main+0x214>)
 800387e:	4864      	ldr	r0, [pc, #400]	@ (8003a10 <main+0x218>)
 8003880:	f7fc ff90 	bl	80007a4 <Debounce_Add>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4b62      	ldr	r3, [pc, #392]	@ (8003a14 <main+0x21c>)
 800388a:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  Init_Timing();
 800388c:	f000 fc54 	bl	8004138 <Init_Timing>

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 8003890:	f000 fc96 	bl	80041c0 <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 8003894:	f000 fccc 	bl	8004230 <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 8003898:	4b5f      	ldr	r3, [pc, #380]	@ (8003a18 <main+0x220>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4a5e      	ldr	r2, [pc, #376]	@ (8003a1c <main+0x224>)
 80038a2:	495f      	ldr	r1, [pc, #380]	@ (8003a20 <main+0x228>)
 80038a4:	485f      	ldr	r0, [pc, #380]	@ (8003a24 <main+0x22c>)
 80038a6:	f7fd ff9e 	bl	80017e6 <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 80038aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003a18 <main+0x220>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003a28 <main+0x230>)
 80038b4:	495d      	ldr	r1, [pc, #372]	@ (8003a2c <main+0x234>)
 80038b6:	485e      	ldr	r0, [pc, #376]	@ (8003a30 <main+0x238>)
 80038b8:	f7fd ff95 	bl	80017e6 <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 80038bc:	210a      	movs	r1, #10
 80038be:	485d      	ldr	r0, [pc, #372]	@ (8003a34 <main+0x23c>)
 80038c0:	f7fd ff21 	bl	8001706 <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 80038c4:	210a      	movs	r1, #10
 80038c6:	485c      	ldr	r0, [pc, #368]	@ (8003a38 <main+0x240>)
 80038c8:	f7fd ff1d 	bl	8001706 <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */


  ESP01_Init(&ESP.Config);
 80038cc:	4845      	ldr	r0, [pc, #276]	@ (80039e4 <main+0x1ec>)
 80038ce:	f7fe fbab 	bl	8002028 <ESP01_Init>
  ESP01_SetWIFI(ESP.ssid, ESP.password);
 80038d2:	4b44      	ldr	r3, [pc, #272]	@ (80039e4 <main+0x1ec>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4a43      	ldr	r2, [pc, #268]	@ (80039e4 <main+0x1ec>)
 80038d8:	6912      	ldr	r2, [r2, #16]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fac1 	bl	8001e64 <ESP01_SetWIFI>
  ESP01_AttachChangeState(&onESP01ChangeState);
 80038e2:	4856      	ldr	r0, [pc, #344]	@ (8003a3c <main+0x244>)
 80038e4:	f7fe fc28 	bl	8002138 <ESP01_AttachChangeState>
  ESP01_AttachDebugStr(&onESP01Debug);
 80038e8:	4855      	ldr	r0, [pc, #340]	@ (8003a40 <main+0x248>)
 80038ea:	f7fe fc35 	bl	8002158 <ESP01_AttachDebugStr>

	if(ESP01_StartUDP("192.168.1.8", 30010, 30000) != ESP01_UDPTCP_CONNECTING){
 80038ee:	f247 5230 	movw	r2, #30000	@ 0x7530
 80038f2:	f247 513a 	movw	r1, #30010	@ 0x753a
 80038f6:	4853      	ldr	r0, [pc, #332]	@ (8003a44 <main+0x24c>)
 80038f8:	f7fe faea 	bl	8001ed0 <ESP01_StartUDP>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d006      	beq.n	8003910 <main+0x118>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"ESP UDP", 7);
 8003902:	2307      	movs	r3, #7
 8003904:	4a50      	ldr	r2, [pc, #320]	@ (8003a48 <main+0x250>)
 8003906:	21ee      	movs	r1, #238	@ 0xee
 8003908:	483e      	ldr	r0, [pc, #248]	@ (8003a04 <main+0x20c>)
 800390a:	f7fe f9cf 	bl	8001cac <comm_sendCMD>
 800390e:	e005      	b.n	800391c <main+0x124>
	}else{
		comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)"UDP ON", 6);
 8003910:	2306      	movs	r3, #6
 8003912:	4a4e      	ldr	r2, [pc, #312]	@ (8003a4c <main+0x254>)
 8003914:	21b1      	movs	r1, #177	@ 0xb1
 8003916:	483b      	ldr	r0, [pc, #236]	@ (8003a04 <main+0x20c>)
 8003918:	f7fe f9c8 	bl	8001cac <comm_sendCMD>
	}

  HAL_UART_Receive_IT(&huart1, &ESP.bytesInRx, 1);
 800391c:	2201      	movs	r2, #1
 800391e:	494c      	ldr	r1, [pc, #304]	@ (8003a50 <main+0x258>)
 8003920:	484c      	ldr	r0, [pc, #304]	@ (8003a54 <main+0x25c>)
 8003922:	f009 fa4b 	bl	800cdbc <HAL_UART_Receive_IT>



  Car.state = IDLE;
 8003926:	4b4c      	ldr	r3, [pc, #304]	@ (8003a58 <main+0x260>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 800392c:	4835      	ldr	r0, [pc, #212]	@ (8003a04 <main+0x20c>)
 800392e:	f7fe f860 	bl	80019f2 <Comm_Task>
	Display_UpdateScreen_Task();
 8003932:	f7fd fbbf 	bl	80010b4 <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8003936:	4829      	ldr	r0, [pc, #164]	@ (80039dc <main+0x1e4>)
 8003938:	f7fd f96c 	bl	8000c14 <MPU6050_MAF>
	ESP01_Task();
 800393c:	f7fe fbe2 	bl	8002104 <ESP01_Task>


	if(ESP.iR != ESP.iW){
 8003940:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <main+0x1ec>)
 8003942:	f893 2345 	ldrb.w	r2, [r3, #837]	@ 0x345
 8003946:	4b27      	ldr	r3, [pc, #156]	@ (80039e4 <main+0x1ec>)
 8003948:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 800394c:	429a      	cmp	r2, r3
 800394e:	d02d      	beq.n	80039ac <main+0x1b4>
		if(ESP.iR > ESP.iW){
 8003950:	4b24      	ldr	r3, [pc, #144]	@ (80039e4 <main+0x1ec>)
 8003952:	f893 2345 	ldrb.w	r2, [r3, #837]	@ 0x345
 8003956:	4b23      	ldr	r3, [pc, #140]	@ (80039e4 <main+0x1ec>)
 8003958:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 800395c:	429a      	cmp	r2, r3
 800395e:	d908      	bls.n	8003972 <main+0x17a>
			ESP.bytesToTx = 256 - ESP.iW;
 8003960:	4b20      	ldr	r3, [pc, #128]	@ (80039e4 <main+0x1ec>)
 8003962:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 8003966:	425b      	negs	r3, r3
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b1e      	ldr	r3, [pc, #120]	@ (80039e4 <main+0x1ec>)
 800396c:	f883 2347 	strb.w	r2, [r3, #839]	@ 0x347
 8003970:	e00a      	b.n	8003988 <main+0x190>
		}else{
			ESP.bytesToTx = ESP.iR - ESP.iW;
 8003972:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <main+0x1ec>)
 8003974:	f893 2345 	ldrb.w	r2, [r3, #837]	@ 0x345
 8003978:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <main+0x1ec>)
 800397a:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4b18      	ldr	r3, [pc, #96]	@ (80039e4 <main+0x1ec>)
 8003984:	f883 2347 	strb.w	r2, [r3, #839]	@ 0x347
		}
		CDC_Transmit_FS(ESP.buffer, ESP.bytesToTx);
 8003988:	4b16      	ldr	r3, [pc, #88]	@ (80039e4 <main+0x1ec>)
 800398a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800398e:	4619      	mov	r1, r3
 8003990:	4832      	ldr	r0, [pc, #200]	@ (8003a5c <main+0x264>)
 8003992:	f00d fd6b 	bl	801146c <CDC_Transmit_FS>
		ESP.iR += ESP.bytesToTx;
 8003996:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <main+0x1ec>)
 8003998:	f893 2345 	ldrb.w	r2, [r3, #837]	@ 0x345
 800399c:	4b11      	ldr	r3, [pc, #68]	@ (80039e4 <main+0x1ec>)
 800399e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80039a2:	4413      	add	r3, r2
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b0f      	ldr	r3, [pc, #60]	@ (80039e4 <main+0x1ec>)
 80039a8:	f883 2345 	strb.w	r2, [r3, #837]	@ 0x345
	}
	  /* END USER TASK */

	if(IS10MS){
 80039ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003a60 <main+0x268>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <main+0x1c6>
		task_10ms();
 80039ba:	f7ff fe39 	bl	8003630 <task_10ms>
	}

	switch(Car.state){
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <main+0x260>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d005      	beq.n	80039d2 <main+0x1da>
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	dcb0      	bgt.n	800392c <main+0x134>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <main+0x1de>
 80039ce:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 80039d0:	e002      	b.n	80039d8 <main+0x1e0>
	case GO_FROM_TO:

		break;
 80039d2:	bf00      	nop
 80039d4:	e7aa      	b.n	800392c <main+0x134>
		break;
 80039d6:	bf00      	nop
	Comm_Task(&USB.data);
 80039d8:	e7a8      	b.n	800392c <main+0x134>
 80039da:	bf00      	nop
 80039dc:	20000d60 	.word	0x20000d60
 80039e0:	20000e24 	.word	0x20000e24
 80039e4:	20001490 	.word	0x20001490
 80039e8:	08012948 	.word	0x08012948
 80039ec:	08012954 	.word	0x08012954
 80039f0:	0800360d 	.word	0x0800360d
 80039f4:	08004499 	.word	0x08004499
 80039f8:	0800445d 	.word	0x0800445d
 80039fc:	080045d9 	.word	0x080045d9
 8003a00:	08003209 	.word	0x08003209
 8003a04:	2000125c 	.word	0x2000125c
 8003a08:	0800464d 	.word	0x0800464d
 8003a0c:	080035cd 	.word	0x080035cd
 8003a10:	080045c1 	.word	0x080045c1
 8003a14:	20000d14 	.word	0x20000d14
 8003a18:	20000c7c 	.word	0x20000c7c
 8003a1c:	080046a5 	.word	0x080046a5
 8003a20:	08004719 	.word	0x08004719
 8003a24:	20000d18 	.word	0x20000d18
 8003a28:	080046dd 	.word	0x080046dd
 8003a2c:	0800473d 	.word	0x0800473d
 8003a30:	20000d30 	.word	0x20000d30
 8003a34:	20000d48 	.word	0x20000d48
 8003a38:	20000d54 	.word	0x20000d54
 8003a3c:	080035e3 	.word	0x080035e3
 8003a40:	080035f9 	.word	0x080035f9
 8003a44:	080128f4 	.word	0x080128f4
 8003a48:	08012968 	.word	0x08012968
 8003a4c:	08012970 	.word	0x08012970
 8003a50:	200016d4 	.word	0x200016d4
 8003a54:	20000cc4 	.word	0x20000cc4
 8003a58:	200017d8 	.word	0x200017d8
 8003a5c:	200016d5 	.word	0x200016d5
 8003a60:	20000d0c 	.word	0x20000d0c

08003a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b094      	sub	sp, #80	@ 0x50
 8003a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a6a:	f107 0320 	add.w	r3, r7, #32
 8003a6e:	2230      	movs	r2, #48	@ 0x30
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f00e f9da 	bl	8011e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <SystemClock_Config+0xcc>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	4a27      	ldr	r2, [pc, #156]	@ (8003b30 <SystemClock_Config+0xcc>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a98:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <SystemClock_Config+0xcc>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <SystemClock_Config+0xd0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a21      	ldr	r2, [pc, #132]	@ (8003b34 <SystemClock_Config+0xd0>)
 8003aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b34 <SystemClock_Config+0xd0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aca:	2302      	movs	r3, #2
 8003acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ace:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003ad4:	2319      	movs	r3, #25
 8003ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003ad8:	23c0      	movs	r3, #192	@ 0xc0
 8003ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003adc:	2302      	movs	r3, #2
 8003ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae4:	f107 0320 	add.w	r3, r7, #32
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f007 fcab 	bl	800b444 <HAL_RCC_OscConfig>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003af4:	f000 fe34 	bl	8004760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003af8:	230f      	movs	r3, #15
 8003afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003afc:	2302      	movs	r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	2103      	movs	r1, #3
 8003b14:	4618      	mov	r0, r3
 8003b16:	f007 ff0d 	bl	800b934 <HAL_RCC_ClockConfig>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003b20:	f000 fe1e 	bl	8004760 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003b24:	f007 ffec 	bl	800bb00 <HAL_RCC_EnableCSS>
}
 8003b28:	bf00      	nop
 8003b2a:	3750      	adds	r7, #80	@ 0x50
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000

08003b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b3e:	463b      	mov	r3, r7
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b4a:	4b59      	ldr	r3, [pc, #356]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b4c:	4a59      	ldr	r2, [pc, #356]	@ (8003cb4 <MX_ADC1_Init+0x17c>)
 8003b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b50:	4b57      	ldr	r3, [pc, #348]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b58:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003b5e:	4b54      	ldr	r3, [pc, #336]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b64:	4b52      	ldr	r3, [pc, #328]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b6a:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b72:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b78:	4b4d      	ldr	r3, [pc, #308]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb8 <MX_ADC1_Init+0x180>)
 8003b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8003b84:	4b4a      	ldr	r3, [pc, #296]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b86:	2209      	movs	r2, #9
 8003b88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b8a:	4b49      	ldr	r3, [pc, #292]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b92:	4b47      	ldr	r3, [pc, #284]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b98:	4845      	ldr	r0, [pc, #276]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003b9a:	f001 f9f5 	bl	8004f88 <HAL_ADC_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003ba4:	f000 fddc 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	483d      	ldr	r0, [pc, #244]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003bba:	f001 fc47 	bl	800544c <HAL_ADC_ConfigChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003bc4:	f000 fdcc 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4836      	ldr	r0, [pc, #216]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003bd6:	f001 fc39 	bl	800544c <HAL_ADC_ConfigChannel>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003be0:	f000 fdbe 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003be4:	2303      	movs	r3, #3
 8003be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003be8:	2303      	movs	r3, #3
 8003bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bec:	463b      	mov	r3, r7
 8003bee:	4619      	mov	r1, r3
 8003bf0:	482f      	ldr	r0, [pc, #188]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003bf2:	f001 fc2b 	bl	800544c <HAL_ADC_ConfigChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003bfc:	f000 fdb0 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003c00:	2304      	movs	r3, #4
 8003c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003c04:	2304      	movs	r3, #4
 8003c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c08:	463b      	mov	r3, r7
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4828      	ldr	r0, [pc, #160]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003c0e:	f001 fc1d 	bl	800544c <HAL_ADC_ConfigChannel>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003c18:	f000 fda2 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003c1c:	2305      	movs	r3, #5
 8003c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003c20:	2305      	movs	r3, #5
 8003c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c24:	463b      	mov	r3, r7
 8003c26:	4619      	mov	r1, r3
 8003c28:	4821      	ldr	r0, [pc, #132]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003c2a:	f001 fc0f 	bl	800544c <HAL_ADC_ConfigChannel>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003c34:	f000 fd94 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003c38:	2306      	movs	r3, #6
 8003c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003c3c:	2306      	movs	r3, #6
 8003c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c40:	463b      	mov	r3, r7
 8003c42:	4619      	mov	r1, r3
 8003c44:	481a      	ldr	r0, [pc, #104]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003c46:	f001 fc01 	bl	800544c <HAL_ADC_ConfigChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003c50:	f000 fd86 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003c54:	2307      	movs	r3, #7
 8003c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4813      	ldr	r0, [pc, #76]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003c62:	f001 fbf3 	bl	800544c <HAL_ADC_ConfigChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003c6c:	f000 fd78 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003c70:	2308      	movs	r3, #8
 8003c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003c74:	2308      	movs	r3, #8
 8003c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c78:	463b      	mov	r3, r7
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	480c      	ldr	r0, [pc, #48]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003c7e:	f001 fbe5 	bl	800544c <HAL_ADC_ConfigChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003c88:	f000 fd6a 	bl	8004760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003c8c:	2309      	movs	r3, #9
 8003c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003c90:	2309      	movs	r3, #9
 8003c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c94:	463b      	mov	r3, r7
 8003c96:	4619      	mov	r1, r3
 8003c98:	4805      	ldr	r0, [pc, #20]	@ (8003cb0 <MX_ADC1_Init+0x178>)
 8003c9a:	f001 fbd7 	bl	800544c <HAL_ADC_ConfigChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003ca4:	f000 fd5c 	bl	8004760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000a78 	.word	0x20000a78
 8003cb4:	40012000 	.word	0x40012000
 8003cb8:	0f000001 	.word	0x0f000001

08003cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cc2:	4a13      	ldr	r2, [pc, #76]	@ (8003d10 <MX_I2C1_Init+0x54>)
 8003cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cc8:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <MX_I2C1_Init+0x58>)
 8003cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ce6:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cf8:	4804      	ldr	r0, [pc, #16]	@ (8003d0c <MX_I2C1_Init+0x50>)
 8003cfa:	f002 fd77 	bl	80067ec <HAL_I2C_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d04:	f000 fd2c 	bl	8004760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000b20 	.word	0x20000b20
 8003d10:	40005400 	.word	0x40005400
 8003d14:	00061a80 	.word	0x00061a80

08003d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d34:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d36:	4a1f      	ldr	r2, [pc, #124]	@ (8003db4 <MX_TIM1_Init+0x9c>)
 8003d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8003d46:	4b1a      	ldr	r3, [pc, #104]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d48:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8003d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4e:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d60:	4813      	ldr	r0, [pc, #76]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d62:	f007 ffee 	bl	800bd42 <HAL_TIM_Base_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003d6c:	f000 fcf8 	bl	8004760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	480c      	ldr	r0, [pc, #48]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d7e:	f008 fb4d 	bl	800c41c <HAL_TIM_ConfigClockSource>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003d88:	f000 fcea 	bl	8004760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d94:	463b      	mov	r3, r7
 8003d96:	4619      	mov	r1, r3
 8003d98:	4805      	ldr	r0, [pc, #20]	@ (8003db0 <MX_TIM1_Init+0x98>)
 8003d9a:	f008 ff07 	bl	800cbac <HAL_TIMEx_MasterConfigSynchronization>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003da4:	f000 fcdc 	bl	8004760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003da8:	bf00      	nop
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000c34 	.word	0x20000c34
 8003db4:	40010000 	.word	0x40010000

08003db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	@ 0x38
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dcc:	f107 0320 	add.w	r3, r7, #32
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
 8003de4:	615a      	str	r2, [r3, #20]
 8003de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003dea:	4a33      	ldr	r2, [pc, #204]	@ (8003eb8 <MX_TIM3_Init+0x100>)
 8003dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003dee:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003df0:	220f      	movs	r2, #15
 8003df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df4:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003dfc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e02:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e08:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e0e:	4829      	ldr	r0, [pc, #164]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e10:	f007 ff97 	bl	800bd42 <HAL_TIM_Base_Init>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003e1a:	f000 fca1 	bl	8004760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4822      	ldr	r0, [pc, #136]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e2c:	f008 faf6 	bl	800c41c <HAL_TIM_ConfigClockSource>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003e36:	f000 fc93 	bl	8004760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e3a:	481e      	ldr	r0, [pc, #120]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e3c:	f008 f832 	bl	800bea4 <HAL_TIM_PWM_Init>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003e46:	f000 fc8b 	bl	8004760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e52:	f107 0320 	add.w	r3, r7, #32
 8003e56:	4619      	mov	r1, r3
 8003e58:	4816      	ldr	r0, [pc, #88]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e5a:	f008 fea7 	bl	800cbac <HAL_TIMEx_MasterConfigSynchronization>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003e64:	f000 fc7c 	bl	8004760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e68:	2360      	movs	r3, #96	@ 0x60
 8003e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	480d      	ldr	r0, [pc, #52]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e80:	f008 fa0a 	bl	800c298 <HAL_TIM_PWM_ConfigChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003e8a:	f000 fc69 	bl	8004760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	2204      	movs	r2, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4807      	ldr	r0, [pc, #28]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003e96:	f008 f9ff 	bl	800c298 <HAL_TIM_PWM_ConfigChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003ea0:	f000 fc5e 	bl	8004760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ea4:	4803      	ldr	r0, [pc, #12]	@ (8003eb4 <MX_TIM3_Init+0xfc>)
 8003ea6:	f000 fe2f 	bl	8004b08 <HAL_TIM_MspPostInit>

}
 8003eaa:	bf00      	nop
 8003eac:	3738      	adds	r7, #56	@ 0x38
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000c7c 	.word	0x20000c7c
 8003eb8:	40000400 	.word	0x40000400

08003ebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <MX_USART1_UART_Init+0x50>)
 8003ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ec6:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ece:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003eda:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ee0:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ef2:	4805      	ldr	r0, [pc, #20]	@ (8003f08 <MX_USART1_UART_Init+0x4c>)
 8003ef4:	f008 fedc 	bl	800ccb0 <HAL_UART_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003efe:	f000 fc2f 	bl	8004760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000cc4 	.word	0x20000cc4
 8003f0c:	40011000 	.word	0x40011000

08003f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <MX_DMA_Init+0x78>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f88 <MX_DMA_Init+0x78>)
 8003f20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f26:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <MX_DMA_Init+0x78>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <MX_DMA_Init+0x78>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	4a13      	ldr	r2, [pc, #76]	@ (8003f88 <MX_DMA_Init+0x78>)
 8003f3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f42:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <MX_DMA_Init+0x78>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	200b      	movs	r0, #11
 8003f54:	f001 fe0f 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003f58:	200b      	movs	r0, #11
 8003f5a:	f001 fe28 	bl	8005bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	200c      	movs	r0, #12
 8003f64:	f001 fe07 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003f68:	200c      	movs	r0, #12
 8003f6a:	f001 fe20 	bl	8005bae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2100      	movs	r1, #0
 8003f72:	2038      	movs	r0, #56	@ 0x38
 8003f74:	f001 fdff 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003f78:	2038      	movs	r0, #56	@ 0x38
 8003f7a:	f001 fe18 	bl	8005bae <HAL_NVIC_EnableIRQ>

}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800

08003f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	@ 0x28
 8003f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	4b60      	ldr	r3, [pc, #384]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	4a5f      	ldr	r2, [pc, #380]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fce:	4b56      	ldr	r3, [pc, #344]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	4a51      	ldr	r2, [pc, #324]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fea:	4b4f      	ldr	r3, [pc, #316]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	6313      	str	r3, [r2, #48]	@ 0x30
 8004006:	4b48      	ldr	r3, [pc, #288]	@ (8004128 <MX_GPIO_Init+0x19c>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004012:	2200      	movs	r2, #0
 8004014:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004018:	4844      	ldr	r0, [pc, #272]	@ (800412c <MX_GPIO_Init+0x1a0>)
 800401a:	f002 fb9b 	bl	8006754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_EN_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 800401e:	2200      	movs	r2, #0
 8004020:	210c      	movs	r1, #12
 8004022:	4843      	ldr	r0, [pc, #268]	@ (8004130 <MX_GPIO_Init+0x1a4>)
 8004024:	f002 fb96 	bl	8006754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 800402e:	4841      	ldr	r0, [pc, #260]	@ (8004134 <MX_GPIO_Init+0x1a8>)
 8004030:	f002 fb90 	bl	8006754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403a:	2301      	movs	r3, #1
 800403c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004042:	2300      	movs	r3, #0
 8004044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	4619      	mov	r1, r3
 800404c:	4837      	ldr	r0, [pc, #220]	@ (800412c <MX_GPIO_Init+0x1a0>)
 800404e:	f002 f9e5 	bl	800641c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800405e:	f107 0314 	add.w	r3, r7, #20
 8004062:	4619      	mov	r1, r3
 8004064:	4833      	ldr	r0, [pc, #204]	@ (8004134 <MX_GPIO_Init+0x1a8>)
 8004066:	f002 f9d9 	bl	800641c <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|M2_IN2_Pin;
 800406a:	230c      	movs	r3, #12
 800406c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406e:	2301      	movs	r3, #1
 8004070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004076:	2300      	movs	r3, #0
 8004078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	4619      	mov	r1, r3
 8004080:	482b      	ldr	r0, [pc, #172]	@ (8004130 <MX_GPIO_Init+0x1a4>)
 8004082:	f002 f9cb 	bl	800641c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800408a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800408c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	4619      	mov	r1, r3
 800409c:	4824      	ldr	r0, [pc, #144]	@ (8004130 <MX_GPIO_Init+0x1a4>)
 800409e:	f002 f9bd 	bl	800641c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80040a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80040a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b0:	2303      	movs	r3, #3
 80040b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040b4:	2305      	movs	r3, #5
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	4619      	mov	r1, r3
 80040be:	481c      	ldr	r0, [pc, #112]	@ (8004130 <MX_GPIO_Init+0x1a4>)
 80040c0:	f002 f9ac 	bl	800641c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 80040c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80040ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	4816      	ldr	r0, [pc, #88]	@ (8004134 <MX_GPIO_Init+0x1a8>)
 80040dc:	f002 f99e 	bl	800641c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 80040e0:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80040e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	480e      	ldr	r0, [pc, #56]	@ (8004134 <MX_GPIO_Init+0x1a8>)
 80040fa:	f002 f98f 	bl	800641c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2100      	movs	r1, #0
 8004102:	2017      	movs	r0, #23
 8004104:	f001 fd37 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004108:	2017      	movs	r0, #23
 800410a:	f001 fd50 	bl	8005bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	2028      	movs	r0, #40	@ 0x28
 8004114:	f001 fd2f 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004118:	2028      	movs	r0, #40	@ 0x28
 800411a:	f001 fd48 	bl	8005bae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800411e:	bf00      	nop
 8004120:	3728      	adds	r7, #40	@ 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40020800 	.word	0x40020800
 8004130:	40020400 	.word	0x40020400
 8004134:	40020000 	.word	0x40020000

08004138 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 800413c:	4819      	ldr	r0, [pc, #100]	@ (80041a4 <Init_Timing+0x6c>)
 800413e:	f007 fe4f 	bl	800bde0 <HAL_TIM_Base_Start_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8004148:	2309      	movs	r3, #9
 800414a:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <Init_Timing+0x70>)
 800414c:	21ee      	movs	r1, #238	@ 0xee
 800414e:	4817      	ldr	r0, [pc, #92]	@ (80041ac <Init_Timing+0x74>)
 8004150:	f7fd fdac 	bl	8001cac <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8004154:	4816      	ldr	r0, [pc, #88]	@ (80041b0 <Init_Timing+0x78>)
 8004156:	f007 fe43 	bl	800bde0 <HAL_TIM_Base_Start_IT>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8004160:	230e      	movs	r3, #14
 8004162:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <Init_Timing+0x7c>)
 8004164:	21ee      	movs	r1, #238	@ 0xee
 8004166:	4811      	ldr	r0, [pc, #68]	@ (80041ac <Init_Timing+0x74>)
 8004168:	f7fd fda0 	bl	8001cac <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 800416c:	2100      	movs	r1, #0
 800416e:	4810      	ldr	r0, [pc, #64]	@ (80041b0 <Init_Timing+0x78>)
 8004170:	f007 fef2 	bl	800bf58 <HAL_TIM_PWM_Start>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 800417a:	230e      	movs	r3, #14
 800417c:	4a0e      	ldr	r2, [pc, #56]	@ (80041b8 <Init_Timing+0x80>)
 800417e:	21ee      	movs	r1, #238	@ 0xee
 8004180:	480a      	ldr	r0, [pc, #40]	@ (80041ac <Init_Timing+0x74>)
 8004182:	f7fd fd93 	bl	8001cac <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8004186:	2104      	movs	r1, #4
 8004188:	4809      	ldr	r0, [pc, #36]	@ (80041b0 <Init_Timing+0x78>)
 800418a:	f007 fee5 	bl	800bf58 <HAL_TIM_PWM_Start>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8004194:	230e      	movs	r3, #14
 8004196:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <Init_Timing+0x84>)
 8004198:	21ee      	movs	r1, #238	@ 0xee
 800419a:	4804      	ldr	r0, [pc, #16]	@ (80041ac <Init_Timing+0x74>)
 800419c:	f7fd fd86 	bl	8001cac <comm_sendCMD>
	  }
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000c34 	.word	0x20000c34
 80041a8:	08012978 	.word	0x08012978
 80041ac:	2000125c 	.word	0x2000125c
 80041b0:	20000c7c 	.word	0x20000c7c
 80041b4:	08012984 	.word	0x08012984
 80041b8:	08012994 	.word	0x08012994
 80041bc:	080129a4 	.word	0x080129a4

080041c0 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 80041c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80041c8:	2201      	movs	r2, #1
 80041ca:	21d0      	movs	r1, #208	@ 0xd0
 80041cc:	4811      	ldr	r0, [pc, #68]	@ (8004214 <Init_MPU6050+0x54>)
 80041ce:	f003 fb7f 	bl	80078d0 <HAL_I2C_IsDeviceReady>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 80041d8:	230d      	movs	r3, #13
 80041da:	4a0f      	ldr	r2, [pc, #60]	@ (8004218 <Init_MPU6050+0x58>)
 80041dc:	21ee      	movs	r1, #238	@ 0xee
 80041de:	480f      	ldr	r0, [pc, #60]	@ (800421c <Init_MPU6050+0x5c>)
 80041e0:	f7fd fd64 	bl	8001cac <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 80041e4:	e013      	b.n	800420e <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 80041e6:	490e      	ldr	r1, [pc, #56]	@ (8004220 <Init_MPU6050+0x60>)
 80041e8:	480e      	ldr	r0, [pc, #56]	@ (8004224 <Init_MPU6050+0x64>)
 80041ea:	f7fc fb41 	bl	8000870 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 80041ee:	480e      	ldr	r0, [pc, #56]	@ (8004228 <Init_MPU6050+0x68>)
 80041f0:	f7fc fb54 	bl	800089c <MPU6050_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 80041fa:	230c      	movs	r3, #12
 80041fc:	4a0b      	ldr	r2, [pc, #44]	@ (800422c <Init_MPU6050+0x6c>)
 80041fe:	21ee      	movs	r1, #238	@ 0xee
 8004200:	4806      	ldr	r0, [pc, #24]	@ (800421c <Init_MPU6050+0x5c>)
 8004202:	f7fd fd53 	bl	8001cac <comm_sendCMD>
}
 8004206:	e002      	b.n	800420e <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8004208:	4807      	ldr	r0, [pc, #28]	@ (8004228 <Init_MPU6050+0x68>)
 800420a:	f7fc fbf9 	bl	8000a00 <MPU6050_Calibrate>
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000b20 	.word	0x20000b20
 8004218:	080129b4 	.word	0x080129b4
 800421c:	2000125c 	.word	0x2000125c
 8004220:	08004581 	.word	0x08004581
 8004224:	08004541 	.word	0x08004541
 8004228:	20000d60 	.word	0x20000d60
 800422c:	080129c4 	.word	0x080129c4

08004230 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_LOW_REFRESH_RATE_10MS;
 8004236:	4b1f      	ldr	r3, [pc, #124]	@ (80042b4 <Init_Display+0x84>)
 8004238:	2264      	movs	r2, #100	@ 0x64
 800423a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_LOW_REFRESH_RATE_10MS;
 800423e:	4b1d      	ldr	r3, [pc, #116]	@ (80042b4 <Init_Display+0x84>)
 8004240:	2264      	movs	r2, #100	@ 0x64
 8004242:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8004246:	f242 7310 	movw	r3, #10000	@ 0x2710
 800424a:	2201      	movs	r2, #1
 800424c:	2178      	movs	r1, #120	@ 0x78
 800424e:	481a      	ldr	r0, [pc, #104]	@ (80042b8 <Init_Display+0x88>)
 8004250:	f003 fb3e 	bl	80078d0 <HAL_I2C_IsDeviceReady>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 800425a:	230a      	movs	r3, #10
 800425c:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <Init_Display+0x8c>)
 800425e:	21ee      	movs	r1, #238	@ 0xee
 8004260:	4817      	ldr	r0, [pc, #92]	@ (80042c0 <Init_Display+0x90>)
 8004262:	f7fd fd23 	bl	8001cac <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8004266:	e022      	b.n	80042ae <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8004268:	4916      	ldr	r1, [pc, #88]	@ (80042c4 <Init_Display+0x94>)
 800426a:	4817      	ldr	r0, [pc, #92]	@ (80042c8 <Init_Display+0x98>)
 800426c:	f7fc fd9a 	bl	8000da4 <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8004270:	f7fc fdae 	bl	8000dd0 <Display_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 800427a:	2309      	movs	r3, #9
 800427c:	4a13      	ldr	r2, [pc, #76]	@ (80042cc <Init_Display+0x9c>)
 800427e:	21ee      	movs	r1, #238	@ 0xee
 8004280:	480f      	ldr	r0, [pc, #60]	@ (80042c0 <Init_Display+0x90>)
 8004282:	f7fd fd13 	bl	8001cac <comm_sendCMD>
}
 8004286:	e012      	b.n	80042ae <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8004288:	2301      	movs	r3, #1
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	2340      	movs	r3, #64	@ 0x40
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	4a0f      	ldr	r2, [pc, #60]	@ (80042d0 <Init_Display+0xa0>)
 8004294:	2100      	movs	r1, #0
 8004296:	2000      	movs	r0, #0
 8004298:	f7fd f830 	bl	80012fc <Display_DrawBitmap>
			Display.isInit = TRUE;
 800429c:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <Init_Display+0x84>)
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 80042a2:	f000 fe41 	bl	8004f28 <HAL_GetTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4a02      	ldr	r2, [pc, #8]	@ (80042b4 <Init_Display+0x84>)
 80042aa:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000e24 	.word	0x20000e24
 80042b8:	20000b20 	.word	0x20000b20
 80042bc:	080129d4 	.word	0x080129d4
 80042c0:	2000125c 	.word	0x2000125c
 80042c4:	0800450d 	.word	0x0800450d
 80042c8:	080044d1 	.word	0x080044d1
 80042cc:	080129e0 	.word	0x080129e0
 80042d0:	08012b9c 	.word	0x08012b9c

080042d4 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af02      	add	r7, sp, #8
 80042da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	@ (800434c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d123      	bne.n	800432e <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 80042e6:	2209      	movs	r2, #9
 80042e8:	4919      	ldr	r1, [pc, #100]	@ (8004350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80042ea:	481a      	ldr	r0, [pc, #104]	@ (8004354 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80042ec:	f000 ffa0 	bl	8005230 <HAL_ADC_Start_DMA>
		is5ms--;
 80042f0:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80042fa:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 80042fc:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d114      	bne.n	800432e <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8004304:	4b14      	ldr	r3, [pc, #80]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004306:	2214      	movs	r2, #20
 8004308:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 800430a:	4b14      	ldr	r3, [pc, #80]	@ (800435c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800430c:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 8004314:	230e      	movs	r3, #14
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2301      	movs	r3, #1
 800431e:	223b      	movs	r2, #59	@ 0x3b
 8004320:	21d0      	movs	r1, #208	@ 0xd0
 8004322:	4810      	ldr	r0, [pc, #64]	@ (8004364 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004324:	f003 f944 	bl	80075b0 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8004328:	2000      	movs	r0, #0
 800432a:	f7fc ff2b 	bl	8001184 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d104      	bne.n	8004342 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8004338:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800433a:	7813      	ldrb	r3, [r2, #0]
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	7013      	strb	r3, [r2, #0]
	}
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	20001238 	.word	0x20001238
 8004354:	20000a78 	.word	0x20000a78
 8004358:	2000000e 	.word	0x2000000e
 800435c:	20000d60 	.word	0x20000d60
 8004360:	20000e14 	.word	0x20000e14
 8004364:	20000b20 	.word	0x20000b20
 8004368:	40000400 	.word	0x40000400
 800436c:	20000d0c 	.word	0x20000d0c

08004370 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	2b78      	cmp	r3, #120	@ 0x78
 800437e:	d107      	bne.n	8004390 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_I2C_MemTxCpltCallback+0x28>)
 8004382:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 800438a:	2001      	movs	r0, #1
 800438c:	f7fc fefa 	bl	8001184 <Display_I2C_DMA_Ready>
		}
	}
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000d60 	.word	0x20000d60

0800439c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a8:	2bd0      	cmp	r3, #208	@ 0xd0
 80043aa:	d105      	bne.n	80043b8 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 80043ac:	4804      	ldr	r0, [pc, #16]	@ (80043c0 <HAL_I2C_MemRxCpltCallback+0x24>)
 80043ae:	f7fc fbc9 	bl	8000b44 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 80043b2:	2001      	movs	r0, #1
 80043b4:	f7fc fee6 	bl	8001184 <Display_I2C_DMA_Ready>
	}
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000d60 	.word	0x20000d60

080043c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 80043cc:	4903      	ldr	r1, [pc, #12]	@ (80043dc <HAL_ADC_ConvCpltCallback+0x18>)
 80043ce:	4804      	ldr	r0, [pc, #16]	@ (80043e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80043d0:	f7fc f8ec 	bl	80005ac <ADC_Conversion_Cplt>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	2000124a 	.word	0x2000124a
 80043e0:	20001238 	.word	0x20001238

080043e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f4:	d102      	bne.n	80043fc <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 80043f6:	4807      	ldr	r0, [pc, #28]	@ (8004414 <HAL_GPIO_EXTI_Callback+0x30>)
 80043f8:	f7fd f9d4 	bl	80017a4 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004402:	d102      	bne.n	800440a <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8004404:	4804      	ldr	r0, [pc, #16]	@ (8004418 <HAL_GPIO_EXTI_Callback+0x34>)
 8004406:	f7fd f9cd 	bl	80017a4 <Encoder_Add_Pulse>
	}
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000d48 	.word	0x20000d48
 8004418:	20000d54 	.word	0x20000d54

0800441c <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a08      	ldr	r2, [pc, #32]	@ (800444c <HAL_UART_RxCpltCallback+0x30>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10a      	bne.n	8004444 <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.bytesInRx);
 800442e:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <HAL_UART_RxCpltCallback+0x34>)
 8004430:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd fdd7 	bl	8001fe8 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.bytesInRx, 1);
 800443a:	2201      	movs	r2, #1
 800443c:	4905      	ldr	r1, [pc, #20]	@ (8004454 <HAL_UART_RxCpltCallback+0x38>)
 800443e:	4806      	ldr	r0, [pc, #24]	@ (8004458 <HAL_UART_RxCpltCallback+0x3c>)
 8004440:	f008 fcbc 	bl	800cdbc <HAL_UART_Receive_IT>
	}
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40011000 	.word	0x40011000
 8004450:	20001490 	.word	0x20001490
 8004454:	200016d4 	.word	0x200016d4
 8004458:	20000cc4 	.word	0x20000cc4

0800445c <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, USART_SR_TXE)){
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <ESP01_UART_Transmit+0x38>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d10a      	bne.n	800448a <ESP01_UART_Transmit+0x2e>
		if(HAL_UART_Transmit_IT(&huart1, &val, 1) == HAL_OK)
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	2201      	movs	r2, #1
 8004478:	4619      	mov	r1, r3
 800447a:	4806      	ldr	r0, [pc, #24]	@ (8004494 <ESP01_UART_Transmit+0x38>)
 800447c:	f008 fc68 	bl	800cd50 <HAL_UART_Transmit_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <ESP01_UART_Transmit+0x2e>
			return 1;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <ESP01_UART_Transmit+0x30>
	}
	return 0;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000cc4 	.word	0x20000cc4

08004498 <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
	ESP.buffer[ESP.iW++] = value;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <ESP01_Data_Recived+0x34>)
 80044a4:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	b2d1      	uxtb	r1, r2
 80044ac:	4a07      	ldr	r2, [pc, #28]	@ (80044cc <ESP01_Data_Recived+0x34>)
 80044ae:	f882 1346 	strb.w	r1, [r2, #838]	@ 0x346
 80044b2:	461a      	mov	r2, r3
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <ESP01_Data_Recived+0x34>)
 80044b6:	4413      	add	r3, r2
 80044b8:	79fa      	ldrb	r2, [r7, #7]
 80044ba:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20001490 	.word	0x20001490

080044d0 <I2C_1_Abstract_Mem_DMA_Transmit>:

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60ba      	str	r2, [r7, #8]
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	81fb      	strh	r3, [r7, #14]
 80044de:	460b      	mov	r3, r1
 80044e0:	737b      	strb	r3, [r7, #13]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80044e6:	7b7b      	ldrb	r3, [r7, #13]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	89f9      	ldrh	r1, [r7, #14]
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2301      	movs	r3, #1
 80044f6:	4804      	ldr	r0, [pc, #16]	@ (8004508 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 80044f8:	f002 fefc 	bl	80072f4 <HAL_I2C_Mem_Write_DMA>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000b20 	.word	0x20000b20

0800450c <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af02      	add	r7, sp, #8
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	4603      	mov	r3, r0
 8004518:	81fb      	strh	r3, [r7, #14]
 800451a:	4613      	mov	r3, r2
 800451c:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800451e:	89ba      	ldrh	r2, [r7, #12]
 8004520:	89f9      	ldrh	r1, [r7, #14]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	4804      	ldr	r0, [pc, #16]	@ (800453c <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 800452c:	f002 fab8 	bl	8006aa0 <HAL_I2C_Master_Transmit>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000b20 	.word	0x20000b20

08004540 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af04      	add	r7, sp, #16
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4603      	mov	r3, r0
 800454a:	80fb      	strh	r3, [r7, #6]
 800454c:	460b      	mov	r3, r1
 800454e:	717b      	strb	r3, [r7, #5]
 8004550:	4613      	mov	r3, r2
 8004552:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004554:	797b      	ldrb	r3, [r7, #5]
 8004556:	b29a      	uxth	r2, r3
 8004558:	793b      	ldrb	r3, [r7, #4]
 800455a:	b298      	uxth	r0, r3
 800455c:	88f9      	ldrh	r1, [r7, #6]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	8a3b      	ldrh	r3, [r7, #16]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4603      	mov	r3, r0
 800456c:	4803      	ldr	r0, [pc, #12]	@ (800457c <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800456e:	f002 fb95 	bl	8006c9c <HAL_I2C_Mem_Write>
 8004572:	4603      	mov	r3, r0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000b20 	.word	0x20000b20

08004580 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af04      	add	r7, sp, #16
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4603      	mov	r3, r0
 800458a:	80fb      	strh	r3, [r7, #6]
 800458c:	460b      	mov	r3, r1
 800458e:	717b      	strb	r3, [r7, #5]
 8004590:	4613      	mov	r3, r2
 8004592:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8004594:	797b      	ldrb	r3, [r7, #5]
 8004596:	b29a      	uxth	r2, r3
 8004598:	793b      	ldrb	r3, [r7, #4]
 800459a:	b298      	uxth	r0, r3
 800459c:	88f9      	ldrh	r1, [r7, #6]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	8a3b      	ldrh	r3, [r7, #16]
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4603      	mov	r3, r0
 80045ac:	4803      	ldr	r0, [pc, #12]	@ (80045bc <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 80045ae:	f002 fc6f 	bl	8006e90 <HAL_I2C_Mem_Read>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000b20 	.word	0x20000b20

080045c0 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 80045c4:	2101      	movs	r1, #1
 80045c6:	4803      	ldr	r0, [pc, #12]	@ (80045d4 <KEY_Read_Value+0x14>)
 80045c8:	f002 f8ac 	bl	8006724 <HAL_GPIO_ReadPin>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40020000 	.word	0x40020000

080045d8 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 80045e0:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <writeOn_USB+0x70>)
 80045e2:	78da      	ldrb	r2, [r3, #3]
 80045e4:	4b18      	ldr	r3, [pc, #96]	@ (8004648 <writeOn_USB+0x70>)
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d909      	bls.n	8004600 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 80045ec:	4b16      	ldr	r3, [pc, #88]	@ (8004648 <writeOn_USB+0x70>)
 80045ee:	78da      	ldrb	r2, [r3, #3]
 80045f0:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <writeOn_USB+0x70>)
 80045f2:	789b      	ldrb	r3, [r3, #2]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <writeOn_USB+0x70>)
 80045fa:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 80045fe:	e006      	b.n	800460e <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8004600:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <writeOn_USB+0x70>)
 8004602:	789b      	ldrb	r3, [r3, #2]
 8004604:	425b      	negs	r3, r3
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b0f      	ldr	r3, [pc, #60]	@ (8004648 <writeOn_USB+0x70>)
 800460a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 800460e:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <writeOn_USB+0x70>)
 8004610:	789b      	ldrb	r3, [r3, #2]
 8004612:	461a      	mov	r2, r3
 8004614:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <writeOn_USB+0x70>)
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <writeOn_USB+0x70>)
 800461c:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f00c ff22 	bl	801146c <CDC_Transmit_FS>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <writeOn_USB+0x70>)
 8004630:	789a      	ldrb	r2, [r3, #2]
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <writeOn_USB+0x70>)
 8004634:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8004638:	4413      	add	r3, r2
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b02      	ldr	r3, [pc, #8]	@ (8004648 <writeOn_USB+0x70>)
 800463e:	709a      	strb	r2, [r3, #2]
	}
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	2000125c 	.word	0x2000125c

0800464c <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01a      	beq.n	8004692 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 800465c:	2300      	movs	r3, #0
 800465e:	81fb      	strh	r3, [r7, #14]
 8004660:	e013      	b.n	800468a <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 8004662:	89fb      	ldrh	r3, [r7, #14]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	441a      	add	r2, r3
 8004668:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <dataRxOn_USB+0x54>)
 800466a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	b2c8      	uxtb	r0, r1
 8004672:	490b      	ldr	r1, [pc, #44]	@ (80046a0 <dataRxOn_USB+0x54>)
 8004674:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8004678:	4619      	mov	r1, r3
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	4b08      	ldr	r3, [pc, #32]	@ (80046a0 <dataRxOn_USB+0x54>)
 800467e:	440b      	add	r3, r1
 8004680:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	3301      	adds	r3, #1
 8004688:	81fb      	strh	r3, [r7, #14]
 800468a:	89fb      	ldrh	r3, [r7, #14]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d8e7      	bhi.n	8004662 <dataRxOn_USB+0x16>
		}
	}
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2000125c 	.word	0x2000125c

080046a4 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	460a      	mov	r2, r1
 80046ae:	71fb      	strb	r3, [r7, #7]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046bc:	4806      	ldr	r0, [pc, #24]	@ (80046d8 <Motor_Left_SetPins+0x34>)
 80046be:	f002 f849 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 80046c2:	79bb      	ldrb	r3, [r7, #6]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80046ca:	4803      	ldr	r0, [pc, #12]	@ (80046d8 <Motor_Left_SetPins+0x34>)
 80046cc:	f002 f842 	bl	8006754 <HAL_GPIO_WritePin>
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40020000 	.word	0x40020000

080046dc <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	460a      	mov	r2, r1
 80046e6:	71fb      	strb	r3, [r7, #7]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046f4:	4806      	ldr	r0, [pc, #24]	@ (8004710 <Motor_Right_SetPins+0x34>)
 80046f6:	f002 f82d 	bl	8006754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 80046fa:	79bb      	ldrb	r3, [r7, #6]
 80046fc:	461a      	mov	r2, r3
 80046fe:	2108      	movs	r1, #8
 8004700:	4804      	ldr	r0, [pc, #16]	@ (8004714 <Motor_Right_SetPins+0x38>)
 8004702:	f002 f827 	bl	8006754 <HAL_GPIO_WritePin>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40020000 	.word	0x40020000
 8004714:	40020400 	.word	0x40020400

08004718 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <Motor_Left_SetPWM+0x20>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000c7c 	.word	0x20000c7c

0800473c <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8004746:	4b05      	ldr	r3, [pc, #20]	@ (800475c <Motor_Right_SetPWM+0x20>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000c7c 	.word	0x20000c7c

08004760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004764:	b672      	cpsid	i
}
 8004766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <Error_Handler+0x8>

0800476c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	4b13      	ldr	r3, [pc, #76]	@ (80047c4 <HAL_MspInit+0x58>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	4a12      	ldr	r2, [pc, #72]	@ (80047c4 <HAL_MspInit+0x58>)
 800477c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004780:	6453      	str	r3, [r2, #68]	@ 0x44
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <HAL_MspInit+0x58>)
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <HAL_MspInit+0x58>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	4a0b      	ldr	r2, [pc, #44]	@ (80047c4 <HAL_MspInit+0x58>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	@ 0x40
 800479e:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <HAL_MspInit+0x58>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80047aa:	2200      	movs	r2, #0
 80047ac:	2100      	movs	r1, #0
 80047ae:	2051      	movs	r0, #81	@ 0x51
 80047b0:	f001 f9e1 	bl	8005b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80047b4:	2051      	movs	r0, #81	@ 0x51
 80047b6:	f001 f9fa 	bl	8005bae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800

080047c8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	f107 0314 	add.w	r3, r7, #20
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a40      	ldr	r2, [pc, #256]	@ (80048e8 <HAL_ADC_MspInit+0x120>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d179      	bne.n	80048de <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	4b3f      	ldr	r3, [pc, #252]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	4a3e      	ldr	r2, [pc, #248]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047fa:	4b3c      	ldr	r3, [pc, #240]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	4b38      	ldr	r3, [pc, #224]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6313      	str	r3, [r2, #48]	@ 0x30
 8004816:	4b35      	ldr	r3, [pc, #212]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482a:	4a30      	ldr	r2, [pc, #192]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	6313      	str	r3, [r2, #48]	@ 0x30
 8004832:	4b2e      	ldr	r3, [pc, #184]	@ (80048ec <HAL_ADC_MspInit+0x124>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 800483e:	23fe      	movs	r3, #254	@ 0xfe
 8004840:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004842:	2303      	movs	r3, #3
 8004844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	4827      	ldr	r0, [pc, #156]	@ (80048f0 <HAL_ADC_MspInit+0x128>)
 8004852:	f001 fde3 	bl	800641c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8004856:	2303      	movs	r3, #3
 8004858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800485a:	2303      	movs	r3, #3
 800485c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	4619      	mov	r1, r3
 8004868:	4822      	ldr	r0, [pc, #136]	@ (80048f4 <HAL_ADC_MspInit+0x12c>)
 800486a:	f001 fdd7 	bl	800641c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800486e:	4b22      	ldr	r3, [pc, #136]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 8004870:	4a22      	ldr	r2, [pc, #136]	@ (80048fc <HAL_ADC_MspInit+0x134>)
 8004872:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004874:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 8004876:	2200      	movs	r2, #0
 8004878:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800487a:	4b1f      	ldr	r3, [pc, #124]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 800487c:	2200      	movs	r2, #0
 800487e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004880:	4b1d      	ldr	r3, [pc, #116]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 8004882:	2200      	movs	r2, #0
 8004884:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004886:	4b1c      	ldr	r3, [pc, #112]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 8004888:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800488c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800488e:	4b1a      	ldr	r3, [pc, #104]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 8004890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004894:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004896:	4b18      	ldr	r3, [pc, #96]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 8004898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800489c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800489e:	4b16      	ldr	r3, [pc, #88]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048a4:	4b14      	ldr	r3, [pc, #80]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 80048a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ac:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048b2:	4811      	ldr	r0, [pc, #68]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 80048b4:	f001 f996 	bl	8005be4 <HAL_DMA_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80048be:	f7ff ff4f 	bl	8004760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0c      	ldr	r2, [pc, #48]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80048c8:	4a0b      	ldr	r2, [pc, #44]	@ (80048f8 <HAL_ADC_MspInit+0x130>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	2012      	movs	r0, #18
 80048d4:	f001 f94f 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80048d8:	2012      	movs	r0, #18
 80048da:	f001 f968 	bl	8005bae <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80048de:	bf00      	nop
 80048e0:	3728      	adds	r7, #40	@ 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40012000 	.word	0x40012000
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	20000ac0 	.word	0x20000ac0
 80048fc:	40026410 	.word	0x40026410

08004900 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a50      	ldr	r2, [pc, #320]	@ (8004a60 <HAL_I2C_MspInit+0x160>)
 800491e:	4293      	cmp	r3, r2
 8004920:	f040 8099 	bne.w	8004a56 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	4b4e      	ldr	r3, [pc, #312]	@ (8004a64 <HAL_I2C_MspInit+0x164>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	4a4d      	ldr	r2, [pc, #308]	@ (8004a64 <HAL_I2C_MspInit+0x164>)
 800492e:	f043 0302 	orr.w	r3, r3, #2
 8004932:	6313      	str	r3, [r2, #48]	@ 0x30
 8004934:	4b4b      	ldr	r3, [pc, #300]	@ (8004a64 <HAL_I2C_MspInit+0x164>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004940:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004946:	2312      	movs	r3, #18
 8004948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494e:	2303      	movs	r3, #3
 8004950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004952:	2304      	movs	r3, #4
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	4842      	ldr	r0, [pc, #264]	@ (8004a68 <HAL_I2C_MspInit+0x168>)
 800495e:	f001 fd5d 	bl	800641c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_I2C_MspInit+0x164>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a64 <HAL_I2C_MspInit+0x164>)
 800496c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004970:	6413      	str	r3, [r2, #64]	@ 0x40
 8004972:	4b3c      	ldr	r3, [pc, #240]	@ (8004a64 <HAL_I2C_MspInit+0x164>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800497e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 8004980:	4a3b      	ldr	r2, [pc, #236]	@ (8004a70 <HAL_I2C_MspInit+0x170>)
 8004982:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8004984:	4b39      	ldr	r3, [pc, #228]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 8004986:	2200      	movs	r2, #0
 8004988:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800498a:	4b38      	ldr	r3, [pc, #224]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 800498c:	2240      	movs	r2, #64	@ 0x40
 800498e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004990:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 8004992:	2200      	movs	r2, #0
 8004994:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004996:	4b35      	ldr	r3, [pc, #212]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 8004998:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800499c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800499e:	4b33      	ldr	r3, [pc, #204]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049a4:	4b31      	ldr	r3, [pc, #196]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80049aa:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049b0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049b6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80049bc:	482b      	ldr	r0, [pc, #172]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049be:	f001 f911 	bl	8005be4 <HAL_DMA_Init>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80049c8:	f7ff feca 	bl	8004760 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a27      	ldr	r2, [pc, #156]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80049d2:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <HAL_I2C_MspInit+0x16c>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80049d8:	4b26      	ldr	r3, [pc, #152]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 80049da:	4a27      	ldr	r2, [pc, #156]	@ (8004a78 <HAL_I2C_MspInit+0x178>)
 80049dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80049de:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 80049e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049e6:	4b23      	ldr	r3, [pc, #140]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ec:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 80049f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a00:	4b1c      	ldr	r3, [pc, #112]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004a06:	4b1b      	ldr	r3, [pc, #108]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a0c:	4b19      	ldr	r3, [pc, #100]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a0e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a12:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a14:	4b17      	ldr	r3, [pc, #92]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004a1a:	4816      	ldr	r0, [pc, #88]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a1c:	f001 f8e2 	bl	8005be4 <HAL_DMA_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8004a26:	f7ff fe9b 	bl	8004760 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a30:	4a10      	ldr	r2, [pc, #64]	@ (8004a74 <HAL_I2C_MspInit+0x174>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	201f      	movs	r0, #31
 8004a3c:	f001 f89b 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004a40:	201f      	movs	r0, #31
 8004a42:	f001 f8b4 	bl	8005bae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004a46:	2200      	movs	r2, #0
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2020      	movs	r0, #32
 8004a4c:	f001 f893 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004a50:	2020      	movs	r0, #32
 8004a52:	f001 f8ac 	bl	8005bae <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004a56:	bf00      	nop
 8004a58:	3728      	adds	r7, #40	@ 0x28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40005400 	.word	0x40005400
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40020400 	.word	0x40020400
 8004a6c:	20000b74 	.word	0x20000b74
 8004a70:	40026028 	.word	0x40026028
 8004a74:	20000bd4 	.word	0x20000bd4
 8004a78:	40026010 	.word	0x40026010

08004a7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <HAL_TIM_Base_MspInit+0x80>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d116      	bne.n	8004abc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_TIM_Base_MspInit+0x84>)
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_TIM_Base_MspInit+0x84>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a9e:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <HAL_TIM_Base_MspInit+0x84>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2100      	movs	r1, #0
 8004aae:	2019      	movs	r0, #25
 8004ab0:	f001 f861 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004ab4:	2019      	movs	r0, #25
 8004ab6:	f001 f87a 	bl	8005bae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004aba:	e01a      	b.n	8004af2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a10      	ldr	r2, [pc, #64]	@ (8004b04 <HAL_TIM_Base_MspInit+0x88>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d115      	bne.n	8004af2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <HAL_TIM_Base_MspInit+0x84>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	4a0c      	ldr	r2, [pc, #48]	@ (8004b00 <HAL_TIM_Base_MspInit+0x84>)
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <HAL_TIM_Base_MspInit+0x84>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	201d      	movs	r0, #29
 8004ae8:	f001 f845 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004aec:	201d      	movs	r0, #29
 8004aee:	f001 f85e 	bl	8005bae <HAL_NVIC_EnableIRQ>
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40000400 	.word	0x40000400

08004b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	f107 030c 	add.w	r3, r7, #12
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <HAL_TIM_MspPostInit+0x68>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d11d      	bne.n	8004b66 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_TIM_MspPostInit+0x6c>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	4a10      	ldr	r2, [pc, #64]	@ (8004b74 <HAL_TIM_MspPostInit+0x6c>)
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <HAL_TIM_MspPostInit+0x6c>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8004b46:	2330      	movs	r3, #48	@ 0x30
 8004b48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b56:	2302      	movs	r3, #2
 8004b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4805      	ldr	r0, [pc, #20]	@ (8004b78 <HAL_TIM_MspPostInit+0x70>)
 8004b62:	f001 fc5b 	bl	800641c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004b66:	bf00      	nop
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40020400 	.word	0x40020400

08004b7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1d      	ldr	r2, [pc, #116]	@ (8004c10 <HAL_UART_MspInit+0x94>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d133      	bne.n	8004c06 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c14 <HAL_UART_MspInit+0x98>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <HAL_UART_MspInit+0x98>)
 8004ba8:	f043 0310 	orr.w	r3, r3, #16
 8004bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bae:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_UART_MspInit+0x98>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <HAL_UART_MspInit+0x98>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <HAL_UART_MspInit+0x98>)
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bca:	4b12      	ldr	r3, [pc, #72]	@ (8004c14 <HAL_UART_MspInit+0x98>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8004bd6:	23c0      	movs	r3, #192	@ 0xc0
 8004bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be2:	2303      	movs	r3, #3
 8004be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004be6:	2307      	movs	r3, #7
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4809      	ldr	r0, [pc, #36]	@ (8004c18 <HAL_UART_MspInit+0x9c>)
 8004bf2:	f001 fc13 	bl	800641c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	2025      	movs	r0, #37	@ 0x25
 8004bfc:	f000 ffbb 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c00:	2025      	movs	r0, #37	@ 0x25
 8004c02:	f000 ffd4 	bl	8005bae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004c06:	bf00      	nop
 8004c08:	3728      	adds	r7, #40	@ 0x28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40011000 	.word	0x40011000
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40020400 	.word	0x40020400

08004c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004c20:	f007 f874 	bl	800bd0c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <NMI_Handler+0x8>

08004c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <HardFault_Handler+0x4>

08004c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <MemManage_Handler+0x4>

08004c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <BusFault_Handler+0x4>

08004c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <UsageFault_Handler+0x4>

08004c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c76:	f000 f943 	bl	8004f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004c84:	4802      	ldr	r0, [pc, #8]	@ (8004c90 <DMA1_Stream0_IRQHandler+0x10>)
 8004c86:	f001 f945 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000bd4 	.word	0x20000bd4

08004c94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004c98:	4802      	ldr	r0, [pc, #8]	@ (8004ca4 <DMA1_Stream1_IRQHandler+0x10>)
 8004c9a:	f001 f93b 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000b74 	.word	0x20000b74

08004ca8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004cac:	4802      	ldr	r0, [pc, #8]	@ (8004cb8 <ADC_IRQHandler+0x10>)
 8004cae:	f000 f9ae 	bl	800500e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000a78 	.word	0x20000a78

08004cbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8004cc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004cc4:	f001 fd7a 	bl	80067bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004cd0:	4802      	ldr	r0, [pc, #8]	@ (8004cdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004cd2:	f007 f9f1 	bl	800c0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000c34 	.word	0x20000c34

08004ce0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ce4:	4802      	ldr	r0, [pc, #8]	@ (8004cf0 <TIM3_IRQHandler+0x10>)
 8004ce6:	f007 f9e7 	bl	800c0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000c7c 	.word	0x20000c7c

08004cf4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004cf8:	4802      	ldr	r0, [pc, #8]	@ (8004d04 <I2C1_EV_IRQHandler+0x10>)
 8004cfa:	f002 ff17 	bl	8007b2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000b20 	.word	0x20000b20

08004d08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004d0c:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <I2C1_ER_IRQHandler+0x10>)
 8004d0e:	f003 f87e 	bl	8007e0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000b20 	.word	0x20000b20

08004d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d20:	4802      	ldr	r0, [pc, #8]	@ (8004d2c <USART1_IRQHandler+0x10>)
 8004d22:	f008 f871 	bl	800ce08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000cc4 	.word	0x20000cc4

08004d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8004d34:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004d38:	f001 fd40 	bl	80067bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d3c:	bf00      	nop
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d44:	4802      	ldr	r0, [pc, #8]	@ (8004d50 <DMA2_Stream0_IRQHandler+0x10>)
 8004d46:	f001 f8e5 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000ac0 	.word	0x20000ac0

08004d54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d58:	4802      	ldr	r0, [pc, #8]	@ (8004d64 <OTG_FS_IRQHandler+0x10>)
 8004d5a:	f005 fa64 	bl	800a226 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200020c8 	.word	0x200020c8

08004d68 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d80:	4a14      	ldr	r2, [pc, #80]	@ (8004dd4 <_sbrk+0x5c>)
 8004d82:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <_sbrk+0x60>)
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d8c:	4b13      	ldr	r3, [pc, #76]	@ (8004ddc <_sbrk+0x64>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d94:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <_sbrk+0x64>)
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <_sbrk+0x68>)
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d9a:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <_sbrk+0x64>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d207      	bcs.n	8004db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004da8:	f00d f85c 	bl	8011e64 <__errno>
 8004dac:	4603      	mov	r3, r0
 8004dae:	220c      	movs	r2, #12
 8004db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295
 8004db6:	e009      	b.n	8004dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004db8:	4b08      	ldr	r3, [pc, #32]	@ (8004ddc <_sbrk+0x64>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <_sbrk+0x64>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4a05      	ldr	r2, [pc, #20]	@ (8004ddc <_sbrk+0x64>)
 8004dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20020000 	.word	0x20020000
 8004dd8:	00000400 	.word	0x00000400
 8004ddc:	200017dc 	.word	0x200017dc
 8004de0:	20002918 	.word	0x20002918

08004de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <SystemInit+0x20>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dee:	4a05      	ldr	r2, [pc, #20]	@ (8004e04 <SystemInit+0x20>)
 8004df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e0c:	f7ff ffea 	bl	8004de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e10:	480c      	ldr	r0, [pc, #48]	@ (8004e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e12:	490d      	ldr	r1, [pc, #52]	@ (8004e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e14:	4a0d      	ldr	r2, [pc, #52]	@ (8004e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e18:	e002      	b.n	8004e20 <LoopCopyDataInit>

08004e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e1e:	3304      	adds	r3, #4

08004e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e24:	d3f9      	bcc.n	8004e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e26:	4a0a      	ldr	r2, [pc, #40]	@ (8004e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e28:	4c0a      	ldr	r4, [pc, #40]	@ (8004e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e2c:	e001      	b.n	8004e32 <LoopFillZerobss>

08004e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e30:	3204      	adds	r2, #4

08004e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e34:	d3fb      	bcc.n	8004e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e36:	f00d f81b 	bl	8011e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e3a:	f7fe fcdd 	bl	80037f8 <main>
  bx  lr    
 8004e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e48:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8004e4c:	08013d54 	.word	0x08013d54
  ldr r2, =_sbss
 8004e50:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004e54:	20002914 	.word	0x20002914

08004e58 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e58:	e7fe      	b.n	8004e58 <DMA1_Stream2_IRQHandler>
	...

08004e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_Init+0x40>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0d      	ldr	r2, [pc, #52]	@ (8004e9c <HAL_Init+0x40>)
 8004e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_Init+0x40>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <HAL_Init+0x40>)
 8004e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e78:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <HAL_Init+0x40>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a07      	ldr	r2, [pc, #28]	@ (8004e9c <HAL_Init+0x40>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e84:	2003      	movs	r0, #3
 8004e86:	f000 fe6b 	bl	8005b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e8a:	200f      	movs	r0, #15
 8004e8c:	f000 f808 	bl	8004ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e90:	f7ff fc6c 	bl	800476c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00

08004ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ea8:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <HAL_InitTick+0x54>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b12      	ldr	r3, [pc, #72]	@ (8004ef8 <HAL_InitTick+0x58>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fe83 	bl	8005bca <HAL_SYSTICK_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e00e      	b.n	8004eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b0f      	cmp	r3, #15
 8004ed2:	d80a      	bhi.n	8004eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	f000 fe4b 	bl	8005b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ee0:	4a06      	ldr	r2, [pc, #24]	@ (8004efc <HAL_InitTick+0x5c>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000014 	.word	0x20000014
 8004ef8:	2000001c 	.word	0x2000001c
 8004efc:	20000018 	.word	0x20000018

08004f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <HAL_IncTick+0x20>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <HAL_IncTick+0x24>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4413      	add	r3, r2
 8004f10:	4a04      	ldr	r2, [pc, #16]	@ (8004f24 <HAL_IncTick+0x24>)
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	2000001c 	.word	0x2000001c
 8004f24:	200017e0 	.word	0x200017e0

08004f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <HAL_GetTick+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	200017e0 	.word	0x200017e0

08004f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f48:	f7ff ffee 	bl	8004f28 <HAL_GetTick>
 8004f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d005      	beq.n	8004f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <HAL_Delay+0x44>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f66:	bf00      	nop
 8004f68:	f7ff ffde 	bl	8004f28 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d8f7      	bhi.n	8004f68 <HAL_Delay+0x28>
  {
  }
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	2000001c 	.word	0x2000001c

08004f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e033      	b.n	8005006 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fc0e 	bl	80047c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d118      	bne.n	8004ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004fce:	f023 0302 	bic.w	r3, r3, #2
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fb68 	bl	80056b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ff6:	e001      	b.n	8004ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d049      	beq.n	80050d8 <HAL_ADC_IRQHandler+0xca>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d046      	beq.n	80050d8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d105      	bne.n	8005062 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d12b      	bne.n	80050c8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005074:	2b00      	cmp	r3, #0
 8005076:	d127      	bne.n	80050c8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005090:	2b00      	cmp	r3, #0
 8005092:	d119      	bne.n	80050c8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0220 	bic.w	r2, r2, #32
 80050a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	f043 0201 	orr.w	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff f97b 	bl	80043c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0212 	mvn.w	r2, #18
 80050d6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d057      	beq.n	800519e <HAL_ADC_IRQHandler+0x190>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d054      	beq.n	800519e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d139      	bne.n	800518e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005132:	2b00      	cmp	r3, #0
 8005134:	d12b      	bne.n	800518e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005140:	2b00      	cmp	r3, #0
 8005142:	d124      	bne.n	800518e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11d      	bne.n	800518e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005156:	2b00      	cmp	r3, #0
 8005158:	d119      	bne.n	800518e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005168:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fc0c 	bl	80059ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 020c 	mvn.w	r2, #12
 800519c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d017      	beq.n	80051e4 <HAL_ADC_IRQHandler+0x1d6>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d014      	beq.n	80051e4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10d      	bne.n	80051e4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f925 	bl	8005424 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f06f 0201 	mvn.w	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051f2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d015      	beq.n	8005226 <HAL_ADC_IRQHandler+0x218>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d012      	beq.n	8005226 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005204:	f043 0202 	orr.w	r2, r3, #2
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0220 	mvn.w	r2, #32
 8005214:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f90e 	bl	8005438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0220 	mvn.w	r2, #32
 8005224:	601a      	str	r2, [r3, #0]
  }
}
 8005226:	bf00      	nop
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_ADC_Start_DMA+0x1e>
 800524a:	2302      	movs	r3, #2
 800524c:	e0ce      	b.n	80053ec <HAL_ADC_Start_DMA+0x1bc>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d018      	beq.n	8005296 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005274:	4b5f      	ldr	r3, [pc, #380]	@ (80053f4 <HAL_ADC_Start_DMA+0x1c4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5f      	ldr	r2, [pc, #380]	@ (80053f8 <HAL_ADC_Start_DMA+0x1c8>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0c9a      	lsrs	r2, r3, #18
 8005280:	4613      	mov	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4413      	add	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005288:	e002      	b.n	8005290 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f9      	bne.n	800528a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a4:	d107      	bne.n	80052b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052b4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f040 8086 	bne.w	80053d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005304:	d106      	bne.n	8005314 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f023 0206 	bic.w	r2, r3, #6
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
 8005312:	e002      	b.n	800531a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005322:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <HAL_ADC_Start_DMA+0x1cc>)
 8005324:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <HAL_ADC_Start_DMA+0x1d0>)
 800532c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	4a34      	ldr	r2, [pc, #208]	@ (8005404 <HAL_ADC_Start_DMA+0x1d4>)
 8005334:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	4a33      	ldr	r2, [pc, #204]	@ (8005408 <HAL_ADC_Start_DMA+0x1d8>)
 800533c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005346:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005356:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005366:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	334c      	adds	r3, #76	@ 0x4c
 8005372:	4619      	mov	r1, r3
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f000 fce2 	bl	8005d40 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10f      	bne.n	80053a8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d129      	bne.n	80053ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	e020      	b.n	80053ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a17      	ldr	r2, [pc, #92]	@ (800540c <HAL_ADC_Start_DMA+0x1dc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d11b      	bne.n	80053ea <HAL_ADC_Start_DMA+0x1ba>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d114      	bne.n	80053ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e00b      	b.n	80053ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	f043 0210 	orr.w	r2, r3, #16
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	f043 0201 	orr.w	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000014 	.word	0x20000014
 80053f8:	431bde83 	.word	0x431bde83
 80053fc:	40012300 	.word	0x40012300
 8005400:	080058a9 	.word	0x080058a9
 8005404:	08005963 	.word	0x08005963
 8005408:	0800597f 	.word	0x0800597f
 800540c:	40012000 	.word	0x40012000

08005410 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e113      	b.n	8005690 <HAL_ADC_ConfigChannel+0x244>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b09      	cmp	r3, #9
 8005476:	d925      	bls.n	80054c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	3b1e      	subs	r3, #30
 800548e:	2207      	movs	r2, #7
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43da      	mvns	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	400a      	ands	r2, r1
 800549c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68d9      	ldr	r1, [r3, #12]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	4618      	mov	r0, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4403      	add	r3, r0
 80054b6:	3b1e      	subs	r3, #30
 80054b8:	409a      	lsls	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e022      	b.n	800550a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6919      	ldr	r1, [r3, #16]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	2207      	movs	r2, #7
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43da      	mvns	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	400a      	ands	r2, r1
 80054e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6919      	ldr	r1, [r3, #16]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4618      	mov	r0, r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4403      	add	r3, r0
 8005500:	409a      	lsls	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d824      	bhi.n	800555c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	3b05      	subs	r3, #5
 8005524:	221f      	movs	r2, #31
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43da      	mvns	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	400a      	ands	r2, r1
 8005532:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4618      	mov	r0, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	3b05      	subs	r3, #5
 800554e:	fa00 f203 	lsl.w	r2, r0, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	635a      	str	r2, [r3, #52]	@ 0x34
 800555a:	e04c      	b.n	80055f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b0c      	cmp	r3, #12
 8005562:	d824      	bhi.n	80055ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	3b23      	subs	r3, #35	@ 0x23
 8005576:	221f      	movs	r2, #31
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43da      	mvns	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	400a      	ands	r2, r1
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	4618      	mov	r0, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3b23      	subs	r3, #35	@ 0x23
 80055a0:	fa00 f203 	lsl.w	r2, r0, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80055ac:	e023      	b.n	80055f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	3b41      	subs	r3, #65	@ 0x41
 80055c0:	221f      	movs	r2, #31
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43da      	mvns	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	400a      	ands	r2, r1
 80055ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	4618      	mov	r0, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	3b41      	subs	r3, #65	@ 0x41
 80055ea:	fa00 f203 	lsl.w	r2, r0, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055f6:	4b29      	ldr	r3, [pc, #164]	@ (800569c <HAL_ADC_ConfigChannel+0x250>)
 80055f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a28      	ldr	r2, [pc, #160]	@ (80056a0 <HAL_ADC_ConfigChannel+0x254>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10f      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x1d8>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b12      	cmp	r3, #18
 800560a:	d10b      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <HAL_ADC_ConfigChannel+0x254>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d12b      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x23a>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <HAL_ADC_ConfigChannel+0x258>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <HAL_ADC_ConfigChannel+0x1f4>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b11      	cmp	r3, #17
 800563e:	d122      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a11      	ldr	r2, [pc, #68]	@ (80056a4 <HAL_ADC_ConfigChannel+0x258>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005662:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <HAL_ADC_ConfigChannel+0x25c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <HAL_ADC_ConfigChannel+0x260>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	0c9a      	lsrs	r2, r3, #18
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005678:	e002      	b.n	8005680 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3b01      	subs	r3, #1
 800567e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f9      	bne.n	800567a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012300 	.word	0x40012300
 80056a0:	40012000 	.word	0x40012000
 80056a4:	10000012 	.word	0x10000012
 80056a8:	20000014 	.word	0x20000014
 80056ac:	431bde83 	.word	0x431bde83

080056b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056b8:	4b79      	ldr	r3, [pc, #484]	@ (80058a0 <ADC_Init+0x1f0>)
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	021a      	lsls	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800572a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6899      	ldr	r1, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	4a58      	ldr	r2, [pc, #352]	@ (80058a4 <ADC_Init+0x1f4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d022      	beq.n	800578e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e00f      	b.n	80057ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800579c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80057ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0202 	bic.w	r2, r2, #2
 80057bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7e1b      	ldrb	r3, [r3, #24]
 80057c8:	005a      	lsls	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01b      	beq.n	8005814 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80057fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	3b01      	subs	r3, #1
 8005808:	035a      	lsls	r2, r3, #13
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	e007      	b.n	8005824 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	3b01      	subs	r3, #1
 8005840:	051a      	lsls	r2, r3, #20
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005866:	025a      	lsls	r2, r3, #9
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6899      	ldr	r1, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	029a      	lsls	r2, r3, #10
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40012300 	.word	0x40012300
 80058a4:	0f000001 	.word	0x0f000001

080058a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d13c      	bne.n	800593c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d12b      	bne.n	8005934 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d127      	bne.n	8005934 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d119      	bne.n	8005934 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0220 	bic.w	r2, r2, #32
 800590e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	f043 0201 	orr.w	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7fe fd45 	bl	80043c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800593a:	e00e      	b.n	800595a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7ff fd75 	bl	8005438 <HAL_ADC_ErrorCallback>
}
 800594e:	e004      	b.n	800595a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fd4d 	bl	8005410 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2240      	movs	r2, #64	@ 0x40
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff fd4a 	bl	8005438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059dc:	4013      	ands	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059f2:	4a04      	ldr	r2, [pc, #16]	@ (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	60d3      	str	r3, [r2, #12]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a0c:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <__NVIC_GetPriorityGrouping+0x18>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f003 0307 	and.w	r3, r3, #7
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db0b      	blt.n	8005a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	4907      	ldr	r1, [pc, #28]	@ (8005a5c <__NVIC_EnableIRQ+0x38>)
 8005a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2001      	movs	r0, #1
 8005a46:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000e100 	.word	0xe000e100

08005a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db0a      	blt.n	8005a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	490c      	ldr	r1, [pc, #48]	@ (8005aac <__NVIC_SetPriority+0x4c>)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	0112      	lsls	r2, r2, #4
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a88:	e00a      	b.n	8005aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4908      	ldr	r1, [pc, #32]	@ (8005ab0 <__NVIC_SetPriority+0x50>)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	3b04      	subs	r3, #4
 8005a98:	0112      	lsls	r2, r2, #4
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	761a      	strb	r2, [r3, #24]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	e000e100 	.word	0xe000e100
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	@ 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	bf28      	it	cs
 8005ad2:	2304      	movcs	r3, #4
 8005ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d902      	bls.n	8005ae4 <NVIC_EncodePriority+0x30>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3b03      	subs	r3, #3
 8005ae2:	e000      	b.n	8005ae6 <NVIC_EncodePriority+0x32>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43da      	mvns	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	401a      	ands	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005afc:	f04f 31ff 	mov.w	r1, #4294967295
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	43d9      	mvns	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b0c:	4313      	orrs	r3, r2
         );
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3724      	adds	r7, #36	@ 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b2c:	d301      	bcc.n	8005b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e00f      	b.n	8005b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b32:	4a0a      	ldr	r2, [pc, #40]	@ (8005b5c <SysTick_Config+0x40>)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b3a:	210f      	movs	r1, #15
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	f7ff ff8e 	bl	8005a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <SysTick_Config+0x40>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b4a:	4b04      	ldr	r3, [pc, #16]	@ (8005b5c <SysTick_Config+0x40>)
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000e010 	.word	0xe000e010

08005b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff ff29 	bl	80059c0 <__NVIC_SetPriorityGrouping>
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b88:	f7ff ff3e 	bl	8005a08 <__NVIC_GetPriorityGrouping>
 8005b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	f7ff ff8e 	bl	8005ab4 <NVIC_EncodePriority>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff ff5d 	bl	8005a60 <__NVIC_SetPriority>
}
 8005ba6:	bf00      	nop
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ff31 	bl	8005a24 <__NVIC_EnableIRQ>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff ffa2 	bl	8005b1c <SysTick_Config>
 8005bd8:	4603      	mov	r3, r0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bf0:	f7ff f99a 	bl	8004f28 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e099      	b.n	8005d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c20:	e00f      	b.n	8005c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c22:	f7ff f981 	bl	8004f28 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d908      	bls.n	8005c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2203      	movs	r2, #3
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e078      	b.n	8005d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e8      	bne.n	8005c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4b38      	ldr	r3, [pc, #224]	@ (8005d3c <HAL_DMA_Init+0x158>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d107      	bne.n	8005cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0307 	bic.w	r3, r3, #7
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d117      	bne.n	8005d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00e      	beq.n	8005d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb1b 	bl	8006324 <DMA_CheckFifoParam>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d02:	2301      	movs	r3, #1
 8005d04:	e016      	b.n	8005d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fad2 	bl	80062b8 <DMA_CalcBaseAndBitshift>
 8005d14:	4603      	mov	r3, r0
 8005d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1c:	223f      	movs	r2, #63	@ 0x3f
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	f010803f 	.word	0xf010803f

08005d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_DMA_Start_IT+0x26>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e040      	b.n	8005de8 <HAL_DMA_Start_IT+0xa8>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d12f      	bne.n	8005dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 fa64 	bl	800625c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d98:	223f      	movs	r2, #63	@ 0x3f
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0216 	orr.w	r2, r2, #22
 8005dae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0208 	orr.w	r2, r2, #8
 8005dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e005      	b.n	8005de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005de2:	2302      	movs	r3, #2
 8005de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dfe:	f7ff f893 	bl	8004f28 <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d008      	beq.n	8005e22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2280      	movs	r2, #128	@ 0x80
 8005e14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e052      	b.n	8005ec8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0216 	bic.w	r2, r2, #22
 8005e30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_DMA_Abort+0x62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0208 	bic.w	r2, r2, #8
 8005e60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e72:	e013      	b.n	8005e9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e74:	f7ff f858 	bl	8004f28 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d90c      	bls.n	8005e9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e015      	b.n	8005ec8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e4      	bne.n	8005e74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eae:	223f      	movs	r2, #63	@ 0x3f
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d004      	beq.n	8005eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2280      	movs	r2, #128	@ 0x80
 8005ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e00c      	b.n	8005f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2205      	movs	r2, #5
 8005ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f20:	4b8e      	ldr	r3, [pc, #568]	@ (800615c <HAL_DMA_IRQHandler+0x248>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a8e      	ldr	r2, [pc, #568]	@ (8006160 <HAL_DMA_IRQHandler+0x24c>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3e:	2208      	movs	r2, #8
 8005f40:	409a      	lsls	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01a      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0204 	bic.w	r2, r2, #4
 8005f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f78:	f043 0201 	orr.w	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f84:	2201      	movs	r2, #1
 8005f86:	409a      	lsls	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fba:	2204      	movs	r2, #4
 8005fbc:	409a      	lsls	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd8:	2204      	movs	r2, #4
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe4:	f043 0204 	orr.w	r2, r3, #4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d043      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d03c      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600e:	2210      	movs	r2, #16
 8006010:	409a      	lsls	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d018      	beq.n	8006056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d024      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
 8006042:	e01f      	b.n	8006084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01b      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
 8006054:	e016      	b.n	8006084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d107      	bne.n	8006074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0208 	bic.w	r2, r2, #8
 8006072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006088:	2220      	movs	r2, #32
 800608a:	409a      	lsls	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 808f 	beq.w	80061b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8087 	beq.w	80061b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	2220      	movs	r2, #32
 80060ac:	409a      	lsls	r2, r3
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d136      	bne.n	800612c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0216 	bic.w	r2, r2, #22
 80060cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <HAL_DMA_IRQHandler+0x1da>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0208 	bic.w	r2, r2, #8
 80060fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006102:	223f      	movs	r2, #63	@ 0x3f
 8006104:	409a      	lsls	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611e:	2b00      	cmp	r3, #0
 8006120:	d07e      	beq.n	8006220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
        }
        return;
 800612a:	e079      	b.n	8006220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01d      	beq.n	8006176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10d      	bne.n	8006164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614c:	2b00      	cmp	r3, #0
 800614e:	d031      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
 8006158:	e02c      	b.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
 800615a:	bf00      	nop
 800615c:	20000014 	.word	0x20000014
 8006160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d023      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
 8006174:	e01e      	b.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10f      	bne.n	80061a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0210 	bic.w	r2, r2, #16
 8006192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d032      	beq.n	8006222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d022      	beq.n	800620e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2205      	movs	r2, #5
 80061cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d307      	bcc.n	80061fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f2      	bne.n	80061e0 <HAL_DMA_IRQHandler+0x2cc>
 80061fa:	e000      	b.n	80061fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
 800621e:	e000      	b.n	8006222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006220:	bf00      	nop
    }
  }
}
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006236:	b2db      	uxtb	r3, r3
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b40      	cmp	r3, #64	@ 0x40
 8006288:	d108      	bne.n	800629c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800629a:	e007      	b.n	80062ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	60da      	str	r2, [r3, #12]
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	3b10      	subs	r3, #16
 80062c8:	4a14      	ldr	r2, [pc, #80]	@ (800631c <DMA_CalcBaseAndBitshift+0x64>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	091b      	lsrs	r3, r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062d2:	4a13      	ldr	r2, [pc, #76]	@ (8006320 <DMA_CalcBaseAndBitshift+0x68>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d909      	bls.n	80062fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	1d1a      	adds	r2, r3, #4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80062f8:	e007      	b.n	800630a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	aaaaaaab 	.word	0xaaaaaaab
 8006320:	08013ce4 	.word	0x08013ce4

08006324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11f      	bne.n	800637e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d856      	bhi.n	80063f2 <DMA_CheckFifoParam+0xce>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <DMA_CheckFifoParam+0x28>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	0800635d 	.word	0x0800635d
 8006350:	0800636f 	.word	0x0800636f
 8006354:	0800635d 	.word	0x0800635d
 8006358:	080063f3 	.word	0x080063f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d046      	beq.n	80063f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800636c:	e043      	b.n	80063f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006376:	d140      	bne.n	80063fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800637c:	e03d      	b.n	80063fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006386:	d121      	bne.n	80063cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d837      	bhi.n	80063fe <DMA_CheckFifoParam+0xda>
 800638e:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <DMA_CheckFifoParam+0x70>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063ab 	.word	0x080063ab
 800639c:	080063a5 	.word	0x080063a5
 80063a0:	080063bd 	.word	0x080063bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
      break;
 80063a8:	e030      	b.n	800640c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d025      	beq.n	8006402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ba:	e022      	b.n	8006402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063c4:	d11f      	bne.n	8006406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063ca:	e01c      	b.n	8006406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d903      	bls.n	80063da <DMA_CheckFifoParam+0xb6>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d003      	beq.n	80063e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063d8:	e018      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	73fb      	strb	r3, [r7, #15]
      break;
 80063de:	e015      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
      break;
 80063f0:	e00b      	b.n	800640a <DMA_CheckFifoParam+0xe6>
      break;
 80063f2:	bf00      	nop
 80063f4:	e00a      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      break;
 80063f6:	bf00      	nop
 80063f8:	e008      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      break;
 80063fa:	bf00      	nop
 80063fc:	e006      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      break;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      break;   
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <DMA_CheckFifoParam+0xe8>
      break;
 800640a:	bf00      	nop
    }
  } 
  
  return status; 
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop

0800641c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800641c:	b480      	push	{r7}
 800641e:	b089      	sub	sp, #36	@ 0x24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
 8006436:	e159      	b.n	80066ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006438:	2201      	movs	r2, #1
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4013      	ands	r3, r2
 800644a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	429a      	cmp	r2, r3
 8006452:	f040 8148 	bne.w	80066e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d005      	beq.n	800646e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800646a:	2b02      	cmp	r3, #2
 800646c:	d130      	bne.n	80064d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	2203      	movs	r2, #3
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	43db      	mvns	r3, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4013      	ands	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064a4:	2201      	movs	r2, #1
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 0201 	and.w	r2, r3, #1
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d017      	beq.n	800650c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	2203      	movs	r2, #3
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4313      	orrs	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d123      	bne.n	8006560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	08da      	lsrs	r2, r3, #3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3208      	adds	r2, #8
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	220f      	movs	r2, #15
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	4013      	ands	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4313      	orrs	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	08da      	lsrs	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3208      	adds	r2, #8
 800655a:	69b9      	ldr	r1, [r7, #24]
 800655c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	2203      	movs	r2, #3
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	43db      	mvns	r3, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0203 	and.w	r2, r3, #3
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4313      	orrs	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80a2 	beq.w	80066e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	4b57      	ldr	r3, [pc, #348]	@ (8006704 <HAL_GPIO_Init+0x2e8>)
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	4a56      	ldr	r2, [pc, #344]	@ (8006704 <HAL_GPIO_Init+0x2e8>)
 80065ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80065b2:	4b54      	ldr	r3, [pc, #336]	@ (8006704 <HAL_GPIO_Init+0x2e8>)
 80065b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065be:	4a52      	ldr	r2, [pc, #328]	@ (8006708 <HAL_GPIO_Init+0x2ec>)
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	089b      	lsrs	r3, r3, #2
 80065c4:	3302      	adds	r3, #2
 80065c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	220f      	movs	r2, #15
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a49      	ldr	r2, [pc, #292]	@ (800670c <HAL_GPIO_Init+0x2f0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d019      	beq.n	800661e <HAL_GPIO_Init+0x202>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a48      	ldr	r2, [pc, #288]	@ (8006710 <HAL_GPIO_Init+0x2f4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_GPIO_Init+0x1fe>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a47      	ldr	r2, [pc, #284]	@ (8006714 <HAL_GPIO_Init+0x2f8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00d      	beq.n	8006616 <HAL_GPIO_Init+0x1fa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a46      	ldr	r2, [pc, #280]	@ (8006718 <HAL_GPIO_Init+0x2fc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <HAL_GPIO_Init+0x1f6>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a45      	ldr	r2, [pc, #276]	@ (800671c <HAL_GPIO_Init+0x300>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <HAL_GPIO_Init+0x1f2>
 800660a:	2304      	movs	r3, #4
 800660c:	e008      	b.n	8006620 <HAL_GPIO_Init+0x204>
 800660e:	2307      	movs	r3, #7
 8006610:	e006      	b.n	8006620 <HAL_GPIO_Init+0x204>
 8006612:	2303      	movs	r3, #3
 8006614:	e004      	b.n	8006620 <HAL_GPIO_Init+0x204>
 8006616:	2302      	movs	r3, #2
 8006618:	e002      	b.n	8006620 <HAL_GPIO_Init+0x204>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_GPIO_Init+0x204>
 800661e:	2300      	movs	r3, #0
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	f002 0203 	and.w	r2, r2, #3
 8006626:	0092      	lsls	r2, r2, #2
 8006628:	4093      	lsls	r3, r2
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	4313      	orrs	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006630:	4935      	ldr	r1, [pc, #212]	@ (8006708 <HAL_GPIO_Init+0x2ec>)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	3302      	adds	r3, #2
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800663e:	4b38      	ldr	r3, [pc, #224]	@ (8006720 <HAL_GPIO_Init+0x304>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	43db      	mvns	r3, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006662:	4a2f      	ldr	r2, [pc, #188]	@ (8006720 <HAL_GPIO_Init+0x304>)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006668:	4b2d      	ldr	r3, [pc, #180]	@ (8006720 <HAL_GPIO_Init+0x304>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	43db      	mvns	r3, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4013      	ands	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800668c:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <HAL_GPIO_Init+0x304>)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006692:	4b23      	ldr	r3, [pc, #140]	@ (8006720 <HAL_GPIO_Init+0x304>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	43db      	mvns	r3, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4013      	ands	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006720 <HAL_GPIO_Init+0x304>)
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066bc:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <HAL_GPIO_Init+0x304>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066e0:	4a0f      	ldr	r2, [pc, #60]	@ (8006720 <HAL_GPIO_Init+0x304>)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	f67f aea2 	bls.w	8006438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	3724      	adds	r7, #36	@ 0x24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40023800 	.word	0x40023800
 8006708:	40013800 	.word	0x40013800
 800670c:	40020000 	.word	0x40020000
 8006710:	40020400 	.word	0x40020400
 8006714:	40020800 	.word	0x40020800
 8006718:	40020c00 	.word	0x40020c00
 800671c:	40021000 	.word	0x40021000
 8006720:	40013c00 	.word	0x40013c00

08006724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	887b      	ldrh	r3, [r7, #2]
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
 8006740:	e001      	b.n	8006746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006746:	7bfb      	ldrb	r3, [r7, #15]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	807b      	strh	r3, [r7, #2]
 8006760:	4613      	mov	r3, r2
 8006762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006764:	787b      	ldrb	r3, [r7, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800676a:	887a      	ldrh	r2, [r7, #2]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006770:	e003      	b.n	800677a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006772:	887b      	ldrh	r3, [r7, #2]
 8006774:	041a      	lsls	r2, r3, #16
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	619a      	str	r2, [r3, #24]
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006798:	887a      	ldrh	r2, [r7, #2]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4013      	ands	r3, r2
 800679e:	041a      	lsls	r2, r3, #16
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	43d9      	mvns	r1, r3
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	400b      	ands	r3, r1
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	619a      	str	r2, [r3, #24]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067c6:	4b08      	ldr	r3, [pc, #32]	@ (80067e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	4013      	ands	r3, r2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d006      	beq.n	80067e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067d2:	4a05      	ldr	r2, [pc, #20]	@ (80067e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fd fe02 	bl	80043e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40013c00 	.word	0x40013c00

080067ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e12b      	b.n	8006a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fe f874 	bl	8004900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2224      	movs	r2, #36	@ 0x24
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800683e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800684e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006850:	f005 fa34 	bl	800bcbc <HAL_RCC_GetPCLK1Freq>
 8006854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	4a81      	ldr	r2, [pc, #516]	@ (8006a60 <HAL_I2C_Init+0x274>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d807      	bhi.n	8006870 <HAL_I2C_Init+0x84>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a80      	ldr	r2, [pc, #512]	@ (8006a64 <HAL_I2C_Init+0x278>)
 8006864:	4293      	cmp	r3, r2
 8006866:	bf94      	ite	ls
 8006868:	2301      	movls	r3, #1
 800686a:	2300      	movhi	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e006      	b.n	800687e <HAL_I2C_Init+0x92>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a7d      	ldr	r2, [pc, #500]	@ (8006a68 <HAL_I2C_Init+0x27c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	bf94      	ite	ls
 8006878:	2301      	movls	r3, #1
 800687a:	2300      	movhi	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0e7      	b.n	8006a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a78      	ldr	r2, [pc, #480]	@ (8006a6c <HAL_I2C_Init+0x280>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0c9b      	lsrs	r3, r3, #18
 8006890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a6a      	ldr	r2, [pc, #424]	@ (8006a60 <HAL_I2C_Init+0x274>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d802      	bhi.n	80068c0 <HAL_I2C_Init+0xd4>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	3301      	adds	r3, #1
 80068be:	e009      	b.n	80068d4 <HAL_I2C_Init+0xe8>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	4a69      	ldr	r2, [pc, #420]	@ (8006a70 <HAL_I2C_Init+0x284>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	3301      	adds	r3, #1
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	430b      	orrs	r3, r1
 80068da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80068e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	495c      	ldr	r1, [pc, #368]	@ (8006a60 <HAL_I2C_Init+0x274>)
 80068f0:	428b      	cmp	r3, r1
 80068f2:	d819      	bhi.n	8006928 <HAL_I2C_Init+0x13c>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	1e59      	subs	r1, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006902:	1c59      	adds	r1, r3, #1
 8006904:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006908:	400b      	ands	r3, r1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_I2C_Init+0x138>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1e59      	subs	r1, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	fbb1 f3f3 	udiv	r3, r1, r3
 800691c:	3301      	adds	r3, #1
 800691e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006922:	e051      	b.n	80069c8 <HAL_I2C_Init+0x1dc>
 8006924:	2304      	movs	r3, #4
 8006926:	e04f      	b.n	80069c8 <HAL_I2C_Init+0x1dc>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d111      	bne.n	8006954 <HAL_I2C_Init+0x168>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1e58      	subs	r0, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	440b      	add	r3, r1
 800693e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006942:	3301      	adds	r3, #1
 8006944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006948:	2b00      	cmp	r3, #0
 800694a:	bf0c      	ite	eq
 800694c:	2301      	moveq	r3, #1
 800694e:	2300      	movne	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e012      	b.n	800697a <HAL_I2C_Init+0x18e>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1e58      	subs	r0, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6859      	ldr	r1, [r3, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	0099      	lsls	r1, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	fbb0 f3f3 	udiv	r3, r0, r3
 800696a:	3301      	adds	r3, #1
 800696c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Init+0x196>
 800697e:	2301      	movs	r3, #1
 8006980:	e022      	b.n	80069c8 <HAL_I2C_Init+0x1dc>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10e      	bne.n	80069a8 <HAL_I2C_Init+0x1bc>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1e58      	subs	r0, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	440b      	add	r3, r1
 8006998:	fbb0 f3f3 	udiv	r3, r0, r3
 800699c:	3301      	adds	r3, #1
 800699e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a6:	e00f      	b.n	80069c8 <HAL_I2C_Init+0x1dc>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1e58      	subs	r0, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	0099      	lsls	r1, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80069be:	3301      	adds	r3, #1
 80069c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	6809      	ldr	r1, [r1, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80069f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6911      	ldr	r1, [r2, #16]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68d2      	ldr	r2, [r2, #12]
 8006a02:	4311      	orrs	r1, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	000186a0 	.word	0x000186a0
 8006a64:	001e847f 	.word	0x001e847f
 8006a68:	003d08ff 	.word	0x003d08ff
 8006a6c:	431bde83 	.word	0x431bde83
 8006a70:	10624dd3 	.word	0x10624dd3

08006a74 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d103      	bne.n	8006a92 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	611a      	str	r2, [r3, #16]
  }
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	817b      	strh	r3, [r7, #10]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ab4:	f7fe fa38 	bl	8004f28 <HAL_GetTick>
 8006ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	f040 80e0 	bne.w	8006c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2319      	movs	r3, #25
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4970      	ldr	r1, [pc, #448]	@ (8006c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f002 ffe0 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e0d3      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_I2C_Master_Transmit+0x50>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e0cc      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d007      	beq.n	8006b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2221      	movs	r2, #33	@ 0x21
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2210      	movs	r2, #16
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	893a      	ldrh	r2, [r7, #8]
 8006b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a50      	ldr	r2, [pc, #320]	@ (8006c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b58:	8979      	ldrh	r1, [r7, #10]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f002 fbd6 	bl	8009310 <I2C_MasterRequestWrite>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e08d      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b84:	e066      	b.n	8006c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f003 f89e 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e06b      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d11b      	bne.n	8006c28 <HAL_I2C_Master_Transmit+0x188>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d017      	beq.n	8006c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	6a39      	ldr	r1, [r7, #32]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f003 f895 	bl	8009d5c <I2C_WaitOnBTFFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00d      	beq.n	8006c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d107      	bne.n	8006c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01a      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d194      	bne.n	8006b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	00100002 	.word	0x00100002
 8006c98:	ffff0000 	.word	0xffff0000

08006c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	817b      	strh	r3, [r7, #10]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	813b      	strh	r3, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cb6:	f7fe f937 	bl	8004f28 <HAL_GetTick>
 8006cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	f040 80d9 	bne.w	8006e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2319      	movs	r3, #25
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	496d      	ldr	r1, [pc, #436]	@ (8006e88 <HAL_I2C_Mem_Write+0x1ec>)
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f002 fedf 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e0cc      	b.n	8006e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_I2C_Mem_Write+0x56>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e0c5      	b.n	8006e7e <HAL_I2C_Mem_Write+0x1e2>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d007      	beq.n	8006d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2221      	movs	r2, #33	@ 0x21
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2240      	movs	r2, #64	@ 0x40
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a4d      	ldr	r2, [pc, #308]	@ (8006e8c <HAL_I2C_Mem_Write+0x1f0>)
 8006d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d5a:	88f8      	ldrh	r0, [r7, #6]
 8006d5c:	893a      	ldrh	r2, [r7, #8]
 8006d5e:	8979      	ldrh	r1, [r7, #10]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f002 fb52 	bl	8009414 <I2C_RequestMemoryWrite>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d052      	beq.n	8006e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e081      	b.n	8006e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f002 ffa4 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d107      	bne.n	8006da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e06b      	b.n	8006e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d11b      	bne.n	8006e1c <HAL_I2C_Mem_Write+0x180>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d017      	beq.n	8006e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1aa      	bne.n	8006d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f002 ff97 	bl	8009d5c <I2C_WaitOnBTFFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d107      	bne.n	8006e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e016      	b.n	8006e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e7c:	2302      	movs	r3, #2
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	00100002 	.word	0x00100002
 8006e8c:	ffff0000 	.word	0xffff0000

08006e90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08c      	sub	sp, #48	@ 0x30
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	4608      	mov	r0, r1
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	817b      	strh	r3, [r7, #10]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	813b      	strh	r3, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eaa:	f7fe f83d 	bl	8004f28 <HAL_GetTick>
 8006eae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	f040 8214 	bne.w	80072e6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	2319      	movs	r3, #25
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	497b      	ldr	r1, [pc, #492]	@ (80070b4 <HAL_I2C_Mem_Read+0x224>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f002 fde5 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e207      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_I2C_Mem_Read+0x56>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e200      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d007      	beq.n	8006f0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2222      	movs	r2, #34	@ 0x22
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2240      	movs	r2, #64	@ 0x40
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80070b8 <HAL_I2C_Mem_Read+0x228>)
 8006f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4e:	88f8      	ldrh	r0, [r7, #6]
 8006f50:	893a      	ldrh	r2, [r7, #8]
 8006f52:	8979      	ldrh	r1, [r7, #10]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f002 faee 	bl	8009540 <I2C_RequestMemoryRead>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e1bc      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d113      	bne.n	8006f9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f76:	2300      	movs	r3, #0
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	623b      	str	r3, [r7, #32]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e190      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d11b      	bne.n	8006fde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	61fb      	str	r3, [r7, #28]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e170      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d11b      	bne.n	800701e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	e150      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007034:	e144      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703a:	2b03      	cmp	r3, #3
 800703c:	f200 80f1 	bhi.w	8007222 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007044:	2b01      	cmp	r3, #1
 8007046:	d123      	bne.n	8007090 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800704a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f002 feff 	bl	8009e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e145      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800708e:	e117      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007094:	2b02      	cmp	r3, #2
 8007096:	d14e      	bne.n	8007136 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	2200      	movs	r2, #0
 80070a0:	4906      	ldr	r1, [pc, #24]	@ (80070bc <HAL_I2C_Mem_Read+0x22c>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f002 fcf8 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e11a      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
 80070b2:	bf00      	nop
 80070b4:	00100002 	.word	0x00100002
 80070b8:	ffff0000 	.word	0xffff0000
 80070bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007134:	e0c4      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	2200      	movs	r2, #0
 800713e:	496c      	ldr	r1, [pc, #432]	@ (80072f0 <HAL_I2C_Mem_Read+0x460>)
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f002 fca9 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e0cb      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800715e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	2200      	movs	r2, #0
 800719a:	4955      	ldr	r1, [pc, #340]	@ (80072f0 <HAL_I2C_Mem_Read+0x460>)
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f002 fc7b 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09d      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007220:	e04e      	b.n	80072c0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007224:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f002 fe12 	bl	8009e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e058      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b04      	cmp	r3, #4
 8007274:	d124      	bne.n	80072c0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727a:	2b03      	cmp	r3, #3
 800727c:	d107      	bne.n	800728e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800728c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f aeb6 	bne.w	8007036 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	@ 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	00010004 	.word	0x00010004

080072f4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	@ 0x28
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	461a      	mov	r2, r3
 8007302:	4603      	mov	r3, r0
 8007304:	817b      	strh	r3, [r7, #10]
 8007306:	460b      	mov	r3, r1
 8007308:	813b      	strh	r3, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007312:	f7fd fe09 	bl	8004f28 <HAL_GetTick>
 8007316:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b20      	cmp	r3, #32
 8007322:	f040 8136 	bne.w	8007592 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007326:	4b9d      	ldr	r3, [pc, #628]	@ (800759c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	08db      	lsrs	r3, r3, #3
 800732c:	4a9c      	ldr	r2, [pc, #624]	@ (80075a0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	0a1a      	lsrs	r2, r3, #8
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009a      	lsls	r2, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	3b01      	subs	r3, #1
 8007344:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d112      	bne.n	8007372 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800736e:	2302      	movs	r3, #2
 8007370:	e110      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b02      	cmp	r3, #2
 800737e:	d0df      	beq.n	8007340 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <HAL_I2C_Mem_Write_DMA+0x9a>
 800738a:	2302      	movs	r3, #2
 800738c:	e102      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d007      	beq.n	80073b4 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2221      	movs	r2, #33	@ 0x21
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2240      	movs	r2, #64	@ 0x40
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80073e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a6c      	ldr	r2, [pc, #432]	@ (80075a4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80073f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80073f6:	897a      	ldrh	r2, [r7, #10]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80073fc:	893a      	ldrh	r2, [r7, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80a9 	beq.w	800756a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02a      	beq.n	8007476 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007424:	4a60      	ldr	r2, [pc, #384]	@ (80075a8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8007426:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742c:	4a5f      	ldr	r2, [pc, #380]	@ (80075ac <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800742e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007434:	2200      	movs	r2, #0
 8007436:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743c:	2200      	movs	r2, #0
 800743e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007444:	2200      	movs	r2, #0
 8007446:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800744c:	2200      	movs	r2, #0
 800744e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	4619      	mov	r1, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3310      	adds	r3, #16
 8007460:	461a      	mov	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007466:	f7fe fc6b 	bl	8005d40 <HAL_DMA_Start_IT>
 800746a:	4603      	mov	r3, r0
 800746c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800746e:	7efb      	ldrb	r3, [r7, #27]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d166      	bne.n	8007542 <HAL_I2C_Mem_Write_DMA+0x24e>
 8007474:	e013      	b.n	800749e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e07a      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800749e:	88f8      	ldrh	r0, [r7, #6]
 80074a0:	893a      	ldrh	r2, [r7, #8]
 80074a2:	8979      	ldrh	r1, [r7, #10]
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	2323      	movs	r3, #35	@ 0x23
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4603      	mov	r3, r0
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f001 ffb0 	bl	8009414 <I2C_RequestMemoryWrite>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d022      	beq.n	8007500 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fd06 	bl	8005ed0 <HAL_DMA_Abort_IT>
 80074c4:	4603      	mov	r3, r0
 80074c6:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074cc:	2200      	movs	r2, #0
 80074ce:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074de:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e049      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007500:	2300      	movs	r3, #0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800752c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800753c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	e028      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007556:	f043 0210 	orr.w	r2, r3, #16
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e014      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
  }
}
 8007594:	4618      	mov	r0, r3
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20000014 	.word	0x20000014
 80075a0:	14f8b589 	.word	0x14f8b589
 80075a4:	ffff0000 	.word	0xffff0000
 80075a8:	08009711 	.word	0x08009711
 80075ac:	080098cf 	.word	0x080098cf

080075b0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08c      	sub	sp, #48	@ 0x30
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	461a      	mov	r2, r3
 80075be:	4603      	mov	r3, r0
 80075c0:	817b      	strh	r3, [r7, #10]
 80075c2:	460b      	mov	r3, r1
 80075c4:	813b      	strh	r3, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075ca:	f7fd fcad 	bl	8004f28 <HAL_GetTick>
 80075ce:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b20      	cmp	r3, #32
 80075de:	f040 8172 	bne.w	80078c6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80075e2:	4b93      	ldr	r3, [pc, #588]	@ (8007830 <HAL_I2C_Mem_Read_DMA+0x280>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	08db      	lsrs	r3, r3, #3
 80075e8:	4a92      	ldr	r2, [pc, #584]	@ (8007834 <HAL_I2C_Mem_Read_DMA+0x284>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	0a1a      	lsrs	r2, r3, #8
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009a      	lsls	r2, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	3b01      	subs	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d112      	bne.n	800762e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800762a:	2302      	movs	r3, #2
 800762c:	e14c      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d0df      	beq.n	80075fc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_I2C_Mem_Read_DMA+0x9a>
 8007646:	2302      	movs	r3, #2
 8007648:	e13e      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b01      	cmp	r3, #1
 800765e:	d007      	beq.n	8007670 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2222      	movs	r2, #34	@ 0x22
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2240      	movs	r2, #64	@ 0x40
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800769a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80076a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a62      	ldr	r2, [pc, #392]	@ (8007838 <HAL_I2C_Mem_Read_DMA+0x288>)
 80076b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80076b2:	897a      	ldrh	r2, [r7, #10]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80076b8:	893a      	ldrh	r2, [r7, #8]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80cc 	beq.w	800786c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d02d      	beq.n	8007738 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	4a56      	ldr	r2, [pc, #344]	@ (800783c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80076e2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e8:	4a55      	ldr	r2, [pc, #340]	@ (8007840 <HAL_I2C_Mem_Read_DMA+0x290>)
 80076ea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f0:	2200      	movs	r2, #0
 80076f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007700:	2200      	movs	r2, #0
 8007702:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	2200      	movs	r2, #0
 800770a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3310      	adds	r3, #16
 8007716:	4619      	mov	r1, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771c:	461a      	mov	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007722:	f7fe fb0d 	bl	8005d40 <HAL_DMA_Start_IT>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800772c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 8087 	bne.w	8007844 <HAL_I2C_Mem_Read_DMA+0x294>
 8007736:	e013      	b.n	8007760 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0b3      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007760:	88f8      	ldrh	r0, [r7, #6]
 8007762:	893a      	ldrh	r2, [r7, #8]
 8007764:	8979      	ldrh	r1, [r7, #10]
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	2323      	movs	r3, #35	@ 0x23
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4603      	mov	r3, r0
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f001 fee5 	bl	8009540 <I2C_RequestMemoryRead>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d023      	beq.n	80077c4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fba5 	bl	8005ed0 <HAL_DMA_Abort_IT>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	2200      	movs	r2, #0
 8007792:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077a2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e081      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d108      	bne.n	80077de <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e007      	b.n	80077ee <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ee:	2300      	movs	r3, #0
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800781a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782a:	605a      	str	r2, [r3, #4]
 800782c:	e049      	b.n	80078c2 <HAL_I2C_Mem_Read_DMA+0x312>
 800782e:	bf00      	nop
 8007830:	20000014 	.word	0x20000014
 8007834:	14f8b589 	.word	0x14f8b589
 8007838:	ffff0000 	.word	0xffff0000
 800783c:	08009711 	.word	0x08009711
 8007840:	080098cf 	.word	0x080098cf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007858:	f043 0210 	orr.w	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e02d      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800786c:	88f8      	ldrh	r0, [r7, #6]
 800786e:	893a      	ldrh	r2, [r7, #8]
 8007870:	8979      	ldrh	r1, [r7, #10]
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	2323      	movs	r3, #35	@ 0x23
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4603      	mov	r3, r0
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f001 fe5f 	bl	8009540 <I2C_RequestMemoryRead>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e01d      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078b0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e000      	b.n	80078c8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
  }
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	@ 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	@ 0x28
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	607a      	str	r2, [r7, #4]
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	460b      	mov	r3, r1
 80078de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80078e0:	f7fd fb22 	bl	8004f28 <HAL_GetTick>
 80078e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	f040 8111 	bne.w	8007b1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2319      	movs	r3, #25
 80078fe:	2201      	movs	r2, #1
 8007900:	4988      	ldr	r1, [pc, #544]	@ (8007b24 <HAL_I2C_IsDeviceReady+0x254>)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f002 f8c8 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800790e:	2302      	movs	r3, #2
 8007910:	e104      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_I2C_IsDeviceReady+0x50>
 800791c:	2302      	movs	r3, #2
 800791e:	e0fd      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b01      	cmp	r3, #1
 8007934:	d007      	beq.n	8007946 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2224      	movs	r2, #36	@ 0x24
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4a70      	ldr	r2, [pc, #448]	@ (8007b28 <HAL_I2C_IsDeviceReady+0x258>)
 8007968:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007978:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2200      	movs	r2, #0
 8007982:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f002 f886 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00d      	beq.n	80079ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a0:	d103      	bne.n	80079aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e0b6      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ae:	897b      	ldrh	r3, [r7, #10]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80079bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80079be:	f7fd fab3 	bl	8004f28 <HAL_GetTick>
 80079c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	bf0c      	ite	eq
 80079d2:	2301      	moveq	r3, #1
 80079d4:	2300      	movne	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80079f2:	e025      	b.n	8007a40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079f4:	f7fd fa98 	bl	8004f28 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d302      	bcc.n	8007a0a <HAL_I2C_IsDeviceReady+0x13a>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	22a0      	movs	r2, #160	@ 0xa0
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a4a:	d005      	beq.n	8007a58 <HAL_I2C_IsDeviceReady+0x188>
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <HAL_I2C_IsDeviceReady+0x188>
 8007a52:	7dbb      	ldrb	r3, [r7, #22]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0cd      	beq.n	80079f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d129      	bne.n	8007ac2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2319      	movs	r3, #25
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4921      	ldr	r1, [pc, #132]	@ (8007b24 <HAL_I2C_IsDeviceReady+0x254>)
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f001 fffa 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e036      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e02c      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ad0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ada:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	2319      	movs	r3, #25
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	490f      	ldr	r1, [pc, #60]	@ (8007b24 <HAL_I2C_IsDeviceReady+0x254>)
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f001 ffd6 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e012      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	f4ff af32 	bcc.w	800796a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	00100002 	.word	0x00100002
 8007b28:	ffff0000 	.word	0xffff0000

08007b2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d003      	beq.n	8007b64 <HAL_I2C_EV_IRQHandler+0x38>
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b40      	cmp	r3, #64	@ 0x40
 8007b60:	f040 80c1 	bne.w	8007ce6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10d      	bne.n	8007b9a <HAL_I2C_EV_IRQHandler+0x6e>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007b84:	d003      	beq.n	8007b8e <HAL_I2C_EV_IRQHandler+0x62>
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007b8c:	d101      	bne.n	8007b92 <HAL_I2C_EV_IRQHandler+0x66>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <HAL_I2C_EV_IRQHandler+0x68>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	f000 8132 	beq.w	8007dfe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00c      	beq.n	8007bbe <HAL_I2C_EV_IRQHandler+0x92>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	0a5b      	lsrs	r3, r3, #9
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f002 f9d9 	bl	8009f68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fd8b 	bl	80086d2 <I2C_Master_SB>
 8007bbc:	e092      	b.n	8007ce4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_I2C_EV_IRQHandler+0xb2>
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	0a5b      	lsrs	r3, r3, #9
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fe01 	bl	80087de <I2C_Master_ADD10>
 8007bdc:	e082      	b.n	8007ce4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_I2C_EV_IRQHandler+0xd2>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	0a5b      	lsrs	r3, r3, #9
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fe1b 	bl	8008832 <I2C_Master_ADDR>
 8007bfc:	e072      	b.n	8007ce4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	089b      	lsrs	r3, r3, #2
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d03b      	beq.n	8007c82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c18:	f000 80f3 	beq.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	09db      	lsrs	r3, r3, #7
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00f      	beq.n	8007c48 <HAL_I2C_EV_IRQHandler+0x11c>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	0a9b      	lsrs	r3, r3, #10
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <HAL_I2C_EV_IRQHandler+0x11c>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9df 	bl	8008004 <I2C_MasterTransmit_TXE>
 8007c46:	e04d      	b.n	8007ce4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	089b      	lsrs	r3, r3, #2
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 80d6 	beq.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	0a5b      	lsrs	r3, r3, #9
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 80cf 	beq.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b21      	cmp	r3, #33	@ 0x21
 8007c68:	d103      	bne.n	8007c72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fa66 	bl	800813c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c70:	e0c7      	b.n	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b40      	cmp	r3, #64	@ 0x40
 8007c76:	f040 80c4 	bne.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fad4 	bl	8008228 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c80:	e0bf      	b.n	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c90:	f000 80b7 	beq.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <HAL_I2C_EV_IRQHandler+0x194>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	0a9b      	lsrs	r3, r3, #10
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <HAL_I2C_EV_IRQHandler+0x194>
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	089b      	lsrs	r3, r3, #2
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fb4d 	bl	8008358 <I2C_MasterReceive_RXNE>
 8007cbe:	e011      	b.n	8007ce4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	089b      	lsrs	r3, r3, #2
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 809a 	beq.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	0a5b      	lsrs	r3, r3, #9
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8093 	beq.w	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc03 	bl	80084e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ce2:	e08e      	b.n	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007ce4:	e08d      	b.n	8007e02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	e007      	b.n	8007d08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d012      	beq.n	8007d3a <HAL_I2C_EV_IRQHandler+0x20e>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	0a5b      	lsrs	r3, r3, #9
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007d30:	69b9      	ldr	r1, [r7, #24]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ffcc 	bl	8008cd0 <I2C_Slave_ADDR>
 8007d38:	e066      	b.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_I2C_EV_IRQHandler+0x22e>
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	0a5b      	lsrs	r3, r3, #9
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 f806 	bl	8008d64 <I2C_Slave_STOPF>
 8007d58:	e056      	b.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b21      	cmp	r3, #33	@ 0x21
 8007d5e:	d002      	beq.n	8007d66 <HAL_I2C_EV_IRQHandler+0x23a>
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b29      	cmp	r3, #41	@ 0x29
 8007d64:	d125      	bne.n	8007db2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	09db      	lsrs	r3, r3, #7
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00f      	beq.n	8007d92 <HAL_I2C_EV_IRQHandler+0x266>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	0a9b      	lsrs	r3, r3, #10
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <HAL_I2C_EV_IRQHandler+0x266>
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	089b      	lsrs	r3, r3, #2
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d103      	bne.n	8007d92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fee2 	bl	8008b54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d90:	e039      	b.n	8007e06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	089b      	lsrs	r3, r3, #2
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d033      	beq.n	8007e06 <HAL_I2C_EV_IRQHandler+0x2da>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	0a5b      	lsrs	r3, r3, #9
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d02d      	beq.n	8007e06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 ff0f 	bl	8008bce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db0:	e029      	b.n	8007e06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	099b      	lsrs	r3, r3, #6
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00f      	beq.n	8007dde <HAL_I2C_EV_IRQHandler+0x2b2>
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	0a9b      	lsrs	r3, r3, #10
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_I2C_EV_IRQHandler+0x2b2>
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	089b      	lsrs	r3, r3, #2
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 ff1a 	bl	8008c10 <I2C_SlaveReceive_RXNE>
 8007ddc:	e014      	b.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	089b      	lsrs	r3, r3, #2
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00e      	beq.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	0a5b      	lsrs	r3, r3, #9
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 ff48 	bl	8008c8c <I2C_SlaveReceive_BTF>
 8007dfc:	e004      	b.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007dfe:	bf00      	nop
 8007e00:	e002      	b.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e02:	bf00      	nop
 8007e04:	e000      	b.n	8007e08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b08a      	sub	sp, #40	@ 0x28
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	0a1b      	lsrs	r3, r3, #8
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00e      	beq.n	8007e5c <HAL_I2C_ER_IRQHandler+0x4e>
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	0a5b      	lsrs	r3, r3, #9
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <HAL_I2C_ER_IRQHandler+0x78>
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	f043 0302 	orr.w	r3, r3, #2
 8007e7a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007e84:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	0a9b      	lsrs	r3, r3, #10
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d03f      	beq.n	8007f12 <HAL_I2C_ER_IRQHandler+0x104>
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d039      	beq.n	8007f12 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007e9e:	7efb      	ldrb	r3, [r7, #27]
 8007ea0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007eb8:	7ebb      	ldrb	r3, [r7, #26]
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d112      	bne.n	8007ee4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10f      	bne.n	8007ee4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007ec4:	7cfb      	ldrb	r3, [r7, #19]
 8007ec6:	2b21      	cmp	r3, #33	@ 0x21
 8007ec8:	d008      	beq.n	8007edc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007eca:	7cfb      	ldrb	r3, [r7, #19]
 8007ecc:	2b29      	cmp	r3, #41	@ 0x29
 8007ece:	d005      	beq.n	8007edc <HAL_I2C_ER_IRQHandler+0xce>
 8007ed0:	7cfb      	ldrb	r3, [r7, #19]
 8007ed2:	2b28      	cmp	r3, #40	@ 0x28
 8007ed4:	d106      	bne.n	8007ee4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b21      	cmp	r3, #33	@ 0x21
 8007eda:	d103      	bne.n	8007ee4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 f871 	bl	8008fc4 <I2C_Slave_AF>
 8007ee2:	e016      	b.n	8007f12 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007eec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	f043 0304 	orr.w	r3, r3, #4
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007ef6:	7efb      	ldrb	r3, [r7, #27]
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d002      	beq.n	8007f02 <HAL_I2C_ER_IRQHandler+0xf4>
 8007efc:	7efb      	ldrb	r3, [r7, #27]
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	d107      	bne.n	8007f12 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	0adb      	lsrs	r3, r3, #11
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <HAL_I2C_ER_IRQHandler+0x12e>
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	f043 0308 	orr.w	r3, r3, #8
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007f3a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 f8ac 	bl	80090ac <I2C_ITError>
  }
}
 8007f54:	bf00      	nop
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008012:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800801a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d150      	bne.n	80080cc <I2C_MasterTransmit_TXE+0xc8>
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b21      	cmp	r3, #33	@ 0x21
 800802e:	d14d      	bne.n	80080cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b08      	cmp	r3, #8
 8008034:	d01d      	beq.n	8008072 <I2C_MasterTransmit_TXE+0x6e>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b20      	cmp	r3, #32
 800803a:	d01a      	beq.n	8008072 <I2C_MasterTransmit_TXE+0x6e>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008042:	d016      	beq.n	8008072 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008052:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2211      	movs	r2, #17
 8008058:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff ff76 	bl	8007f5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008070:	e060      	b.n	8008134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008080:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008090:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b40      	cmp	r3, #64	@ 0x40
 80080aa:	d107      	bne.n	80080bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7fc f95b 	bl	8004370 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080ba:	e03b      	b.n	8008134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ff49 	bl	8007f5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080ca:	e033      	b.n	8008134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b21      	cmp	r3, #33	@ 0x21
 80080d0:	d005      	beq.n	80080de <I2C_MasterTransmit_TXE+0xda>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b40      	cmp	r3, #64	@ 0x40
 80080d6:	d12d      	bne.n	8008134 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	2b22      	cmp	r3, #34	@ 0x22
 80080dc:	d12a      	bne.n	8008134 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d108      	bne.n	80080fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80080f8:	e01c      	b.n	8008134 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b40      	cmp	r3, #64	@ 0x40
 8008104:	d103      	bne.n	800810e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f88e 	bl	8008228 <I2C_MemoryTransmit_TXE_BTF>
}
 800810c:	e012      	b.n	8008134 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008132:	e7ff      	b.n	8008134 <I2C_MasterTransmit_TXE+0x130>
 8008134:	bf00      	nop
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b21      	cmp	r3, #33	@ 0x21
 8008154:	d164      	bne.n	8008220 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d012      	beq.n	8008186 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008164:	781a      	ldrb	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008184:	e04c      	b.n	8008220 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d01d      	beq.n	80081c8 <I2C_MasterTransmit_BTF+0x8c>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b20      	cmp	r3, #32
 8008190:	d01a      	beq.n	80081c8 <I2C_MasterTransmit_BTF+0x8c>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008198:	d016      	beq.n	80081c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2211      	movs	r2, #17
 80081ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fecb 	bl	8007f5c <HAL_I2C_MasterTxCpltCallback>
}
 80081c6:	e02b      	b.n	8008220 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b40      	cmp	r3, #64	@ 0x40
 8008200:	d107      	bne.n	8008212 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fc f8b0 	bl	8004370 <HAL_I2C_MemTxCpltCallback>
}
 8008210:	e006      	b.n	8008220 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fe9e 	bl	8007f5c <HAL_I2C_MasterTxCpltCallback>
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008236:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11d      	bne.n	800827c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d10b      	bne.n	8008260 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800824c:	b2da      	uxtb	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008258:	1c9a      	adds	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800825e:	e077      	b.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008264:	b29b      	uxth	r3, r3
 8008266:	121b      	asrs	r3, r3, #8
 8008268:	b2da      	uxtb	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800827a:	e069      	b.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10b      	bne.n	800829c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800829a:	e059      	b.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d152      	bne.n	800834a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2b22      	cmp	r3, #34	@ 0x22
 80082a8:	d10d      	bne.n	80082c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80082c4:	e044      	b.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d015      	beq.n	80082fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b21      	cmp	r3, #33	@ 0x21
 80082d4:	d112      	bne.n	80082fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80082fa:	e029      	b.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d124      	bne.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b21      	cmp	r3, #33	@ 0x21
 800830a:	d121      	bne.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800831a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800832a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fc f814 	bl	8004370 <HAL_I2C_MemTxCpltCallback>
}
 8008348:	e002      	b.n	8008350 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe fb92 	bl	8006a74 <I2C_Flush_DR>
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b22      	cmp	r3, #34	@ 0x22
 800836a:	f040 80b9 	bne.w	80084e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008378:	b29b      	uxth	r3, r3
 800837a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d921      	bls.n	80083c6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	f040 8096 	bne.w	80084e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80083c4:	e08c      	b.n	80084e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d07f      	beq.n	80084ce <I2C_MasterReceive_RXNE+0x176>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d002      	beq.n	80083da <I2C_MasterReceive_RXNE+0x82>
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d179      	bne.n	80084ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fd06 	bl	8009dec <I2C_WaitOnSTOPRequestThroughIT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d14c      	bne.n	8008480 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008404:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b40      	cmp	r3, #64	@ 0x40
 800843e:	d10a      	bne.n	8008456 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fb ffa4 	bl	800439c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008454:	e044      	b.n	80084e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b08      	cmp	r3, #8
 8008462:	d002      	beq.n	800846a <I2C_MasterReceive_RXNE+0x112>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b20      	cmp	r3, #32
 8008468:	d103      	bne.n	8008472 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008470:	e002      	b.n	8008478 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2212      	movs	r2, #18
 8008476:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff fd79 	bl	8007f70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800847e:	e02f      	b.n	80084e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800848e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff fd88 	bl	8007fdc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80084cc:	e008      	b.n	80084e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084dc:	605a      	str	r2, [r3, #4]
}
 80084de:	e7ff      	b.n	80084e0 <I2C_MasterReceive_RXNE+0x188>
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d11b      	bne.n	8008538 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800850e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008536:	e0c8      	b.n	80086ca <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b03      	cmp	r3, #3
 8008540:	d129      	bne.n	8008596 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008550:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d00a      	beq.n	800856e <I2C_MasterReceive_BTF+0x86>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d007      	beq.n	800856e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800856c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008578:	b2d2      	uxtb	r2, r2
 800857a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800858a:	b29b      	uxth	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008594:	e099      	b.n	80086ca <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	f040 8081 	bne.w	80086a4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d002      	beq.n	80085ae <I2C_MasterReceive_BTF+0xc6>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d108      	bne.n	80085c0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e019      	b.n	80085f4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d002      	beq.n	80085cc <I2C_MasterReceive_BTF+0xe4>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d108      	bne.n	80085de <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e00a      	b.n	80085f4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d007      	beq.n	80085f4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008636:	b29b      	uxth	r3, r3
 8008638:	3b01      	subs	r3, #1
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800864e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b40      	cmp	r3, #64	@ 0x40
 8008662:	d10a      	bne.n	800867a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fb fe92 	bl	800439c <HAL_I2C_MemRxCpltCallback>
}
 8008678:	e027      	b.n	80086ca <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b08      	cmp	r3, #8
 8008686:	d002      	beq.n	800868e <I2C_MasterReceive_BTF+0x1a6>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b20      	cmp	r3, #32
 800868c:	d103      	bne.n	8008696 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	@ 0x30
 8008694:	e002      	b.n	800869c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2212      	movs	r2, #18
 800869a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff fc67 	bl	8007f70 <HAL_I2C_MasterRxCpltCallback>
}
 80086a2:	e012      	b.n	80086ca <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d117      	bne.n	8008716 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80086fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008700:	e067      	b.n	80087d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	611a      	str	r2, [r3, #16]
}
 8008714:	e05d      	b.n	80087d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800871e:	d133      	bne.n	8008788 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b21      	cmp	r3, #33	@ 0x21
 800872a:	d109      	bne.n	8008740 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800873c:	611a      	str	r2, [r3, #16]
 800873e:	e008      	b.n	8008752 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <I2C_Master_SB+0x92>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d108      	bne.n	8008776 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008768:	2b00      	cmp	r3, #0
 800876a:	d032      	beq.n	80087d2 <I2C_Master_SB+0x100>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d02d      	beq.n	80087d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008784:	605a      	str	r2, [r3, #4]
}
 8008786:	e024      	b.n	80087d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10e      	bne.n	80087ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008794:	b29b      	uxth	r3, r3
 8008796:	11db      	asrs	r3, r3, #7
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0306 	and.w	r3, r3, #6
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f063 030f 	orn	r3, r3, #15
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	611a      	str	r2, [r3, #16]
}
 80087ac:	e011      	b.n	80087d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d10d      	bne.n	80087d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	11db      	asrs	r3, r3, #7
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0306 	and.w	r3, r3, #6
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f063 030e 	orn	r3, r3, #14
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	611a      	str	r2, [r3, #16]
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d004      	beq.n	8008804 <I2C_Master_ADD10+0x26>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00c      	beq.n	8008826 <I2C_Master_ADD10+0x48>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008824:	605a      	str	r2, [r3, #4]
  }
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008832:	b480      	push	{r7}
 8008834:	b091      	sub	sp, #68	@ 0x44
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008840:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b22      	cmp	r3, #34	@ 0x22
 800885a:	f040 8169 	bne.w	8008b30 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10f      	bne.n	8008886 <I2C_Master_ADDR+0x54>
 8008866:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800886a:	2b40      	cmp	r3, #64	@ 0x40
 800886c:	d10b      	bne.n	8008886 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800886e:	2300      	movs	r3, #0
 8008870:	633b      	str	r3, [r7, #48]	@ 0x30
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	633b      	str	r3, [r7, #48]	@ 0x30
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	633b      	str	r3, [r7, #48]	@ 0x30
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	e160      	b.n	8008b48 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888a:	2b00      	cmp	r3, #0
 800888c:	d11d      	bne.n	80088ca <I2C_Master_ADDR+0x98>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008896:	d118      	bne.n	80088ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008898:	2300      	movs	r3, #0
 800889a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80088c8:	e13e      	b.n	8008b48 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d113      	bne.n	80088fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088d4:	2300      	movs	r3, #0
 80088d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	e115      	b.n	8008b28 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b01      	cmp	r3, #1
 8008904:	f040 808a 	bne.w	8008a1c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800890e:	d137      	bne.n	8008980 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800891e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800892a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800892e:	d113      	bne.n	8008958 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800893e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008940:	2300      	movs	r3, #0
 8008942:	627b      	str	r3, [r7, #36]	@ 0x24
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	627b      	str	r3, [r7, #36]	@ 0x24
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	e0e7      	b.n	8008b28 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008958:	2300      	movs	r3, #0
 800895a:	623b      	str	r3, [r7, #32]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	623b      	str	r3, [r7, #32]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	623b      	str	r3, [r7, #32]
 800896c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	e0d3      	b.n	8008b28 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008982:	2b08      	cmp	r3, #8
 8008984:	d02e      	beq.n	80089e4 <I2C_Master_ADDR+0x1b2>
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2b20      	cmp	r3, #32
 800898a:	d02b      	beq.n	80089e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	2b12      	cmp	r3, #18
 8008990:	d102      	bne.n	8008998 <I2C_Master_ADDR+0x166>
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	2b01      	cmp	r3, #1
 8008996:	d125      	bne.n	80089e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	2b04      	cmp	r3, #4
 800899c:	d00e      	beq.n	80089bc <I2C_Master_ADDR+0x18a>
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d00b      	beq.n	80089bc <I2C_Master_ADDR+0x18a>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	2b10      	cmp	r3, #16
 80089a8:	d008      	beq.n	80089bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e007      	b.n	80089cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80089ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089cc:	2300      	movs	r3, #0
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	e0a1      	b.n	8008b28 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089f4:	2300      	movs	r3, #0
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	61bb      	str	r3, [r7, #24]
 8008a08:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e085      	b.n	8008b28 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d14d      	bne.n	8008ac2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d016      	beq.n	8008a5a <I2C_Master_ADDR+0x228>
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d013      	beq.n	8008a5a <I2C_Master_ADDR+0x228>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d010      	beq.n	8008a5a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a46:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	e007      	b.n	8008a6a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a68:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a78:	d117      	bne.n	8008aaa <I2C_Master_ADDR+0x278>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a80:	d00b      	beq.n	8008a9a <I2C_Master_ADDR+0x268>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d008      	beq.n	8008a9a <I2C_Master_ADDR+0x268>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d005      	beq.n	8008a9a <I2C_Master_ADDR+0x268>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d002      	beq.n	8008a9a <I2C_Master_ADDR+0x268>
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	d107      	bne.n	8008aaa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008aa8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	617b      	str	r3, [r7, #20]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	e032      	b.n	8008b28 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ad0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ae0:	d117      	bne.n	8008b12 <I2C_Master_ADDR+0x2e0>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ae8:	d00b      	beq.n	8008b02 <I2C_Master_ADDR+0x2d0>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d008      	beq.n	8008b02 <I2C_Master_ADDR+0x2d0>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d005      	beq.n	8008b02 <I2C_Master_ADDR+0x2d0>
 8008af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af8:	2b10      	cmp	r3, #16
 8008afa:	d002      	beq.n	8008b02 <I2C_Master_ADDR+0x2d0>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d107      	bne.n	8008b12 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	613b      	str	r3, [r7, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008b2e:	e00b      	b.n	8008b48 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
}
 8008b46:	e7ff      	b.n	8008b48 <I2C_Master_ADDR+0x316>
 8008b48:	bf00      	nop
 8008b4a:	3744      	adds	r7, #68	@ 0x44
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d02b      	beq.n	8008bc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d114      	bne.n	8008bc6 <I2C_SlaveTransmit_TXE+0x72>
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	2b29      	cmp	r3, #41	@ 0x29
 8008ba0:	d111      	bne.n	8008bc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2221      	movs	r2, #33	@ 0x21
 8008bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2228      	movs	r2, #40	@ 0x28
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff f9df 	bl	8007f84 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d011      	beq.n	8008c04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d02c      	beq.n	8008c84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d114      	bne.n	8008c84 <I2C_SlaveReceive_RXNE+0x74>
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c5e:	d111      	bne.n	8008c84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2222      	movs	r2, #34	@ 0x22
 8008c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2228      	movs	r2, #40	@ 0x28
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff f98a 	bl	8007f98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008c84:	bf00      	nop
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d012      	beq.n	8008cc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca8:	b2d2      	uxtb	r2, r2
 8008caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008cea:	2b28      	cmp	r3, #40	@ 0x28
 8008cec:	d127      	bne.n	8008d3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cfc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	089b      	lsrs	r3, r3, #2
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	09db      	lsrs	r3, r3, #7
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d103      	bne.n	8008d22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	81bb      	strh	r3, [r7, #12]
 8008d20:	e002      	b.n	8008d28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008d30:	89ba      	ldrh	r2, [r7, #12]
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff f938 	bl	8007fac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008d3c:	e00e      	b.n	8008d5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	60bb      	str	r3, [r7, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	60bb      	str	r3, [r7, #8]
 8008d52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008d84:	2300      	movs	r3, #0
 8008d86:	60bb      	str	r3, [r7, #8]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	60bb      	str	r3, [r7, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008db0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dc0:	d172      	bne.n	8008ea8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	2b22      	cmp	r3, #34	@ 0x22
 8008dc6:	d002      	beq.n	8008dce <I2C_Slave_STOPF+0x6a>
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dcc:	d135      	bne.n	8008e3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	f043 0204 	orr.w	r2, r3, #4
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fd fa0e 	bl	8006228 <HAL_DMA_GetState>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d049      	beq.n	8008ea6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e16:	4a69      	ldr	r2, [pc, #420]	@ (8008fbc <I2C_Slave_STOPF+0x258>)
 8008e18:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fd f856 	bl	8005ed0 <HAL_DMA_Abort_IT>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d03d      	beq.n	8008ea6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e38:	e035      	b.n	8008ea6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	f043 0204 	orr.w	r2, r3, #4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fd f9d8 	bl	8006228 <HAL_DMA_GetState>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d014      	beq.n	8008ea8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e82:	4a4e      	ldr	r2, [pc, #312]	@ (8008fbc <I2C_Slave_STOPF+0x258>)
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fd f820 	bl	8005ed0 <HAL_DMA_Abort_IT>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	e000      	b.n	8008ea8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ea6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d03e      	beq.n	8008f30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d112      	bne.n	8008ee6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	d112      	bne.n	8008f1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691a      	ldr	r2, [r3, #16]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	f043 0204 	orr.w	r2, r3, #4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8b7 	bl	80090ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008f3e:	e039      	b.n	8008fb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f44:	d109      	bne.n	8008f5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2228      	movs	r2, #40	@ 0x28
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff f81f 	bl	8007f98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b28      	cmp	r3, #40	@ 0x28
 8008f64:	d111      	bne.n	8008f8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a15      	ldr	r2, [pc, #84]	@ (8008fc0 <I2C_Slave_STOPF+0x25c>)
 8008f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7ff f820 	bl	8007fc8 <HAL_I2C_ListenCpltCallback>
}
 8008f88:	e014      	b.n	8008fb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8e:	2b22      	cmp	r3, #34	@ 0x22
 8008f90:	d002      	beq.n	8008f98 <I2C_Slave_STOPF+0x234>
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b22      	cmp	r3, #34	@ 0x22
 8008f96:	d10d      	bne.n	8008fb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7fe fff2 	bl	8007f98 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fb4:	bf00      	nop
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	08009949 	.word	0x08009949
 8008fc0:	ffff0000 	.word	0xffff0000

08008fc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d002      	beq.n	8008fe6 <I2C_Slave_AF+0x22>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d129      	bne.n	800903a <I2C_Slave_AF+0x76>
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	2b28      	cmp	r3, #40	@ 0x28
 8008fea:	d126      	bne.n	800903a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a2e      	ldr	r2, [pc, #184]	@ (80090a8 <I2C_Slave_AF+0xe4>)
 8008ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009000:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800900a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800901a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fe ffc8 	bl	8007fc8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009038:	e031      	b.n	800909e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	2b21      	cmp	r3, #33	@ 0x21
 800903e:	d129      	bne.n	8009094 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a19      	ldr	r2, [pc, #100]	@ (80090a8 <I2C_Slave_AF+0xe4>)
 8009044:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2221      	movs	r2, #33	@ 0x21
 800904a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800906a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009074:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009084:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fd fcf4 	bl	8006a74 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7fe ff79 	bl	8007f84 <HAL_I2C_SlaveTxCpltCallback>
}
 8009092:	e004      	b.n	800909e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800909c:	615a      	str	r2, [r3, #20]
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	ffff0000 	.word	0xffff0000

080090ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	2b10      	cmp	r3, #16
 80090c8:	d002      	beq.n	80090d0 <I2C_ITError+0x24>
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b40      	cmp	r3, #64	@ 0x40
 80090ce:	d10a      	bne.n	80090e6 <I2C_ITError+0x3a>
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b22      	cmp	r3, #34	@ 0x22
 80090d4:	d107      	bne.n	80090e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80090ec:	2b28      	cmp	r3, #40	@ 0x28
 80090ee:	d107      	bne.n	8009100 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2228      	movs	r2, #40	@ 0x28
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80090fe:	e015      	b.n	800912c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800910a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800910e:	d00a      	beq.n	8009126 <I2C_ITError+0x7a>
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	2b60      	cmp	r3, #96	@ 0x60
 8009114:	d007      	beq.n	8009126 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800913a:	d162      	bne.n	8009202 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800914a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b01      	cmp	r3, #1
 8009158:	d020      	beq.n	800919c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800915e:	4a6a      	ldr	r2, [pc, #424]	@ (8009308 <I2C_ITError+0x25c>)
 8009160:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009166:	4618      	mov	r0, r3
 8009168:	f7fc feb2 	bl	8005ed0 <HAL_DMA_Abort_IT>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 8089 	beq.w	8009286 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0201 	bic.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009196:	4610      	mov	r0, r2
 8009198:	4798      	blx	r3
 800919a:	e074      	b.n	8009286 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a0:	4a59      	ldr	r2, [pc, #356]	@ (8009308 <I2C_ITError+0x25c>)
 80091a2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fc fe91 	bl	8005ed0 <HAL_DMA_Abort_IT>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d068      	beq.n	8009286 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091be:	2b40      	cmp	r3, #64	@ 0x40
 80091c0:	d10b      	bne.n	80091da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80091fc:	4610      	mov	r0, r2
 80091fe:	4798      	blx	r3
 8009200:	e041      	b.n	8009286 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b60      	cmp	r3, #96	@ 0x60
 800920c:	d125      	bne.n	800925a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2220      	movs	r2, #32
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009226:	2b40      	cmp	r3, #64	@ 0x40
 8009228:	d10b      	bne.n	8009242 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0201 	bic.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fe fecc 	bl	8007ff0 <HAL_I2C_AbortCpltCallback>
 8009258:	e015      	b.n	8009286 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009264:	2b40      	cmp	r3, #64	@ 0x40
 8009266:	d10b      	bne.n	8009280 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7fe feab 	bl	8007fdc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10e      	bne.n	80092b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d104      	bne.n	80092b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d007      	beq.n	80092c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80092c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d113      	bne.n	8009300 <I2C_ITError+0x254>
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b28      	cmp	r3, #40	@ 0x28
 80092dc:	d110      	bne.n	8009300 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a0a      	ldr	r2, [pc, #40]	@ (800930c <I2C_ITError+0x260>)
 80092e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fe fe64 	bl	8007fc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	08009949 	.word	0x08009949
 800930c:	ffff0000 	.word	0xffff0000

08009310 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af02      	add	r7, sp, #8
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	607a      	str	r2, [r7, #4]
 800931a:	603b      	str	r3, [r7, #0]
 800931c:	460b      	mov	r3, r1
 800931e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009324:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b08      	cmp	r3, #8
 800932a:	d006      	beq.n	800933a <I2C_MasterRequestWrite+0x2a>
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d003      	beq.n	800933a <I2C_MasterRequestWrite+0x2a>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009338:	d108      	bne.n	800934c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e00b      	b.n	8009364 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009350:	2b12      	cmp	r3, #18
 8009352:	d107      	bne.n	8009364 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009362:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fb91 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00d      	beq.n	8009398 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800938a:	d103      	bne.n	8009394 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009392:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e035      	b.n	8009404 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093a0:	d108      	bne.n	80093b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093a2:	897b      	ldrh	r3, [r7, #10]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80093b0:	611a      	str	r2, [r3, #16]
 80093b2:	e01b      	b.n	80093ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80093b4:	897b      	ldrh	r3, [r7, #10]
 80093b6:	11db      	asrs	r3, r3, #7
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 0306 	and.w	r3, r3, #6
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f063 030f 	orn	r3, r3, #15
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	490e      	ldr	r1, [pc, #56]	@ (800940c <I2C_MasterRequestWrite+0xfc>)
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fbda 	bl	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e010      	b.n	8009404 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80093e2:	897b      	ldrh	r3, [r7, #10]
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4907      	ldr	r1, [pc, #28]	@ (8009410 <I2C_MasterRequestWrite+0x100>)
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fbca 	bl	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	00010008 	.word	0x00010008
 8009410:	00010002 	.word	0x00010002

08009414 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	4608      	mov	r0, r1
 800941e:	4611      	mov	r1, r2
 8009420:	461a      	mov	r2, r3
 8009422:	4603      	mov	r3, r0
 8009424:	817b      	strh	r3, [r7, #10]
 8009426:	460b      	mov	r3, r1
 8009428:	813b      	strh	r3, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800943c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	2200      	movs	r2, #0
 8009446:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 fb24 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00d      	beq.n	8009472 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009464:	d103      	bne.n	800946e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800946c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e05f      	b.n	8009532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009472:	897b      	ldrh	r3, [r7, #10]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	461a      	mov	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	6a3a      	ldr	r2, [r7, #32]
 8009486:	492d      	ldr	r1, [pc, #180]	@ (800953c <I2C_RequestMemoryWrite+0x128>)
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 fb7f 	bl	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e04c      	b.n	8009532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009498:	2300      	movs	r3, #0
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b0:	6a39      	ldr	r1, [r7, #32]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fc0a 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00d      	beq.n	80094da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d107      	bne.n	80094d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e02b      	b.n	8009532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094da:	88fb      	ldrh	r3, [r7, #6]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d105      	bne.n	80094ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094e0:	893b      	ldrh	r3, [r7, #8]
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	611a      	str	r2, [r3, #16]
 80094ea:	e021      	b.n	8009530 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80094ec:	893b      	ldrh	r3, [r7, #8]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094fc:	6a39      	ldr	r1, [r7, #32]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fbe4 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00d      	beq.n	8009526 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	2b04      	cmp	r3, #4
 8009510:	d107      	bne.n	8009522 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e005      	b.n	8009532 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009526:	893b      	ldrh	r3, [r7, #8]
 8009528:	b2da      	uxtb	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	00010002 	.word	0x00010002

08009540 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af02      	add	r7, sp, #8
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	461a      	mov	r2, r3
 800954e:	4603      	mov	r3, r0
 8009550:	817b      	strh	r3, [r7, #10]
 8009552:	460b      	mov	r3, r1
 8009554:	813b      	strh	r3, [r7, #8]
 8009556:	4613      	mov	r3, r2
 8009558:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009568:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	2200      	movs	r2, #0
 8009582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fa86 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00d      	beq.n	80095ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800959c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a0:	d103      	bne.n	80095aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e0aa      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095ae:	897b      	ldrh	r3, [r7, #10]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80095bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c0:	6a3a      	ldr	r2, [r7, #32]
 80095c2:	4952      	ldr	r1, [pc, #328]	@ (800970c <I2C_RequestMemoryRead+0x1cc>)
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 fae1 	bl	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e097      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095ec:	6a39      	ldr	r1, [r7, #32]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 fb6c 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00d      	beq.n	8009616 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d107      	bne.n	8009612 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e076      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d105      	bne.n	8009628 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800961c:	893b      	ldrh	r3, [r7, #8]
 800961e:	b2da      	uxtb	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	611a      	str	r2, [r3, #16]
 8009626:	e021      	b.n	800966c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009628:	893b      	ldrh	r3, [r7, #8]
 800962a:	0a1b      	lsrs	r3, r3, #8
 800962c:	b29b      	uxth	r3, r3
 800962e:	b2da      	uxtb	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009638:	6a39      	ldr	r1, [r7, #32]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fb46 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00d      	beq.n	8009662 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964a:	2b04      	cmp	r3, #4
 800964c:	d107      	bne.n	800965e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800965c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e050      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009662:	893b      	ldrh	r3, [r7, #8]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800966c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966e:	6a39      	ldr	r1, [r7, #32]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 fb2b 	bl	8009ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00d      	beq.n	8009698 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009680:	2b04      	cmp	r3, #4
 8009682:	d107      	bne.n	8009694 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e035      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 f9ef 	bl	8009a98 <I2C_WaitOnFlagUntilTimeout>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00d      	beq.n	80096dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ce:	d103      	bne.n	80096d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e013      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80096dc:	897b      	ldrh	r3, [r7, #10]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	6a3a      	ldr	r2, [r7, #32]
 80096f0:	4906      	ldr	r1, [pc, #24]	@ (800970c <I2C_RequestMemoryRead+0x1cc>)
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fa4a 	bl	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	00010002 	.word	0x00010002

08009710 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009724:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800972c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009732:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009742:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009750:	2200      	movs	r2, #0
 8009752:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009760:	2200      	movs	r2, #0
 8009762:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009764:	7cfb      	ldrb	r3, [r7, #19]
 8009766:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800976a:	2b21      	cmp	r3, #33	@ 0x21
 800976c:	d007      	beq.n	800977e <I2C_DMAXferCplt+0x6e>
 800976e:	7cfb      	ldrb	r3, [r7, #19]
 8009770:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8009774:	2b22      	cmp	r3, #34	@ 0x22
 8009776:	d131      	bne.n	80097dc <I2C_DMAXferCplt+0xcc>
 8009778:	7cbb      	ldrb	r3, [r7, #18]
 800977a:	2b20      	cmp	r3, #32
 800977c:	d12e      	bne.n	80097dc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800978c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2200      	movs	r2, #0
 8009792:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009794:	7cfb      	ldrb	r3, [r7, #19]
 8009796:	2b29      	cmp	r3, #41	@ 0x29
 8009798:	d10a      	bne.n	80097b0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2221      	movs	r2, #33	@ 0x21
 800979e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2228      	movs	r2, #40	@ 0x28
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80097a8:	6978      	ldr	r0, [r7, #20]
 80097aa:	f7fe fbeb 	bl	8007f84 <HAL_I2C_SlaveTxCpltCallback>
 80097ae:	e00c      	b.n	80097ca <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80097b0:	7cfb      	ldrb	r3, [r7, #19]
 80097b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b4:	d109      	bne.n	80097ca <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2222      	movs	r2, #34	@ 0x22
 80097ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2228      	movs	r2, #40	@ 0x28
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80097c4:	6978      	ldr	r0, [r7, #20]
 80097c6:	f7fe fbe7 	bl	8007f98 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80097d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80097da:	e074      	b.n	80098c6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d06e      	beq.n	80098c6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d107      	bne.n	8009802 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009800:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009810:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009818:	d009      	beq.n	800982e <I2C_DMAXferCplt+0x11e>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d006      	beq.n	800982e <I2C_DMAXferCplt+0x11e>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009826:	d002      	beq.n	800982e <I2C_DMAXferCplt+0x11e>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b20      	cmp	r3, #32
 800982c:	d107      	bne.n	800983e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800983c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800984c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800985c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2200      	movs	r2, #0
 8009862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	f7fe fbb5 	bl	8007fdc <HAL_I2C_ErrorCallback>
}
 8009872:	e028      	b.n	80098c6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b40      	cmp	r3, #64	@ 0x40
 8009886:	d10a      	bne.n	800989e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2200      	movs	r2, #0
 8009894:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009896:	6978      	ldr	r0, [r7, #20]
 8009898:	f7fa fd80 	bl	800439c <HAL_I2C_MemRxCpltCallback>
}
 800989c:	e013      	b.n	80098c6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d002      	beq.n	80098b2 <I2C_DMAXferCplt+0x1a2>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d103      	bne.n	80098ba <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80098b8:	e002      	b.n	80098c0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2212      	movs	r2, #18
 80098be:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80098c0:	6978      	ldr	r0, [r7, #20]
 80098c2:	f7fe fb55 	bl	8007f70 <HAL_I2C_MasterRxCpltCallback>
}
 80098c6:	bf00      	nop
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098da:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e8:	2200      	movs	r2, #0
 80098ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f8:	2200      	movs	r2, #0
 80098fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7fc fca1 	bl	8006244 <HAL_DMA_GetError>
 8009902:	4603      	mov	r3, r0
 8009904:	2b02      	cmp	r3, #2
 8009906:	d01b      	beq.n	8009940 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009916:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009932:	f043 0210 	orr.w	r2, r3, #16
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7fe fb4e 	bl	8007fdc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009940:	bf00      	nop
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009958:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009960:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009962:	4b4b      	ldr	r3, [pc, #300]	@ (8009a90 <I2C_DMAAbort+0x148>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	08db      	lsrs	r3, r3, #3
 8009968:	4a4a      	ldr	r2, [pc, #296]	@ (8009a94 <I2C_DMAAbort+0x14c>)
 800996a:	fba2 2303 	umull	r2, r3, r2, r3
 800996e:	0a1a      	lsrs	r2, r3, #8
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	00da      	lsls	r2, r3, #3
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009986:	f043 0220 	orr.w	r2, r3, #32
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800998e:	e00a      	b.n	80099a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3b01      	subs	r3, #1
 8009994:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a4:	d0ea      	beq.n	800997c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099b2:	2200      	movs	r2, #0
 80099b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	2200      	movs	r2, #0
 80099c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2200      	movs	r2, #0
 80099da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e8:	2200      	movs	r2, #0
 80099ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f8:	2200      	movs	r2, #0
 80099fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 0201 	bic.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b60      	cmp	r3, #96	@ 0x60
 8009a16:	d10e      	bne.n	8009a36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	f7fe fade 	bl	8007ff0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009a34:	e027      	b.n	8009a86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a36:	7cfb      	ldrb	r3, [r7, #19]
 8009a38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a3c:	2b28      	cmp	r3, #40	@ 0x28
 8009a3e:	d117      	bne.n	8009a70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0201 	orr.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009a5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2200      	movs	r2, #0
 8009a64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2228      	movs	r2, #40	@ 0x28
 8009a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009a6e:	e007      	b.n	8009a80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009a80:	6978      	ldr	r0, [r7, #20]
 8009a82:	f7fe faab 	bl	8007fdc <HAL_I2C_ErrorCallback>
}
 8009a86:	bf00      	nop
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000014 	.word	0x20000014
 8009a94:	14f8b589 	.word	0x14f8b589

08009a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009aa8:	e048      	b.n	8009b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab0:	d044      	beq.n	8009b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ab2:	f7fb fa39 	bl	8004f28 <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d302      	bcc.n	8009ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d139      	bne.n	8009b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	0c1b      	lsrs	r3, r3, #16
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d10d      	bne.n	8009aee <I2C_WaitOnFlagUntilTimeout+0x56>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	43da      	mvns	r2, r3
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4013      	ands	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bf0c      	ite	eq
 8009ae4:	2301      	moveq	r3, #1
 8009ae6:	2300      	movne	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	e00c      	b.n	8009b08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	43da      	mvns	r2, r3
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	4013      	ands	r3, r2
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bf0c      	ite	eq
 8009b00:	2301      	moveq	r3, #1
 8009b02:	2300      	movne	r3, #0
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d116      	bne.n	8009b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b28:	f043 0220 	orr.w	r2, r3, #32
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e023      	b.n	8009b84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	0c1b      	lsrs	r3, r3, #16
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10d      	bne.n	8009b62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	43da      	mvns	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	4013      	ands	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bf0c      	ite	eq
 8009b58:	2301      	moveq	r3, #1
 8009b5a:	2300      	movne	r3, #0
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	e00c      	b.n	8009b7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	43da      	mvns	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	bf0c      	ite	eq
 8009b74:	2301      	moveq	r3, #1
 8009b76:	2300      	movne	r3, #0
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d093      	beq.n	8009aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b9a:	e071      	b.n	8009c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009baa:	d123      	bne.n	8009bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be0:	f043 0204 	orr.w	r2, r3, #4
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e067      	b.n	8009cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d041      	beq.n	8009c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bfc:	f7fb f994 	bl	8004f28 <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d302      	bcc.n	8009c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d136      	bne.n	8009c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d10c      	bne.n	8009c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	43da      	mvns	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4013      	ands	r3, r2
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bf14      	ite	ne
 8009c2e:	2301      	movne	r3, #1
 8009c30:	2300      	moveq	r3, #0
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	e00b      	b.n	8009c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	43da      	mvns	r2, r3
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4013      	ands	r3, r2
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bf14      	ite	ne
 8009c48:	2301      	movne	r3, #1
 8009c4a:	2300      	moveq	r3, #0
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6c:	f043 0220 	orr.w	r2, r3, #32
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e021      	b.n	8009cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	0c1b      	lsrs	r3, r3, #16
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d10c      	bne.n	8009ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	43da      	mvns	r2, r3
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4013      	ands	r3, r2
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bf14      	ite	ne
 8009c9c:	2301      	movne	r3, #1
 8009c9e:	2300      	moveq	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	e00b      	b.n	8009cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	43da      	mvns	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	bf14      	ite	ne
 8009cb6:	2301      	movne	r3, #1
 8009cb8:	2300      	moveq	r3, #0
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f af6d 	bne.w	8009b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cd8:	e034      	b.n	8009d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 f915 	bl	8009f0a <I2C_IsAcknowledgeFailed>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e034      	b.n	8009d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf0:	d028      	beq.n	8009d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf2:	f7fb f919 	bl	8004f28 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d302      	bcc.n	8009d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11d      	bne.n	8009d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d12:	2b80      	cmp	r3, #128	@ 0x80
 8009d14:	d016      	beq.n	8009d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d30:	f043 0220 	orr.w	r2, r3, #32
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e007      	b.n	8009d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d4e:	2b80      	cmp	r3, #128	@ 0x80
 8009d50:	d1c3      	bne.n	8009cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d68:	e034      	b.n	8009dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f8cd 	bl	8009f0a <I2C_IsAcknowledgeFailed>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e034      	b.n	8009de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d80:	d028      	beq.n	8009dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d82:	f7fb f8d1 	bl	8004f28 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d302      	bcc.n	8009d98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d11d      	bne.n	8009dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	f003 0304 	and.w	r3, r3, #4
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d016      	beq.n	8009dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc0:	f043 0220 	orr.w	r2, r3, #32
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e007      	b.n	8009de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d1c3      	bne.n	8009d6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009df8:	4b13      	ldr	r3, [pc, #76]	@ (8009e48 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	08db      	lsrs	r3, r3, #3
 8009dfe:	4a13      	ldr	r2, [pc, #76]	@ (8009e4c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009e00:	fba2 2303 	umull	r2, r3, r2, r3
 8009e04:	0a1a      	lsrs	r2, r3, #8
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d107      	bne.n	8009e2a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1e:	f043 0220 	orr.w	r2, r3, #32
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e008      	b.n	8009e3c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e38:	d0e9      	beq.n	8009e0e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	20000014 	.word	0x20000014
 8009e4c:	14f8b589 	.word	0x14f8b589

08009e50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e5c:	e049      	b.n	8009ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b10      	cmp	r3, #16
 8009e6a:	d119      	bne.n	8009ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f06f 0210 	mvn.w	r2, #16
 8009e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e030      	b.n	8009f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea0:	f7fb f842 	bl	8004f28 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d302      	bcc.n	8009eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d11d      	bne.n	8009ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec0:	2b40      	cmp	r3, #64	@ 0x40
 8009ec2:	d016      	beq.n	8009ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ede:	f043 0220 	orr.w	r2, r3, #32
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e007      	b.n	8009f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009efc:	2b40      	cmp	r3, #64	@ 0x40
 8009efe:	d1ae      	bne.n	8009e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f20:	d11b      	bne.n	8009f5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009f2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f46:	f043 0204 	orr.w	r2, r3, #4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e000      	b.n	8009f5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009f78:	d103      	bne.n	8009f82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f80:	e007      	b.n	8009f92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f86:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009f8a:	d102      	bne.n	8009f92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2208      	movs	r2, #8
 8009f90:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af02      	add	r7, sp, #8
 8009fa4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e101      	b.n	800a1b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d106      	bne.n	8009fd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f007 fba6 	bl	801171c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fde:	d102      	bne.n	8009fe6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f003 ff21 	bl	800de32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7c1a      	ldrb	r2, [r3, #16]
 8009ff8:	f88d 2000 	strb.w	r2, [sp]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a000:	f003 fe00 	bl	800dc04 <USB_CoreInit>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e0ce      	b.n	800a1b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2100      	movs	r1, #0
 800a01c:	4618      	mov	r0, r3
 800a01e:	f003 ff19 	bl	800de54 <USB_SetCurrentMode>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e0bf      	b.n	800a1b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
 800a038:	e04a      	b.n	800a0d0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a03a:	7bfa      	ldrb	r2, [r7, #15]
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	4613      	mov	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	3315      	adds	r3, #21
 800a04a:	2201      	movs	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a04e:	7bfa      	ldrb	r2, [r7, #15]
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	00db      	lsls	r3, r3, #3
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	3314      	adds	r3, #20
 800a05e:	7bfa      	ldrb	r2, [r7, #15]
 800a060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a062:	7bfa      	ldrb	r2, [r7, #15]
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	b298      	uxth	r0, r3
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	440b      	add	r3, r1
 800a074:	332e      	adds	r3, #46	@ 0x2e
 800a076:	4602      	mov	r2, r0
 800a078:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a07a:	7bfa      	ldrb	r2, [r7, #15]
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	4613      	mov	r3, r2
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	440b      	add	r3, r1
 800a088:	3318      	adds	r3, #24
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a08e:	7bfa      	ldrb	r2, [r7, #15]
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	4613      	mov	r3, r2
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	331c      	adds	r3, #28
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a0a2:	7bfa      	ldrb	r2, [r7, #15]
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3320      	adds	r3, #32
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a0b6:	7bfa      	ldrb	r2, [r7, #15]
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	3324      	adds	r3, #36	@ 0x24
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	791b      	ldrb	r3, [r3, #4]
 800a0d4:	7bfa      	ldrb	r2, [r7, #15]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d3af      	bcc.n	800a03a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
 800a0de:	e044      	b.n	800a16a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a0e0:	7bfa      	ldrb	r2, [r7, #15]
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a0f6:	7bfa      	ldrb	r2, [r7, #15]
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	440b      	add	r3, r1
 800a104:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a108:	7bfa      	ldrb	r2, [r7, #15]
 800a10a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a10c:	7bfa      	ldrb	r2, [r7, #15]
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	4613      	mov	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a122:	7bfa      	ldrb	r2, [r7, #15]
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	4613      	mov	r3, r2
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	440b      	add	r3, r1
 800a130:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a138:	7bfa      	ldrb	r2, [r7, #15]
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a14e:	7bfa      	ldrb	r2, [r7, #15]
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	4413      	add	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	440b      	add	r3, r1
 800a15c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a160:	2200      	movs	r2, #0
 800a162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	3301      	adds	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	791b      	ldrb	r3, [r3, #4]
 800a16e:	7bfa      	ldrb	r2, [r7, #15]
 800a170:	429a      	cmp	r2, r3
 800a172:	d3b5      	bcc.n	800a0e0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	7c1a      	ldrb	r2, [r3, #16]
 800a17c:	f88d 2000 	strb.w	r2, [sp]
 800a180:	3304      	adds	r3, #4
 800a182:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a184:	f003 feb2 	bl	800deec <USB_DevInit>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2202      	movs	r2, #2
 800a192:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e00c      	b.n	800a1b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f004 fefc 	bl	800efaa <USB_DevDisconnect>

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d101      	bne.n	800a1d8 <HAL_PCD_Start+0x1c>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e022      	b.n	800a21e <HAL_PCD_Start+0x62>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d009      	beq.n	800a200 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d105      	bne.n	800a200 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f003 fe03 	bl	800de10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f004 feaa 	bl	800ef68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a226:	b590      	push	{r4, r7, lr}
 800a228:	b08d      	sub	sp, #52	@ 0x34
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f004 ff68 	bl	800f112 <USB_GetMode>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	f040 848c 	bne.w	800ab62 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f004 fecc 	bl	800efec <USB_ReadInterrupts>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8482 	beq.w	800ab60 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f004 feb9 	bl	800efec <USB_ReadInterrupts>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b02      	cmp	r3, #2
 800a282:	d107      	bne.n	800a294 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	695a      	ldr	r2, [r3, #20]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f002 0202 	and.w	r2, r2, #2
 800a292:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4618      	mov	r0, r3
 800a29a:	f004 fea7 	bl	800efec <USB_ReadInterrupts>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b10      	cmp	r3, #16
 800a2a6:	d161      	bne.n	800a36c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 0210 	bic.w	r2, r2, #16
 800a2b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	f003 020f 	and.w	r2, r3, #15
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a2de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2e2:	d124      	bne.n	800a32e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d035      	beq.n	800a35c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	091b      	lsrs	r3, r3, #4
 800a2f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a2fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	461a      	mov	r2, r3
 800a302:	6a38      	ldr	r0, [r7, #32]
 800a304:	f004 fcde 	bl	800ecc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	091b      	lsrs	r3, r3, #4
 800a310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a314:	441a      	add	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	695a      	ldr	r2, [r3, #20]
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	091b      	lsrs	r3, r3, #4
 800a322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a326:	441a      	add	r2, r3
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	615a      	str	r2, [r3, #20]
 800a32c:	e016      	b.n	800a35c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a334:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a338:	d110      	bne.n	800a35c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a340:	2208      	movs	r2, #8
 800a342:	4619      	mov	r1, r3
 800a344:	6a38      	ldr	r0, [r7, #32]
 800a346:	f004 fcbd 	bl	800ecc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	695a      	ldr	r2, [r3, #20]
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	091b      	lsrs	r3, r3, #4
 800a352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a356:	441a      	add	r2, r3
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0210 	orr.w	r2, r2, #16
 800a36a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f004 fe3b 	bl	800efec <USB_ReadInterrupts>
 800a376:	4603      	mov	r3, r0
 800a378:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a37c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a380:	f040 80a7 	bne.w	800a4d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a384:	2300      	movs	r3, #0
 800a386:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f004 fe40 	bl	800f012 <USB_ReadDevAllOutEpInterrupt>
 800a392:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a394:	e099      	b.n	800a4ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 808e 	beq.w	800a4be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f004 fe64 	bl	800f07a <USB_ReadDevOutEPInterrupt>
 800a3b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00c      	beq.n	800a3d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a3d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fea4 	bl	800b120 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00c      	beq.n	800a3fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a3f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 ff7a 	bl	800b2f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f003 0310 	and.w	r3, r3, #16
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a412:	461a      	mov	r2, r3
 800a414:	2310      	movs	r3, #16
 800a416:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d030      	beq.n	800a484 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42a:	2b80      	cmp	r3, #128	@ 0x80
 800a42c:	d109      	bne.n	800a442 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a43c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a440:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	3304      	adds	r3, #4
 800a456:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	78db      	ldrb	r3, [r3, #3]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d108      	bne.n	800a472 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2200      	movs	r2, #0
 800a464:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f007 fa51 	bl	8011914 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47e:	461a      	mov	r2, r3
 800a480:	2302      	movs	r3, #2
 800a482:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	461a      	mov	r2, r3
 800a49c:	2320      	movs	r3, #32
 800a49e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d009      	beq.n	800a4be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a4bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	085b      	lsrs	r3, r3, #1
 800a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f47f af62 	bne.w	800a396 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f004 fd88 	bl	800efec <USB_ReadInterrupts>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4e6:	f040 80db 	bne.w	800a6a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f004 fda9 	bl	800f046 <USB_ReadDevAllInEpInterrupt>
 800a4f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a4fa:	e0cd      	b.n	800a698 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 80c2 	beq.w	800a68c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f004 fdcf 	bl	800f0b6 <USB_ReadDevInEPInterrupt>
 800a518:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d057      	beq.n	800a5d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	2201      	movs	r2, #1
 800a52c:	fa02 f303 	lsl.w	r3, r2, r3
 800a530:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	43db      	mvns	r3, r3
 800a53e:	69f9      	ldr	r1, [r7, #28]
 800a540:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a544:	4013      	ands	r3, r2
 800a546:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a554:	461a      	mov	r2, r3
 800a556:	2301      	movs	r3, #1
 800a558:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	799b      	ldrb	r3, [r3, #6]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d132      	bne.n	800a5c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a566:	4613      	mov	r3, r2
 800a568:	00db      	lsls	r3, r3, #3
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	3320      	adds	r3, #32
 800a572:	6819      	ldr	r1, [r3, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a578:	4613      	mov	r3, r2
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4403      	add	r3, r0
 800a582:	331c      	adds	r3, #28
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4419      	add	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a58c:	4613      	mov	r3, r2
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4403      	add	r3, r0
 800a596:	3320      	adds	r3, #32
 800a598:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d113      	bne.n	800a5c8 <HAL_PCD_IRQHandler+0x3a2>
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	3324      	adds	r3, #36	@ 0x24
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d108      	bne.n	800a5c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	f004 fdd6 	bl	800f174 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f007 f925 	bl	801181e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f003 0308 	and.w	r3, r3, #8
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d008      	beq.n	800a5f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f003 0310 	and.w	r3, r3, #16
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a606:	461a      	mov	r2, r3
 800a608:	2310      	movs	r3, #16
 800a60a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a622:	461a      	mov	r2, r3
 800a624:	2340      	movs	r3, #64	@ 0x40
 800a626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d023      	beq.n	800a67a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a634:	6a38      	ldr	r0, [r7, #32]
 800a636:	f003 fdbd 	bl	800e1b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a63a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a63c:	4613      	mov	r3, r2
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	3310      	adds	r3, #16
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	3304      	adds	r3, #4
 800a64c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	78db      	ldrb	r3, [r3, #3]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d108      	bne.n	800a668 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2200      	movs	r2, #0
 800a65a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f007 f968 	bl	8011938 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a674:	461a      	mov	r2, r3
 800a676:	2302      	movs	r3, #2
 800a678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fcbd 	bl	800b006 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	3301      	adds	r3, #1
 800a690:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f47f af2e 	bne.w	800a4fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f004 fca1 	bl	800efec <USB_ReadInterrupts>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6b4:	d122      	bne.n	800a6fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6c4:	f023 0301 	bic.w	r3, r3, #1
 800a6c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d108      	bne.n	800a6e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a6dc:	2100      	movs	r1, #0
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fea4 	bl	800b42c <HAL_PCDEx_LPM_Callback>
 800a6e4:	e002      	b.n	800a6ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f007 f906 	bl	80118f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695a      	ldr	r2, [r3, #20]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a6fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	f004 fc73 	bl	800efec <USB_ReadInterrupts>
 800a706:	4603      	mov	r3, r0
 800a708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a70c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a710:	d112      	bne.n	800a738 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d102      	bne.n	800a728 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f007 f8c2 	bl	80118ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	695a      	ldr	r2, [r3, #20]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a736:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f004 fc55 	bl	800efec <USB_ReadInterrupts>
 800a742:	4603      	mov	r3, r0
 800a744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a74c:	f040 80b7 	bne.w	800a8be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	69fa      	ldr	r2, [r7, #28]
 800a75a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a75e:	f023 0301 	bic.w	r3, r3, #1
 800a762:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2110      	movs	r1, #16
 800a76a:	4618      	mov	r0, r3
 800a76c:	f003 fd22 	bl	800e1b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a770:	2300      	movs	r3, #0
 800a772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a774:	e046      	b.n	800a804 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a782:	461a      	mov	r2, r3
 800a784:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a788:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a79a:	0151      	lsls	r1, r2, #5
 800a79c:	69fa      	ldr	r2, [r7, #28]
 800a79e:	440a      	add	r2, r1
 800a7a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a7bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a800:	3301      	adds	r3, #1
 800a802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	791b      	ldrb	r3, [r3, #4]
 800a808:	461a      	mov	r2, r3
 800a80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d3b2      	bcc.n	800a776 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a81e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a822:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7bdb      	ldrb	r3, [r3, #15]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d016      	beq.n	800a85a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a83c:	f043 030b 	orr.w	r3, r3, #11
 800a840:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a84a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a84c:	69fa      	ldr	r2, [r7, #28]
 800a84e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a852:	f043 030b 	orr.w	r3, r3, #11
 800a856:	6453      	str	r3, [r2, #68]	@ 0x44
 800a858:	e015      	b.n	800a886 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a868:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a86c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800a870:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	69fa      	ldr	r2, [r7, #28]
 800a87c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a880:	f043 030b 	orr.w	r3, r3, #11
 800a884:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a894:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a898:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f004 fc63 	bl	800f174 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	695a      	ldr	r2, [r3, #20]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a8bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f004 fb92 	bl	800efec <USB_ReadInterrupts>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8d2:	d123      	bne.n	800a91c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f004 fc28 	bl	800f12e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f003 fcdf 	bl	800e2a6 <USB_GetDevSpeed>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681c      	ldr	r4, [r3, #0]
 800a8f4:	f001 f9d6 	bl	800bca4 <HAL_RCC_GetHCLKFreq>
 800a8f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a8fe:	461a      	mov	r2, r3
 800a900:	4620      	mov	r0, r4
 800a902:	f003 f9e3 	bl	800dccc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f006 ffb1 	bl	801186e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	695a      	ldr	r2, [r3, #20]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800a91a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4618      	mov	r0, r3
 800a922:	f004 fb63 	bl	800efec <USB_ReadInterrupts>
 800a926:	4603      	mov	r3, r0
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d10a      	bne.n	800a946 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f006 ff8e 	bl	8011852 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695a      	ldr	r2, [r3, #20]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f002 0208 	and.w	r2, r2, #8
 800a944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f004 fb4e 	bl	800efec <USB_ReadInterrupts>
 800a950:	4603      	mov	r3, r0
 800a952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a956:	2b80      	cmp	r3, #128	@ 0x80
 800a958:	d123      	bne.n	800a9a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a966:	2301      	movs	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24
 800a96a:	e014      	b.n	800a996 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a970:	4613      	mov	r3, r2
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	440b      	add	r3, r1
 800a97a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d105      	bne.n	800a990 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fb0a 	bl	800afa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	3301      	adds	r3, #1
 800a994:	627b      	str	r3, [r7, #36]	@ 0x24
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	461a      	mov	r2, r3
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d3e4      	bcc.n	800a96c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f004 fb20 	bl	800efec <USB_ReadInterrupts>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9b6:	d13c      	bne.n	800aa32 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9bc:	e02b      	b.n	800aa16 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	440b      	add	r3, r1
 800a9dc:	3318      	adds	r3, #24
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d115      	bne.n	800aa10 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a9e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da12      	bge.n	800aa10 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3317      	adds	r3, #23
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 faca 	bl	800afa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa12:	3301      	adds	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	791b      	ldrb	r3, [r3, #4]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d3cd      	bcc.n	800a9be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	695a      	ldr	r2, [r3, #20]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800aa30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f004 fad8 	bl	800efec <USB_ReadInterrupts>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa46:	d156      	bne.n	800aaf6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa48:	2301      	movs	r3, #1
 800aa4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa4c:	e045      	b.n	800aada <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa62:	4613      	mov	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	440b      	add	r3, r1
 800aa6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d12e      	bne.n	800aad4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800aa76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da2b      	bge.n	800aad4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800aa88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d121      	bne.n	800aad4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa94:	4613      	mov	r3, r2
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	440b      	add	r3, r1
 800aa9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aacc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aad0:	6053      	str	r3, [r2, #4]
            break;
 800aad2:	e008      	b.n	800aae6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad6:	3301      	adds	r3, #1
 800aad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	791b      	ldrb	r3, [r3, #4]
 800aade:	461a      	mov	r2, r3
 800aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d3b3      	bcc.n	800aa4e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	695a      	ldr	r2, [r3, #20]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800aaf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f004 fa76 	bl	800efec <USB_ReadInterrupts>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab0a:	d10a      	bne.n	800ab22 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f006 ff25 	bl	801195c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	695a      	ldr	r2, [r3, #20]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ab20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f004 fa60 	bl	800efec <USB_ReadInterrupts>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d115      	bne.n	800ab62 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f006 ff15 	bl	8011978 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6859      	ldr	r1, [r3, #4]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	69ba      	ldr	r2, [r7, #24]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
 800ab5e:	e000      	b.n	800ab62 <HAL_PCD_IRQHandler+0x93c>
      return;
 800ab60:	bf00      	nop
    }
  }
}
 800ab62:	3734      	adds	r7, #52	@ 0x34
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd90      	pop	{r4, r7, pc}

0800ab68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d101      	bne.n	800ab82 <HAL_PCD_SetAddress+0x1a>
 800ab7e:	2302      	movs	r3, #2
 800ab80:	e012      	b.n	800aba8 <HAL_PCD_SetAddress+0x40>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4611      	mov	r1, r2
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f004 f9bf 	bl	800ef1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	4608      	mov	r0, r1
 800abba:	4611      	mov	r1, r2
 800abbc:	461a      	mov	r2, r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	70fb      	strb	r3, [r7, #3]
 800abc2:	460b      	mov	r3, r1
 800abc4:	803b      	strh	r3, [r7, #0]
 800abc6:	4613      	mov	r3, r2
 800abc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	da0f      	bge.n	800abf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abd6:	78fb      	ldrb	r3, [r7, #3]
 800abd8:	f003 020f 	and.w	r2, r3, #15
 800abdc:	4613      	mov	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	3310      	adds	r3, #16
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	4413      	add	r3, r2
 800abea:	3304      	adds	r3, #4
 800abec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2201      	movs	r2, #1
 800abf2:	705a      	strb	r2, [r3, #1]
 800abf4:	e00f      	b.n	800ac16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	f003 020f 	and.w	r2, r3, #15
 800abfc:	4613      	mov	r3, r2
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	f003 030f 	and.w	r3, r3, #15
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ac22:	883b      	ldrh	r3, [r7, #0]
 800ac24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	78ba      	ldrb	r2, [r7, #2]
 800ac30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	785b      	ldrb	r3, [r3, #1]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ac44:	78bb      	ldrb	r3, [r7, #2]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d102      	bne.n	800ac50 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d101      	bne.n	800ac5e <HAL_PCD_EP_Open+0xae>
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	e00e      	b.n	800ac7c <HAL_PCD_EP_Open+0xcc>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68f9      	ldr	r1, [r7, #12]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f003 fb3f 	bl	800e2f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800ac7a:	7afb      	ldrb	r3, [r7, #11]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ac90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	da0f      	bge.n	800acb8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	f003 020f 	and.w	r2, r3, #15
 800ac9e:	4613      	mov	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	3310      	adds	r3, #16
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	4413      	add	r3, r2
 800acac:	3304      	adds	r3, #4
 800acae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2201      	movs	r2, #1
 800acb4:	705a      	strb	r2, [r3, #1]
 800acb6:	e00f      	b.n	800acd8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	f003 020f 	and.w	r2, r3, #15
 800acbe:	4613      	mov	r3, r2
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	3304      	adds	r3, #4
 800acd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	f003 030f 	and.w	r3, r3, #15
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800acea:	2b01      	cmp	r3, #1
 800acec:	d101      	bne.n	800acf2 <HAL_PCD_EP_Close+0x6e>
 800acee:	2302      	movs	r3, #2
 800acf0:	e00e      	b.n	800ad10 <HAL_PCD_EP_Close+0x8c>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68f9      	ldr	r1, [r7, #12]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f003 fb7d 	bl	800e400 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	607a      	str	r2, [r7, #4]
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	460b      	mov	r3, r1
 800ad26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	f003 020f 	and.w	r2, r3, #15
 800ad2e:	4613      	mov	r3, r2
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	3304      	adds	r3, #4
 800ad40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2200      	movs	r2, #0
 800ad52:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2200      	movs	r2, #0
 800ad58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad5a:	7afb      	ldrb	r3, [r7, #11]
 800ad5c:	f003 030f 	and.w	r3, r3, #15
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	799b      	ldrb	r3, [r3, #6]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d102      	bne.n	800ad74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	799b      	ldrb	r3, [r3, #6]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6979      	ldr	r1, [r7, #20]
 800ad80:	f003 fc1a 	bl	800e5b8 <USB_EPStartXfer>

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	f003 020f 	and.w	r2, r3, #15
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800adb0:	681b      	ldr	r3, [r3, #0]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	603b      	str	r3, [r7, #0]
 800adca:	460b      	mov	r3, r1
 800adcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adce:	7afb      	ldrb	r3, [r7, #11]
 800add0:	f003 020f 	and.w	r2, r3, #15
 800add4:	4613      	mov	r3, r2
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	3310      	adds	r3, #16
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4413      	add	r3, r2
 800ade2:	3304      	adds	r3, #4
 800ade4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2200      	movs	r2, #0
 800adf6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2201      	movs	r2, #1
 800adfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	f003 030f 	and.w	r3, r3, #15
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	799b      	ldrb	r3, [r3, #6]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d102      	bne.n	800ae18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	799b      	ldrb	r3, [r3, #6]
 800ae20:	461a      	mov	r2, r3
 800ae22:	6979      	ldr	r1, [r7, #20]
 800ae24:	f003 fbc8 	bl	800e5b8 <USB_EPStartXfer>

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ae3e:	78fb      	ldrb	r3, [r7, #3]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	7912      	ldrb	r2, [r2, #4]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d901      	bls.n	800ae50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e04f      	b.n	800aef0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	da0f      	bge.n	800ae78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	f003 020f 	and.w	r2, r3, #15
 800ae5e:	4613      	mov	r3, r2
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	3310      	adds	r3, #16
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2201      	movs	r2, #1
 800ae74:	705a      	strb	r2, [r3, #1]
 800ae76:	e00d      	b.n	800ae94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	4413      	add	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	4413      	add	r3, r2
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2201      	movs	r2, #1
 800ae98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	f003 030f 	and.w	r3, r3, #15
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_PCD_EP_SetStall+0x82>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e01d      	b.n	800aef0 <HAL_PCD_EP_SetStall+0xbe>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68f9      	ldr	r1, [r7, #12]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f003 ff56 	bl	800ed74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d109      	bne.n	800aee6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7999      	ldrb	r1, [r3, #6]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aee0:	461a      	mov	r2, r3
 800aee2:	f004 f947 	bl	800f174 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	f003 030f 	and.w	r3, r3, #15
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	7912      	ldrb	r2, [r2, #4]
 800af0e:	4293      	cmp	r3, r2
 800af10:	d901      	bls.n	800af16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e042      	b.n	800af9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800af16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da0f      	bge.n	800af3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	f003 020f 	and.w	r2, r3, #15
 800af24:	4613      	mov	r3, r2
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	3310      	adds	r3, #16
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	4413      	add	r3, r2
 800af32:	3304      	adds	r3, #4
 800af34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	705a      	strb	r2, [r3, #1]
 800af3c:	e00f      	b.n	800af5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	f003 020f 	and.w	r2, r3, #15
 800af44:	4613      	mov	r3, r2
 800af46:	00db      	lsls	r3, r3, #3
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4413      	add	r3, r2
 800af54:	3304      	adds	r3, #4
 800af56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af64:	78fb      	ldrb	r3, [r7, #3]
 800af66:	f003 030f 	and.w	r3, r3, #15
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_PCD_EP_ClrStall+0x86>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e00e      	b.n	800af9c <HAL_PCD_EP_ClrStall+0xa4>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68f9      	ldr	r1, [r7, #12]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f003 ff5f 	bl	800ee50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	460b      	mov	r3, r1
 800afae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800afb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da0c      	bge.n	800afd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	f003 020f 	and.w	r2, r3, #15
 800afbe:	4613      	mov	r3, r2
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	3310      	adds	r3, #16
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4413      	add	r3, r2
 800afcc:	3304      	adds	r3, #4
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	e00c      	b.n	800afec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	f003 020f 	and.w	r2, r3, #15
 800afd8:	4613      	mov	r3, r2
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	4413      	add	r3, r2
 800afe8:	3304      	adds	r3, #4
 800afea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68f9      	ldr	r1, [r7, #12]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f003 fd7e 	bl	800eaf4 <USB_EPStopXfer>
 800aff8:	4603      	mov	r3, r0
 800affa:	72fb      	strb	r3, [r7, #11]

  return ret;
 800affc:	7afb      	ldrb	r3, [r7, #11]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08a      	sub	sp, #40	@ 0x28
 800b00a:	af02      	add	r7, sp, #8
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	4613      	mov	r3, r2
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	3310      	adds	r3, #16
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	4413      	add	r3, r2
 800b02a:	3304      	adds	r3, #4
 800b02c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	695a      	ldr	r2, [r3, #20]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	429a      	cmp	r2, r3
 800b038:	d901      	bls.n	800b03e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e06b      	b.n	800b116 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	429a      	cmp	r2, r3
 800b052:	d902      	bls.n	800b05a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	3303      	adds	r3, #3
 800b05e:	089b      	lsrs	r3, r3, #2
 800b060:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b062:	e02a      	b.n	800b0ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	691a      	ldr	r2, [r3, #16]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	69fa      	ldr	r2, [r7, #28]
 800b076:	429a      	cmp	r2, r3
 800b078:	d902      	bls.n	800b080 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	3303      	adds	r3, #3
 800b084:	089b      	lsrs	r3, r3, #2
 800b086:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68d9      	ldr	r1, [r3, #12]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	4603      	mov	r3, r0
 800b09c:	6978      	ldr	r0, [r7, #20]
 800b09e:	f003 fdd3 	bl	800ec48 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68da      	ldr	r2, [r3, #12]
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	441a      	add	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	695a      	ldr	r2, [r3, #20]
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b0ca:	69ba      	ldr	r2, [r7, #24]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d809      	bhi.n	800b0e4 <PCD_WriteEmptyTxFifo+0xde>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	695a      	ldr	r2, [r3, #20]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d203      	bcs.n	800b0e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1bf      	bne.n	800b064 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	691a      	ldr	r2, [r3, #16]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d811      	bhi.n	800b114 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f003 030f 	and.w	r3, r3, #15
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	43db      	mvns	r3, r3
 800b10a:	6939      	ldr	r1, [r7, #16]
 800b10c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b110:	4013      	ands	r3, r2
 800b112:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	333c      	adds	r3, #60	@ 0x3c
 800b138:	3304      	adds	r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	4413      	add	r3, r2
 800b146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	799b      	ldrb	r3, [r3, #6]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d17b      	bne.n	800b24e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f003 0308 	and.w	r3, r3, #8
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d015      	beq.n	800b18c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	4a61      	ldr	r2, [pc, #388]	@ (800b2e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b164:	4293      	cmp	r3, r2
 800b166:	f240 80b9 	bls.w	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 80b3 	beq.w	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b182:	461a      	mov	r2, r3
 800b184:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b188:	6093      	str	r3, [r2, #8]
 800b18a:	e0a7      	b.n	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d009      	beq.n	800b1aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2320      	movs	r3, #32
 800b1a6:	6093      	str	r3, [r2, #8]
 800b1a8:	e098      	b.n	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f040 8093 	bne.w	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	4a4b      	ldr	r2, [pc, #300]	@ (800b2e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d90f      	bls.n	800b1de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1da:	6093      	str	r3, [r2, #8]
 800b1dc:	e07e      	b.n	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6a1a      	ldr	r2, [r3, #32]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	0159      	lsls	r1, r3, #5
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	440b      	add	r3, r1
 800b200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b20a:	1ad2      	subs	r2, r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d114      	bne.n	800b240 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6818      	ldr	r0, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b228:	461a      	mov	r2, r3
 800b22a:	2101      	movs	r1, #1
 800b22c:	f003 ffa2 	bl	800f174 <USB_EP0_OutStart>
 800b230:	e006      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	441a      	add	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f006 face 	bl	80117e8 <HAL_PCD_DataOutStageCallback>
 800b24c:	e046      	b.n	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	4a26      	ldr	r2, [pc, #152]	@ (800b2ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d124      	bne.n	800b2a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00a      	beq.n	800b276 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b26c:	461a      	mov	r2, r3
 800b26e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b272:	6093      	str	r3, [r2, #8]
 800b274:	e032      	b.n	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f003 0320 	and.w	r3, r3, #32
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d008      	beq.n	800b292 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b28c:	461a      	mov	r2, r3
 800b28e:	2320      	movs	r3, #32
 800b290:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	b2db      	uxtb	r3, r3
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f006 faa5 	bl	80117e8 <HAL_PCD_DataOutStageCallback>
 800b29e:	e01d      	b.n	800b2dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d114      	bne.n	800b2d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	4413      	add	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	440b      	add	r3, r1
 800b2b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d108      	bne.n	800b2d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	f003 ff52 	bl	800f174 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f006 fa86 	bl	80117e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3720      	adds	r7, #32
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	4f54300a 	.word	0x4f54300a
 800b2ec:	4f54310a 	.word	0x4f54310a

0800b2f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	333c      	adds	r3, #60	@ 0x3c
 800b308:	3304      	adds	r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	4a15      	ldr	r2, [pc, #84]	@ (800b378 <PCD_EP_OutSetupPacket_int+0x88>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d90e      	bls.n	800b344 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d009      	beq.n	800b344 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b33c:	461a      	mov	r2, r3
 800b33e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b342:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f006 fa3d 	bl	80117c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4a0a      	ldr	r2, [pc, #40]	@ (800b378 <PCD_EP_OutSetupPacket_int+0x88>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d90c      	bls.n	800b36c <PCD_EP_OutSetupPacket_int+0x7c>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	799b      	ldrb	r3, [r3, #6]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d108      	bne.n	800b36c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6818      	ldr	r0, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b364:	461a      	mov	r2, r3
 800b366:	2101      	movs	r1, #1
 800b368:	f003 ff04 	bl	800f174 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	4f54300a 	.word	0x4f54300a

0800b37c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
 800b388:	4613      	mov	r3, r2
 800b38a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d107      	bne.n	800b3aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b39a:	883b      	ldrh	r3, [r7, #0]
 800b39c:	0419      	lsls	r1, r3, #16
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	629a      	str	r2, [r3, #40]	@ 0x28
 800b3a8:	e028      	b.n	800b3fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	0c1b      	lsrs	r3, r3, #16
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
 800b3bc:	e00d      	b.n	800b3da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	3340      	adds	r3, #64	@ 0x40
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	0c1b      	lsrs	r3, r3, #16
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	73fb      	strb	r3, [r7, #15]
 800b3da:	7bfa      	ldrb	r2, [r7, #15]
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d3ec      	bcc.n	800b3be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b3e4:	883b      	ldrh	r3, [r7, #0]
 800b3e6:	0418      	lsls	r0, r3, #16
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6819      	ldr	r1, [r3, #0]
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	4302      	orrs	r2, r0
 800b3f4:	3340      	adds	r3, #64	@ 0x40
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	440b      	add	r3, r1
 800b3fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	460b      	mov	r3, r1
 800b414:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	887a      	ldrh	r2, [r7, #2]
 800b41c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e267      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d075      	beq.n	800b54e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b462:	4b88      	ldr	r3, [pc, #544]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 030c 	and.w	r3, r3, #12
 800b46a:	2b04      	cmp	r3, #4
 800b46c:	d00c      	beq.n	800b488 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b46e:	4b85      	ldr	r3, [pc, #532]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b476:	2b08      	cmp	r3, #8
 800b478:	d112      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b47a:	4b82      	ldr	r3, [pc, #520]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b486:	d10b      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b488:	4b7e      	ldr	r3, [pc, #504]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d05b      	beq.n	800b54c <HAL_RCC_OscConfig+0x108>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d157      	bne.n	800b54c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e242      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4a8:	d106      	bne.n	800b4b8 <HAL_RCC_OscConfig+0x74>
 800b4aa:	4b76      	ldr	r3, [pc, #472]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a75      	ldr	r2, [pc, #468]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e01d      	b.n	800b4f4 <HAL_RCC_OscConfig+0xb0>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4c0:	d10c      	bne.n	800b4dc <HAL_RCC_OscConfig+0x98>
 800b4c2:	4b70      	ldr	r3, [pc, #448]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a6f      	ldr	r2, [pc, #444]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	4b6d      	ldr	r3, [pc, #436]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a6c      	ldr	r2, [pc, #432]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	e00b      	b.n	800b4f4 <HAL_RCC_OscConfig+0xb0>
 800b4dc:	4b69      	ldr	r3, [pc, #420]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a68      	ldr	r2, [pc, #416]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4e6:	6013      	str	r3, [r2, #0]
 800b4e8:	4b66      	ldr	r3, [pc, #408]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a65      	ldr	r2, [pc, #404]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b4ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d013      	beq.n	800b524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4fc:	f7f9 fd14 	bl	8004f28 <HAL_GetTick>
 800b500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b502:	e008      	b.n	800b516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b504:	f7f9 fd10 	bl	8004f28 <HAL_GetTick>
 800b508:	4602      	mov	r2, r0
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	2b64      	cmp	r3, #100	@ 0x64
 800b510:	d901      	bls.n	800b516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b512:	2303      	movs	r3, #3
 800b514:	e207      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b516:	4b5b      	ldr	r3, [pc, #364]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0f0      	beq.n	800b504 <HAL_RCC_OscConfig+0xc0>
 800b522:	e014      	b.n	800b54e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b524:	f7f9 fd00 	bl	8004f28 <HAL_GetTick>
 800b528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b52a:	e008      	b.n	800b53e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b52c:	f7f9 fcfc 	bl	8004f28 <HAL_GetTick>
 800b530:	4602      	mov	r2, r0
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b64      	cmp	r3, #100	@ 0x64
 800b538:	d901      	bls.n	800b53e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e1f3      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b53e:	4b51      	ldr	r3, [pc, #324]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1f0      	bne.n	800b52c <HAL_RCC_OscConfig+0xe8>
 800b54a:	e000      	b.n	800b54e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b54c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d063      	beq.n	800b622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b55a:	4b4a      	ldr	r3, [pc, #296]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f003 030c 	and.w	r3, r3, #12
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00b      	beq.n	800b57e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b566:	4b47      	ldr	r3, [pc, #284]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d11c      	bne.n	800b5ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b572:	4b44      	ldr	r3, [pc, #272]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d116      	bne.n	800b5ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b57e:	4b41      	ldr	r3, [pc, #260]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0302 	and.w	r3, r3, #2
 800b586:	2b00      	cmp	r3, #0
 800b588:	d005      	beq.n	800b596 <HAL_RCC_OscConfig+0x152>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d001      	beq.n	800b596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e1c7      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b596:	4b3b      	ldr	r3, [pc, #236]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	4937      	ldr	r1, [pc, #220]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5aa:	e03a      	b.n	800b622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d020      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5b4:	4b34      	ldr	r3, [pc, #208]	@ (800b688 <HAL_RCC_OscConfig+0x244>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ba:	f7f9 fcb5 	bl	8004f28 <HAL_GetTick>
 800b5be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5c0:	e008      	b.n	800b5d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5c2:	f7f9 fcb1 	bl	8004f28 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d901      	bls.n	800b5d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e1a8      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5d4:	4b2b      	ldr	r3, [pc, #172]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0302 	and.w	r3, r3, #2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0f0      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5e0:	4b28      	ldr	r3, [pc, #160]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	00db      	lsls	r3, r3, #3
 800b5ee:	4925      	ldr	r1, [pc, #148]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	600b      	str	r3, [r1, #0]
 800b5f4:	e015      	b.n	800b622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5f6:	4b24      	ldr	r3, [pc, #144]	@ (800b688 <HAL_RCC_OscConfig+0x244>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5fc:	f7f9 fc94 	bl	8004f28 <HAL_GetTick>
 800b600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b602:	e008      	b.n	800b616 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b604:	f7f9 fc90 	bl	8004f28 <HAL_GetTick>
 800b608:	4602      	mov	r2, r0
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d901      	bls.n	800b616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e187      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b616:	4b1b      	ldr	r3, [pc, #108]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 0302 	and.w	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1f0      	bne.n	800b604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0308 	and.w	r3, r3, #8
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d036      	beq.n	800b69c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	695b      	ldr	r3, [r3, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d016      	beq.n	800b664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b636:	4b15      	ldr	r3, [pc, #84]	@ (800b68c <HAL_RCC_OscConfig+0x248>)
 800b638:	2201      	movs	r2, #1
 800b63a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b63c:	f7f9 fc74 	bl	8004f28 <HAL_GetTick>
 800b640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b642:	e008      	b.n	800b656 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b644:	f7f9 fc70 	bl	8004f28 <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d901      	bls.n	800b656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e167      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b656:	4b0b      	ldr	r3, [pc, #44]	@ (800b684 <HAL_RCC_OscConfig+0x240>)
 800b658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b65a:	f003 0302 	and.w	r3, r3, #2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0f0      	beq.n	800b644 <HAL_RCC_OscConfig+0x200>
 800b662:	e01b      	b.n	800b69c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b664:	4b09      	ldr	r3, [pc, #36]	@ (800b68c <HAL_RCC_OscConfig+0x248>)
 800b666:	2200      	movs	r2, #0
 800b668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b66a:	f7f9 fc5d 	bl	8004f28 <HAL_GetTick>
 800b66e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b670:	e00e      	b.n	800b690 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b672:	f7f9 fc59 	bl	8004f28 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d907      	bls.n	800b690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e150      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
 800b684:	40023800 	.word	0x40023800
 800b688:	42470000 	.word	0x42470000
 800b68c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b690:	4b88      	ldr	r3, [pc, #544]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1ea      	bne.n	800b672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 0304 	and.w	r3, r3, #4
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 8097 	beq.w	800b7d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6ae:	4b81      	ldr	r3, [pc, #516]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10f      	bne.n	800b6da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]
 800b6be:	4b7d      	ldr	r3, [pc, #500]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c2:	4a7c      	ldr	r2, [pc, #496]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b6c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6c8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b6ca:	4b7a      	ldr	r3, [pc, #488]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6d2:	60bb      	str	r3, [r7, #8]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6da:	4b77      	ldr	r3, [pc, #476]	@ (800b8b8 <HAL_RCC_OscConfig+0x474>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d118      	bne.n	800b718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b6e6:	4b74      	ldr	r3, [pc, #464]	@ (800b8b8 <HAL_RCC_OscConfig+0x474>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a73      	ldr	r2, [pc, #460]	@ (800b8b8 <HAL_RCC_OscConfig+0x474>)
 800b6ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6f2:	f7f9 fc19 	bl	8004f28 <HAL_GetTick>
 800b6f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6f8:	e008      	b.n	800b70c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6fa:	f7f9 fc15 	bl	8004f28 <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e10c      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b70c:	4b6a      	ldr	r3, [pc, #424]	@ (800b8b8 <HAL_RCC_OscConfig+0x474>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0f0      	beq.n	800b6fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d106      	bne.n	800b72e <HAL_RCC_OscConfig+0x2ea>
 800b720:	4b64      	ldr	r3, [pc, #400]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b724:	4a63      	ldr	r2, [pc, #396]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b72c:	e01c      	b.n	800b768 <HAL_RCC_OscConfig+0x324>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b05      	cmp	r3, #5
 800b734:	d10c      	bne.n	800b750 <HAL_RCC_OscConfig+0x30c>
 800b736:	4b5f      	ldr	r3, [pc, #380]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b73a:	4a5e      	ldr	r2, [pc, #376]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b73c:	f043 0304 	orr.w	r3, r3, #4
 800b740:	6713      	str	r3, [r2, #112]	@ 0x70
 800b742:	4b5c      	ldr	r3, [pc, #368]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b746:	4a5b      	ldr	r2, [pc, #364]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b748:	f043 0301 	orr.w	r3, r3, #1
 800b74c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b74e:	e00b      	b.n	800b768 <HAL_RCC_OscConfig+0x324>
 800b750:	4b58      	ldr	r3, [pc, #352]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b754:	4a57      	ldr	r2, [pc, #348]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b75c:	4b55      	ldr	r3, [pc, #340]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b75e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b760:	4a54      	ldr	r2, [pc, #336]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b762:	f023 0304 	bic.w	r3, r3, #4
 800b766:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d015      	beq.n	800b79c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b770:	f7f9 fbda 	bl	8004f28 <HAL_GetTick>
 800b774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b776:	e00a      	b.n	800b78e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b778:	f7f9 fbd6 	bl	8004f28 <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b786:	4293      	cmp	r3, r2
 800b788:	d901      	bls.n	800b78e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e0cb      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b78e:	4b49      	ldr	r3, [pc, #292]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0ee      	beq.n	800b778 <HAL_RCC_OscConfig+0x334>
 800b79a:	e014      	b.n	800b7c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b79c:	f7f9 fbc4 	bl	8004f28 <HAL_GetTick>
 800b7a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7a2:	e00a      	b.n	800b7ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7a4:	f7f9 fbc0 	bl	8004f28 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d901      	bls.n	800b7ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e0b5      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1ee      	bne.n	800b7a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d105      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7cc:	4b39      	ldr	r3, [pc, #228]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b7ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d0:	4a38      	ldr	r2, [pc, #224]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b7d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 80a1 	beq.w	800b924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b7e2:	4b34      	ldr	r3, [pc, #208]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	f003 030c 	and.w	r3, r3, #12
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	d05c      	beq.n	800b8a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d141      	bne.n	800b87a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7f6:	4b31      	ldr	r3, [pc, #196]	@ (800b8bc <HAL_RCC_OscConfig+0x478>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7fc:	f7f9 fb94 	bl	8004f28 <HAL_GetTick>
 800b800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b802:	e008      	b.n	800b816 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b804:	f7f9 fb90 	bl	8004f28 <HAL_GetTick>
 800b808:	4602      	mov	r2, r0
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d901      	bls.n	800b816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e087      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b816:	4b27      	ldr	r3, [pc, #156]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1f0      	bne.n	800b804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	69da      	ldr	r2, [r3, #28]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b830:	019b      	lsls	r3, r3, #6
 800b832:	431a      	orrs	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b838:	085b      	lsrs	r3, r3, #1
 800b83a:	3b01      	subs	r3, #1
 800b83c:	041b      	lsls	r3, r3, #16
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b844:	061b      	lsls	r3, r3, #24
 800b846:	491b      	ldr	r1, [pc, #108]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b848:	4313      	orrs	r3, r2
 800b84a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b84c:	4b1b      	ldr	r3, [pc, #108]	@ (800b8bc <HAL_RCC_OscConfig+0x478>)
 800b84e:	2201      	movs	r2, #1
 800b850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b852:	f7f9 fb69 	bl	8004f28 <HAL_GetTick>
 800b856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b858:	e008      	b.n	800b86c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b85a:	f7f9 fb65 	bl	8004f28 <HAL_GetTick>
 800b85e:	4602      	mov	r2, r0
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	2b02      	cmp	r3, #2
 800b866:	d901      	bls.n	800b86c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e05c      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b86c:	4b11      	ldr	r3, [pc, #68]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0f0      	beq.n	800b85a <HAL_RCC_OscConfig+0x416>
 800b878:	e054      	b.n	800b924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b87a:	4b10      	ldr	r3, [pc, #64]	@ (800b8bc <HAL_RCC_OscConfig+0x478>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b880:	f7f9 fb52 	bl	8004f28 <HAL_GetTick>
 800b884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b886:	e008      	b.n	800b89a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b888:	f7f9 fb4e 	bl	8004f28 <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b02      	cmp	r3, #2
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e045      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b89a:	4b06      	ldr	r3, [pc, #24]	@ (800b8b4 <HAL_RCC_OscConfig+0x470>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1f0      	bne.n	800b888 <HAL_RCC_OscConfig+0x444>
 800b8a6:	e03d      	b.n	800b924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d107      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e038      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
 800b8b4:	40023800 	.word	0x40023800
 800b8b8:	40007000 	.word	0x40007000
 800b8bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b8c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b930 <HAL_RCC_OscConfig+0x4ec>)
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d028      	beq.n	800b920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d121      	bne.n	800b920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d11a      	bne.n	800b920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b8f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d111      	bne.n	800b920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	3b01      	subs	r3, #1
 800b90a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d107      	bne.n	800b920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d001      	beq.n	800b924 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e000      	b.n	800b926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	40023800 	.word	0x40023800

0800b934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e0cc      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b948:	4b68      	ldr	r3, [pc, #416]	@ (800baec <HAL_RCC_ClockConfig+0x1b8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0307 	and.w	r3, r3, #7
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d90c      	bls.n	800b970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b956:	4b65      	ldr	r3, [pc, #404]	@ (800baec <HAL_RCC_ClockConfig+0x1b8>)
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	b2d2      	uxtb	r2, r2
 800b95c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b95e:	4b63      	ldr	r3, [pc, #396]	@ (800baec <HAL_RCC_ClockConfig+0x1b8>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d001      	beq.n	800b970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e0b8      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d020      	beq.n	800b9be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0304 	and.w	r3, r3, #4
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b988:	4b59      	ldr	r3, [pc, #356]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	4a58      	ldr	r2, [pc, #352]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b98e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b992:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b9a0:	4b53      	ldr	r3, [pc, #332]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	4a52      	ldr	r2, [pc, #328]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b9a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b9aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9ac:	4b50      	ldr	r3, [pc, #320]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	494d      	ldr	r1, [pc, #308]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0301 	and.w	r3, r3, #1
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d044      	beq.n	800ba54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d107      	bne.n	800b9e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9d2:	4b47      	ldr	r3, [pc, #284]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d119      	bne.n	800ba12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e07f      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d003      	beq.n	800b9f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d107      	bne.n	800ba02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9f2:	4b3f      	ldr	r3, [pc, #252]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d109      	bne.n	800ba12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e06f      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba02:	4b3b      	ldr	r3, [pc, #236]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e067      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ba12:	4b37      	ldr	r3, [pc, #220]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	f023 0203 	bic.w	r2, r3, #3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	4934      	ldr	r1, [pc, #208]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ba24:	f7f9 fa80 	bl	8004f28 <HAL_GetTick>
 800ba28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba2a:	e00a      	b.n	800ba42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba2c:	f7f9 fa7c 	bl	8004f28 <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d901      	bls.n	800ba42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e04f      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba42:	4b2b      	ldr	r3, [pc, #172]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f003 020c 	and.w	r2, r3, #12
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d1eb      	bne.n	800ba2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba54:	4b25      	ldr	r3, [pc, #148]	@ (800baec <HAL_RCC_ClockConfig+0x1b8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d20c      	bcs.n	800ba7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba62:	4b22      	ldr	r3, [pc, #136]	@ (800baec <HAL_RCC_ClockConfig+0x1b8>)
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	b2d2      	uxtb	r2, r2
 800ba68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba6a:	4b20      	ldr	r3, [pc, #128]	@ (800baec <HAL_RCC_ClockConfig+0x1b8>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 0307 	and.w	r3, r3, #7
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d001      	beq.n	800ba7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e032      	b.n	800bae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d008      	beq.n	800ba9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba88:	4b19      	ldr	r3, [pc, #100]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	4916      	ldr	r1, [pc, #88]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 0308 	and.w	r3, r3, #8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d009      	beq.n	800baba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800baa6:	4b12      	ldr	r3, [pc, #72]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	490e      	ldr	r1, [pc, #56]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800baba:	f000 f82d 	bl	800bb18 <HAL_RCC_GetSysClockFreq>
 800babe:	4602      	mov	r2, r0
 800bac0:	4b0b      	ldr	r3, [pc, #44]	@ (800baf0 <HAL_RCC_ClockConfig+0x1bc>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	091b      	lsrs	r3, r3, #4
 800bac6:	f003 030f 	and.w	r3, r3, #15
 800baca:	490a      	ldr	r1, [pc, #40]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c0>)
 800bacc:	5ccb      	ldrb	r3, [r1, r3]
 800bace:	fa22 f303 	lsr.w	r3, r2, r3
 800bad2:	4a09      	ldr	r2, [pc, #36]	@ (800baf8 <HAL_RCC_ClockConfig+0x1c4>)
 800bad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800bad6:	4b09      	ldr	r3, [pc, #36]	@ (800bafc <HAL_RCC_ClockConfig+0x1c8>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4618      	mov	r0, r3
 800badc:	f7f9 f9e0 	bl	8004ea0 <HAL_InitTick>

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	40023c00 	.word	0x40023c00
 800baf0:	40023800 	.word	0x40023800
 800baf4:	08013ccc 	.word	0x08013ccc
 800baf8:	20000014 	.word	0x20000014
 800bafc:	20000018 	.word	0x20000018

0800bb00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800bb04:	4b03      	ldr	r3, [pc, #12]	@ (800bb14 <HAL_RCC_EnableCSS+0x14>)
 800bb06:	2201      	movs	r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
}
 800bb0a:	bf00      	nop
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	4247004c 	.word	0x4247004c

0800bb18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb1c:	b090      	sub	sp, #64	@ 0x40
 800bb1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bb20:	2300      	movs	r3, #0
 800bb22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800bb24:	2300      	movs	r3, #0
 800bb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb30:	4b59      	ldr	r3, [pc, #356]	@ (800bc98 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f003 030c 	and.w	r3, r3, #12
 800bb38:	2b08      	cmp	r3, #8
 800bb3a:	d00d      	beq.n	800bb58 <HAL_RCC_GetSysClockFreq+0x40>
 800bb3c:	2b08      	cmp	r3, #8
 800bb3e:	f200 80a1 	bhi.w	800bc84 <HAL_RCC_GetSysClockFreq+0x16c>
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <HAL_RCC_GetSysClockFreq+0x34>
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d003      	beq.n	800bb52 <HAL_RCC_GetSysClockFreq+0x3a>
 800bb4a:	e09b      	b.n	800bc84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bb4c:	4b53      	ldr	r3, [pc, #332]	@ (800bc9c <HAL_RCC_GetSysClockFreq+0x184>)
 800bb4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bb50:	e09b      	b.n	800bc8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bb52:	4b53      	ldr	r3, [pc, #332]	@ (800bca0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bb54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bb56:	e098      	b.n	800bc8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb58:	4b4f      	ldr	r3, [pc, #316]	@ (800bc98 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb60:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bb62:	4b4d      	ldr	r3, [pc, #308]	@ (800bc98 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d028      	beq.n	800bbc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb6e:	4b4a      	ldr	r3, [pc, #296]	@ (800bc98 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	099b      	lsrs	r3, r3, #6
 800bb74:	2200      	movs	r2, #0
 800bb76:	623b      	str	r3, [r7, #32]
 800bb78:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bb80:	2100      	movs	r1, #0
 800bb82:	4b47      	ldr	r3, [pc, #284]	@ (800bca0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bb84:	fb03 f201 	mul.w	r2, r3, r1
 800bb88:	2300      	movs	r3, #0
 800bb8a:	fb00 f303 	mul.w	r3, r0, r3
 800bb8e:	4413      	add	r3, r2
 800bb90:	4a43      	ldr	r2, [pc, #268]	@ (800bca0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bb92:	fba0 1202 	umull	r1, r2, r0, r2
 800bb96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb98:	460a      	mov	r2, r1
 800bb9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bb9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb9e:	4413      	add	r3, r2
 800bba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba4:	2200      	movs	r2, #0
 800bba6:	61bb      	str	r3, [r7, #24]
 800bba8:	61fa      	str	r2, [r7, #28]
 800bbaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bbb2:	f7f4 fb65 	bl	8000280 <__aeabi_uldivmod>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4613      	mov	r3, r2
 800bbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbbe:	e053      	b.n	800bc68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbc0:	4b35      	ldr	r3, [pc, #212]	@ (800bc98 <HAL_RCC_GetSysClockFreq+0x180>)
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	099b      	lsrs	r3, r3, #6
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	613b      	str	r3, [r7, #16]
 800bbca:	617a      	str	r2, [r7, #20]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bbd2:	f04f 0b00 	mov.w	fp, #0
 800bbd6:	4652      	mov	r2, sl
 800bbd8:	465b      	mov	r3, fp
 800bbda:	f04f 0000 	mov.w	r0, #0
 800bbde:	f04f 0100 	mov.w	r1, #0
 800bbe2:	0159      	lsls	r1, r3, #5
 800bbe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bbe8:	0150      	lsls	r0, r2, #5
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	ebb2 080a 	subs.w	r8, r2, sl
 800bbf2:	eb63 090b 	sbc.w	r9, r3, fp
 800bbf6:	f04f 0200 	mov.w	r2, #0
 800bbfa:	f04f 0300 	mov.w	r3, #0
 800bbfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bc02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bc06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bc0a:	ebb2 0408 	subs.w	r4, r2, r8
 800bc0e:	eb63 0509 	sbc.w	r5, r3, r9
 800bc12:	f04f 0200 	mov.w	r2, #0
 800bc16:	f04f 0300 	mov.w	r3, #0
 800bc1a:	00eb      	lsls	r3, r5, #3
 800bc1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc20:	00e2      	lsls	r2, r4, #3
 800bc22:	4614      	mov	r4, r2
 800bc24:	461d      	mov	r5, r3
 800bc26:	eb14 030a 	adds.w	r3, r4, sl
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	eb45 030b 	adc.w	r3, r5, fp
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	f04f 0200 	mov.w	r2, #0
 800bc36:	f04f 0300 	mov.w	r3, #0
 800bc3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bc3e:	4629      	mov	r1, r5
 800bc40:	028b      	lsls	r3, r1, #10
 800bc42:	4621      	mov	r1, r4
 800bc44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bc48:	4621      	mov	r1, r4
 800bc4a:	028a      	lsls	r2, r1, #10
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc52:	2200      	movs	r2, #0
 800bc54:	60bb      	str	r3, [r7, #8]
 800bc56:	60fa      	str	r2, [r7, #12]
 800bc58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc5c:	f7f4 fb10 	bl	8000280 <__aeabi_uldivmod>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	4613      	mov	r3, r2
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bc68:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	0c1b      	lsrs	r3, r3, #16
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	3301      	adds	r3, #1
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bc78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc82:	e002      	b.n	800bc8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bc84:	4b05      	ldr	r3, [pc, #20]	@ (800bc9c <HAL_RCC_GetSysClockFreq+0x184>)
 800bc86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3740      	adds	r7, #64	@ 0x40
 800bc90:	46bd      	mov	sp, r7
 800bc92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc96:	bf00      	nop
 800bc98:	40023800 	.word	0x40023800
 800bc9c:	00f42400 	.word	0x00f42400
 800bca0:	017d7840 	.word	0x017d7840

0800bca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bca8:	4b03      	ldr	r3, [pc, #12]	@ (800bcb8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	20000014 	.word	0x20000014

0800bcbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bcc0:	f7ff fff0 	bl	800bca4 <HAL_RCC_GetHCLKFreq>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	4b05      	ldr	r3, [pc, #20]	@ (800bcdc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	0a9b      	lsrs	r3, r3, #10
 800bccc:	f003 0307 	and.w	r3, r3, #7
 800bcd0:	4903      	ldr	r1, [pc, #12]	@ (800bce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bcd2:	5ccb      	ldrb	r3, [r1, r3]
 800bcd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	40023800 	.word	0x40023800
 800bce0:	08013cdc 	.word	0x08013cdc

0800bce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bce8:	f7ff ffdc 	bl	800bca4 <HAL_RCC_GetHCLKFreq>
 800bcec:	4602      	mov	r2, r0
 800bcee:	4b05      	ldr	r3, [pc, #20]	@ (800bd04 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	0b5b      	lsrs	r3, r3, #13
 800bcf4:	f003 0307 	and.w	r3, r3, #7
 800bcf8:	4903      	ldr	r1, [pc, #12]	@ (800bd08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcfa:	5ccb      	ldrb	r3, [r1, r3]
 800bcfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	40023800 	.word	0x40023800
 800bd08:	08013cdc 	.word	0x08013cdc

0800bd0c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800bd10:	4b06      	ldr	r3, [pc, #24]	@ (800bd2c <HAL_RCC_NMI_IRQHandler+0x20>)
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd18:	2b80      	cmp	r3, #128	@ 0x80
 800bd1a:	d104      	bne.n	800bd26 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800bd1c:	f000 f80a 	bl	800bd34 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800bd20:	4b03      	ldr	r3, [pc, #12]	@ (800bd30 <HAL_RCC_NMI_IRQHandler+0x24>)
 800bd22:	2280      	movs	r2, #128	@ 0x80
 800bd24:	701a      	strb	r2, [r3, #0]
  }
}
 800bd26:	bf00      	nop
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	40023800 	.word	0x40023800
 800bd30:	4002380e 	.word	0x4002380e

0800bd34 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800bd34:	b480      	push	{r7}
 800bd36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800bd38:	bf00      	nop
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e041      	b.n	800bdd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d106      	bne.n	800bd6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7f8 fe87 	bl	8004a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2202      	movs	r2, #2
 800bd72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4610      	mov	r0, r2
 800bd82:	f000 fc3b 	bl	800c5fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d001      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e044      	b.n	800be82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f042 0201 	orr.w	r2, r2, #1
 800be0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a1e      	ldr	r2, [pc, #120]	@ (800be90 <HAL_TIM_Base_Start_IT+0xb0>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d018      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x6c>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be22:	d013      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x6c>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a1a      	ldr	r2, [pc, #104]	@ (800be94 <HAL_TIM_Base_Start_IT+0xb4>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d00e      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x6c>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a19      	ldr	r2, [pc, #100]	@ (800be98 <HAL_TIM_Base_Start_IT+0xb8>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x6c>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a17      	ldr	r2, [pc, #92]	@ (800be9c <HAL_TIM_Base_Start_IT+0xbc>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d004      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x6c>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a16      	ldr	r2, [pc, #88]	@ (800bea0 <HAL_TIM_Base_Start_IT+0xc0>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d111      	bne.n	800be70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f003 0307 	and.w	r3, r3, #7
 800be56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b06      	cmp	r3, #6
 800be5c:	d010      	beq.n	800be80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f042 0201 	orr.w	r2, r2, #1
 800be6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be6e:	e007      	b.n	800be80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0201 	orr.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	40010000 	.word	0x40010000
 800be94:	40000400 	.word	0x40000400
 800be98:	40000800 	.word	0x40000800
 800be9c:	40000c00 	.word	0x40000c00
 800bea0:	40014000 	.word	0x40014000

0800bea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e041      	b.n	800bf3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f839 	bl	800bf42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2202      	movs	r2, #2
 800bed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3304      	adds	r3, #4
 800bee0:	4619      	mov	r1, r3
 800bee2:	4610      	mov	r0, r2
 800bee4:	f000 fb8a 	bl	800c5fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
	...

0800bf58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d109      	bne.n	800bf7c <HAL_TIM_PWM_Start+0x24>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	bf14      	ite	ne
 800bf74:	2301      	movne	r3, #1
 800bf76:	2300      	moveq	r3, #0
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	e022      	b.n	800bfc2 <HAL_TIM_PWM_Start+0x6a>
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d109      	bne.n	800bf96 <HAL_TIM_PWM_Start+0x3e>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	bf14      	ite	ne
 800bf8e:	2301      	movne	r3, #1
 800bf90:	2300      	moveq	r3, #0
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	e015      	b.n	800bfc2 <HAL_TIM_PWM_Start+0x6a>
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b08      	cmp	r3, #8
 800bf9a:	d109      	bne.n	800bfb0 <HAL_TIM_PWM_Start+0x58>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	bf14      	ite	ne
 800bfa8:	2301      	movne	r3, #1
 800bfaa:	2300      	moveq	r3, #0
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	e008      	b.n	800bfc2 <HAL_TIM_PWM_Start+0x6a>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	bf14      	ite	ne
 800bfbc:	2301      	movne	r3, #1
 800bfbe:	2300      	moveq	r3, #0
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e068      	b.n	800c09c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d104      	bne.n	800bfda <HAL_TIM_PWM_Start+0x82>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bfd8:	e013      	b.n	800c002 <HAL_TIM_PWM_Start+0xaa>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	d104      	bne.n	800bfea <HAL_TIM_PWM_Start+0x92>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bfe8:	e00b      	b.n	800c002 <HAL_TIM_PWM_Start+0xaa>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d104      	bne.n	800bffa <HAL_TIM_PWM_Start+0xa2>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bff8:	e003      	b.n	800c002 <HAL_TIM_PWM_Start+0xaa>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2202      	movs	r2, #2
 800bffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2201      	movs	r2, #1
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fda8 	bl	800cb60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a23      	ldr	r2, [pc, #140]	@ (800c0a4 <HAL_TIM_PWM_Start+0x14c>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d107      	bne.n	800c02a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c028:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a1d      	ldr	r2, [pc, #116]	@ (800c0a4 <HAL_TIM_PWM_Start+0x14c>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d018      	beq.n	800c066 <HAL_TIM_PWM_Start+0x10e>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c03c:	d013      	beq.n	800c066 <HAL_TIM_PWM_Start+0x10e>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a19      	ldr	r2, [pc, #100]	@ (800c0a8 <HAL_TIM_PWM_Start+0x150>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d00e      	beq.n	800c066 <HAL_TIM_PWM_Start+0x10e>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a17      	ldr	r2, [pc, #92]	@ (800c0ac <HAL_TIM_PWM_Start+0x154>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d009      	beq.n	800c066 <HAL_TIM_PWM_Start+0x10e>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a16      	ldr	r2, [pc, #88]	@ (800c0b0 <HAL_TIM_PWM_Start+0x158>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d004      	beq.n	800c066 <HAL_TIM_PWM_Start+0x10e>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a14      	ldr	r2, [pc, #80]	@ (800c0b4 <HAL_TIM_PWM_Start+0x15c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d111      	bne.n	800c08a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f003 0307 	and.w	r3, r3, #7
 800c070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b06      	cmp	r3, #6
 800c076:	d010      	beq.n	800c09a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f042 0201 	orr.w	r2, r2, #1
 800c086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c088:	e007      	b.n	800c09a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f042 0201 	orr.w	r2, r2, #1
 800c098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	40010000 	.word	0x40010000
 800c0a8:	40000400 	.word	0x40000400
 800c0ac:	40000800 	.word	0x40000800
 800c0b0:	40000c00 	.word	0x40000c00
 800c0b4:	40014000 	.word	0x40014000

0800c0b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	f003 0302 	and.w	r3, r3, #2
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d020      	beq.n	800c11c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f003 0302 	and.w	r3, r3, #2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d01b      	beq.n	800c11c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f06f 0202 	mvn.w	r2, #2
 800c0ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	f003 0303 	and.w	r3, r3, #3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d003      	beq.n	800c10a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa5b 	bl	800c5be <HAL_TIM_IC_CaptureCallback>
 800c108:	e005      	b.n	800c116 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fa4d 	bl	800c5aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fa5e 	bl	800c5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	2b00      	cmp	r3, #0
 800c124:	d020      	beq.n	800c168 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01b      	beq.n	800c168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f06f 0204 	mvn.w	r2, #4
 800c138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2202      	movs	r2, #2
 800c13e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fa35 	bl	800c5be <HAL_TIM_IC_CaptureCallback>
 800c154:	e005      	b.n	800c162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa27 	bl	800c5aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fa38 	bl	800c5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f003 0308 	and.w	r3, r3, #8
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d020      	beq.n	800c1b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f003 0308 	and.w	r3, r3, #8
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d01b      	beq.n	800c1b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f06f 0208 	mvn.w	r2, #8
 800c184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2204      	movs	r2, #4
 800c18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	f003 0303 	and.w	r3, r3, #3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fa0f 	bl	800c5be <HAL_TIM_IC_CaptureCallback>
 800c1a0:	e005      	b.n	800c1ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fa01 	bl	800c5aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fa12 	bl	800c5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	f003 0310 	and.w	r3, r3, #16
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d020      	beq.n	800c200 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f003 0310 	and.w	r3, r3, #16
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d01b      	beq.n	800c200 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f06f 0210 	mvn.w	r2, #16
 800c1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2208      	movs	r2, #8
 800c1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f9e9 	bl	800c5be <HAL_TIM_IC_CaptureCallback>
 800c1ec:	e005      	b.n	800c1fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f9db 	bl	800c5aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f9ec 	bl	800c5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00c      	beq.n	800c224 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d007      	beq.n	800c224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f06f 0201 	mvn.w	r2, #1
 800c21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f8 f858 	bl	80042d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00c      	beq.n	800c248 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c234:	2b00      	cmp	r3, #0
 800c236:	d007      	beq.n	800c248 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fd2a 	bl	800cc9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00c      	beq.n	800c26c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d007      	beq.n	800c26c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f9bd 	bl	800c5e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f003 0320 	and.w	r3, r3, #32
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00c      	beq.n	800c290 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f003 0320 	and.w	r3, r3, #32
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d007      	beq.n	800c290 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f06f 0220 	mvn.w	r2, #32
 800c288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fcfc 	bl	800cc88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c290:	bf00      	nop
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d101      	bne.n	800c2b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	e0ae      	b.n	800c414 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b0c      	cmp	r3, #12
 800c2c2:	f200 809f 	bhi.w	800c404 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c301 	.word	0x0800c301
 800c2d0:	0800c405 	.word	0x0800c405
 800c2d4:	0800c405 	.word	0x0800c405
 800c2d8:	0800c405 	.word	0x0800c405
 800c2dc:	0800c341 	.word	0x0800c341
 800c2e0:	0800c405 	.word	0x0800c405
 800c2e4:	0800c405 	.word	0x0800c405
 800c2e8:	0800c405 	.word	0x0800c405
 800c2ec:	0800c383 	.word	0x0800c383
 800c2f0:	0800c405 	.word	0x0800c405
 800c2f4:	0800c405 	.word	0x0800c405
 800c2f8:	0800c405 	.word	0x0800c405
 800c2fc:	0800c3c3 	.word	0x0800c3c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	4618      	mov	r0, r3
 800c308:	f000 fa04 	bl	800c714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	699a      	ldr	r2, [r3, #24]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f042 0208 	orr.w	r2, r2, #8
 800c31a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	699a      	ldr	r2, [r3, #24]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f022 0204 	bic.w	r2, r2, #4
 800c32a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6999      	ldr	r1, [r3, #24]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	691a      	ldr	r2, [r3, #16]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	619a      	str	r2, [r3, #24]
      break;
 800c33e:	e064      	b.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68b9      	ldr	r1, [r7, #8]
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fa4a 	bl	800c7e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	699a      	ldr	r2, [r3, #24]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c35a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	699a      	ldr	r2, [r3, #24]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c36a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	6999      	ldr	r1, [r3, #24]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	021a      	lsls	r2, r3, #8
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	619a      	str	r2, [r3, #24]
      break;
 800c380:	e043      	b.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 fa95 	bl	800c8b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	69da      	ldr	r2, [r3, #28]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f042 0208 	orr.w	r2, r2, #8
 800c39c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	69da      	ldr	r2, [r3, #28]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f022 0204 	bic.w	r2, r2, #4
 800c3ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	69d9      	ldr	r1, [r3, #28]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	691a      	ldr	r2, [r3, #16]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	61da      	str	r2, [r3, #28]
      break;
 800c3c0:	e023      	b.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68b9      	ldr	r1, [r7, #8]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 fadf 	bl	800c98c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	69da      	ldr	r2, [r3, #28]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	69da      	ldr	r2, [r3, #28]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	69d9      	ldr	r1, [r3, #28]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	021a      	lsls	r2, r3, #8
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	430a      	orrs	r2, r1
 800c400:	61da      	str	r2, [r3, #28]
      break;
 800c402:	e002      	b.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	75fb      	strb	r3, [r7, #23]
      break;
 800c408:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c412:	7dfb      	ldrb	r3, [r7, #23]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c430:	2b01      	cmp	r3, #1
 800c432:	d101      	bne.n	800c438 <HAL_TIM_ConfigClockSource+0x1c>
 800c434:	2302      	movs	r3, #2
 800c436:	e0b4      	b.n	800c5a2 <HAL_TIM_ConfigClockSource+0x186>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2202      	movs	r2, #2
 800c444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c45e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c470:	d03e      	beq.n	800c4f0 <HAL_TIM_ConfigClockSource+0xd4>
 800c472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c476:	f200 8087 	bhi.w	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c47a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c47e:	f000 8086 	beq.w	800c58e <HAL_TIM_ConfigClockSource+0x172>
 800c482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c486:	d87f      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c488:	2b70      	cmp	r3, #112	@ 0x70
 800c48a:	d01a      	beq.n	800c4c2 <HAL_TIM_ConfigClockSource+0xa6>
 800c48c:	2b70      	cmp	r3, #112	@ 0x70
 800c48e:	d87b      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c490:	2b60      	cmp	r3, #96	@ 0x60
 800c492:	d050      	beq.n	800c536 <HAL_TIM_ConfigClockSource+0x11a>
 800c494:	2b60      	cmp	r3, #96	@ 0x60
 800c496:	d877      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c498:	2b50      	cmp	r3, #80	@ 0x50
 800c49a:	d03c      	beq.n	800c516 <HAL_TIM_ConfigClockSource+0xfa>
 800c49c:	2b50      	cmp	r3, #80	@ 0x50
 800c49e:	d873      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a0:	2b40      	cmp	r3, #64	@ 0x40
 800c4a2:	d058      	beq.n	800c556 <HAL_TIM_ConfigClockSource+0x13a>
 800c4a4:	2b40      	cmp	r3, #64	@ 0x40
 800c4a6:	d86f      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a8:	2b30      	cmp	r3, #48	@ 0x30
 800c4aa:	d064      	beq.n	800c576 <HAL_TIM_ConfigClockSource+0x15a>
 800c4ac:	2b30      	cmp	r3, #48	@ 0x30
 800c4ae:	d86b      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b0:	2b20      	cmp	r3, #32
 800c4b2:	d060      	beq.n	800c576 <HAL_TIM_ConfigClockSource+0x15a>
 800c4b4:	2b20      	cmp	r3, #32
 800c4b6:	d867      	bhi.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d05c      	beq.n	800c576 <HAL_TIM_ConfigClockSource+0x15a>
 800c4bc:	2b10      	cmp	r3, #16
 800c4be:	d05a      	beq.n	800c576 <HAL_TIM_ConfigClockSource+0x15a>
 800c4c0:	e062      	b.n	800c588 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4d2:	f000 fb25 	bl	800cb20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	609a      	str	r2, [r3, #8]
      break;
 800c4ee:	e04f      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c500:	f000 fb0e 	bl	800cb20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	689a      	ldr	r2, [r3, #8]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c512:	609a      	str	r2, [r3, #8]
      break;
 800c514:	e03c      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c522:	461a      	mov	r2, r3
 800c524:	f000 fa82 	bl	800ca2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2150      	movs	r1, #80	@ 0x50
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fadb 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c534:	e02c      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c542:	461a      	mov	r2, r3
 800c544:	f000 faa1 	bl	800ca8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2160      	movs	r1, #96	@ 0x60
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 facb 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c554:	e01c      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c562:	461a      	mov	r2, r3
 800c564:	f000 fa62 	bl	800ca2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2140      	movs	r1, #64	@ 0x40
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 fabb 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c574:	e00c      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f000 fab2 	bl	800caea <TIM_ITRx_SetConfig>
      break;
 800c586:	e003      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	73fb      	strb	r3, [r7, #15]
      break;
 800c58c:	e000      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c58e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5b2:	bf00      	nop
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b083      	sub	sp, #12
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5ee:	bf00      	nop
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
	...

0800c5fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a3a      	ldr	r2, [pc, #232]	@ (800c6f8 <TIM_Base_SetConfig+0xfc>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d00f      	beq.n	800c634 <TIM_Base_SetConfig+0x38>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c61a:	d00b      	beq.n	800c634 <TIM_Base_SetConfig+0x38>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a37      	ldr	r2, [pc, #220]	@ (800c6fc <TIM_Base_SetConfig+0x100>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d007      	beq.n	800c634 <TIM_Base_SetConfig+0x38>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a36      	ldr	r2, [pc, #216]	@ (800c700 <TIM_Base_SetConfig+0x104>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d003      	beq.n	800c634 <TIM_Base_SetConfig+0x38>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a35      	ldr	r2, [pc, #212]	@ (800c704 <TIM_Base_SetConfig+0x108>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d108      	bne.n	800c646 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c63a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4313      	orrs	r3, r2
 800c644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a2b      	ldr	r2, [pc, #172]	@ (800c6f8 <TIM_Base_SetConfig+0xfc>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d01b      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c654:	d017      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a28      	ldr	r2, [pc, #160]	@ (800c6fc <TIM_Base_SetConfig+0x100>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d013      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a27      	ldr	r2, [pc, #156]	@ (800c700 <TIM_Base_SetConfig+0x104>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d00f      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a26      	ldr	r2, [pc, #152]	@ (800c704 <TIM_Base_SetConfig+0x108>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d00b      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a25      	ldr	r2, [pc, #148]	@ (800c708 <TIM_Base_SetConfig+0x10c>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d007      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a24      	ldr	r2, [pc, #144]	@ (800c70c <TIM_Base_SetConfig+0x110>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d003      	beq.n	800c686 <TIM_Base_SetConfig+0x8a>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a23      	ldr	r2, [pc, #140]	@ (800c710 <TIM_Base_SetConfig+0x114>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d108      	bne.n	800c698 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c68c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	4313      	orrs	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f8 <TIM_Base_SetConfig+0xfc>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d103      	bne.n	800c6cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	691a      	ldr	r2, [r3, #16]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d105      	bne.n	800c6ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f023 0201 	bic.w	r2, r3, #1
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	611a      	str	r2, [r3, #16]
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	3714      	adds	r7, #20
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	40010000 	.word	0x40010000
 800c6fc:	40000400 	.word	0x40000400
 800c700:	40000800 	.word	0x40000800
 800c704:	40000c00 	.word	0x40000c00
 800c708:	40014000 	.word	0x40014000
 800c70c:	40014400 	.word	0x40014400
 800c710:	40014800 	.word	0x40014800

0800c714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a1b      	ldr	r3, [r3, #32]
 800c728:	f023 0201 	bic.w	r2, r3, #1
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f023 0303 	bic.w	r3, r3, #3
 800c74a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	4313      	orrs	r3, r2
 800c754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f023 0302 	bic.w	r3, r3, #2
 800c75c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	4313      	orrs	r3, r2
 800c766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a1c      	ldr	r2, [pc, #112]	@ (800c7dc <TIM_OC1_SetConfig+0xc8>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d10c      	bne.n	800c78a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f023 0308 	bic.w	r3, r3, #8
 800c776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	4313      	orrs	r3, r2
 800c780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f023 0304 	bic.w	r3, r3, #4
 800c788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a13      	ldr	r2, [pc, #76]	@ (800c7dc <TIM_OC1_SetConfig+0xc8>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d111      	bne.n	800c7b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	621a      	str	r2, [r3, #32]
}
 800c7d0:	bf00      	nop
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	40010000 	.word	0x40010000

0800c7e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	f023 0210 	bic.w	r2, r3, #16
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	021b      	lsls	r3, r3, #8
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	4313      	orrs	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f023 0320 	bic.w	r3, r3, #32
 800c82a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	011b      	lsls	r3, r3, #4
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	4313      	orrs	r3, r2
 800c836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a1e      	ldr	r2, [pc, #120]	@ (800c8b4 <TIM_OC2_SetConfig+0xd4>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10d      	bne.n	800c85c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	011b      	lsls	r3, r3, #4
 800c84e:	697a      	ldr	r2, [r7, #20]
 800c850:	4313      	orrs	r3, r2
 800c852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c85a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a15      	ldr	r2, [pc, #84]	@ (800c8b4 <TIM_OC2_SetConfig+0xd4>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d113      	bne.n	800c88c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c86a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	621a      	str	r2, [r3, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	371c      	adds	r7, #28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	40010000 	.word	0x40010000

0800c8b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f023 0303 	bic.w	r3, r3, #3
 800c8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	021b      	lsls	r3, r3, #8
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a1d      	ldr	r2, [pc, #116]	@ (800c988 <TIM_OC3_SetConfig+0xd0>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d10d      	bne.n	800c932 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c91c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	021b      	lsls	r3, r3, #8
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	4313      	orrs	r3, r2
 800c928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a14      	ldr	r2, [pc, #80]	@ (800c988 <TIM_OC3_SetConfig+0xd0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d113      	bne.n	800c962 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	011b      	lsls	r3, r3, #4
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	4313      	orrs	r3, r2
 800c954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	4313      	orrs	r3, r2
 800c960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	621a      	str	r2, [r3, #32]
}
 800c97c:	bf00      	nop
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	40010000 	.word	0x40010000

0800c98c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b087      	sub	sp, #28
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	031b      	lsls	r3, r3, #12
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a10      	ldr	r2, [pc, #64]	@ (800ca28 <TIM_OC4_SetConfig+0x9c>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d109      	bne.n	800ca00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	019b      	lsls	r3, r3, #6
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	621a      	str	r2, [r3, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	371c      	adds	r7, #28
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	40010000 	.word	0x40010000

0800ca2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	f023 0201 	bic.w	r2, r3, #1
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	011b      	lsls	r3, r3, #4
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f023 030a 	bic.w	r3, r3, #10
 800ca68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	621a      	str	r2, [r3, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b087      	sub	sp, #28
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	f023 0210 	bic.w	r2, r3, #16
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	031b      	lsls	r3, r3, #12
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cac6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	4313      	orrs	r3, r2
 800cad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	621a      	str	r2, [r3, #32]
}
 800cade:	bf00      	nop
 800cae0:	371c      	adds	r7, #28
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800caea:	b480      	push	{r7}
 800caec:	b085      	sub	sp, #20
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb02:	683a      	ldr	r2, [r7, #0]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	f043 0307 	orr.w	r3, r3, #7
 800cb0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	609a      	str	r2, [r3, #8]
}
 800cb14:	bf00      	nop
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	021a      	lsls	r2, r3, #8
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	431a      	orrs	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	697a      	ldr	r2, [r7, #20]
 800cb52:	609a      	str	r2, [r3, #8]
}
 800cb54:	bf00      	nop
 800cb56:	371c      	adds	r7, #28
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f003 031f 	and.w	r3, r3, #31
 800cb72:	2201      	movs	r2, #1
 800cb74:	fa02 f303 	lsl.w	r3, r2, r3
 800cb78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6a1a      	ldr	r2, [r3, #32]
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	43db      	mvns	r3, r3
 800cb82:	401a      	ands	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6a1a      	ldr	r2, [r3, #32]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	fa01 f303 	lsl.w	r3, r1, r3
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	621a      	str	r2, [r3, #32]
}
 800cb9e:	bf00      	nop
 800cba0:	371c      	adds	r7, #28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
	...

0800cbac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d101      	bne.n	800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e050      	b.n	800cc66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a1c      	ldr	r2, [pc, #112]	@ (800cc74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d018      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc10:	d013      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a18      	ldr	r2, [pc, #96]	@ (800cc78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d00e      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a16      	ldr	r2, [pc, #88]	@ (800cc7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d009      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a15      	ldr	r2, [pc, #84]	@ (800cc80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d004      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a13      	ldr	r2, [pc, #76]	@ (800cc84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d10c      	bne.n	800cc54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	40010000 	.word	0x40010000
 800cc78:	40000400 	.word	0x40000400
 800cc7c:	40000800 	.word	0x40000800
 800cc80:	40000c00 	.word	0x40000c00
 800cc84:	40014000 	.word	0x40014000

0800cc88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e042      	b.n	800cd48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d106      	bne.n	800ccdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7f7 ff50 	bl	8004b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2224      	movs	r2, #36	@ 0x24
 800cce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68da      	ldr	r2, [r3, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ccf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fd11 	bl	800d71c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	691a      	ldr	r2, [r3, #16]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	695a      	ldr	r2, [r3, #20]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68da      	ldr	r2, [r3, #12]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2220      	movs	r2, #32
 800cd34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2220      	movs	r2, #32
 800cd3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b20      	cmp	r3, #32
 800cd68:	d121      	bne.n	800cdae <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <HAL_UART_Transmit_IT+0x26>
 800cd70:	88fb      	ldrh	r3, [r7, #6]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e01a      	b.n	800cdb0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	68ba      	ldr	r2, [r7, #8]
 800cd7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	88fa      	ldrh	r2, [r7, #6]
 800cd84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	88fa      	ldrh	r2, [r7, #6]
 800cd8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2221      	movs	r2, #33	@ 0x21
 800cd96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68da      	ldr	r2, [r3, #12]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cda8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	e000      	b.n	800cdb0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800cdae:	2302      	movs	r3, #2
  }
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	2b20      	cmp	r3, #32
 800cdd4:	d112      	bne.n	800cdfc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <HAL_UART_Receive_IT+0x26>
 800cddc:	88fb      	ldrh	r3, [r7, #6]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e00b      	b.n	800cdfe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cdec:	88fb      	ldrh	r3, [r7, #6]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	68b9      	ldr	r1, [r7, #8]
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f000 faba 	bl	800d36c <UART_Start_Receive_IT>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	e000      	b.n	800cdfe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cdfc:	2302      	movs	r3, #2
  }
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
	...

0800ce08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b0ba      	sub	sp, #232	@ 0xe8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ce3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce3e:	f003 030f 	and.w	r3, r3, #15
 800ce42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ce46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10f      	bne.n	800ce6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce52:	f003 0320 	and.w	r3, r3, #32
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d009      	beq.n	800ce6e <HAL_UART_IRQHandler+0x66>
 800ce5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce5e:	f003 0320 	and.w	r3, r3, #32
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fb99 	bl	800d59e <UART_Receive_IT>
      return;
 800ce6c:	e25b      	b.n	800d326 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ce6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f000 80de 	beq.w	800d034 <HAL_UART_IRQHandler+0x22c>
 800ce78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce7c:	f003 0301 	and.w	r3, r3, #1
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ce84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 80d1 	beq.w	800d034 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ce92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00b      	beq.n	800ceb6 <HAL_UART_IRQHandler+0xae>
 800ce9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceae:	f043 0201 	orr.w	r2, r3, #1
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ceb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00b      	beq.n	800ceda <HAL_UART_IRQHandler+0xd2>
 800cec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d005      	beq.n	800ceda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ced2:	f043 0202 	orr.w	r2, r3, #2
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ceda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cede:	f003 0302 	and.w	r3, r3, #2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00b      	beq.n	800cefe <HAL_UART_IRQHandler+0xf6>
 800cee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cef6:	f043 0204 	orr.w	r2, r3, #4
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf02:	f003 0308 	and.w	r3, r3, #8
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d011      	beq.n	800cf2e <HAL_UART_IRQHandler+0x126>
 800cf0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf0e:	f003 0320 	and.w	r3, r3, #32
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d105      	bne.n	800cf22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cf16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d005      	beq.n	800cf2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf26:	f043 0208 	orr.w	r2, r3, #8
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 81f2 	beq.w	800d31c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf3c:	f003 0320 	and.w	r3, r3, #32
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d008      	beq.n	800cf56 <HAL_UART_IRQHandler+0x14e>
 800cf44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf48:	f003 0320 	and.w	r3, r3, #32
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fb24 	bl	800d59e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	695b      	ldr	r3, [r3, #20]
 800cf5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf60:	2b40      	cmp	r3, #64	@ 0x40
 800cf62:	bf0c      	ite	eq
 800cf64:	2301      	moveq	r3, #1
 800cf66:	2300      	movne	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf72:	f003 0308 	and.w	r3, r3, #8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d103      	bne.n	800cf82 <HAL_UART_IRQHandler+0x17a>
 800cf7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d04f      	beq.n	800d022 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fa2c 	bl	800d3e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf92:	2b40      	cmp	r3, #64	@ 0x40
 800cf94:	d141      	bne.n	800d01a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3314      	adds	r3, #20
 800cf9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfa4:	e853 3f00 	ldrex	r3, [r3]
 800cfa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cfac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cfb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfd2:	e841 2300 	strex	r3, r2, [r1]
 800cfd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1d9      	bne.n	800cf96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d013      	beq.n	800d012 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfee:	4a7e      	ldr	r2, [pc, #504]	@ (800d1e8 <HAL_UART_IRQHandler+0x3e0>)
 800cff0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7f8 ff6a 	bl	8005ed0 <HAL_DMA_Abort_IT>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d016      	beq.n	800d030 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d00c:	4610      	mov	r0, r2
 800d00e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d010:	e00e      	b.n	800d030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f994 	bl	800d340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d018:	e00a      	b.n	800d030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f990 	bl	800d340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d020:	e006      	b.n	800d030 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f98c 	bl	800d340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d02e:	e175      	b.n	800d31c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d030:	bf00      	nop
    return;
 800d032:	e173      	b.n	800d31c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d038:	2b01      	cmp	r3, #1
 800d03a:	f040 814f 	bne.w	800d2dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d042:	f003 0310 	and.w	r3, r3, #16
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 8148 	beq.w	800d2dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d050:	f003 0310 	and.w	r3, r3, #16
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 8141 	beq.w	800d2dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d05a:	2300      	movs	r3, #0
 800d05c:	60bb      	str	r3, [r7, #8]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	60bb      	str	r3, [r7, #8]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	60bb      	str	r3, [r7, #8]
 800d06e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d07a:	2b40      	cmp	r3, #64	@ 0x40
 800d07c:	f040 80b6 	bne.w	800d1ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d08c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 8145 	beq.w	800d320 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d09a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	f080 813e 	bcs.w	800d320 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d0aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0b6:	f000 8088 	beq.w	800d1ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	330c      	adds	r3, #12
 800d0c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d0c8:	e853 3f00 	ldrex	r3, [r3]
 800d0cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d0d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	330c      	adds	r3, #12
 800d0e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d0e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d0ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d0f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0f6:	e841 2300 	strex	r3, r2, [r1]
 800d0fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1d9      	bne.n	800d0ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3314      	adds	r3, #20
 800d10c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d110:	e853 3f00 	ldrex	r3, [r3]
 800d114:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d116:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d118:	f023 0301 	bic.w	r3, r3, #1
 800d11c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3314      	adds	r3, #20
 800d126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d12a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d12e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d130:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d132:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d136:	e841 2300 	strex	r3, r2, [r1]
 800d13a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d13c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1e1      	bne.n	800d106 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3314      	adds	r3, #20
 800d148:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d14c:	e853 3f00 	ldrex	r3, [r3]
 800d150:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	3314      	adds	r3, #20
 800d162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d166:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d168:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d16c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d16e:	e841 2300 	strex	r3, r2, [r1]
 800d172:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1e3      	bne.n	800d142 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2220      	movs	r2, #32
 800d17e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	330c      	adds	r3, #12
 800d18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d192:	e853 3f00 	ldrex	r3, [r3]
 800d196:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d19a:	f023 0310 	bic.w	r3, r3, #16
 800d19e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	330c      	adds	r3, #12
 800d1a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d1ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d1ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1b4:	e841 2300 	strex	r3, r2, [r1]
 800d1b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d1ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e3      	bne.n	800d188 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f8 fe13 	bl	8005df0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f8b7 	bl	800d354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d1e6:	e09b      	b.n	800d320 <HAL_UART_IRQHandler+0x518>
 800d1e8:	0800d4a7 	.word	0x0800d4a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d200:	b29b      	uxth	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	f000 808e 	beq.w	800d324 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 8089 	beq.w	800d324 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	330c      	adds	r3, #12
 800d218:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21c:	e853 3f00 	ldrex	r3, [r3]
 800d220:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d228:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	330c      	adds	r3, #12
 800d232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d236:	647a      	str	r2, [r7, #68]	@ 0x44
 800d238:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d23c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d23e:	e841 2300 	strex	r3, r2, [r1]
 800d242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1e3      	bne.n	800d212 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3314      	adds	r3, #20
 800d250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d254:	e853 3f00 	ldrex	r3, [r3]
 800d258:	623b      	str	r3, [r7, #32]
   return(result);
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	f023 0301 	bic.w	r3, r3, #1
 800d260:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3314      	adds	r3, #20
 800d26a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d26e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d276:	e841 2300 	strex	r3, r2, [r1]
 800d27a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1e3      	bne.n	800d24a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2220      	movs	r2, #32
 800d286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	330c      	adds	r3, #12
 800d296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f023 0310 	bic.w	r3, r3, #16
 800d2a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	330c      	adds	r3, #12
 800d2b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d2b4:	61fa      	str	r2, [r7, #28]
 800d2b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b8:	69b9      	ldr	r1, [r7, #24]
 800d2ba:	69fa      	ldr	r2, [r7, #28]
 800d2bc:	e841 2300 	strex	r3, r2, [r1]
 800d2c0:	617b      	str	r3, [r7, #20]
   return(result);
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e3      	bne.n	800d290 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d2ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f83d 	bl	800d354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2da:	e023      	b.n	800d324 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d009      	beq.n	800d2fc <HAL_UART_IRQHandler+0x4f4>
 800d2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d003      	beq.n	800d2fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f8ea 	bl	800d4ce <UART_Transmit_IT>
    return;
 800d2fa:	e014      	b.n	800d326 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00e      	beq.n	800d326 <HAL_UART_IRQHandler+0x51e>
 800d308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d310:	2b00      	cmp	r3, #0
 800d312:	d008      	beq.n	800d326 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f92a 	bl	800d56e <UART_EndTransmit_IT>
    return;
 800d31a:	e004      	b.n	800d326 <HAL_UART_IRQHandler+0x51e>
    return;
 800d31c:	bf00      	nop
 800d31e:	e002      	b.n	800d326 <HAL_UART_IRQHandler+0x51e>
      return;
 800d320:	bf00      	nop
 800d322:	e000      	b.n	800d326 <HAL_UART_IRQHandler+0x51e>
      return;
 800d324:	bf00      	nop
  }
}
 800d326:	37e8      	adds	r7, #232	@ 0xe8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	4613      	mov	r3, r2
 800d378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	88fa      	ldrh	r2, [r7, #6]
 800d384:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	88fa      	ldrh	r2, [r7, #6]
 800d38a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2222      	movs	r2, #34	@ 0x22
 800d396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68da      	ldr	r2, [r3, #12]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	695a      	ldr	r2, [r3, #20]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f042 0201 	orr.w	r2, r2, #1
 800d3c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f042 0220 	orr.w	r2, r2, #32
 800d3d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b095      	sub	sp, #84	@ 0x54
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f2:	e853 3f00 	ldrex	r3, [r3]
 800d3f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	330c      	adds	r3, #12
 800d406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d408:	643a      	str	r2, [r7, #64]	@ 0x40
 800d40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d40e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d410:	e841 2300 	strex	r3, r2, [r1]
 800d414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1e5      	bne.n	800d3e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3314      	adds	r3, #20
 800d422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	e853 3f00 	ldrex	r3, [r3]
 800d42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	f023 0301 	bic.w	r3, r3, #1
 800d432:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3314      	adds	r3, #20
 800d43a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d43c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d43e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d444:	e841 2300 	strex	r3, r2, [r1]
 800d448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1e5      	bne.n	800d41c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d454:	2b01      	cmp	r3, #1
 800d456:	d119      	bne.n	800d48c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	330c      	adds	r3, #12
 800d45e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	60bb      	str	r3, [r7, #8]
   return(result);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f023 0310 	bic.w	r3, r3, #16
 800d46e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	330c      	adds	r3, #12
 800d476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d478:	61ba      	str	r2, [r7, #24]
 800d47a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	6979      	ldr	r1, [r7, #20]
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	613b      	str	r3, [r7, #16]
   return(result);
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e5      	bne.n	800d458 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2220      	movs	r2, #32
 800d490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d49a:	bf00      	nop
 800d49c:	3754      	adds	r7, #84	@ 0x54
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f7ff ff3d 	bl	800d340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4c6:	bf00      	nop
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b085      	sub	sp, #20
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b21      	cmp	r3, #33	@ 0x21
 800d4e0:	d13e      	bne.n	800d560 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4ea:	d114      	bne.n	800d516 <UART_Transmit_IT+0x48>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d110      	bne.n	800d516 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a1b      	ldr	r3, [r3, #32]
 800d4f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d508:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	1c9a      	adds	r2, r3, #2
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	621a      	str	r2, [r3, #32]
 800d514:	e008      	b.n	800d528 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	1c59      	adds	r1, r3, #1
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	6211      	str	r1, [r2, #32]
 800d520:	781a      	ldrb	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	3b01      	subs	r3, #1
 800d530:	b29b      	uxth	r3, r3
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	4619      	mov	r1, r3
 800d536:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10f      	bne.n	800d55c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d54a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d55a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	e000      	b.n	800d562 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d560:	2302      	movs	r3, #2
  }
}
 800d562:	4618      	mov	r0, r3
 800d564:	3714      	adds	r7, #20
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68da      	ldr	r2, [r3, #12]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d584:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2220      	movs	r2, #32
 800d58a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff fecc 	bl	800d32c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b08c      	sub	sp, #48	@ 0x30
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	2b22      	cmp	r3, #34	@ 0x22
 800d5b0:	f040 80ae 	bne.w	800d710 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5bc:	d117      	bne.n	800d5ee <UART_Receive_IT+0x50>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d113      	bne.n	800d5ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e6:	1c9a      	adds	r2, r3, #2
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	629a      	str	r2, [r3, #40]	@ 0x28
 800d5ec:	e026      	b.n	800d63c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d600:	d007      	beq.n	800d612 <UART_Receive_IT+0x74>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10a      	bne.n	800d620 <UART_Receive_IT+0x82>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d106      	bne.n	800d620 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61c:	701a      	strb	r2, [r3, #0]
 800d61e:	e008      	b.n	800d632 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	b2db      	uxtb	r3, r3
 800d628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d630:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d640:	b29b      	uxth	r3, r3
 800d642:	3b01      	subs	r3, #1
 800d644:	b29b      	uxth	r3, r3
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	4619      	mov	r1, r3
 800d64a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d15d      	bne.n	800d70c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68da      	ldr	r2, [r3, #12]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f022 0220 	bic.w	r2, r2, #32
 800d65e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d66e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	695a      	ldr	r2, [r3, #20]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f022 0201 	bic.w	r2, r2, #1
 800d67e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2220      	movs	r2, #32
 800d684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d692:	2b01      	cmp	r3, #1
 800d694:	d135      	bne.n	800d702 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	330c      	adds	r3, #12
 800d6a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	e853 3f00 	ldrex	r3, [r3]
 800d6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	f023 0310 	bic.w	r3, r3, #16
 800d6b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	330c      	adds	r3, #12
 800d6ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6bc:	623a      	str	r2, [r7, #32]
 800d6be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c0:	69f9      	ldr	r1, [r7, #28]
 800d6c2:	6a3a      	ldr	r2, [r7, #32]
 800d6c4:	e841 2300 	strex	r3, r2, [r1]
 800d6c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1e5      	bne.n	800d69c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 0310 	and.w	r3, r3, #16
 800d6da:	2b10      	cmp	r3, #16
 800d6dc:	d10a      	bne.n	800d6f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7ff fe2a 	bl	800d354 <HAL_UARTEx_RxEventCallback>
 800d700:	e002      	b.n	800d708 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7f6 fe8a 	bl	800441c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	e002      	b.n	800d712 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	e000      	b.n	800d712 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d710:	2302      	movs	r3, #2
  }
}
 800d712:	4618      	mov	r0, r3
 800d714:	3730      	adds	r7, #48	@ 0x30
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d720:	b0c0      	sub	sp, #256	@ 0x100
 800d722:	af00      	add	r7, sp, #0
 800d724:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d738:	68d9      	ldr	r1, [r3, #12]
 800d73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	ea40 0301 	orr.w	r3, r0, r1
 800d744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d74a:	689a      	ldr	r2, [r3, #8]
 800d74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	431a      	orrs	r2, r3
 800d754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d758:	695b      	ldr	r3, [r3, #20]
 800d75a:	431a      	orrs	r2, r3
 800d75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	4313      	orrs	r3, r2
 800d764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d774:	f021 010c 	bic.w	r1, r1, #12
 800d778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d782:	430b      	orrs	r3, r1
 800d784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	695b      	ldr	r3, [r3, #20]
 800d78e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d796:	6999      	ldr	r1, [r3, #24]
 800d798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	ea40 0301 	orr.w	r3, r0, r1
 800d7a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b8f      	ldr	r3, [pc, #572]	@ (800d9e8 <UART_SetConfig+0x2cc>)
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d005      	beq.n	800d7bc <UART_SetConfig+0xa0>
 800d7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	4b8d      	ldr	r3, [pc, #564]	@ (800d9ec <UART_SetConfig+0x2d0>)
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d104      	bne.n	800d7c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d7bc:	f7fe fa92 	bl	800bce4 <HAL_RCC_GetPCLK2Freq>
 800d7c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d7c4:	e003      	b.n	800d7ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d7c6:	f7fe fa79 	bl	800bcbc <HAL_RCC_GetPCLK1Freq>
 800d7ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7d2:	69db      	ldr	r3, [r3, #28]
 800d7d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7d8:	f040 810c 	bne.w	800d9f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d7dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d7ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	462b      	mov	r3, r5
 800d7f2:	1891      	adds	r1, r2, r2
 800d7f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d7f6:	415b      	adcs	r3, r3
 800d7f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d7fe:	4621      	mov	r1, r4
 800d800:	eb12 0801 	adds.w	r8, r2, r1
 800d804:	4629      	mov	r1, r5
 800d806:	eb43 0901 	adc.w	r9, r3, r1
 800d80a:	f04f 0200 	mov.w	r2, #0
 800d80e:	f04f 0300 	mov.w	r3, #0
 800d812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d81a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d81e:	4690      	mov	r8, r2
 800d820:	4699      	mov	r9, r3
 800d822:	4623      	mov	r3, r4
 800d824:	eb18 0303 	adds.w	r3, r8, r3
 800d828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d82c:	462b      	mov	r3, r5
 800d82e:	eb49 0303 	adc.w	r3, r9, r3
 800d832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d842:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d84a:	460b      	mov	r3, r1
 800d84c:	18db      	adds	r3, r3, r3
 800d84e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d850:	4613      	mov	r3, r2
 800d852:	eb42 0303 	adc.w	r3, r2, r3
 800d856:	657b      	str	r3, [r7, #84]	@ 0x54
 800d858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d85c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d860:	f7f2 fd0e 	bl	8000280 <__aeabi_uldivmod>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4b61      	ldr	r3, [pc, #388]	@ (800d9f0 <UART_SetConfig+0x2d4>)
 800d86a:	fba3 2302 	umull	r2, r3, r3, r2
 800d86e:	095b      	lsrs	r3, r3, #5
 800d870:	011c      	lsls	r4, r3, #4
 800d872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d876:	2200      	movs	r2, #0
 800d878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d87c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d884:	4642      	mov	r2, r8
 800d886:	464b      	mov	r3, r9
 800d888:	1891      	adds	r1, r2, r2
 800d88a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d88c:	415b      	adcs	r3, r3
 800d88e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d894:	4641      	mov	r1, r8
 800d896:	eb12 0a01 	adds.w	sl, r2, r1
 800d89a:	4649      	mov	r1, r9
 800d89c:	eb43 0b01 	adc.w	fp, r3, r1
 800d8a0:	f04f 0200 	mov.w	r2, #0
 800d8a4:	f04f 0300 	mov.w	r3, #0
 800d8a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d8ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d8b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8b4:	4692      	mov	sl, r2
 800d8b6:	469b      	mov	fp, r3
 800d8b8:	4643      	mov	r3, r8
 800d8ba:	eb1a 0303 	adds.w	r3, sl, r3
 800d8be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8c2:	464b      	mov	r3, r9
 800d8c4:	eb4b 0303 	adc.w	r3, fp, r3
 800d8c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d8d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d8dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	18db      	adds	r3, r3, r3
 800d8e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	eb42 0303 	adc.w	r3, r2, r3
 800d8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d8f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d8f6:	f7f2 fcc3 	bl	8000280 <__aeabi_uldivmod>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4611      	mov	r1, r2
 800d900:	4b3b      	ldr	r3, [pc, #236]	@ (800d9f0 <UART_SetConfig+0x2d4>)
 800d902:	fba3 2301 	umull	r2, r3, r3, r1
 800d906:	095b      	lsrs	r3, r3, #5
 800d908:	2264      	movs	r2, #100	@ 0x64
 800d90a:	fb02 f303 	mul.w	r3, r2, r3
 800d90e:	1acb      	subs	r3, r1, r3
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d916:	4b36      	ldr	r3, [pc, #216]	@ (800d9f0 <UART_SetConfig+0x2d4>)
 800d918:	fba3 2302 	umull	r2, r3, r3, r2
 800d91c:	095b      	lsrs	r3, r3, #5
 800d91e:	005b      	lsls	r3, r3, #1
 800d920:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d924:	441c      	add	r4, r3
 800d926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d92a:	2200      	movs	r2, #0
 800d92c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d930:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d938:	4642      	mov	r2, r8
 800d93a:	464b      	mov	r3, r9
 800d93c:	1891      	adds	r1, r2, r2
 800d93e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d940:	415b      	adcs	r3, r3
 800d942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d948:	4641      	mov	r1, r8
 800d94a:	1851      	adds	r1, r2, r1
 800d94c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d94e:	4649      	mov	r1, r9
 800d950:	414b      	adcs	r3, r1
 800d952:	637b      	str	r3, [r7, #52]	@ 0x34
 800d954:	f04f 0200 	mov.w	r2, #0
 800d958:	f04f 0300 	mov.w	r3, #0
 800d95c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d960:	4659      	mov	r1, fp
 800d962:	00cb      	lsls	r3, r1, #3
 800d964:	4651      	mov	r1, sl
 800d966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d96a:	4651      	mov	r1, sl
 800d96c:	00ca      	lsls	r2, r1, #3
 800d96e:	4610      	mov	r0, r2
 800d970:	4619      	mov	r1, r3
 800d972:	4603      	mov	r3, r0
 800d974:	4642      	mov	r2, r8
 800d976:	189b      	adds	r3, r3, r2
 800d978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d97c:	464b      	mov	r3, r9
 800d97e:	460a      	mov	r2, r1
 800d980:	eb42 0303 	adc.w	r3, r2, r3
 800d984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d994:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d99c:	460b      	mov	r3, r1
 800d99e:	18db      	adds	r3, r3, r3
 800d9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	eb42 0303 	adc.w	r3, r2, r3
 800d9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d9ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d9b2:	f7f2 fc65 	bl	8000280 <__aeabi_uldivmod>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f0 <UART_SetConfig+0x2d4>)
 800d9bc:	fba3 1302 	umull	r1, r3, r3, r2
 800d9c0:	095b      	lsrs	r3, r3, #5
 800d9c2:	2164      	movs	r1, #100	@ 0x64
 800d9c4:	fb01 f303 	mul.w	r3, r1, r3
 800d9c8:	1ad3      	subs	r3, r2, r3
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	3332      	adds	r3, #50	@ 0x32
 800d9ce:	4a08      	ldr	r2, [pc, #32]	@ (800d9f0 <UART_SetConfig+0x2d4>)
 800d9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d4:	095b      	lsrs	r3, r3, #5
 800d9d6:	f003 0207 	and.w	r2, r3, #7
 800d9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4422      	add	r2, r4
 800d9e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d9e4:	e106      	b.n	800dbf4 <UART_SetConfig+0x4d8>
 800d9e6:	bf00      	nop
 800d9e8:	40011000 	.word	0x40011000
 800d9ec:	40011400 	.word	0x40011400
 800d9f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d9fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800da02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800da06:	4642      	mov	r2, r8
 800da08:	464b      	mov	r3, r9
 800da0a:	1891      	adds	r1, r2, r2
 800da0c:	6239      	str	r1, [r7, #32]
 800da0e:	415b      	adcs	r3, r3
 800da10:	627b      	str	r3, [r7, #36]	@ 0x24
 800da12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da16:	4641      	mov	r1, r8
 800da18:	1854      	adds	r4, r2, r1
 800da1a:	4649      	mov	r1, r9
 800da1c:	eb43 0501 	adc.w	r5, r3, r1
 800da20:	f04f 0200 	mov.w	r2, #0
 800da24:	f04f 0300 	mov.w	r3, #0
 800da28:	00eb      	lsls	r3, r5, #3
 800da2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da2e:	00e2      	lsls	r2, r4, #3
 800da30:	4614      	mov	r4, r2
 800da32:	461d      	mov	r5, r3
 800da34:	4643      	mov	r3, r8
 800da36:	18e3      	adds	r3, r4, r3
 800da38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da3c:	464b      	mov	r3, r9
 800da3e:	eb45 0303 	adc.w	r3, r5, r3
 800da42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da56:	f04f 0200 	mov.w	r2, #0
 800da5a:	f04f 0300 	mov.w	r3, #0
 800da5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800da62:	4629      	mov	r1, r5
 800da64:	008b      	lsls	r3, r1, #2
 800da66:	4621      	mov	r1, r4
 800da68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da6c:	4621      	mov	r1, r4
 800da6e:	008a      	lsls	r2, r1, #2
 800da70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800da74:	f7f2 fc04 	bl	8000280 <__aeabi_uldivmod>
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	4b60      	ldr	r3, [pc, #384]	@ (800dc00 <UART_SetConfig+0x4e4>)
 800da7e:	fba3 2302 	umull	r2, r3, r3, r2
 800da82:	095b      	lsrs	r3, r3, #5
 800da84:	011c      	lsls	r4, r3, #4
 800da86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800da94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800da98:	4642      	mov	r2, r8
 800da9a:	464b      	mov	r3, r9
 800da9c:	1891      	adds	r1, r2, r2
 800da9e:	61b9      	str	r1, [r7, #24]
 800daa0:	415b      	adcs	r3, r3
 800daa2:	61fb      	str	r3, [r7, #28]
 800daa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800daa8:	4641      	mov	r1, r8
 800daaa:	1851      	adds	r1, r2, r1
 800daac:	6139      	str	r1, [r7, #16]
 800daae:	4649      	mov	r1, r9
 800dab0:	414b      	adcs	r3, r1
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	f04f 0200 	mov.w	r2, #0
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dac0:	4659      	mov	r1, fp
 800dac2:	00cb      	lsls	r3, r1, #3
 800dac4:	4651      	mov	r1, sl
 800dac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800daca:	4651      	mov	r1, sl
 800dacc:	00ca      	lsls	r2, r1, #3
 800dace:	4610      	mov	r0, r2
 800dad0:	4619      	mov	r1, r3
 800dad2:	4603      	mov	r3, r0
 800dad4:	4642      	mov	r2, r8
 800dad6:	189b      	adds	r3, r3, r2
 800dad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dadc:	464b      	mov	r3, r9
 800dade:	460a      	mov	r2, r1
 800dae0:	eb42 0303 	adc.w	r3, r2, r3
 800dae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800daf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800daf4:	f04f 0200 	mov.w	r2, #0
 800daf8:	f04f 0300 	mov.w	r3, #0
 800dafc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800db00:	4649      	mov	r1, r9
 800db02:	008b      	lsls	r3, r1, #2
 800db04:	4641      	mov	r1, r8
 800db06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db0a:	4641      	mov	r1, r8
 800db0c:	008a      	lsls	r2, r1, #2
 800db0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800db12:	f7f2 fbb5 	bl	8000280 <__aeabi_uldivmod>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4611      	mov	r1, r2
 800db1c:	4b38      	ldr	r3, [pc, #224]	@ (800dc00 <UART_SetConfig+0x4e4>)
 800db1e:	fba3 2301 	umull	r2, r3, r3, r1
 800db22:	095b      	lsrs	r3, r3, #5
 800db24:	2264      	movs	r2, #100	@ 0x64
 800db26:	fb02 f303 	mul.w	r3, r2, r3
 800db2a:	1acb      	subs	r3, r1, r3
 800db2c:	011b      	lsls	r3, r3, #4
 800db2e:	3332      	adds	r3, #50	@ 0x32
 800db30:	4a33      	ldr	r2, [pc, #204]	@ (800dc00 <UART_SetConfig+0x4e4>)
 800db32:	fba2 2303 	umull	r2, r3, r2, r3
 800db36:	095b      	lsrs	r3, r3, #5
 800db38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db3c:	441c      	add	r4, r3
 800db3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db42:	2200      	movs	r2, #0
 800db44:	673b      	str	r3, [r7, #112]	@ 0x70
 800db46:	677a      	str	r2, [r7, #116]	@ 0x74
 800db48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800db4c:	4642      	mov	r2, r8
 800db4e:	464b      	mov	r3, r9
 800db50:	1891      	adds	r1, r2, r2
 800db52:	60b9      	str	r1, [r7, #8]
 800db54:	415b      	adcs	r3, r3
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db5c:	4641      	mov	r1, r8
 800db5e:	1851      	adds	r1, r2, r1
 800db60:	6039      	str	r1, [r7, #0]
 800db62:	4649      	mov	r1, r9
 800db64:	414b      	adcs	r3, r1
 800db66:	607b      	str	r3, [r7, #4]
 800db68:	f04f 0200 	mov.w	r2, #0
 800db6c:	f04f 0300 	mov.w	r3, #0
 800db70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800db74:	4659      	mov	r1, fp
 800db76:	00cb      	lsls	r3, r1, #3
 800db78:	4651      	mov	r1, sl
 800db7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db7e:	4651      	mov	r1, sl
 800db80:	00ca      	lsls	r2, r1, #3
 800db82:	4610      	mov	r0, r2
 800db84:	4619      	mov	r1, r3
 800db86:	4603      	mov	r3, r0
 800db88:	4642      	mov	r2, r8
 800db8a:	189b      	adds	r3, r3, r2
 800db8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db8e:	464b      	mov	r3, r9
 800db90:	460a      	mov	r2, r1
 800db92:	eb42 0303 	adc.w	r3, r2, r3
 800db96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dba2:	667a      	str	r2, [r7, #100]	@ 0x64
 800dba4:	f04f 0200 	mov.w	r2, #0
 800dba8:	f04f 0300 	mov.w	r3, #0
 800dbac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800dbb0:	4649      	mov	r1, r9
 800dbb2:	008b      	lsls	r3, r1, #2
 800dbb4:	4641      	mov	r1, r8
 800dbb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dbba:	4641      	mov	r1, r8
 800dbbc:	008a      	lsls	r2, r1, #2
 800dbbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dbc2:	f7f2 fb5d 	bl	8000280 <__aeabi_uldivmod>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	4b0d      	ldr	r3, [pc, #52]	@ (800dc00 <UART_SetConfig+0x4e4>)
 800dbcc:	fba3 1302 	umull	r1, r3, r3, r2
 800dbd0:	095b      	lsrs	r3, r3, #5
 800dbd2:	2164      	movs	r1, #100	@ 0x64
 800dbd4:	fb01 f303 	mul.w	r3, r1, r3
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	011b      	lsls	r3, r3, #4
 800dbdc:	3332      	adds	r3, #50	@ 0x32
 800dbde:	4a08      	ldr	r2, [pc, #32]	@ (800dc00 <UART_SetConfig+0x4e4>)
 800dbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe4:	095b      	lsrs	r3, r3, #5
 800dbe6:	f003 020f 	and.w	r2, r3, #15
 800dbea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4422      	add	r2, r4
 800dbf2:	609a      	str	r2, [r3, #8]
}
 800dbf4:	bf00      	nop
 800dbf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc00:	51eb851f 	.word	0x51eb851f

0800dc04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc04:	b084      	sub	sp, #16
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	f107 001c 	add.w	r0, r7, #28
 800dc12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d123      	bne.n	800dc66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dc32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dc46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d105      	bne.n	800dc5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f001 fae8 	bl	800f230 <USB_CoreReset>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73fb      	strb	r3, [r7, #15]
 800dc64:	e01b      	b.n	800dc9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f001 fadc 	bl	800f230 <USB_CoreReset>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dc7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d106      	bne.n	800dc92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	639a      	str	r2, [r3, #56]	@ 0x38
 800dc90:	e005      	b.n	800dc9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dc9e:	7fbb      	ldrb	r3, [r7, #30]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d10b      	bne.n	800dcbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	f043 0206 	orr.w	r2, r3, #6
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f043 0220 	orr.w	r2, r3, #32
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcc8:	b004      	add	sp, #16
 800dcca:	4770      	bx	lr

0800dccc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b087      	sub	sp, #28
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dcda:	79fb      	ldrb	r3, [r7, #7]
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d165      	bne.n	800ddac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	4a41      	ldr	r2, [pc, #260]	@ (800dde8 <USB_SetTurnaroundTime+0x11c>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d906      	bls.n	800dcf6 <USB_SetTurnaroundTime+0x2a>
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	4a40      	ldr	r2, [pc, #256]	@ (800ddec <USB_SetTurnaroundTime+0x120>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d202      	bcs.n	800dcf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dcf0:	230f      	movs	r3, #15
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	e062      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	4a3c      	ldr	r2, [pc, #240]	@ (800ddec <USB_SetTurnaroundTime+0x120>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d306      	bcc.n	800dd0c <USB_SetTurnaroundTime+0x40>
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	4a3b      	ldr	r2, [pc, #236]	@ (800ddf0 <USB_SetTurnaroundTime+0x124>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d202      	bcs.n	800dd0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dd06:	230e      	movs	r3, #14
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	e057      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	4a38      	ldr	r2, [pc, #224]	@ (800ddf0 <USB_SetTurnaroundTime+0x124>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d306      	bcc.n	800dd22 <USB_SetTurnaroundTime+0x56>
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	4a37      	ldr	r2, [pc, #220]	@ (800ddf4 <USB_SetTurnaroundTime+0x128>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d202      	bcs.n	800dd22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dd1c:	230d      	movs	r3, #13
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	e04c      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	4a33      	ldr	r2, [pc, #204]	@ (800ddf4 <USB_SetTurnaroundTime+0x128>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d306      	bcc.n	800dd38 <USB_SetTurnaroundTime+0x6c>
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	4a32      	ldr	r2, [pc, #200]	@ (800ddf8 <USB_SetTurnaroundTime+0x12c>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d802      	bhi.n	800dd38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dd32:	230c      	movs	r3, #12
 800dd34:	617b      	str	r3, [r7, #20]
 800dd36:	e041      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	4a2f      	ldr	r2, [pc, #188]	@ (800ddf8 <USB_SetTurnaroundTime+0x12c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d906      	bls.n	800dd4e <USB_SetTurnaroundTime+0x82>
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4a2e      	ldr	r2, [pc, #184]	@ (800ddfc <USB_SetTurnaroundTime+0x130>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d802      	bhi.n	800dd4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dd48:	230b      	movs	r3, #11
 800dd4a:	617b      	str	r3, [r7, #20]
 800dd4c:	e036      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	4a2a      	ldr	r2, [pc, #168]	@ (800ddfc <USB_SetTurnaroundTime+0x130>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d906      	bls.n	800dd64 <USB_SetTurnaroundTime+0x98>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	4a29      	ldr	r2, [pc, #164]	@ (800de00 <USB_SetTurnaroundTime+0x134>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d802      	bhi.n	800dd64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dd5e:	230a      	movs	r3, #10
 800dd60:	617b      	str	r3, [r7, #20]
 800dd62:	e02b      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	4a26      	ldr	r2, [pc, #152]	@ (800de00 <USB_SetTurnaroundTime+0x134>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d906      	bls.n	800dd7a <USB_SetTurnaroundTime+0xae>
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	4a25      	ldr	r2, [pc, #148]	@ (800de04 <USB_SetTurnaroundTime+0x138>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d202      	bcs.n	800dd7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dd74:	2309      	movs	r3, #9
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e020      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	4a21      	ldr	r2, [pc, #132]	@ (800de04 <USB_SetTurnaroundTime+0x138>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d306      	bcc.n	800dd90 <USB_SetTurnaroundTime+0xc4>
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	4a20      	ldr	r2, [pc, #128]	@ (800de08 <USB_SetTurnaroundTime+0x13c>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d802      	bhi.n	800dd90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dd8a:	2308      	movs	r3, #8
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	e015      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	4a1d      	ldr	r2, [pc, #116]	@ (800de08 <USB_SetTurnaroundTime+0x13c>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d906      	bls.n	800dda6 <USB_SetTurnaroundTime+0xda>
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	4a1c      	ldr	r2, [pc, #112]	@ (800de0c <USB_SetTurnaroundTime+0x140>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d202      	bcs.n	800dda6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dda0:	2307      	movs	r3, #7
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e00a      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dda6:	2306      	movs	r3, #6
 800dda8:	617b      	str	r3, [r7, #20]
 800ddaa:	e007      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ddac:	79fb      	ldrb	r3, [r7, #7]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d102      	bne.n	800ddb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ddb2:	2309      	movs	r3, #9
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	e001      	b.n	800ddbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ddb8:	2309      	movs	r3, #9
 800ddba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	68da      	ldr	r2, [r3, #12]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	029b      	lsls	r3, r3, #10
 800ddd0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	371c      	adds	r7, #28
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	00d8acbf 	.word	0x00d8acbf
 800ddec:	00e4e1c0 	.word	0x00e4e1c0
 800ddf0:	00f42400 	.word	0x00f42400
 800ddf4:	01067380 	.word	0x01067380
 800ddf8:	011a499f 	.word	0x011a499f
 800ddfc:	01312cff 	.word	0x01312cff
 800de00:	014ca43f 	.word	0x014ca43f
 800de04:	016e3600 	.word	0x016e3600
 800de08:	01a6ab1f 	.word	0x01a6ab1f
 800de0c:	01e84800 	.word	0x01e84800

0800de10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	f043 0201 	orr.w	r2, r3, #1
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	f023 0201 	bic.w	r2, r3, #1
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800de60:	2300      	movs	r3, #0
 800de62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d115      	bne.n	800dea2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800de82:	200a      	movs	r0, #10
 800de84:	f7f7 f85c 	bl	8004f40 <HAL_Delay>
      ms += 10U;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	330a      	adds	r3, #10
 800de8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f001 f93f 	bl	800f112 <USB_GetMode>
 800de94:	4603      	mov	r3, r0
 800de96:	2b01      	cmp	r3, #1
 800de98:	d01e      	beq.n	800ded8 <USB_SetCurrentMode+0x84>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2bc7      	cmp	r3, #199	@ 0xc7
 800de9e:	d9f0      	bls.n	800de82 <USB_SetCurrentMode+0x2e>
 800dea0:	e01a      	b.n	800ded8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dea2:	78fb      	ldrb	r3, [r7, #3]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d115      	bne.n	800ded4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800deb4:	200a      	movs	r0, #10
 800deb6:	f7f7 f843 	bl	8004f40 <HAL_Delay>
      ms += 10U;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	330a      	adds	r3, #10
 800debe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f001 f926 	bl	800f112 <USB_GetMode>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d005      	beq.n	800ded8 <USB_SetCurrentMode+0x84>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2bc7      	cmp	r3, #199	@ 0xc7
 800ded0:	d9f0      	bls.n	800deb4 <USB_SetCurrentMode+0x60>
 800ded2:	e001      	b.n	800ded8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e005      	b.n	800dee4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2bc8      	cmp	r3, #200	@ 0xc8
 800dedc:	d101      	bne.n	800dee2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	e000      	b.n	800dee4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800deec:	b084      	sub	sp, #16
 800deee:	b580      	push	{r7, lr}
 800def0:	b086      	sub	sp, #24
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800defa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800df06:	2300      	movs	r3, #0
 800df08:	613b      	str	r3, [r7, #16]
 800df0a:	e009      	b.n	800df20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	3340      	adds	r3, #64	@ 0x40
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4413      	add	r3, r2
 800df16:	2200      	movs	r2, #0
 800df18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	3301      	adds	r3, #1
 800df1e:	613b      	str	r3, [r7, #16]
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2b0e      	cmp	r3, #14
 800df24:	d9f2      	bls.n	800df0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800df26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d11c      	bne.n	800df68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df3c:	f043 0302 	orr.w	r3, r3, #2
 800df40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	639a      	str	r2, [r3, #56]	@ 0x38
 800df66:	e00b      	b.n	800df80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df86:	461a      	mov	r2, r3
 800df88:	2300      	movs	r3, #0
 800df8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800df90:	2b01      	cmp	r3, #1
 800df92:	d10d      	bne.n	800dfb0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800df94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d104      	bne.n	800dfa6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800df9c:	2100      	movs	r1, #0
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 f968 	bl	800e274 <USB_SetDevSpeed>
 800dfa4:	e008      	b.n	800dfb8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 f963 	bl	800e274 <USB_SetDevSpeed>
 800dfae:	e003      	b.n	800dfb8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dfb0:	2103      	movs	r1, #3
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f95e 	bl	800e274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dfb8:	2110      	movs	r1, #16
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f8fa 	bl	800e1b4 <USB_FlushTxFifo>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 f924 	bl	800e218 <USB_FlushRxFifo>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfec:	461a      	mov	r2, r3
 800dfee:	2300      	movs	r3, #0
 800dff0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dff8:	461a      	mov	r2, r3
 800dffa:	2300      	movs	r3, #0
 800dffc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dffe:	2300      	movs	r3, #0
 800e000:	613b      	str	r3, [r7, #16]
 800e002:	e043      	b.n	800e08c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	015a      	lsls	r2, r3, #5
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	4413      	add	r3, r2
 800e00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e01a:	d118      	bne.n	800e04e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10a      	bne.n	800e038 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	015a      	lsls	r2, r3, #5
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4413      	add	r3, r2
 800e02a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e02e:	461a      	mov	r2, r3
 800e030:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	e013      	b.n	800e060 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	015a      	lsls	r2, r3, #5
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	4413      	add	r3, r2
 800e040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e044:	461a      	mov	r2, r3
 800e046:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e04a:	6013      	str	r3, [r2, #0]
 800e04c:	e008      	b.n	800e060 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	015a      	lsls	r2, r3, #5
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	4413      	add	r3, r2
 800e056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e05a:	461a      	mov	r2, r3
 800e05c:	2300      	movs	r3, #0
 800e05e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	015a      	lsls	r2, r3, #5
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e06c:	461a      	mov	r2, r3
 800e06e:	2300      	movs	r3, #0
 800e070:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e07e:	461a      	mov	r2, r3
 800e080:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	3301      	adds	r3, #1
 800e08a:	613b      	str	r3, [r7, #16]
 800e08c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e090:	461a      	mov	r2, r3
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	4293      	cmp	r3, r2
 800e096:	d3b5      	bcc.n	800e004 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
 800e09c:	e043      	b.n	800e126 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	015a      	lsls	r2, r3, #5
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0b4:	d118      	bne.n	800e0e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	015a      	lsls	r2, r3, #5
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e0ce:	6013      	str	r3, [r2, #0]
 800e0d0:	e013      	b.n	800e0fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	015a      	lsls	r2, r3, #5
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	4413      	add	r3, r2
 800e0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	e008      	b.n	800e0fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	015a      	lsls	r2, r3, #5
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	015a      	lsls	r2, r3, #5
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	4413      	add	r3, r2
 800e102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e106:	461a      	mov	r2, r3
 800e108:	2300      	movs	r3, #0
 800e10a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	015a      	lsls	r2, r3, #5
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	4413      	add	r3, r2
 800e114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e118:	461a      	mov	r2, r3
 800e11a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e11e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	3301      	adds	r3, #1
 800e124:	613b      	str	r3, [r7, #16]
 800e126:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e12a:	461a      	mov	r2, r3
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	4293      	cmp	r3, r2
 800e130:	d3b5      	bcc.n	800e09e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e144:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e152:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d105      	bne.n	800e168 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	f043 0210 	orr.w	r2, r3, #16
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	699a      	ldr	r2, [r3, #24]
 800e16c:	4b10      	ldr	r3, [pc, #64]	@ (800e1b0 <USB_DevInit+0x2c4>)
 800e16e:	4313      	orrs	r3, r2
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e174:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d005      	beq.n	800e188 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	f043 0208 	orr.w	r2, r3, #8
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e188:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d107      	bne.n	800e1a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	699b      	ldr	r3, [r3, #24]
 800e194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e198:	f043 0304 	orr.w	r3, r3, #4
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e1ac:	b004      	add	sp, #16
 800e1ae:	4770      	bx	lr
 800e1b0:	803c3800 	.word	0x803c3800

0800e1b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e1ce:	d901      	bls.n	800e1d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	e01b      	b.n	800e20c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	691b      	ldr	r3, [r3, #16]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	daf2      	bge.n	800e1c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	019b      	lsls	r3, r3, #6
 800e1e4:	f043 0220 	orr.w	r2, r3, #32
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e1f8:	d901      	bls.n	800e1fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	e006      	b.n	800e20c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	f003 0320 	and.w	r3, r3, #32
 800e206:	2b20      	cmp	r3, #32
 800e208:	d0f0      	beq.n	800e1ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e220:	2300      	movs	r3, #0
 800e222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3301      	adds	r3, #1
 800e228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e230:	d901      	bls.n	800e236 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e232:	2303      	movs	r3, #3
 800e234:	e018      	b.n	800e268 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	691b      	ldr	r3, [r3, #16]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	daf2      	bge.n	800e224 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e23e:	2300      	movs	r3, #0
 800e240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2210      	movs	r2, #16
 800e246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	3301      	adds	r3, #1
 800e24c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e254:	d901      	bls.n	800e25a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e256:	2303      	movs	r3, #3
 800e258:	e006      	b.n	800e268 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	f003 0310 	and.w	r3, r3, #16
 800e262:	2b10      	cmp	r3, #16
 800e264:	d0f0      	beq.n	800e248 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	78fb      	ldrb	r3, [r7, #3]
 800e28e:	68f9      	ldr	r1, [r7, #12]
 800e290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e294:	4313      	orrs	r3, r2
 800e296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e2a6:	b480      	push	{r7}
 800e2a8:	b087      	sub	sp, #28
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	f003 0306 	and.w	r3, r3, #6
 800e2be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	75fb      	strb	r3, [r7, #23]
 800e2ca:	e00a      	b.n	800e2e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d002      	beq.n	800e2d8 <USB_GetDevSpeed+0x32>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b06      	cmp	r3, #6
 800e2d6:	d102      	bne.n	800e2de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e2d8:	2302      	movs	r3, #2
 800e2da:	75fb      	strb	r3, [r7, #23]
 800e2dc:	e001      	b.n	800e2e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e2de:	230f      	movs	r3, #15
 800e2e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	371c      	adds	r7, #28
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	785b      	ldrb	r3, [r3, #1]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d13a      	bne.n	800e382 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e312:	69da      	ldr	r2, [r3, #28]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	f003 030f 	and.w	r3, r3, #15
 800e31c:	2101      	movs	r1, #1
 800e31e:	fa01 f303 	lsl.w	r3, r1, r3
 800e322:	b29b      	uxth	r3, r3
 800e324:	68f9      	ldr	r1, [r7, #12]
 800e326:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e32a:	4313      	orrs	r3, r2
 800e32c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	4413      	add	r3, r2
 800e336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e340:	2b00      	cmp	r3, #0
 800e342:	d155      	bne.n	800e3f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	015a      	lsls	r2, r3, #5
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	4413      	add	r3, r2
 800e34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	791b      	ldrb	r3, [r3, #4]
 800e35e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e360:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	059b      	lsls	r3, r3, #22
 800e366:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e368:	4313      	orrs	r3, r2
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	0151      	lsls	r1, r2, #5
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	440a      	add	r2, r1
 800e372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e37a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e37e:	6013      	str	r3, [r2, #0]
 800e380:	e036      	b.n	800e3f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e388:	69da      	ldr	r2, [r3, #28]
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	2101      	movs	r1, #1
 800e394:	fa01 f303 	lsl.w	r3, r1, r3
 800e398:	041b      	lsls	r3, r3, #16
 800e39a:	68f9      	ldr	r1, [r7, #12]
 800e39c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	015a      	lsls	r2, r3, #5
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d11a      	bne.n	800e3f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	791b      	ldrb	r3, [r3, #4]
 800e3d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e3d6:	430b      	orrs	r3, r1
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	0151      	lsls	r1, r2, #5
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	440a      	add	r2, r1
 800e3e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e3e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3714      	adds	r7, #20
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
	...

0800e400 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d161      	bne.n	800e4e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	015a      	lsls	r2, r3, #5
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4413      	add	r3, r2
 800e424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e42e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e432:	d11f      	bne.n	800e474 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	0151      	lsls	r1, r2, #5
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	440a      	add	r2, r1
 800e44a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e44e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e452:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	015a      	lsls	r2, r3, #5
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	4413      	add	r3, r2
 800e45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	0151      	lsls	r1, r2, #5
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	440a      	add	r2, r1
 800e46a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e46e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e47a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f003 030f 	and.w	r3, r3, #15
 800e484:	2101      	movs	r1, #1
 800e486:	fa01 f303 	lsl.w	r3, r1, r3
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	43db      	mvns	r3, r3
 800e48e:	68f9      	ldr	r1, [r7, #12]
 800e490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e494:	4013      	ands	r3, r2
 800e496:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e49e:	69da      	ldr	r2, [r3, #28]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	f003 030f 	and.w	r3, r3, #15
 800e4a8:	2101      	movs	r1, #1
 800e4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	43db      	mvns	r3, r3
 800e4b2:	68f9      	ldr	r1, [r7, #12]
 800e4b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	015a      	lsls	r2, r3, #5
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	0159      	lsls	r1, r3, #5
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	440b      	add	r3, r1
 800e4d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4b35      	ldr	r3, [pc, #212]	@ (800e5b0 <USB_DeactivateEndpoint+0x1b0>)
 800e4da:	4013      	ands	r3, r2
 800e4dc:	600b      	str	r3, [r1, #0]
 800e4de:	e060      	b.n	800e5a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e4f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4f6:	d11f      	bne.n	800e538 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	015a      	lsls	r2, r3, #5
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	0151      	lsls	r1, r2, #5
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	440a      	add	r2, r1
 800e50e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e516:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68ba      	ldr	r2, [r7, #8]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e532:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e53e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 030f 	and.w	r3, r3, #15
 800e548:	2101      	movs	r1, #1
 800e54a:	fa01 f303 	lsl.w	r3, r1, r3
 800e54e:	041b      	lsls	r3, r3, #16
 800e550:	43db      	mvns	r3, r3
 800e552:	68f9      	ldr	r1, [r7, #12]
 800e554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e558:	4013      	ands	r3, r2
 800e55a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e562:	69da      	ldr	r2, [r3, #28]
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	f003 030f 	and.w	r3, r3, #15
 800e56c:	2101      	movs	r1, #1
 800e56e:	fa01 f303 	lsl.w	r3, r1, r3
 800e572:	041b      	lsls	r3, r3, #16
 800e574:	43db      	mvns	r3, r3
 800e576:	68f9      	ldr	r1, [r7, #12]
 800e578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e57c:	4013      	ands	r3, r2
 800e57e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	0159      	lsls	r1, r3, #5
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	440b      	add	r3, r1
 800e596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e59a:	4619      	mov	r1, r3
 800e59c:	4b05      	ldr	r3, [pc, #20]	@ (800e5b4 <USB_DeactivateEndpoint+0x1b4>)
 800e59e:	4013      	ands	r3, r2
 800e5a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	ec337800 	.word	0xec337800
 800e5b4:	eff37800 	.word	0xeff37800

0800e5b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b08a      	sub	sp, #40	@ 0x28
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	785b      	ldrb	r3, [r3, #1]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	f040 817f 	bne.w	800e8d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d132      	bne.n	800e648 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	015a      	lsls	r2, r3, #5
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	69ba      	ldr	r2, [r7, #24]
 800e5f2:	0151      	lsls	r1, r2, #5
 800e5f4:	69fa      	ldr	r2, [r7, #28]
 800e5f6:	440a      	add	r2, r1
 800e5f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e600:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	015a      	lsls	r2, r3, #5
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	4413      	add	r3, r2
 800e60e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	69ba      	ldr	r2, [r7, #24]
 800e616:	0151      	lsls	r1, r2, #5
 800e618:	69fa      	ldr	r2, [r7, #28]
 800e61a:	440a      	add	r2, r1
 800e61c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	015a      	lsls	r2, r3, #5
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	4413      	add	r3, r2
 800e62e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	69ba      	ldr	r2, [r7, #24]
 800e636:	0151      	lsls	r1, r2, #5
 800e638:	69fa      	ldr	r2, [r7, #28]
 800e63a:	440a      	add	r2, r1
 800e63c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e640:	0cdb      	lsrs	r3, r3, #19
 800e642:	04db      	lsls	r3, r3, #19
 800e644:	6113      	str	r3, [r2, #16]
 800e646:	e097      	b.n	800e778 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	0151      	lsls	r1, r2, #5
 800e65a:	69fa      	ldr	r2, [r7, #28]
 800e65c:	440a      	add	r2, r1
 800e65e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e662:	0cdb      	lsrs	r3, r3, #19
 800e664:	04db      	lsls	r3, r3, #19
 800e666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	015a      	lsls	r2, r3, #5
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	4413      	add	r3, r2
 800e670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	69ba      	ldr	r2, [r7, #24]
 800e678:	0151      	lsls	r1, r2, #5
 800e67a:	69fa      	ldr	r2, [r7, #28]
 800e67c:	440a      	add	r2, r1
 800e67e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e682:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e686:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e68a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d11a      	bne.n	800e6c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	691a      	ldr	r2, [r3, #16]
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d903      	bls.n	800e6a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	689a      	ldr	r2, [r3, #8]
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	69ba      	ldr	r2, [r7, #24]
 800e6b6:	0151      	lsls	r1, r2, #5
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	440a      	add	r2, r1
 800e6bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6c4:	6113      	str	r3, [r2, #16]
 800e6c6:	e044      	b.n	800e752 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	691a      	ldr	r2, [r3, #16]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	1e5a      	subs	r2, r3, #1
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	015a      	lsls	r2, r3, #5
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ea:	691a      	ldr	r2, [r3, #16]
 800e6ec:	8afb      	ldrh	r3, [r7, #22]
 800e6ee:	04d9      	lsls	r1, r3, #19
 800e6f0:	4ba4      	ldr	r3, [pc, #656]	@ (800e984 <USB_EPStartXfer+0x3cc>)
 800e6f2:	400b      	ands	r3, r1
 800e6f4:	69b9      	ldr	r1, [r7, #24]
 800e6f6:	0148      	lsls	r0, r1, #5
 800e6f8:	69f9      	ldr	r1, [r7, #28]
 800e6fa:	4401      	add	r1, r0
 800e6fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e700:	4313      	orrs	r3, r2
 800e702:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	791b      	ldrb	r3, [r3, #4]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d122      	bne.n	800e752 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	015a      	lsls	r2, r3, #5
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	4413      	add	r3, r2
 800e714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	0151      	lsls	r1, r2, #5
 800e71e:	69fa      	ldr	r2, [r7, #28]
 800e720:	440a      	add	r2, r1
 800e722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e726:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e72a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	015a      	lsls	r2, r3, #5
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	4413      	add	r3, r2
 800e734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e738:	691a      	ldr	r2, [r3, #16]
 800e73a:	8afb      	ldrh	r3, [r7, #22]
 800e73c:	075b      	lsls	r3, r3, #29
 800e73e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e742:	69b9      	ldr	r1, [r7, #24]
 800e744:	0148      	lsls	r0, r1, #5
 800e746:	69f9      	ldr	r1, [r7, #28]
 800e748:	4401      	add	r1, r0
 800e74a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e74e:	4313      	orrs	r3, r2
 800e750:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e75e:	691a      	ldr	r2, [r3, #16]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e768:	69b9      	ldr	r1, [r7, #24]
 800e76a:	0148      	lsls	r0, r1, #5
 800e76c:	69f9      	ldr	r1, [r7, #28]
 800e76e:	4401      	add	r1, r0
 800e770:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e774:	4313      	orrs	r3, r2
 800e776:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d14b      	bne.n	800e816 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	69db      	ldr	r3, [r3, #28]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	015a      	lsls	r2, r3, #5
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	4413      	add	r3, r2
 800e78e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e792:	461a      	mov	r2, r3
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	69db      	ldr	r3, [r3, #28]
 800e798:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	791b      	ldrb	r3, [r3, #4]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d128      	bne.n	800e7f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d110      	bne.n	800e7d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	015a      	lsls	r2, r3, #5
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	69ba      	ldr	r2, [r7, #24]
 800e7c2:	0151      	lsls	r1, r2, #5
 800e7c4:	69fa      	ldr	r2, [r7, #28]
 800e7c6:	440a      	add	r2, r1
 800e7c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e7d0:	6013      	str	r3, [r2, #0]
 800e7d2:	e00f      	b.n	800e7f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	015a      	lsls	r2, r3, #5
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	69ba      	ldr	r2, [r7, #24]
 800e7e4:	0151      	lsls	r1, r2, #5
 800e7e6:	69fa      	ldr	r2, [r7, #28]
 800e7e8:	440a      	add	r2, r1
 800e7ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e7f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	015a      	lsls	r2, r3, #5
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	69ba      	ldr	r2, [r7, #24]
 800e804:	0151      	lsls	r1, r2, #5
 800e806:	69fa      	ldr	r2, [r7, #28]
 800e808:	440a      	add	r2, r1
 800e80a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e80e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e812:	6013      	str	r3, [r2, #0]
 800e814:	e166      	b.n	800eae4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	015a      	lsls	r2, r3, #5
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	4413      	add	r3, r2
 800e81e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	69ba      	ldr	r2, [r7, #24]
 800e826:	0151      	lsls	r1, r2, #5
 800e828:	69fa      	ldr	r2, [r7, #28]
 800e82a:	440a      	add	r2, r1
 800e82c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e830:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e834:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	791b      	ldrb	r3, [r3, #4]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d015      	beq.n	800e86a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 814e 	beq.w	800eae4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e84e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 030f 	and.w	r3, r3, #15
 800e858:	2101      	movs	r1, #1
 800e85a:	fa01 f303 	lsl.w	r3, r1, r3
 800e85e:	69f9      	ldr	r1, [r7, #28]
 800e860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e864:	4313      	orrs	r3, r2
 800e866:	634b      	str	r3, [r1, #52]	@ 0x34
 800e868:	e13c      	b.n	800eae4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e876:	2b00      	cmp	r3, #0
 800e878:	d110      	bne.n	800e89c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	69ba      	ldr	r2, [r7, #24]
 800e88a:	0151      	lsls	r1, r2, #5
 800e88c:	69fa      	ldr	r2, [r7, #28]
 800e88e:	440a      	add	r2, r1
 800e890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e894:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	e00f      	b.n	800e8bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	015a      	lsls	r2, r3, #5
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	69ba      	ldr	r2, [r7, #24]
 800e8ac:	0151      	lsls	r1, r2, #5
 800e8ae:	69fa      	ldr	r2, [r7, #28]
 800e8b0:	440a      	add	r2, r1
 800e8b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	68d9      	ldr	r1, [r3, #12]
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	781a      	ldrb	r2, [r3, #0]
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	b298      	uxth	r0, r3
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f000 f9b9 	bl	800ec48 <USB_WritePacket>
 800e8d6:	e105      	b.n	800eae4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	015a      	lsls	r2, r3, #5
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e4:	691b      	ldr	r3, [r3, #16]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	0151      	lsls	r1, r2, #5
 800e8ea:	69fa      	ldr	r2, [r7, #28]
 800e8ec:	440a      	add	r2, r1
 800e8ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8f2:	0cdb      	lsrs	r3, r3, #19
 800e8f4:	04db      	lsls	r3, r3, #19
 800e8f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	015a      	lsls	r2, r3, #5
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	0151      	lsls	r1, r2, #5
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	440a      	add	r2, r1
 800e90e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e912:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e916:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e91a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d132      	bne.n	800e988 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d003      	beq.n	800e932 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	689a      	ldr	r2, [r3, #8]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e946:	691a      	ldr	r2, [r3, #16]
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	6a1b      	ldr	r3, [r3, #32]
 800e94c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e950:	69b9      	ldr	r1, [r7, #24]
 800e952:	0148      	lsls	r0, r1, #5
 800e954:	69f9      	ldr	r1, [r7, #28]
 800e956:	4401      	add	r1, r0
 800e958:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e95c:	4313      	orrs	r3, r2
 800e95e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	015a      	lsls	r2, r3, #5
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	4413      	add	r3, r2
 800e968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	0151      	lsls	r1, r2, #5
 800e972:	69fa      	ldr	r2, [r7, #28]
 800e974:	440a      	add	r2, r1
 800e976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e97a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e97e:	6113      	str	r3, [r2, #16]
 800e980:	e062      	b.n	800ea48 <USB_EPStartXfer+0x490>
 800e982:	bf00      	nop
 800e984:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d123      	bne.n	800e9d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e99c:	691a      	ldr	r2, [r3, #16]
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9a6:	69b9      	ldr	r1, [r7, #24]
 800e9a8:	0148      	lsls	r0, r1, #5
 800e9aa:	69f9      	ldr	r1, [r7, #28]
 800e9ac:	4401      	add	r1, r0
 800e9ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	015a      	lsls	r2, r3, #5
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	4413      	add	r3, r2
 800e9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	69ba      	ldr	r2, [r7, #24]
 800e9c6:	0151      	lsls	r1, r2, #5
 800e9c8:	69fa      	ldr	r2, [r7, #28]
 800e9ca:	440a      	add	r2, r1
 800e9cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e9d4:	6113      	str	r3, [r2, #16]
 800e9d6:	e037      	b.n	800ea48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	691a      	ldr	r2, [r3, #16]
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	1e5a      	subs	r2, r3, #1
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	8afa      	ldrh	r2, [r7, #22]
 800e9f4:	fb03 f202 	mul.w	r2, r3, r2
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	015a      	lsls	r2, r3, #5
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	4413      	add	r3, r2
 800ea04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea08:	691a      	ldr	r2, [r3, #16]
 800ea0a:	8afb      	ldrh	r3, [r7, #22]
 800ea0c:	04d9      	lsls	r1, r3, #19
 800ea0e:	4b38      	ldr	r3, [pc, #224]	@ (800eaf0 <USB_EPStartXfer+0x538>)
 800ea10:	400b      	ands	r3, r1
 800ea12:	69b9      	ldr	r1, [r7, #24]
 800ea14:	0148      	lsls	r0, r1, #5
 800ea16:	69f9      	ldr	r1, [r7, #28]
 800ea18:	4401      	add	r1, r0
 800ea1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	015a      	lsls	r2, r3, #5
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	4413      	add	r3, r2
 800ea2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea2e:	691a      	ldr	r2, [r3, #16]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	6a1b      	ldr	r3, [r3, #32]
 800ea34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea38:	69b9      	ldr	r1, [r7, #24]
 800ea3a:	0148      	lsls	r0, r1, #5
 800ea3c:	69f9      	ldr	r1, [r7, #28]
 800ea3e:	4401      	add	r1, r0
 800ea40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea44:	4313      	orrs	r3, r2
 800ea46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d10d      	bne.n	800ea6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d009      	beq.n	800ea6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	68d9      	ldr	r1, [r3, #12]
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	015a      	lsls	r2, r3, #5
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	4413      	add	r3, r2
 800ea62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea66:	460a      	mov	r2, r1
 800ea68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	791b      	ldrb	r3, [r3, #4]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d128      	bne.n	800eac4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d110      	bne.n	800eaa4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	015a      	lsls	r2, r3, #5
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	4413      	add	r3, r2
 800ea8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	69ba      	ldr	r2, [r7, #24]
 800ea92:	0151      	lsls	r1, r2, #5
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	440a      	add	r2, r1
 800ea98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eaa0:	6013      	str	r3, [r2, #0]
 800eaa2:	e00f      	b.n	800eac4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	015a      	lsls	r2, r3, #5
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	4413      	add	r3, r2
 800eaac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	0151      	lsls	r1, r2, #5
 800eab6:	69fa      	ldr	r2, [r7, #28]
 800eab8:	440a      	add	r2, r1
 800eaba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eabe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eac2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	015a      	lsls	r2, r3, #5
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	4413      	add	r3, r2
 800eacc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	69ba      	ldr	r2, [r7, #24]
 800ead4:	0151      	lsls	r1, r2, #5
 800ead6:	69fa      	ldr	r2, [r7, #28]
 800ead8:	440a      	add	r2, r1
 800eada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eade:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eae4:	2300      	movs	r3, #0
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3720      	adds	r7, #32
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	1ff80000 	.word	0x1ff80000

0800eaf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800eafe:	2300      	movs	r3, #0
 800eb00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800eb02:	2300      	movs	r3, #0
 800eb04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	785b      	ldrb	r3, [r3, #1]
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d14a      	bne.n	800eba8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	015a      	lsls	r2, r3, #5
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb2a:	f040 8086 	bne.w	800ec3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	015a      	lsls	r2, r3, #5
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	4413      	add	r3, r2
 800eb38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	7812      	ldrb	r2, [r2, #0]
 800eb42:	0151      	lsls	r1, r2, #5
 800eb44:	693a      	ldr	r2, [r7, #16]
 800eb46:	440a      	add	r2, r1
 800eb48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eb50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	015a      	lsls	r2, r3, #5
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	7812      	ldrb	r2, [r2, #0]
 800eb66:	0151      	lsls	r1, r2, #5
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	440a      	add	r2, r1
 800eb6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d902      	bls.n	800eb8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	75fb      	strb	r3, [r7, #23]
          break;
 800eb8a:	e056      	b.n	800ec3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	015a      	lsls	r2, r3, #5
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	4413      	add	r3, r2
 800eb96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eba4:	d0e7      	beq.n	800eb76 <USB_EPStopXfer+0x82>
 800eba6:	e048      	b.n	800ec3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	015a      	lsls	r2, r3, #5
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ebbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebc0:	d13b      	bne.n	800ec3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	7812      	ldrb	r2, [r2, #0]
 800ebd6:	0151      	lsls	r1, r2, #5
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	440a      	add	r2, r1
 800ebdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebe0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ebe4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	7812      	ldrb	r2, [r2, #0]
 800ebfa:	0151      	lsls	r1, r2, #5
 800ebfc:	693a      	ldr	r2, [r7, #16]
 800ebfe:	440a      	add	r2, r1
 800ec00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d902      	bls.n	800ec20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ec1e:	e00c      	b.n	800ec3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	015a      	lsls	r2, r3, #5
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	4413      	add	r3, r2
 800ec2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec38:	d0e7      	beq.n	800ec0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b089      	sub	sp, #36	@ 0x24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	4611      	mov	r1, r2
 800ec54:	461a      	mov	r2, r3
 800ec56:	460b      	mov	r3, r1
 800ec58:	71fb      	strb	r3, [r7, #7]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ec66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d123      	bne.n	800ecb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ec6e:	88bb      	ldrh	r3, [r7, #4]
 800ec70:	3303      	adds	r3, #3
 800ec72:	089b      	lsrs	r3, r3, #2
 800ec74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ec76:	2300      	movs	r3, #0
 800ec78:	61bb      	str	r3, [r7, #24]
 800ec7a:	e018      	b.n	800ecae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ec7c:	79fb      	ldrb	r3, [r7, #7]
 800ec7e:	031a      	lsls	r2, r3, #12
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	4413      	add	r3, r2
 800ec84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec88:	461a      	mov	r2, r3
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	3301      	adds	r3, #1
 800ec94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	3301      	adds	r3, #1
 800eca6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	69ba      	ldr	r2, [r7, #24]
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d3e2      	bcc.n	800ec7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ecb6:	2300      	movs	r3, #0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3724      	adds	r7, #36	@ 0x24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b08b      	sub	sp, #44	@ 0x2c
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ecda:	88fb      	ldrh	r3, [r7, #6]
 800ecdc:	089b      	lsrs	r3, r3, #2
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ece2:	88fb      	ldrh	r3, [r7, #6]
 800ece4:	f003 0303 	and.w	r3, r3, #3
 800ece8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ecea:	2300      	movs	r3, #0
 800ecec:	623b      	str	r3, [r7, #32]
 800ecee:	e014      	b.n	800ed1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	601a      	str	r2, [r3, #0]
    pDest++;
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfe:	3301      	adds	r3, #1
 800ed00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed04:	3301      	adds	r3, #1
 800ed06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed10:	3301      	adds	r3, #1
 800ed12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	3301      	adds	r3, #1
 800ed18:	623b      	str	r3, [r7, #32]
 800ed1a:	6a3a      	ldr	r2, [r7, #32]
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d3e6      	bcc.n	800ecf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ed22:	8bfb      	ldrh	r3, [r7, #30]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01e      	beq.n	800ed66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed32:	461a      	mov	r2, r3
 800ed34:	f107 0310 	add.w	r3, r7, #16
 800ed38:	6812      	ldr	r2, [r2, #0]
 800ed3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	6a3b      	ldr	r3, [r7, #32]
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	fa22 f303 	lsr.w	r3, r2, r3
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed4c:	701a      	strb	r2, [r3, #0]
      i++;
 800ed4e:	6a3b      	ldr	r3, [r7, #32]
 800ed50:	3301      	adds	r3, #1
 800ed52:	623b      	str	r3, [r7, #32]
      pDest++;
 800ed54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed56:	3301      	adds	r3, #1
 800ed58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ed5a:	8bfb      	ldrh	r3, [r7, #30]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ed60:	8bfb      	ldrh	r3, [r7, #30]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1ea      	bne.n	800ed3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ed66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	372c      	adds	r7, #44	@ 0x2c
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	785b      	ldrb	r3, [r3, #1]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d12c      	bne.n	800edea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	015a      	lsls	r2, r3, #5
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	db12      	blt.n	800edc8 <USB_EPSetStall+0x54>
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00f      	beq.n	800edc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	0151      	lsls	r1, r2, #5
 800edba:	68fa      	ldr	r2, [r7, #12]
 800edbc:	440a      	add	r2, r1
 800edbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800edc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	015a      	lsls	r2, r3, #5
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	4413      	add	r3, r2
 800edd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	0151      	lsls	r1, r2, #5
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	440a      	add	r2, r1
 800edde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ede2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ede6:	6013      	str	r3, [r2, #0]
 800ede8:	e02b      	b.n	800ee42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	015a      	lsls	r2, r3, #5
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4413      	add	r3, r2
 800edf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	db12      	blt.n	800ee22 <USB_EPSetStall+0xae>
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00f      	beq.n	800ee22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	015a      	lsls	r2, r3, #5
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	4413      	add	r3, r2
 800ee0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	0151      	lsls	r1, r2, #5
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	440a      	add	r2, r1
 800ee18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ee20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	015a      	lsls	r2, r3, #5
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	0151      	lsls	r1, r2, #5
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	440a      	add	r2, r1
 800ee38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ee40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee42:	2300      	movs	r3, #0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3714      	adds	r7, #20
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	785b      	ldrb	r3, [r3, #1]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d128      	bne.n	800eebe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	015a      	lsls	r2, r3, #5
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	4413      	add	r3, r2
 800ee74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	0151      	lsls	r1, r2, #5
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	440a      	add	r2, r1
 800ee82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ee8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	791b      	ldrb	r3, [r3, #4]
 800ee90:	2b03      	cmp	r3, #3
 800ee92:	d003      	beq.n	800ee9c <USB_EPClearStall+0x4c>
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	791b      	ldrb	r3, [r3, #4]
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	d138      	bne.n	800ef0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	0151      	lsls	r1, r2, #5
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	440a      	add	r2, r1
 800eeb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eeba:	6013      	str	r3, [r2, #0]
 800eebc:	e027      	b.n	800ef0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	015a      	lsls	r2, r3, #5
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	4413      	add	r3, r2
 800eec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	0151      	lsls	r1, r2, #5
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	440a      	add	r2, r1
 800eed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eed8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eedc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	791b      	ldrb	r3, [r3, #4]
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d003      	beq.n	800eeee <USB_EPClearStall+0x9e>
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	791b      	ldrb	r3, [r3, #4]
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d10f      	bne.n	800ef0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	015a      	lsls	r2, r3, #5
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	4413      	add	r3, r2
 800eef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	0151      	lsls	r1, r2, #5
 800ef00:	68fa      	ldr	r2, [r7, #12]
 800ef02:	440a      	add	r2, r1
 800ef04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3714      	adds	r7, #20
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	460b      	mov	r3, r1
 800ef26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ef3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ef3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	78fb      	ldrb	r3, [r7, #3]
 800ef4a:	011b      	lsls	r3, r3, #4
 800ef4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ef50:	68f9      	ldr	r1, [r7, #12]
 800ef52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ef56:	4313      	orrs	r3, r2
 800ef58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ef82:	f023 0303 	bic.w	r3, r3, #3
 800ef86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ef96:	f023 0302 	bic.w	r3, r3, #2
 800ef9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800efaa:	b480      	push	{r7}
 800efac:	b085      	sub	sp, #20
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800efc4:	f023 0303 	bic.w	r3, r3, #3
 800efc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800efd8:	f043 0302 	orr.w	r3, r3, #2
 800efdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	695b      	ldr	r3, [r3, #20]
 800eff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	699b      	ldr	r3, [r3, #24]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	4013      	ands	r3, r2
 800f002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f004:	68fb      	ldr	r3, [r7, #12]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr

0800f012 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f012:	b480      	push	{r7}
 800f014:	b085      	sub	sp, #20
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f024:	699b      	ldr	r3, [r3, #24]
 800f026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	4013      	ands	r3, r2
 800f034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	0c1b      	lsrs	r3, r3, #16
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f046:	b480      	push	{r7}
 800f048:	b085      	sub	sp, #20
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f058:	699b      	ldr	r3, [r3, #24]
 800f05a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f062:	69db      	ldr	r3, [r3, #28]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	4013      	ands	r3, r2
 800f068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	b29b      	uxth	r3, r3
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3714      	adds	r7, #20
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b085      	sub	sp, #20
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	460b      	mov	r3, r1
 800f084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f08a:	78fb      	ldrb	r3, [r7, #3]
 800f08c:	015a      	lsls	r2, r3, #5
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	4413      	add	r3, r2
 800f092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f0a8:	68bb      	ldr	r3, [r7, #8]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f0b6:	b480      	push	{r7}
 800f0b8:	b087      	sub	sp, #28
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f0da:	78fb      	ldrb	r3, [r7, #3]
 800f0dc:	f003 030f 	and.w	r3, r3, #15
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f0e6:	01db      	lsls	r3, r3, #7
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	693a      	ldr	r2, [r7, #16]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	4013      	ands	r3, r2
 800f102:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f104:	68bb      	ldr	r3, [r7, #8]
}
 800f106:	4618      	mov	r0, r3
 800f108:	371c      	adds	r7, #28
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f112:	b480      	push	{r7}
 800f114:	b083      	sub	sp, #12
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	695b      	ldr	r3, [r3, #20]
 800f11e:	f003 0301 	and.w	r3, r3, #1
}
 800f122:	4618      	mov	r0, r3
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f12e:	b480      	push	{r7}
 800f130:	b085      	sub	sp, #20
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f148:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f14c:	f023 0307 	bic.w	r3, r3, #7
 800f150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f174:	b480      	push	{r7}
 800f176:	b087      	sub	sp, #28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	460b      	mov	r3, r1
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	333c      	adds	r3, #60	@ 0x3c
 800f18a:	3304      	adds	r3, #4
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	4a26      	ldr	r2, [pc, #152]	@ (800f22c <USB_EP0_OutStart+0xb8>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d90a      	bls.n	800f1ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1a8:	d101      	bne.n	800f1ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	e037      	b.n	800f21e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f1cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1dc:	f043 0318 	orr.w	r3, r3, #24
 800f1e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f1f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f1f6:	7afb      	ldrb	r3, [r7, #11]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d10f      	bne.n	800f21c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f202:	461a      	mov	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	697a      	ldr	r2, [r7, #20]
 800f212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f216:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f21a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	371c      	adds	r7, #28
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	4f54300a 	.word	0x4f54300a

0800f230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3301      	adds	r3, #1
 800f240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f248:	d901      	bls.n	800f24e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f24a:	2303      	movs	r3, #3
 800f24c:	e01b      	b.n	800f286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	daf2      	bge.n	800f23c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f256:	2300      	movs	r3, #0
 800f258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	f043 0201 	orr.w	r2, r3, #1
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3301      	adds	r3, #1
 800f26a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f272:	d901      	bls.n	800f278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	e006      	b.n	800f286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	691b      	ldr	r3, [r3, #16]
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b01      	cmp	r3, #1
 800f282:	d0f0      	beq.n	800f266 <USB_CoreReset+0x36>

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
	...

0800f294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	460b      	mov	r3, r1
 800f29e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f2a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f2a4:	f002 fd00 	bl	8011ca8 <USBD_static_malloc>
 800f2a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d109      	bne.n	800f2c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	32b0      	adds	r2, #176	@ 0xb0
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	e0d4      	b.n	800f46e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f2c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f002 fdae 	bl	8011e2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	32b0      	adds	r2, #176	@ 0xb0
 800f2da:	68f9      	ldr	r1, [r7, #12]
 800f2dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	32b0      	adds	r2, #176	@ 0xb0
 800f2ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	7c1b      	ldrb	r3, [r3, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d138      	bne.n	800f36e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f2fc:	4b5e      	ldr	r3, [pc, #376]	@ (800f478 <USBD_CDC_Init+0x1e4>)
 800f2fe:	7819      	ldrb	r1, [r3, #0]
 800f300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f304:	2202      	movs	r2, #2
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f002 fbab 	bl	8011a62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f30c:	4b5a      	ldr	r3, [pc, #360]	@ (800f478 <USBD_CDC_Init+0x1e4>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	f003 020f 	and.w	r2, r3, #15
 800f314:	6879      	ldr	r1, [r7, #4]
 800f316:	4613      	mov	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	440b      	add	r3, r1
 800f320:	3324      	adds	r3, #36	@ 0x24
 800f322:	2201      	movs	r2, #1
 800f324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f326:	4b55      	ldr	r3, [pc, #340]	@ (800f47c <USBD_CDC_Init+0x1e8>)
 800f328:	7819      	ldrb	r1, [r3, #0]
 800f32a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f32e:	2202      	movs	r2, #2
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f002 fb96 	bl	8011a62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f336:	4b51      	ldr	r3, [pc, #324]	@ (800f47c <USBD_CDC_Init+0x1e8>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	f003 020f 	and.w	r2, r3, #15
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	4613      	mov	r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	4413      	add	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	440b      	add	r3, r1
 800f34a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f34e:	2201      	movs	r2, #1
 800f350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f352:	4b4b      	ldr	r3, [pc, #300]	@ (800f480 <USBD_CDC_Init+0x1ec>)
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	f003 020f 	and.w	r2, r3, #15
 800f35a:	6879      	ldr	r1, [r7, #4]
 800f35c:	4613      	mov	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4413      	add	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	440b      	add	r3, r1
 800f366:	3326      	adds	r3, #38	@ 0x26
 800f368:	2210      	movs	r2, #16
 800f36a:	801a      	strh	r2, [r3, #0]
 800f36c:	e035      	b.n	800f3da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f36e:	4b42      	ldr	r3, [pc, #264]	@ (800f478 <USBD_CDC_Init+0x1e4>)
 800f370:	7819      	ldrb	r1, [r3, #0]
 800f372:	2340      	movs	r3, #64	@ 0x40
 800f374:	2202      	movs	r2, #2
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f002 fb73 	bl	8011a62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f37c:	4b3e      	ldr	r3, [pc, #248]	@ (800f478 <USBD_CDC_Init+0x1e4>)
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	f003 020f 	and.w	r2, r3, #15
 800f384:	6879      	ldr	r1, [r7, #4]
 800f386:	4613      	mov	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4413      	add	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	440b      	add	r3, r1
 800f390:	3324      	adds	r3, #36	@ 0x24
 800f392:	2201      	movs	r2, #1
 800f394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f396:	4b39      	ldr	r3, [pc, #228]	@ (800f47c <USBD_CDC_Init+0x1e8>)
 800f398:	7819      	ldrb	r1, [r3, #0]
 800f39a:	2340      	movs	r3, #64	@ 0x40
 800f39c:	2202      	movs	r2, #2
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f002 fb5f 	bl	8011a62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f3a4:	4b35      	ldr	r3, [pc, #212]	@ (800f47c <USBD_CDC_Init+0x1e8>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	f003 020f 	and.w	r2, r3, #15
 800f3ac:	6879      	ldr	r1, [r7, #4]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4413      	add	r3, r2
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	440b      	add	r3, r1
 800f3b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f3bc:	2201      	movs	r2, #1
 800f3be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f3c0:	4b2f      	ldr	r3, [pc, #188]	@ (800f480 <USBD_CDC_Init+0x1ec>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	f003 020f 	and.w	r2, r3, #15
 800f3c8:	6879      	ldr	r1, [r7, #4]
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	4413      	add	r3, r2
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	440b      	add	r3, r1
 800f3d4:	3326      	adds	r3, #38	@ 0x26
 800f3d6:	2210      	movs	r2, #16
 800f3d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f3da:	4b29      	ldr	r3, [pc, #164]	@ (800f480 <USBD_CDC_Init+0x1ec>)
 800f3dc:	7819      	ldrb	r1, [r3, #0]
 800f3de:	2308      	movs	r3, #8
 800f3e0:	2203      	movs	r2, #3
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f002 fb3d 	bl	8011a62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f3e8:	4b25      	ldr	r3, [pc, #148]	@ (800f480 <USBD_CDC_Init+0x1ec>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	f003 020f 	and.w	r2, r3, #15
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4413      	add	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	440b      	add	r3, r1
 800f3fc:	3324      	adds	r3, #36	@ 0x24
 800f3fe:	2201      	movs	r2, #1
 800f400:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	33b0      	adds	r3, #176	@ 0xb0
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4413      	add	r3, r2
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f434:	2b00      	cmp	r3, #0
 800f436:	d101      	bne.n	800f43c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f438:	2302      	movs	r3, #2
 800f43a:	e018      	b.n	800f46e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7c1b      	ldrb	r3, [r3, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10a      	bne.n	800f45a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f444:	4b0d      	ldr	r3, [pc, #52]	@ (800f47c <USBD_CDC_Init+0x1e8>)
 800f446:	7819      	ldrb	r1, [r3, #0]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f44e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f002 fbf4 	bl	8011c40 <USBD_LL_PrepareReceive>
 800f458:	e008      	b.n	800f46c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f45a:	4b08      	ldr	r3, [pc, #32]	@ (800f47c <USBD_CDC_Init+0x1e8>)
 800f45c:	7819      	ldrb	r1, [r3, #0]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f464:	2340      	movs	r3, #64	@ 0x40
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f002 fbea 	bl	8011c40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	200000a7 	.word	0x200000a7
 800f47c:	200000a8 	.word	0x200000a8
 800f480:	200000a9 	.word	0x200000a9

0800f484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	460b      	mov	r3, r1
 800f48e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f490:	4b3a      	ldr	r3, [pc, #232]	@ (800f57c <USBD_CDC_DeInit+0xf8>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	4619      	mov	r1, r3
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f002 fb09 	bl	8011aae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f49c:	4b37      	ldr	r3, [pc, #220]	@ (800f57c <USBD_CDC_DeInit+0xf8>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 020f 	and.w	r2, r3, #15
 800f4a4:	6879      	ldr	r1, [r7, #4]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4413      	add	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	440b      	add	r3, r1
 800f4b0:	3324      	adds	r3, #36	@ 0x24
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f4b6:	4b32      	ldr	r3, [pc, #200]	@ (800f580 <USBD_CDC_DeInit+0xfc>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f002 faf6 	bl	8011aae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f4c2:	4b2f      	ldr	r3, [pc, #188]	@ (800f580 <USBD_CDC_DeInit+0xfc>)
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	f003 020f 	and.w	r2, r3, #15
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	440b      	add	r3, r1
 800f4d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4da:	2200      	movs	r2, #0
 800f4dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f4de:	4b29      	ldr	r3, [pc, #164]	@ (800f584 <USBD_CDC_DeInit+0x100>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f002 fae2 	bl	8011aae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f4ea:	4b26      	ldr	r3, [pc, #152]	@ (800f584 <USBD_CDC_DeInit+0x100>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	f003 020f 	and.w	r2, r3, #15
 800f4f2:	6879      	ldr	r1, [r7, #4]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	440b      	add	r3, r1
 800f4fe:	3324      	adds	r3, #36	@ 0x24
 800f500:	2200      	movs	r2, #0
 800f502:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f504:	4b1f      	ldr	r3, [pc, #124]	@ (800f584 <USBD_CDC_DeInit+0x100>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	f003 020f 	and.w	r2, r3, #15
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	4613      	mov	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	440b      	add	r3, r1
 800f518:	3326      	adds	r3, #38	@ 0x26
 800f51a:	2200      	movs	r2, #0
 800f51c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	32b0      	adds	r2, #176	@ 0xb0
 800f528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d01f      	beq.n	800f570 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	33b0      	adds	r3, #176	@ 0xb0
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4413      	add	r3, r2
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	32b0      	adds	r2, #176	@ 0xb0
 800f54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f552:	4618      	mov	r0, r3
 800f554:	f002 fbb6 	bl	8011cc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	32b0      	adds	r2, #176	@ 0xb0
 800f562:	2100      	movs	r1, #0
 800f564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f570:	2300      	movs	r3, #0
}
 800f572:	4618      	mov	r0, r3
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	200000a7 	.word	0x200000a7
 800f580:	200000a8 	.word	0x200000a8
 800f584:	200000a9 	.word	0x200000a9

0800f588 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	32b0      	adds	r2, #176	@ 0xb0
 800f59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	e0bf      	b.n	800f738 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d050      	beq.n	800f666 <USBD_CDC_Setup+0xde>
 800f5c4:	2b20      	cmp	r3, #32
 800f5c6:	f040 80af 	bne.w	800f728 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	88db      	ldrh	r3, [r3, #6]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d03a      	beq.n	800f648 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	b25b      	sxtb	r3, r3
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	da1b      	bge.n	800f614 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	33b0      	adds	r3, #176	@ 0xb0
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f5f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	88d2      	ldrh	r2, [r2, #6]
 800f5f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	88db      	ldrh	r3, [r3, #6]
 800f5fe:	2b07      	cmp	r3, #7
 800f600:	bf28      	it	cs
 800f602:	2307      	movcs	r3, #7
 800f604:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	89fa      	ldrh	r2, [r7, #14]
 800f60a:	4619      	mov	r1, r3
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f001 fd93 	bl	8011138 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f612:	e090      	b.n	800f736 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	785a      	ldrb	r2, [r3, #1]
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	88db      	ldrh	r3, [r3, #6]
 800f622:	2b3f      	cmp	r3, #63	@ 0x3f
 800f624:	d803      	bhi.n	800f62e <USBD_CDC_Setup+0xa6>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	88db      	ldrh	r3, [r3, #6]
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	e000      	b.n	800f630 <USBD_CDC_Setup+0xa8>
 800f62e:	2240      	movs	r2, #64	@ 0x40
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f636:	6939      	ldr	r1, [r7, #16]
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f63e:	461a      	mov	r2, r3
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f001 fda5 	bl	8011190 <USBD_CtlPrepareRx>
      break;
 800f646:	e076      	b.n	800f736 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	33b0      	adds	r3, #176	@ 0xb0
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	4413      	add	r3, r2
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	683a      	ldr	r2, [r7, #0]
 800f65c:	7850      	ldrb	r0, [r2, #1]
 800f65e:	2200      	movs	r2, #0
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	4798      	blx	r3
      break;
 800f664:	e067      	b.n	800f736 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	785b      	ldrb	r3, [r3, #1]
 800f66a:	2b0b      	cmp	r3, #11
 800f66c:	d851      	bhi.n	800f712 <USBD_CDC_Setup+0x18a>
 800f66e:	a201      	add	r2, pc, #4	@ (adr r2, 800f674 <USBD_CDC_Setup+0xec>)
 800f670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f674:	0800f6a5 	.word	0x0800f6a5
 800f678:	0800f721 	.word	0x0800f721
 800f67c:	0800f713 	.word	0x0800f713
 800f680:	0800f713 	.word	0x0800f713
 800f684:	0800f713 	.word	0x0800f713
 800f688:	0800f713 	.word	0x0800f713
 800f68c:	0800f713 	.word	0x0800f713
 800f690:	0800f713 	.word	0x0800f713
 800f694:	0800f713 	.word	0x0800f713
 800f698:	0800f713 	.word	0x0800f713
 800f69c:	0800f6cf 	.word	0x0800f6cf
 800f6a0:	0800f6f9 	.word	0x0800f6f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	2b03      	cmp	r3, #3
 800f6ae:	d107      	bne.n	800f6c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f6b0:	f107 030a 	add.w	r3, r7, #10
 800f6b4:	2202      	movs	r2, #2
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f001 fd3d 	bl	8011138 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f6be:	e032      	b.n	800f726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f001 fcbb 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	75fb      	strb	r3, [r7, #23]
          break;
 800f6cc:	e02b      	b.n	800f726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	2b03      	cmp	r3, #3
 800f6d8:	d107      	bne.n	800f6ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f6da:	f107 030d 	add.w	r3, r7, #13
 800f6de:	2201      	movs	r2, #1
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f001 fd28 	bl	8011138 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f6e8:	e01d      	b.n	800f726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f001 fca6 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800f6f2:	2303      	movs	r3, #3
 800f6f4:	75fb      	strb	r3, [r7, #23]
          break;
 800f6f6:	e016      	b.n	800f726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	2b03      	cmp	r3, #3
 800f702:	d00f      	beq.n	800f724 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f001 fc99 	bl	801103e <USBD_CtlError>
            ret = USBD_FAIL;
 800f70c:	2303      	movs	r3, #3
 800f70e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f710:	e008      	b.n	800f724 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f001 fc92 	bl	801103e <USBD_CtlError>
          ret = USBD_FAIL;
 800f71a:	2303      	movs	r3, #3
 800f71c:	75fb      	strb	r3, [r7, #23]
          break;
 800f71e:	e002      	b.n	800f726 <USBD_CDC_Setup+0x19e>
          break;
 800f720:	bf00      	nop
 800f722:	e008      	b.n	800f736 <USBD_CDC_Setup+0x1ae>
          break;
 800f724:	bf00      	nop
      }
      break;
 800f726:	e006      	b.n	800f736 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f728:	6839      	ldr	r1, [r7, #0]
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f001 fc87 	bl	801103e <USBD_CtlError>
      ret = USBD_FAIL;
 800f730:	2303      	movs	r3, #3
 800f732:	75fb      	strb	r3, [r7, #23]
      break;
 800f734:	bf00      	nop
  }

  return (uint8_t)ret;
 800f736:	7dfb      	ldrb	r3, [r7, #23]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	460b      	mov	r3, r1
 800f74a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	32b0      	adds	r2, #176	@ 0xb0
 800f75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f766:	2303      	movs	r3, #3
 800f768:	e065      	b.n	800f836 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	32b0      	adds	r2, #176	@ 0xb0
 800f774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f778:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f77a:	78fb      	ldrb	r3, [r7, #3]
 800f77c:	f003 020f 	and.w	r2, r3, #15
 800f780:	6879      	ldr	r1, [r7, #4]
 800f782:	4613      	mov	r3, r2
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	4413      	add	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	440b      	add	r3, r1
 800f78c:	3318      	adds	r3, #24
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d02f      	beq.n	800f7f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f794:	78fb      	ldrb	r3, [r7, #3]
 800f796:	f003 020f 	and.w	r2, r3, #15
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	4613      	mov	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	4413      	add	r3, r2
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	440b      	add	r3, r1
 800f7a6:	3318      	adds	r3, #24
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	78fb      	ldrb	r3, [r7, #3]
 800f7ac:	f003 010f 	and.w	r1, r3, #15
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	440b      	add	r3, r1
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4403      	add	r3, r0
 800f7bc:	331c      	adds	r3, #28
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800f7c4:	fb01 f303 	mul.w	r3, r1, r3
 800f7c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d112      	bne.n	800f7f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f7ce:	78fb      	ldrb	r3, [r7, #3]
 800f7d0:	f003 020f 	and.w	r2, r3, #15
 800f7d4:	6879      	ldr	r1, [r7, #4]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4413      	add	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	440b      	add	r3, r1
 800f7e0:	3318      	adds	r3, #24
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f7e6:	78f9      	ldrb	r1, [r7, #3]
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f002 fa06 	bl	8011bfe <USBD_LL_Transmit>
 800f7f2:	e01f      	b.n	800f834 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	33b0      	adds	r3, #176	@ 0xb0
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d010      	beq.n	800f834 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	33b0      	adds	r3, #176	@ 0xb0
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	4413      	add	r3, r2
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f830:	78fa      	ldrb	r2, [r7, #3]
 800f832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b084      	sub	sp, #16
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	460b      	mov	r3, r1
 800f848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	32b0      	adds	r2, #176	@ 0xb0
 800f854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f858:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	32b0      	adds	r2, #176	@ 0xb0
 800f864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d101      	bne.n	800f870 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f86c:	2303      	movs	r3, #3
 800f86e:	e01a      	b.n	800f8a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f870:	78fb      	ldrb	r3, [r7, #3]
 800f872:	4619      	mov	r1, r3
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f002 fa04 	bl	8011c82 <USBD_LL_GetRxDataSize>
 800f87a:	4602      	mov	r2, r0
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	33b0      	adds	r3, #176	@ 0xb0
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4413      	add	r3, r2
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b084      	sub	sp, #16
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	32b0      	adds	r2, #176	@ 0xb0
 800f8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d101      	bne.n	800f8d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	e024      	b.n	800f91a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	33b0      	adds	r3, #176	@ 0xb0
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	4413      	add	r3, r2
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d019      	beq.n	800f918 <USBD_CDC_EP0_RxReady+0x6a>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f8ea:	2bff      	cmp	r3, #255	@ 0xff
 800f8ec:	d014      	beq.n	800f918 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	33b0      	adds	r3, #176	@ 0xb0
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	4413      	add	r3, r2
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f906:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f90e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	22ff      	movs	r2, #255	@ 0xff
 800f914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
	...

0800f924 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f92c:	2182      	movs	r1, #130	@ 0x82
 800f92e:	4818      	ldr	r0, [pc, #96]	@ (800f990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f930:	f000 fd4f 	bl	80103d2 <USBD_GetEpDesc>
 800f934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f936:	2101      	movs	r1, #1
 800f938:	4815      	ldr	r0, [pc, #84]	@ (800f990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f93a:	f000 fd4a 	bl	80103d2 <USBD_GetEpDesc>
 800f93e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f940:	2181      	movs	r1, #129	@ 0x81
 800f942:	4813      	ldr	r0, [pc, #76]	@ (800f990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f944:	f000 fd45 	bl	80103d2 <USBD_GetEpDesc>
 800f948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2210      	movs	r2, #16
 800f954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d006      	beq.n	800f96a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	2200      	movs	r2, #0
 800f960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f964:	711a      	strb	r2, [r3, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d006      	beq.n	800f97e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2200      	movs	r2, #0
 800f974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f978:	711a      	strb	r2, [r3, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2243      	movs	r2, #67	@ 0x43
 800f982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f984:	4b02      	ldr	r3, [pc, #8]	@ (800f990 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f986:	4618      	mov	r0, r3
 800f988:	3718      	adds	r7, #24
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20000064 	.word	0x20000064

0800f994 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f99c:	2182      	movs	r1, #130	@ 0x82
 800f99e:	4818      	ldr	r0, [pc, #96]	@ (800fa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f9a0:	f000 fd17 	bl	80103d2 <USBD_GetEpDesc>
 800f9a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	4815      	ldr	r0, [pc, #84]	@ (800fa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f9aa:	f000 fd12 	bl	80103d2 <USBD_GetEpDesc>
 800f9ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f9b0:	2181      	movs	r1, #129	@ 0x81
 800f9b2:	4813      	ldr	r0, [pc, #76]	@ (800fa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f9b4:	f000 fd0d 	bl	80103d2 <USBD_GetEpDesc>
 800f9b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2210      	movs	r2, #16
 800f9c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d006      	beq.n	800f9da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	711a      	strb	r2, [r3, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f042 0202 	orr.w	r2, r2, #2
 800f9d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	711a      	strb	r2, [r3, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f042 0202 	orr.w	r2, r2, #2
 800f9ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2243      	movs	r2, #67	@ 0x43
 800f9f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f9f4:	4b02      	ldr	r3, [pc, #8]	@ (800fa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3718      	adds	r7, #24
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	20000064 	.word	0x20000064

0800fa04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa0c:	2182      	movs	r1, #130	@ 0x82
 800fa0e:	4818      	ldr	r0, [pc, #96]	@ (800fa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa10:	f000 fcdf 	bl	80103d2 <USBD_GetEpDesc>
 800fa14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa16:	2101      	movs	r1, #1
 800fa18:	4815      	ldr	r0, [pc, #84]	@ (800fa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa1a:	f000 fcda 	bl	80103d2 <USBD_GetEpDesc>
 800fa1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa20:	2181      	movs	r1, #129	@ 0x81
 800fa22:	4813      	ldr	r0, [pc, #76]	@ (800fa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa24:	f000 fcd5 	bl	80103d2 <USBD_GetEpDesc>
 800fa28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2210      	movs	r2, #16
 800fa34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d006      	beq.n	800fa4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa44:	711a      	strb	r2, [r3, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa58:	711a      	strb	r2, [r3, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2243      	movs	r2, #67	@ 0x43
 800fa62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa64:	4b02      	ldr	r3, [pc, #8]	@ (800fa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	20000064 	.word	0x20000064

0800fa74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	220a      	movs	r2, #10
 800fa80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fa82:	4b03      	ldr	r3, [pc, #12]	@ (800fa90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr
 800fa90:	20000020 	.word	0x20000020

0800fa94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d101      	bne.n	800faa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800faa4:	2303      	movs	r3, #3
 800faa6:	e009      	b.n	800fabc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	33b0      	adds	r3, #176	@ 0xb0
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	4413      	add	r3, r2
 800fab6:	683a      	ldr	r2, [r7, #0]
 800fab8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fac8:	b480      	push	{r7}
 800faca:	b087      	sub	sp, #28
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	32b0      	adds	r2, #176	@ 0xb0
 800fade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fae2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800faea:	2303      	movs	r3, #3
 800faec:	e008      	b.n	800fb00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	371c      	adds	r7, #28
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	32b0      	adds	r2, #176	@ 0xb0
 800fb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d101      	bne.n	800fb30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fb2c:	2303      	movs	r3, #3
 800fb2e:	e004      	b.n	800fb3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fb38:	2300      	movs	r3, #0
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3714      	adds	r7, #20
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
	...

0800fb48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	32b0      	adds	r2, #176	@ 0xb0
 800fb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fb60:	2301      	movs	r3, #1
 800fb62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	e025      	b.n	800fbba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d11f      	bne.n	800fbb8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fb80:	4b10      	ldr	r3, [pc, #64]	@ (800fbc4 <USBD_CDC_TransmitPacket+0x7c>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	f003 020f 	and.w	r2, r3, #15
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	4613      	mov	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	4413      	add	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4403      	add	r3, r0
 800fb9a:	3318      	adds	r3, #24
 800fb9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fb9e:	4b09      	ldr	r3, [pc, #36]	@ (800fbc4 <USBD_CDC_TransmitPacket+0x7c>)
 800fba0:	7819      	ldrb	r1, [r3, #0]
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f002 f825 	bl	8011bfe <USBD_LL_Transmit>

    ret = USBD_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	200000a7 	.word	0x200000a7

0800fbc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	32b0      	adds	r2, #176	@ 0xb0
 800fbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	32b0      	adds	r2, #176	@ 0xb0
 800fbea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d101      	bne.n	800fbf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fbf2:	2303      	movs	r3, #3
 800fbf4:	e018      	b.n	800fc28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	7c1b      	ldrb	r3, [r3, #16]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d10a      	bne.n	800fc14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <USBD_CDC_ReceivePacket+0x68>)
 800fc00:	7819      	ldrb	r1, [r3, #0]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f002 f817 	bl	8011c40 <USBD_LL_PrepareReceive>
 800fc12:	e008      	b.n	800fc26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc14:	4b06      	ldr	r3, [pc, #24]	@ (800fc30 <USBD_CDC_ReceivePacket+0x68>)
 800fc16:	7819      	ldrb	r1, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc1e:	2340      	movs	r3, #64	@ 0x40
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f002 f80d 	bl	8011c40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	200000a8 	.word	0x200000a8

0800fc34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b086      	sub	sp, #24
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	4613      	mov	r3, r2
 800fc40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d101      	bne.n	800fc4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fc48:	2303      	movs	r3, #3
 800fc4a:	e01f      	b.n	800fc8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2200      	movs	r2, #0
 800fc58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d003      	beq.n	800fc72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2201      	movs	r2, #1
 800fc76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	79fa      	ldrb	r2, [r7, #7]
 800fc7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f001 fe87 	bl	8011994 <USBD_LL_Init>
 800fc86:	4603      	mov	r3, r0
 800fc88:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3718      	adds	r7, #24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d101      	bne.n	800fcac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fca8:	2303      	movs	r3, #3
 800fcaa:	e025      	b.n	800fcf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	683a      	ldr	r2, [r7, #0]
 800fcb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	32ae      	adds	r2, #174	@ 0xae
 800fcbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00f      	beq.n	800fce8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	32ae      	adds	r2, #174	@ 0xae
 800fcd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd8:	f107 020e 	add.w	r2, r7, #14
 800fcdc:	4610      	mov	r0, r2
 800fcde:	4798      	blx	r3
 800fce0:	4602      	mov	r2, r0
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fcee:	1c5a      	adds	r2, r3, #1
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f001 fe8f 	bl	8011a2c <USBD_LL_Start>
 800fd0e:	4603      	mov	r3, r0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fd20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	370c      	adds	r7, #12
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr

0800fd2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	460b      	mov	r3, r1
 800fd38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d009      	beq.n	800fd5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	78fa      	ldrb	r2, [r7, #3]
 800fd52:	4611      	mov	r1, r2
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	4798      	blx	r3
 800fd58:	4603      	mov	r3, r0
 800fd5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b084      	sub	sp, #16
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	460b      	mov	r3, r1
 800fd70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd72:	2300      	movs	r3, #0
 800fd74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	78fa      	ldrb	r2, [r7, #3]
 800fd80:	4611      	mov	r1, r2
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4798      	blx	r3
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b084      	sub	sp, #16
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	4618      	mov	r0, r3
 800fdae:	f001 f90c 	bl	8010fca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fdce:	f003 031f 	and.w	r3, r3, #31
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d01a      	beq.n	800fe0c <USBD_LL_SetupStage+0x72>
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d822      	bhi.n	800fe20 <USBD_LL_SetupStage+0x86>
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <USBD_LL_SetupStage+0x4a>
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d00a      	beq.n	800fdf8 <USBD_LL_SetupStage+0x5e>
 800fde2:	e01d      	b.n	800fe20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdea:	4619      	mov	r1, r3
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fb63 	bl	80104b8 <USBD_StdDevReq>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	73fb      	strb	r3, [r7, #15]
      break;
 800fdf6:	e020      	b.n	800fe3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fbcb 	bl	801059c <USBD_StdItfReq>
 800fe06:	4603      	mov	r3, r0
 800fe08:	73fb      	strb	r3, [r7, #15]
      break;
 800fe0a:	e016      	b.n	800fe3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe12:	4619      	mov	r1, r3
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 fc2d 	bl	8010674 <USBD_StdEPReq>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	73fb      	strb	r3, [r7, #15]
      break;
 800fe1e:	e00c      	b.n	800fe3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fe26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f001 fe5c 	bl	8011aec <USBD_LL_StallEP>
 800fe34:	4603      	mov	r3, r0
 800fe36:	73fb      	strb	r3, [r7, #15]
      break;
 800fe38:	bf00      	nop
  }

  return ret;
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b086      	sub	sp, #24
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	607a      	str	r2, [r7, #4]
 800fe50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fe56:	7afb      	ldrb	r3, [r7, #11]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d16e      	bne.n	800ff3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fe62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fe6a:	2b03      	cmp	r3, #3
 800fe6c:	f040 8098 	bne.w	800ffa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	689a      	ldr	r2, [r3, #8]
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d913      	bls.n	800fea4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	689a      	ldr	r2, [r3, #8]
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	1ad2      	subs	r2, r2, r3
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	4293      	cmp	r3, r2
 800fe94:	bf28      	it	cs
 800fe96:	4613      	movcs	r3, r2
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f001 f994 	bl	80111ca <USBD_CtlContinueRx>
 800fea2:	e07d      	b.n	800ffa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800feaa:	f003 031f 	and.w	r3, r3, #31
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d014      	beq.n	800fedc <USBD_LL_DataOutStage+0x98>
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	d81d      	bhi.n	800fef2 <USBD_LL_DataOutStage+0xae>
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d002      	beq.n	800fec0 <USBD_LL_DataOutStage+0x7c>
 800feba:	2b01      	cmp	r3, #1
 800febc:	d003      	beq.n	800fec6 <USBD_LL_DataOutStage+0x82>
 800febe:	e018      	b.n	800fef2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fec0:	2300      	movs	r3, #0
 800fec2:	75bb      	strb	r3, [r7, #22]
            break;
 800fec4:	e018      	b.n	800fef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	4619      	mov	r1, r3
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f000 fa64 	bl	801039e <USBD_CoreFindIF>
 800fed6:	4603      	mov	r3, r0
 800fed8:	75bb      	strb	r3, [r7, #22]
            break;
 800feda:	e00d      	b.n	800fef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	4619      	mov	r1, r3
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f000 fa66 	bl	80103b8 <USBD_CoreFindEP>
 800feec:	4603      	mov	r3, r0
 800feee:	75bb      	strb	r3, [r7, #22]
            break;
 800fef0:	e002      	b.n	800fef8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fef2:	2300      	movs	r3, #0
 800fef4:	75bb      	strb	r3, [r7, #22]
            break;
 800fef6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fef8:	7dbb      	ldrb	r3, [r7, #22]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d119      	bne.n	800ff32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b03      	cmp	r3, #3
 800ff08:	d113      	bne.n	800ff32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ff0a:	7dba      	ldrb	r2, [r7, #22]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	32ae      	adds	r2, #174	@ 0xae
 800ff10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff14:	691b      	ldr	r3, [r3, #16]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00b      	beq.n	800ff32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ff1a:	7dba      	ldrb	r2, [r7, #22]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ff22:	7dba      	ldrb	r2, [r7, #22]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	32ae      	adds	r2, #174	@ 0xae
 800ff28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ff32:	68f8      	ldr	r0, [r7, #12]
 800ff34:	f001 f95a 	bl	80111ec <USBD_CtlSendStatus>
 800ff38:	e032      	b.n	800ffa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ff3a:	7afb      	ldrb	r3, [r7, #11]
 800ff3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	4619      	mov	r1, r3
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f000 fa37 	bl	80103b8 <USBD_CoreFindEP>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff4e:	7dbb      	ldrb	r3, [r7, #22]
 800ff50:	2bff      	cmp	r3, #255	@ 0xff
 800ff52:	d025      	beq.n	800ffa0 <USBD_LL_DataOutStage+0x15c>
 800ff54:	7dbb      	ldrb	r3, [r7, #22]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d122      	bne.n	800ffa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	2b03      	cmp	r3, #3
 800ff64:	d117      	bne.n	800ff96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ff66:	7dba      	ldrb	r2, [r7, #22]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	32ae      	adds	r2, #174	@ 0xae
 800ff6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d00f      	beq.n	800ff96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ff76:	7dba      	ldrb	r2, [r7, #22]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ff7e:	7dba      	ldrb	r2, [r7, #22]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	32ae      	adds	r2, #174	@ 0xae
 800ff84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff88:	699b      	ldr	r3, [r3, #24]
 800ff8a:	7afa      	ldrb	r2, [r7, #11]
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	4798      	blx	r3
 800ff92:	4603      	mov	r3, r0
 800ff94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d001      	beq.n	800ffa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ff9c:	7dfb      	ldrb	r3, [r7, #23]
 800ff9e:	e000      	b.n	800ffa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3718      	adds	r7, #24
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b086      	sub	sp, #24
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	60f8      	str	r0, [r7, #12]
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	607a      	str	r2, [r7, #4]
 800ffb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ffb8:	7afb      	ldrb	r3, [r7, #11]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d16f      	bne.n	801009e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	3314      	adds	r3, #20
 800ffc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	d15a      	bne.n	8010084 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	689a      	ldr	r2, [r3, #8]
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d914      	bls.n	8010004 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	689a      	ldr	r2, [r3, #8]
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	1ad2      	subs	r2, r2, r3
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	461a      	mov	r2, r3
 800ffee:	6879      	ldr	r1, [r7, #4]
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f001 f8bc 	bl	801116e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fff6:	2300      	movs	r3, #0
 800fff8:	2200      	movs	r2, #0
 800fffa:	2100      	movs	r1, #0
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f001 fe1f 	bl	8011c40 <USBD_LL_PrepareReceive>
 8010002:	e03f      	b.n	8010084 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	68da      	ldr	r2, [r3, #12]
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	429a      	cmp	r2, r3
 801000e:	d11c      	bne.n	801004a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010018:	429a      	cmp	r2, r3
 801001a:	d316      	bcc.n	801004a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	685a      	ldr	r2, [r3, #4]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010026:	429a      	cmp	r2, r3
 8010028:	d20f      	bcs.n	801004a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801002a:	2200      	movs	r2, #0
 801002c:	2100      	movs	r1, #0
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f001 f89d 	bl	801116e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2200      	movs	r2, #0
 8010038:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801003c:	2300      	movs	r3, #0
 801003e:	2200      	movs	r2, #0
 8010040:	2100      	movs	r1, #0
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f001 fdfc 	bl	8011c40 <USBD_LL_PrepareReceive>
 8010048:	e01c      	b.n	8010084 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b03      	cmp	r3, #3
 8010054:	d10f      	bne.n	8010076 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d009      	beq.n	8010076 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010076:	2180      	movs	r1, #128	@ 0x80
 8010078:	68f8      	ldr	r0, [r7, #12]
 801007a:	f001 fd37 	bl	8011aec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f001 f8c7 	bl	8011212 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d03a      	beq.n	8010104 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff fe42 	bl	800fd18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2200      	movs	r2, #0
 8010098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801009c:	e032      	b.n	8010104 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801009e:	7afb      	ldrb	r3, [r7, #11]
 80100a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	4619      	mov	r1, r3
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f000 f985 	bl	80103b8 <USBD_CoreFindEP>
 80100ae:	4603      	mov	r3, r0
 80100b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100b2:	7dfb      	ldrb	r3, [r7, #23]
 80100b4:	2bff      	cmp	r3, #255	@ 0xff
 80100b6:	d025      	beq.n	8010104 <USBD_LL_DataInStage+0x15a>
 80100b8:	7dfb      	ldrb	r3, [r7, #23]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d122      	bne.n	8010104 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	d11c      	bne.n	8010104 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80100ca:	7dfa      	ldrb	r2, [r7, #23]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	32ae      	adds	r2, #174	@ 0xae
 80100d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d4:	695b      	ldr	r3, [r3, #20]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d014      	beq.n	8010104 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80100da:	7dfa      	ldrb	r2, [r7, #23]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80100e2:	7dfa      	ldrb	r2, [r7, #23]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	32ae      	adds	r2, #174	@ 0xae
 80100e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ec:	695b      	ldr	r3, [r3, #20]
 80100ee:	7afa      	ldrb	r2, [r7, #11]
 80100f0:	4611      	mov	r1, r2
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	4798      	blx	r3
 80100f6:	4603      	mov	r3, r0
 80100f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80100fa:	7dbb      	ldrb	r3, [r7, #22]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d001      	beq.n	8010104 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010100:	7dbb      	ldrb	r3, [r7, #22]
 8010102:	e000      	b.n	8010106 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3718      	adds	r7, #24
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2201      	movs	r2, #1
 801011e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2200      	movs	r2, #0
 8010126:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010146:	2b00      	cmp	r3, #0
 8010148:	d014      	beq.n	8010174 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00e      	beq.n	8010174 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	6852      	ldr	r2, [r2, #4]
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	4611      	mov	r1, r2
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	4798      	blx	r3
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	d001      	beq.n	8010174 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010170:	2303      	movs	r3, #3
 8010172:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010174:	2340      	movs	r3, #64	@ 0x40
 8010176:	2200      	movs	r2, #0
 8010178:	2100      	movs	r1, #0
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f001 fc71 	bl	8011a62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2201      	movs	r2, #1
 8010184:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2240      	movs	r2, #64	@ 0x40
 801018c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010190:	2340      	movs	r3, #64	@ 0x40
 8010192:	2200      	movs	r2, #0
 8010194:	2180      	movs	r1, #128	@ 0x80
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f001 fc63 	bl	8011a62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2201      	movs	r2, #1
 80101a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2240      	movs	r2, #64	@ 0x40
 80101a6:	621a      	str	r2, [r3, #32]

  return ret;
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	460b      	mov	r3, r1
 80101bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	78fa      	ldrb	r2, [r7, #3]
 80101c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80101c4:	2300      	movs	r3, #0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	370c      	adds	r7, #12
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80101d2:	b480      	push	{r7}
 80101d4:	b083      	sub	sp, #12
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	2b04      	cmp	r3, #4
 80101e4:	d006      	beq.n	80101f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101ec:	b2da      	uxtb	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2204      	movs	r2, #4
 80101f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801020a:	b480      	push	{r7}
 801020c:	b083      	sub	sp, #12
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2b04      	cmp	r3, #4
 801021c:	d106      	bne.n	801022c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010224:	b2da      	uxtb	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	370c      	adds	r7, #12
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b082      	sub	sp, #8
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010248:	b2db      	uxtb	r3, r3
 801024a:	2b03      	cmp	r3, #3
 801024c:	d110      	bne.n	8010270 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00b      	beq.n	8010270 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801025e:	69db      	ldr	r3, [r3, #28]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d005      	beq.n	8010270 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b082      	sub	sp, #8
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	460b      	mov	r3, r1
 8010284:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	32ae      	adds	r2, #174	@ 0xae
 8010290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010298:	2303      	movs	r3, #3
 801029a:	e01c      	b.n	80102d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b03      	cmp	r3, #3
 80102a6:	d115      	bne.n	80102d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	32ae      	adds	r2, #174	@ 0xae
 80102b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b6:	6a1b      	ldr	r3, [r3, #32]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00b      	beq.n	80102d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	32ae      	adds	r2, #174	@ 0xae
 80102c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	78fa      	ldrb	r2, [r7, #3]
 80102ce:	4611      	mov	r1, r2
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b082      	sub	sp, #8
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	460b      	mov	r3, r1
 80102e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	32ae      	adds	r2, #174	@ 0xae
 80102f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80102fc:	2303      	movs	r3, #3
 80102fe:	e01c      	b.n	801033a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010306:	b2db      	uxtb	r3, r3
 8010308:	2b03      	cmp	r3, #3
 801030a:	d115      	bne.n	8010338 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	32ae      	adds	r2, #174	@ 0xae
 8010316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00b      	beq.n	8010338 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	32ae      	adds	r2, #174	@ 0xae
 801032a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801032e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010330:	78fa      	ldrb	r2, [r7, #3]
 8010332:	4611      	mov	r1, r2
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010342:	b480      	push	{r7}
 8010344:	b083      	sub	sp, #12
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801034a:	2300      	movs	r3, #0
}
 801034c:	4618      	mov	r0, r3
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010360:	2300      	movs	r3, #0
 8010362:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2201      	movs	r2, #1
 8010368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00e      	beq.n	8010394 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	6852      	ldr	r2, [r2, #4]
 8010382:	b2d2      	uxtb	r2, r2
 8010384:	4611      	mov	r1, r2
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	4798      	blx	r3
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010390:	2303      	movs	r3, #3
 8010392:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010394:	7bfb      	ldrb	r3, [r7, #15]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801039e:	b480      	push	{r7}
 80103a0:	b083      	sub	sp, #12
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	460b      	mov	r3, r1
 80103a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80103aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	460b      	mov	r3, r1
 80103c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80103c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	370c      	adds	r7, #12
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr

080103d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b086      	sub	sp, #24
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
 80103da:	460b      	mov	r3, r1
 80103dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	885b      	ldrh	r3, [r3, #2]
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	7812      	ldrb	r2, [r2, #0]
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d91f      	bls.n	8010438 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80103fe:	e013      	b.n	8010428 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010400:	f107 030a 	add.w	r3, r7, #10
 8010404:	4619      	mov	r1, r3
 8010406:	6978      	ldr	r0, [r7, #20]
 8010408:	f000 f81b 	bl	8010442 <USBD_GetNextDesc>
 801040c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	785b      	ldrb	r3, [r3, #1]
 8010412:	2b05      	cmp	r3, #5
 8010414:	d108      	bne.n	8010428 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	789b      	ldrb	r3, [r3, #2]
 801041e:	78fa      	ldrb	r2, [r7, #3]
 8010420:	429a      	cmp	r2, r3
 8010422:	d008      	beq.n	8010436 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010424:	2300      	movs	r3, #0
 8010426:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	885b      	ldrh	r3, [r3, #2]
 801042c:	b29a      	uxth	r2, r3
 801042e:	897b      	ldrh	r3, [r7, #10]
 8010430:	429a      	cmp	r2, r3
 8010432:	d8e5      	bhi.n	8010400 <USBD_GetEpDesc+0x2e>
 8010434:	e000      	b.n	8010438 <USBD_GetEpDesc+0x66>
          break;
 8010436:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010438:	693b      	ldr	r3, [r7, #16]
}
 801043a:	4618      	mov	r0, r3
 801043c:	3718      	adds	r7, #24
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010442:	b480      	push	{r7}
 8010444:	b085      	sub	sp, #20
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
 801044a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	7812      	ldrb	r2, [r2, #0]
 8010458:	4413      	add	r3, r2
 801045a:	b29a      	uxth	r2, r3
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	461a      	mov	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4413      	add	r3, r2
 801046a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801046c:	68fb      	ldr	r3, [r7, #12]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3714      	adds	r7, #20
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr

0801047a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801047a:	b480      	push	{r7}
 801047c:	b087      	sub	sp, #28
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	3301      	adds	r3, #1
 8010490:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010498:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801049c:	021b      	lsls	r3, r3, #8
 801049e:	b21a      	sxth	r2, r3
 80104a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80104a4:	4313      	orrs	r3, r2
 80104a6:	b21b      	sxth	r3, r3
 80104a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80104aa:	89fb      	ldrh	r3, [r7, #14]
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	371c      	adds	r7, #28
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80104c2:	2300      	movs	r3, #0
 80104c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80104ce:	2b40      	cmp	r3, #64	@ 0x40
 80104d0:	d005      	beq.n	80104de <USBD_StdDevReq+0x26>
 80104d2:	2b40      	cmp	r3, #64	@ 0x40
 80104d4:	d857      	bhi.n	8010586 <USBD_StdDevReq+0xce>
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00f      	beq.n	80104fa <USBD_StdDevReq+0x42>
 80104da:	2b20      	cmp	r3, #32
 80104dc:	d153      	bne.n	8010586 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	32ae      	adds	r2, #174	@ 0xae
 80104e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	4798      	blx	r3
 80104f4:	4603      	mov	r3, r0
 80104f6:	73fb      	strb	r3, [r7, #15]
      break;
 80104f8:	e04a      	b.n	8010590 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	785b      	ldrb	r3, [r3, #1]
 80104fe:	2b09      	cmp	r3, #9
 8010500:	d83b      	bhi.n	801057a <USBD_StdDevReq+0xc2>
 8010502:	a201      	add	r2, pc, #4	@ (adr r2, 8010508 <USBD_StdDevReq+0x50>)
 8010504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010508:	0801055d 	.word	0x0801055d
 801050c:	08010571 	.word	0x08010571
 8010510:	0801057b 	.word	0x0801057b
 8010514:	08010567 	.word	0x08010567
 8010518:	0801057b 	.word	0x0801057b
 801051c:	0801053b 	.word	0x0801053b
 8010520:	08010531 	.word	0x08010531
 8010524:	0801057b 	.word	0x0801057b
 8010528:	08010553 	.word	0x08010553
 801052c:	08010545 	.word	0x08010545
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010530:	6839      	ldr	r1, [r7, #0]
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fa3c 	bl	80109b0 <USBD_GetDescriptor>
          break;
 8010538:	e024      	b.n	8010584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801053a:	6839      	ldr	r1, [r7, #0]
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fba1 	bl	8010c84 <USBD_SetAddress>
          break;
 8010542:	e01f      	b.n	8010584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010544:	6839      	ldr	r1, [r7, #0]
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fbe0 	bl	8010d0c <USBD_SetConfig>
 801054c:	4603      	mov	r3, r0
 801054e:	73fb      	strb	r3, [r7, #15]
          break;
 8010550:	e018      	b.n	8010584 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010552:	6839      	ldr	r1, [r7, #0]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 fc83 	bl	8010e60 <USBD_GetConfig>
          break;
 801055a:	e013      	b.n	8010584 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801055c:	6839      	ldr	r1, [r7, #0]
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 fcb4 	bl	8010ecc <USBD_GetStatus>
          break;
 8010564:	e00e      	b.n	8010584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 fce3 	bl	8010f34 <USBD_SetFeature>
          break;
 801056e:	e009      	b.n	8010584 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 fd07 	bl	8010f86 <USBD_ClrFeature>
          break;
 8010578:	e004      	b.n	8010584 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 fd5e 	bl	801103e <USBD_CtlError>
          break;
 8010582:	bf00      	nop
      }
      break;
 8010584:	e004      	b.n	8010590 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010586:	6839      	ldr	r1, [r7, #0]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 fd58 	bl	801103e <USBD_CtlError>
      break;
 801058e:	bf00      	nop
  }

  return ret;
 8010590:	7bfb      	ldrb	r3, [r7, #15]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop

0801059c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80105b2:	2b40      	cmp	r3, #64	@ 0x40
 80105b4:	d005      	beq.n	80105c2 <USBD_StdItfReq+0x26>
 80105b6:	2b40      	cmp	r3, #64	@ 0x40
 80105b8:	d852      	bhi.n	8010660 <USBD_StdItfReq+0xc4>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <USBD_StdItfReq+0x26>
 80105be:	2b20      	cmp	r3, #32
 80105c0:	d14e      	bne.n	8010660 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	3b01      	subs	r3, #1
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d840      	bhi.n	8010652 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	889b      	ldrh	r3, [r3, #4]
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d836      	bhi.n	8010648 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	889b      	ldrh	r3, [r3, #4]
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	4619      	mov	r1, r3
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f7ff fedb 	bl	801039e <USBD_CoreFindIF>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80105ec:	7bbb      	ldrb	r3, [r7, #14]
 80105ee:	2bff      	cmp	r3, #255	@ 0xff
 80105f0:	d01d      	beq.n	801062e <USBD_StdItfReq+0x92>
 80105f2:	7bbb      	ldrb	r3, [r7, #14]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d11a      	bne.n	801062e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80105f8:	7bba      	ldrb	r2, [r7, #14]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	32ae      	adds	r2, #174	@ 0xae
 80105fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d00f      	beq.n	8010628 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010608:	7bba      	ldrb	r2, [r7, #14]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010610:	7bba      	ldrb	r2, [r7, #14]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	32ae      	adds	r2, #174	@ 0xae
 8010616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	4798      	blx	r3
 8010622:	4603      	mov	r3, r0
 8010624:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010626:	e004      	b.n	8010632 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010628:	2303      	movs	r3, #3
 801062a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801062c:	e001      	b.n	8010632 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801062e:	2303      	movs	r3, #3
 8010630:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	88db      	ldrh	r3, [r3, #6]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d110      	bne.n	801065c <USBD_StdItfReq+0xc0>
 801063a:	7bfb      	ldrb	r3, [r7, #15]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10d      	bne.n	801065c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fdd3 	bl	80111ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010646:	e009      	b.n	801065c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fcf7 	bl	801103e <USBD_CtlError>
          break;
 8010650:	e004      	b.n	801065c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fcf2 	bl	801103e <USBD_CtlError>
          break;
 801065a:	e000      	b.n	801065e <USBD_StdItfReq+0xc2>
          break;
 801065c:	bf00      	nop
      }
      break;
 801065e:	e004      	b.n	801066a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010660:	6839      	ldr	r1, [r7, #0]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 fceb 	bl	801103e <USBD_CtlError>
      break;
 8010668:	bf00      	nop
  }

  return ret;
 801066a:	7bfb      	ldrb	r3, [r7, #15]
}
 801066c:	4618      	mov	r0, r3
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	889b      	ldrh	r3, [r3, #4]
 8010686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010690:	2b40      	cmp	r3, #64	@ 0x40
 8010692:	d007      	beq.n	80106a4 <USBD_StdEPReq+0x30>
 8010694:	2b40      	cmp	r3, #64	@ 0x40
 8010696:	f200 817f 	bhi.w	8010998 <USBD_StdEPReq+0x324>
 801069a:	2b00      	cmp	r3, #0
 801069c:	d02a      	beq.n	80106f4 <USBD_StdEPReq+0x80>
 801069e:	2b20      	cmp	r3, #32
 80106a0:	f040 817a 	bne.w	8010998 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80106a4:	7bbb      	ldrb	r3, [r7, #14]
 80106a6:	4619      	mov	r1, r3
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7ff fe85 	bl	80103b8 <USBD_CoreFindEP>
 80106ae:	4603      	mov	r3, r0
 80106b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106b2:	7b7b      	ldrb	r3, [r7, #13]
 80106b4:	2bff      	cmp	r3, #255	@ 0xff
 80106b6:	f000 8174 	beq.w	80109a2 <USBD_StdEPReq+0x32e>
 80106ba:	7b7b      	ldrb	r3, [r7, #13]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f040 8170 	bne.w	80109a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80106c2:	7b7a      	ldrb	r2, [r7, #13]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80106ca:	7b7a      	ldrb	r2, [r7, #13]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	32ae      	adds	r2, #174	@ 0xae
 80106d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 8163 	beq.w	80109a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80106dc:	7b7a      	ldrb	r2, [r7, #13]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	32ae      	adds	r2, #174	@ 0xae
 80106e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106e6:	689b      	ldr	r3, [r3, #8]
 80106e8:	6839      	ldr	r1, [r7, #0]
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	4798      	blx	r3
 80106ee:	4603      	mov	r3, r0
 80106f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80106f2:	e156      	b.n	80109a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	785b      	ldrb	r3, [r3, #1]
 80106f8:	2b03      	cmp	r3, #3
 80106fa:	d008      	beq.n	801070e <USBD_StdEPReq+0x9a>
 80106fc:	2b03      	cmp	r3, #3
 80106fe:	f300 8145 	bgt.w	801098c <USBD_StdEPReq+0x318>
 8010702:	2b00      	cmp	r3, #0
 8010704:	f000 809b 	beq.w	801083e <USBD_StdEPReq+0x1ca>
 8010708:	2b01      	cmp	r3, #1
 801070a:	d03c      	beq.n	8010786 <USBD_StdEPReq+0x112>
 801070c:	e13e      	b.n	801098c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010714:	b2db      	uxtb	r3, r3
 8010716:	2b02      	cmp	r3, #2
 8010718:	d002      	beq.n	8010720 <USBD_StdEPReq+0xac>
 801071a:	2b03      	cmp	r3, #3
 801071c:	d016      	beq.n	801074c <USBD_StdEPReq+0xd8>
 801071e:	e02c      	b.n	801077a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00d      	beq.n	8010742 <USBD_StdEPReq+0xce>
 8010726:	7bbb      	ldrb	r3, [r7, #14]
 8010728:	2b80      	cmp	r3, #128	@ 0x80
 801072a:	d00a      	beq.n	8010742 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801072c:	7bbb      	ldrb	r3, [r7, #14]
 801072e:	4619      	mov	r1, r3
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f001 f9db 	bl	8011aec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010736:	2180      	movs	r1, #128	@ 0x80
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f001 f9d7 	bl	8011aec <USBD_LL_StallEP>
 801073e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010740:	e020      	b.n	8010784 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010742:	6839      	ldr	r1, [r7, #0]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fc7a 	bl	801103e <USBD_CtlError>
              break;
 801074a:	e01b      	b.n	8010784 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	885b      	ldrh	r3, [r3, #2]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10e      	bne.n	8010772 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010754:	7bbb      	ldrb	r3, [r7, #14]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00b      	beq.n	8010772 <USBD_StdEPReq+0xfe>
 801075a:	7bbb      	ldrb	r3, [r7, #14]
 801075c:	2b80      	cmp	r3, #128	@ 0x80
 801075e:	d008      	beq.n	8010772 <USBD_StdEPReq+0xfe>
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	88db      	ldrh	r3, [r3, #6]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d104      	bne.n	8010772 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010768:	7bbb      	ldrb	r3, [r7, #14]
 801076a:	4619      	mov	r1, r3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f001 f9bd 	bl	8011aec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 fd3a 	bl	80111ec <USBD_CtlSendStatus>

              break;
 8010778:	e004      	b.n	8010784 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fc5e 	bl	801103e <USBD_CtlError>
              break;
 8010782:	bf00      	nop
          }
          break;
 8010784:	e107      	b.n	8010996 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801078c:	b2db      	uxtb	r3, r3
 801078e:	2b02      	cmp	r3, #2
 8010790:	d002      	beq.n	8010798 <USBD_StdEPReq+0x124>
 8010792:	2b03      	cmp	r3, #3
 8010794:	d016      	beq.n	80107c4 <USBD_StdEPReq+0x150>
 8010796:	e04b      	b.n	8010830 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010798:	7bbb      	ldrb	r3, [r7, #14]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00d      	beq.n	80107ba <USBD_StdEPReq+0x146>
 801079e:	7bbb      	ldrb	r3, [r7, #14]
 80107a0:	2b80      	cmp	r3, #128	@ 0x80
 80107a2:	d00a      	beq.n	80107ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80107a4:	7bbb      	ldrb	r3, [r7, #14]
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f001 f99f 	bl	8011aec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80107ae:	2180      	movs	r1, #128	@ 0x80
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f001 f99b 	bl	8011aec <USBD_LL_StallEP>
 80107b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80107b8:	e040      	b.n	801083c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80107ba:	6839      	ldr	r1, [r7, #0]
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fc3e 	bl	801103e <USBD_CtlError>
              break;
 80107c2:	e03b      	b.n	801083c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	885b      	ldrh	r3, [r3, #2]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d136      	bne.n	801083a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80107cc:	7bbb      	ldrb	r3, [r7, #14]
 80107ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d004      	beq.n	80107e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80107d6:	7bbb      	ldrb	r3, [r7, #14]
 80107d8:	4619      	mov	r1, r3
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f001 f9a5 	bl	8011b2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fd03 	bl	80111ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80107e6:	7bbb      	ldrb	r3, [r7, #14]
 80107e8:	4619      	mov	r1, r3
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7ff fde4 	bl	80103b8 <USBD_CoreFindEP>
 80107f0:	4603      	mov	r3, r0
 80107f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107f4:	7b7b      	ldrb	r3, [r7, #13]
 80107f6:	2bff      	cmp	r3, #255	@ 0xff
 80107f8:	d01f      	beq.n	801083a <USBD_StdEPReq+0x1c6>
 80107fa:	7b7b      	ldrb	r3, [r7, #13]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d11c      	bne.n	801083a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010800:	7b7a      	ldrb	r2, [r7, #13]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010808:	7b7a      	ldrb	r2, [r7, #13]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	32ae      	adds	r2, #174	@ 0xae
 801080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d010      	beq.n	801083a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010818:	7b7a      	ldrb	r2, [r7, #13]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	32ae      	adds	r2, #174	@ 0xae
 801081e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	4798      	blx	r3
 801082a:	4603      	mov	r3, r0
 801082c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801082e:	e004      	b.n	801083a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010830:	6839      	ldr	r1, [r7, #0]
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 fc03 	bl	801103e <USBD_CtlError>
              break;
 8010838:	e000      	b.n	801083c <USBD_StdEPReq+0x1c8>
              break;
 801083a:	bf00      	nop
          }
          break;
 801083c:	e0ab      	b.n	8010996 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010844:	b2db      	uxtb	r3, r3
 8010846:	2b02      	cmp	r3, #2
 8010848:	d002      	beq.n	8010850 <USBD_StdEPReq+0x1dc>
 801084a:	2b03      	cmp	r3, #3
 801084c:	d032      	beq.n	80108b4 <USBD_StdEPReq+0x240>
 801084e:	e097      	b.n	8010980 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010850:	7bbb      	ldrb	r3, [r7, #14]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d007      	beq.n	8010866 <USBD_StdEPReq+0x1f2>
 8010856:	7bbb      	ldrb	r3, [r7, #14]
 8010858:	2b80      	cmp	r3, #128	@ 0x80
 801085a:	d004      	beq.n	8010866 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 fbed 	bl	801103e <USBD_CtlError>
                break;
 8010864:	e091      	b.n	801098a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801086a:	2b00      	cmp	r3, #0
 801086c:	da0b      	bge.n	8010886 <USBD_StdEPReq+0x212>
 801086e:	7bbb      	ldrb	r3, [r7, #14]
 8010870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010874:	4613      	mov	r3, r2
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	4413      	add	r3, r2
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	3310      	adds	r3, #16
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	4413      	add	r3, r2
 8010882:	3304      	adds	r3, #4
 8010884:	e00b      	b.n	801089e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010886:	7bbb      	ldrb	r3, [r7, #14]
 8010888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801088c:	4613      	mov	r3, r2
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	4413      	add	r3, r2
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010898:	687a      	ldr	r2, [r7, #4]
 801089a:	4413      	add	r3, r2
 801089c:	3304      	adds	r3, #4
 801089e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	2200      	movs	r2, #0
 80108a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2202      	movs	r2, #2
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 fc43 	bl	8011138 <USBD_CtlSendData>
              break;
 80108b2:	e06a      	b.n	801098a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80108b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	da11      	bge.n	80108e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80108bc:	7bbb      	ldrb	r3, [r7, #14]
 80108be:	f003 020f 	and.w	r2, r3, #15
 80108c2:	6879      	ldr	r1, [r7, #4]
 80108c4:	4613      	mov	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	440b      	add	r3, r1
 80108ce:	3324      	adds	r3, #36	@ 0x24
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d117      	bne.n	8010906 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80108d6:	6839      	ldr	r1, [r7, #0]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fbb0 	bl	801103e <USBD_CtlError>
                  break;
 80108de:	e054      	b.n	801098a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80108e0:	7bbb      	ldrb	r3, [r7, #14]
 80108e2:	f003 020f 	and.w	r2, r3, #15
 80108e6:	6879      	ldr	r1, [r7, #4]
 80108e8:	4613      	mov	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4413      	add	r3, r2
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	440b      	add	r3, r1
 80108f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d104      	bne.n	8010906 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80108fc:	6839      	ldr	r1, [r7, #0]
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 fb9d 	bl	801103e <USBD_CtlError>
                  break;
 8010904:	e041      	b.n	801098a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801090a:	2b00      	cmp	r3, #0
 801090c:	da0b      	bge.n	8010926 <USBD_StdEPReq+0x2b2>
 801090e:	7bbb      	ldrb	r3, [r7, #14]
 8010910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010914:	4613      	mov	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	3310      	adds	r3, #16
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	4413      	add	r3, r2
 8010922:	3304      	adds	r3, #4
 8010924:	e00b      	b.n	801093e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010926:	7bbb      	ldrb	r3, [r7, #14]
 8010928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801092c:	4613      	mov	r3, r2
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	4413      	add	r3, r2
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	4413      	add	r3, r2
 801093c:	3304      	adds	r3, #4
 801093e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010940:	7bbb      	ldrb	r3, [r7, #14]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d002      	beq.n	801094c <USBD_StdEPReq+0x2d8>
 8010946:	7bbb      	ldrb	r3, [r7, #14]
 8010948:	2b80      	cmp	r3, #128	@ 0x80
 801094a:	d103      	bne.n	8010954 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	2200      	movs	r2, #0
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	e00e      	b.n	8010972 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010954:	7bbb      	ldrb	r3, [r7, #14]
 8010956:	4619      	mov	r1, r3
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f001 f905 	bl	8011b68 <USBD_LL_IsStallEP>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	d003      	beq.n	801096c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	2201      	movs	r2, #1
 8010968:	601a      	str	r2, [r3, #0]
 801096a:	e002      	b.n	8010972 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2200      	movs	r2, #0
 8010970:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	2202      	movs	r2, #2
 8010976:	4619      	mov	r1, r3
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 fbdd 	bl	8011138 <USBD_CtlSendData>
              break;
 801097e:	e004      	b.n	801098a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fb5b 	bl	801103e <USBD_CtlError>
              break;
 8010988:	bf00      	nop
          }
          break;
 801098a:	e004      	b.n	8010996 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801098c:	6839      	ldr	r1, [r7, #0]
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fb55 	bl	801103e <USBD_CtlError>
          break;
 8010994:	bf00      	nop
      }
      break;
 8010996:	e005      	b.n	80109a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010998:	6839      	ldr	r1, [r7, #0]
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f000 fb4f 	bl	801103e <USBD_CtlError>
      break;
 80109a0:	e000      	b.n	80109a4 <USBD_StdEPReq+0x330>
      break;
 80109a2:	bf00      	nop
  }

  return ret;
 80109a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
	...

080109b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109ba:	2300      	movs	r3, #0
 80109bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80109be:	2300      	movs	r3, #0
 80109c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80109c2:	2300      	movs	r3, #0
 80109c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	885b      	ldrh	r3, [r3, #2]
 80109ca:	0a1b      	lsrs	r3, r3, #8
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	3b01      	subs	r3, #1
 80109d0:	2b06      	cmp	r3, #6
 80109d2:	f200 8128 	bhi.w	8010c26 <USBD_GetDescriptor+0x276>
 80109d6:	a201      	add	r2, pc, #4	@ (adr r2, 80109dc <USBD_GetDescriptor+0x2c>)
 80109d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109dc:	080109f9 	.word	0x080109f9
 80109e0:	08010a11 	.word	0x08010a11
 80109e4:	08010a51 	.word	0x08010a51
 80109e8:	08010c27 	.word	0x08010c27
 80109ec:	08010c27 	.word	0x08010c27
 80109f0:	08010bc7 	.word	0x08010bc7
 80109f4:	08010bf3 	.word	0x08010bf3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	7c12      	ldrb	r2, [r2, #16]
 8010a04:	f107 0108 	add.w	r1, r7, #8
 8010a08:	4610      	mov	r0, r2
 8010a0a:	4798      	blx	r3
 8010a0c:	60f8      	str	r0, [r7, #12]
      break;
 8010a0e:	e112      	b.n	8010c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7c1b      	ldrb	r3, [r3, #16]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10d      	bne.n	8010a34 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a20:	f107 0208 	add.w	r2, r7, #8
 8010a24:	4610      	mov	r0, r2
 8010a26:	4798      	blx	r3
 8010a28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	2202      	movs	r2, #2
 8010a30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010a32:	e100      	b.n	8010c36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3c:	f107 0208 	add.w	r2, r7, #8
 8010a40:	4610      	mov	r0, r2
 8010a42:	4798      	blx	r3
 8010a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	2202      	movs	r2, #2
 8010a4c:	701a      	strb	r2, [r3, #0]
      break;
 8010a4e:	e0f2      	b.n	8010c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	885b      	ldrh	r3, [r3, #2]
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b05      	cmp	r3, #5
 8010a58:	f200 80ac 	bhi.w	8010bb4 <USBD_GetDescriptor+0x204>
 8010a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8010a64 <USBD_GetDescriptor+0xb4>)
 8010a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a62:	bf00      	nop
 8010a64:	08010a7d 	.word	0x08010a7d
 8010a68:	08010ab1 	.word	0x08010ab1
 8010a6c:	08010ae5 	.word	0x08010ae5
 8010a70:	08010b19 	.word	0x08010b19
 8010a74:	08010b4d 	.word	0x08010b4d
 8010a78:	08010b81 	.word	0x08010b81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00b      	beq.n	8010aa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	7c12      	ldrb	r2, [r2, #16]
 8010a94:	f107 0108 	add.w	r1, r7, #8
 8010a98:	4610      	mov	r0, r2
 8010a9a:	4798      	blx	r3
 8010a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a9e:	e091      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010aa0:	6839      	ldr	r1, [r7, #0]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 facb 	bl	801103e <USBD_CtlError>
            err++;
 8010aa8:	7afb      	ldrb	r3, [r7, #11]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	72fb      	strb	r3, [r7, #11]
          break;
 8010aae:	e089      	b.n	8010bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	7c12      	ldrb	r2, [r2, #16]
 8010ac8:	f107 0108 	add.w	r1, r7, #8
 8010acc:	4610      	mov	r0, r2
 8010ace:	4798      	blx	r3
 8010ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ad2:	e077      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fab1 	bl	801103e <USBD_CtlError>
            err++;
 8010adc:	7afb      	ldrb	r3, [r7, #11]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ae2:	e06f      	b.n	8010bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00b      	beq.n	8010b08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	7c12      	ldrb	r2, [r2, #16]
 8010afc:	f107 0108 	add.w	r1, r7, #8
 8010b00:	4610      	mov	r0, r2
 8010b02:	4798      	blx	r3
 8010b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b06:	e05d      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010b08:	6839      	ldr	r1, [r7, #0]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 fa97 	bl	801103e <USBD_CtlError>
            err++;
 8010b10:	7afb      	ldrb	r3, [r7, #11]
 8010b12:	3301      	adds	r3, #1
 8010b14:	72fb      	strb	r3, [r7, #11]
          break;
 8010b16:	e055      	b.n	8010bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00b      	beq.n	8010b3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	7c12      	ldrb	r2, [r2, #16]
 8010b30:	f107 0108 	add.w	r1, r7, #8
 8010b34:	4610      	mov	r0, r2
 8010b36:	4798      	blx	r3
 8010b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b3a:	e043      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010b3c:	6839      	ldr	r1, [r7, #0]
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 fa7d 	bl	801103e <USBD_CtlError>
            err++;
 8010b44:	7afb      	ldrb	r3, [r7, #11]
 8010b46:	3301      	adds	r3, #1
 8010b48:	72fb      	strb	r3, [r7, #11]
          break;
 8010b4a:	e03b      	b.n	8010bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d00b      	beq.n	8010b70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b5e:	695b      	ldr	r3, [r3, #20]
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	7c12      	ldrb	r2, [r2, #16]
 8010b64:	f107 0108 	add.w	r1, r7, #8
 8010b68:	4610      	mov	r0, r2
 8010b6a:	4798      	blx	r3
 8010b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b6e:	e029      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010b70:	6839      	ldr	r1, [r7, #0]
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 fa63 	bl	801103e <USBD_CtlError>
            err++;
 8010b78:	7afb      	ldrb	r3, [r7, #11]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b7e:	e021      	b.n	8010bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b86:	699b      	ldr	r3, [r3, #24]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00b      	beq.n	8010ba4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b92:	699b      	ldr	r3, [r3, #24]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	7c12      	ldrb	r2, [r2, #16]
 8010b98:	f107 0108 	add.w	r1, r7, #8
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	4798      	blx	r3
 8010ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ba2:	e00f      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fa49 	bl	801103e <USBD_CtlError>
            err++;
 8010bac:	7afb      	ldrb	r3, [r7, #11]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8010bb2:	e007      	b.n	8010bc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010bb4:	6839      	ldr	r1, [r7, #0]
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fa41 	bl	801103e <USBD_CtlError>
          err++;
 8010bbc:	7afb      	ldrb	r3, [r7, #11]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010bc2:	bf00      	nop
      }
      break;
 8010bc4:	e037      	b.n	8010c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	7c1b      	ldrb	r3, [r3, #16]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d109      	bne.n	8010be2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bd6:	f107 0208 	add.w	r2, r7, #8
 8010bda:	4610      	mov	r0, r2
 8010bdc:	4798      	blx	r3
 8010bde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010be0:	e029      	b.n	8010c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010be2:	6839      	ldr	r1, [r7, #0]
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 fa2a 	bl	801103e <USBD_CtlError>
        err++;
 8010bea:	7afb      	ldrb	r3, [r7, #11]
 8010bec:	3301      	adds	r3, #1
 8010bee:	72fb      	strb	r3, [r7, #11]
      break;
 8010bf0:	e021      	b.n	8010c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	7c1b      	ldrb	r3, [r3, #16]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d10d      	bne.n	8010c16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c02:	f107 0208 	add.w	r2, r7, #8
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
 8010c0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	2207      	movs	r2, #7
 8010c12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c14:	e00f      	b.n	8010c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 fa10 	bl	801103e <USBD_CtlError>
        err++;
 8010c1e:	7afb      	ldrb	r3, [r7, #11]
 8010c20:	3301      	adds	r3, #1
 8010c22:	72fb      	strb	r3, [r7, #11]
      break;
 8010c24:	e007      	b.n	8010c36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010c26:	6839      	ldr	r1, [r7, #0]
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 fa08 	bl	801103e <USBD_CtlError>
      err++;
 8010c2e:	7afb      	ldrb	r3, [r7, #11]
 8010c30:	3301      	adds	r3, #1
 8010c32:	72fb      	strb	r3, [r7, #11]
      break;
 8010c34:	bf00      	nop
  }

  if (err != 0U)
 8010c36:	7afb      	ldrb	r3, [r7, #11]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d11e      	bne.n	8010c7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	88db      	ldrh	r3, [r3, #6]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d016      	beq.n	8010c72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010c44:	893b      	ldrh	r3, [r7, #8]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00e      	beq.n	8010c68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	88da      	ldrh	r2, [r3, #6]
 8010c4e:	893b      	ldrh	r3, [r7, #8]
 8010c50:	4293      	cmp	r3, r2
 8010c52:	bf28      	it	cs
 8010c54:	4613      	movcs	r3, r2
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c5a:	893b      	ldrh	r3, [r7, #8]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	68f9      	ldr	r1, [r7, #12]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 fa69 	bl	8011138 <USBD_CtlSendData>
 8010c66:	e009      	b.n	8010c7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f9e7 	bl	801103e <USBD_CtlError>
 8010c70:	e004      	b.n	8010c7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 faba 	bl	80111ec <USBD_CtlSendStatus>
 8010c78:	e000      	b.n	8010c7c <USBD_GetDescriptor+0x2cc>
    return;
 8010c7a:	bf00      	nop
  }
}
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop

08010c84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	889b      	ldrh	r3, [r3, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d131      	bne.n	8010cfa <USBD_SetAddress+0x76>
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	88db      	ldrh	r3, [r3, #6]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d12d      	bne.n	8010cfa <USBD_SetAddress+0x76>
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	885b      	ldrh	r3, [r3, #2]
 8010ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ca4:	d829      	bhi.n	8010cfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	885b      	ldrh	r3, [r3, #2]
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	2b03      	cmp	r3, #3
 8010cbc:	d104      	bne.n	8010cc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010cbe:	6839      	ldr	r1, [r7, #0]
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 f9bc 	bl	801103e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cc6:	e01d      	b.n	8010d04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	7bfa      	ldrb	r2, [r7, #15]
 8010ccc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 ff73 	bl	8011bc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 fa86 	bl	80111ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d004      	beq.n	8010cf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2202      	movs	r2, #2
 8010cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cee:	e009      	b.n	8010d04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cf8:	e004      	b.n	8010d04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010cfa:	6839      	ldr	r1, [r7, #0]
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f000 f99e 	bl	801103e <USBD_CtlError>
  }
}
 8010d02:	bf00      	nop
 8010d04:	bf00      	nop
 8010d06:	3710      	adds	r7, #16
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d16:	2300      	movs	r3, #0
 8010d18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	885b      	ldrh	r3, [r3, #2]
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	4b4e      	ldr	r3, [pc, #312]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010d22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010d24:	4b4d      	ldr	r3, [pc, #308]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d905      	bls.n	8010d38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010d2c:	6839      	ldr	r1, [r7, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f985 	bl	801103e <USBD_CtlError>
    return USBD_FAIL;
 8010d34:	2303      	movs	r3, #3
 8010d36:	e08c      	b.n	8010e52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	2b02      	cmp	r3, #2
 8010d42:	d002      	beq.n	8010d4a <USBD_SetConfig+0x3e>
 8010d44:	2b03      	cmp	r3, #3
 8010d46:	d029      	beq.n	8010d9c <USBD_SetConfig+0x90>
 8010d48:	e075      	b.n	8010e36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010d4a:	4b44      	ldr	r3, [pc, #272]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d020      	beq.n	8010d94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010d52:	4b42      	ldr	r3, [pc, #264]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	4619      	mov	r1, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7fe ffe3 	bl	800fd2e <USBD_SetClassConfig>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010d6c:	7bfb      	ldrb	r3, [r7, #15]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d008      	beq.n	8010d84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f962 	bl	801103e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2202      	movs	r2, #2
 8010d7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d82:	e065      	b.n	8010e50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 fa31 	bl	80111ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2203      	movs	r2, #3
 8010d8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010d92:	e05d      	b.n	8010e50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fa29 	bl	80111ec <USBD_CtlSendStatus>
      break;
 8010d9a:	e059      	b.n	8010e50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d112      	bne.n	8010dca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2202      	movs	r2, #2
 8010da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010dac:	4b2b      	ldr	r3, [pc, #172]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	461a      	mov	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010db6:	4b29      	ldr	r3, [pc, #164]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7fe ffd2 	bl	800fd66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fa12 	bl	80111ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010dc8:	e042      	b.n	8010e50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010dca:	4b24      	ldr	r3, [pc, #144]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d02a      	beq.n	8010e2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7fe ffc0 	bl	800fd66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010de6:	4b1d      	ldr	r3, [pc, #116]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010df0:	4b1a      	ldr	r3, [pc, #104]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	4619      	mov	r1, r3
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7fe ff99 	bl	800fd2e <USBD_SetClassConfig>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010e00:	7bfb      	ldrb	r3, [r7, #15]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00f      	beq.n	8010e26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f918 	bl	801103e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	4619      	mov	r1, r3
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7fe ffa5 	bl	800fd66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2202      	movs	r2, #2
 8010e20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e24:	e014      	b.n	8010e50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f9e0 	bl	80111ec <USBD_CtlSendStatus>
      break;
 8010e2c:	e010      	b.n	8010e50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f9dc 	bl	80111ec <USBD_CtlSendStatus>
      break;
 8010e34:	e00c      	b.n	8010e50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010e36:	6839      	ldr	r1, [r7, #0]
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 f900 	bl	801103e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e3e:	4b07      	ldr	r3, [pc, #28]	@ (8010e5c <USBD_SetConfig+0x150>)
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7fe ff8e 	bl	800fd66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010e4a:	2303      	movs	r3, #3
 8010e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8010e4e:	bf00      	nop
  }

  return ret;
 8010e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	200017e4 	.word	0x200017e4

08010e60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	88db      	ldrh	r3, [r3, #6]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d004      	beq.n	8010e7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 f8e2 	bl	801103e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010e7a:	e023      	b.n	8010ec4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	dc02      	bgt.n	8010e8e <USBD_GetConfig+0x2e>
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dc03      	bgt.n	8010e94 <USBD_GetConfig+0x34>
 8010e8c:	e015      	b.n	8010eba <USBD_GetConfig+0x5a>
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d00b      	beq.n	8010eaa <USBD_GetConfig+0x4a>
 8010e92:	e012      	b.n	8010eba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2200      	movs	r2, #0
 8010e98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 f948 	bl	8011138 <USBD_CtlSendData>
        break;
 8010ea8:	e00c      	b.n	8010ec4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3304      	adds	r3, #4
 8010eae:	2201      	movs	r2, #1
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 f940 	bl	8011138 <USBD_CtlSendData>
        break;
 8010eb8:	e004      	b.n	8010ec4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010eba:	6839      	ldr	r1, [r7, #0]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f8be 	bl	801103e <USBD_CtlError>
        break;
 8010ec2:	bf00      	nop
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d81e      	bhi.n	8010f22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	88db      	ldrh	r3, [r3, #6]
 8010ee8:	2b02      	cmp	r3, #2
 8010eea:	d004      	beq.n	8010ef6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010eec:	6839      	ldr	r1, [r7, #0]
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f000 f8a5 	bl	801103e <USBD_CtlError>
        break;
 8010ef4:	e01a      	b.n	8010f2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d005      	beq.n	8010f12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	f043 0202 	orr.w	r2, r3, #2
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	330c      	adds	r3, #12
 8010f16:	2202      	movs	r2, #2
 8010f18:	4619      	mov	r1, r3
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f90c 	bl	8011138 <USBD_CtlSendData>
      break;
 8010f20:	e004      	b.n	8010f2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010f22:	6839      	ldr	r1, [r7, #0]
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 f88a 	bl	801103e <USBD_CtlError>
      break;
 8010f2a:	bf00      	nop
  }
}
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	885b      	ldrh	r3, [r3, #2]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d107      	bne.n	8010f56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 f94c 	bl	80111ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010f54:	e013      	b.n	8010f7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	885b      	ldrh	r3, [r3, #2]
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d10b      	bne.n	8010f76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	889b      	ldrh	r3, [r3, #4]
 8010f62:	0a1b      	lsrs	r3, r3, #8
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	b2da      	uxtb	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 f93c 	bl	80111ec <USBD_CtlSendStatus>
}
 8010f74:	e003      	b.n	8010f7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 f860 	bl	801103e <USBD_CtlError>
}
 8010f7e:	bf00      	nop
 8010f80:	3708      	adds	r7, #8
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b082      	sub	sp, #8
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d80b      	bhi.n	8010fb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	885b      	ldrh	r3, [r3, #2]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d10c      	bne.n	8010fc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 f91c 	bl	80111ec <USBD_CtlSendStatus>
      }
      break;
 8010fb4:	e004      	b.n	8010fc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 f840 	bl	801103e <USBD_CtlError>
      break;
 8010fbe:	e000      	b.n	8010fc2 <USBD_ClrFeature+0x3c>
      break;
 8010fc0:	bf00      	nop
  }
}
 8010fc2:	bf00      	nop
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	781a      	ldrb	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	781a      	ldrb	r2, [r3, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7ff fa40 	bl	801047a <SWAPBYTE>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	3301      	adds	r3, #1
 8011006:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	3301      	adds	r3, #1
 801100c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f7ff fa33 	bl	801047a <SWAPBYTE>
 8011014:	4603      	mov	r3, r0
 8011016:	461a      	mov	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	3301      	adds	r3, #1
 8011020:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3301      	adds	r3, #1
 8011026:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7ff fa26 	bl	801047a <SWAPBYTE>
 801102e:	4603      	mov	r3, r0
 8011030:	461a      	mov	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	80da      	strh	r2, [r3, #6]
}
 8011036:	bf00      	nop
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b082      	sub	sp, #8
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011048:	2180      	movs	r1, #128	@ 0x80
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fd4e 	bl	8011aec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011050:	2100      	movs	r1, #0
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 fd4a 	bl	8011aec <USBD_LL_StallEP>
}
 8011058:	bf00      	nop
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801106c:	2300      	movs	r3, #0
 801106e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d042      	beq.n	80110fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801107a:	6938      	ldr	r0, [r7, #16]
 801107c:	f000 f842 	bl	8011104 <USBD_GetLen>
 8011080:	4603      	mov	r3, r0
 8011082:	3301      	adds	r3, #1
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801108a:	d808      	bhi.n	801109e <USBD_GetString+0x3e>
 801108c:	6938      	ldr	r0, [r7, #16]
 801108e:	f000 f839 	bl	8011104 <USBD_GetLen>
 8011092:	4603      	mov	r3, r0
 8011094:	3301      	adds	r3, #1
 8011096:	b29b      	uxth	r3, r3
 8011098:	005b      	lsls	r3, r3, #1
 801109a:	b29a      	uxth	r2, r3
 801109c:	e001      	b.n	80110a2 <USBD_GetString+0x42>
 801109e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80110a6:	7dfb      	ldrb	r3, [r7, #23]
 80110a8:	68ba      	ldr	r2, [r7, #8]
 80110aa:	4413      	add	r3, r2
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	7812      	ldrb	r2, [r2, #0]
 80110b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80110b2:	7dfb      	ldrb	r3, [r7, #23]
 80110b4:	3301      	adds	r3, #1
 80110b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80110b8:	7dfb      	ldrb	r3, [r7, #23]
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	4413      	add	r3, r2
 80110be:	2203      	movs	r2, #3
 80110c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80110c2:	7dfb      	ldrb	r3, [r7, #23]
 80110c4:	3301      	adds	r3, #1
 80110c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80110c8:	e013      	b.n	80110f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	4413      	add	r3, r2
 80110d0:	693a      	ldr	r2, [r7, #16]
 80110d2:	7812      	ldrb	r2, [r2, #0]
 80110d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	3301      	adds	r3, #1
 80110da:	613b      	str	r3, [r7, #16]
    idx++;
 80110dc:	7dfb      	ldrb	r3, [r7, #23]
 80110de:	3301      	adds	r3, #1
 80110e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80110e2:	7dfb      	ldrb	r3, [r7, #23]
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	4413      	add	r3, r2
 80110e8:	2200      	movs	r2, #0
 80110ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
 80110ee:	3301      	adds	r3, #1
 80110f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1e7      	bne.n	80110ca <USBD_GetString+0x6a>
 80110fa:	e000      	b.n	80110fe <USBD_GetString+0x9e>
    return;
 80110fc:	bf00      	nop
  }
}
 80110fe:	3718      	adds	r7, #24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801110c:	2300      	movs	r3, #0
 801110e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011114:	e005      	b.n	8011122 <USBD_GetLen+0x1e>
  {
    len++;
 8011116:	7bfb      	ldrb	r3, [r7, #15]
 8011118:	3301      	adds	r3, #1
 801111a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	3301      	adds	r3, #1
 8011120:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1f5      	bne.n	8011116 <USBD_GetLen+0x12>
  }

  return len;
 801112a:	7bfb      	ldrb	r3, [r7, #15]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3714      	adds	r7, #20
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2202      	movs	r2, #2
 8011148:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	68ba      	ldr	r2, [r7, #8]
 801115c:	2100      	movs	r1, #0
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f000 fd4d 	bl	8011bfe <USBD_LL_Transmit>

  return USBD_OK;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	60f8      	str	r0, [r7, #12]
 8011176:	60b9      	str	r1, [r7, #8]
 8011178:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	68ba      	ldr	r2, [r7, #8]
 801117e:	2100      	movs	r1, #0
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f000 fd3c 	bl	8011bfe <USBD_LL_Transmit>

  return USBD_OK;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3710      	adds	r7, #16
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2203      	movs	r2, #3
 80111a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	68ba      	ldr	r2, [r7, #8]
 80111b8:	2100      	movs	r1, #0
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f000 fd40 	bl	8011c40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b084      	sub	sp, #16
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	60f8      	str	r0, [r7, #12]
 80111d2:	60b9      	str	r1, [r7, #8]
 80111d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	68ba      	ldr	r2, [r7, #8]
 80111da:	2100      	movs	r1, #0
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 fd2f 	bl	8011c40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2204      	movs	r2, #4
 80111f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80111fc:	2300      	movs	r3, #0
 80111fe:	2200      	movs	r2, #0
 8011200:	2100      	movs	r1, #0
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 fcfb 	bl	8011bfe <USBD_LL_Transmit>

  return USBD_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b082      	sub	sp, #8
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2205      	movs	r2, #5
 801121e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011222:	2300      	movs	r3, #0
 8011224:	2200      	movs	r2, #0
 8011226:	2100      	movs	r1, #0
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 fd09 	bl	8011c40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801122e:	2300      	movs	r3, #0
}
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801123c:	2200      	movs	r2, #0
 801123e:	4912      	ldr	r1, [pc, #72]	@ (8011288 <MX_USB_DEVICE_Init+0x50>)
 8011240:	4812      	ldr	r0, [pc, #72]	@ (801128c <MX_USB_DEVICE_Init+0x54>)
 8011242:	f7fe fcf7 	bl	800fc34 <USBD_Init>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d001      	beq.n	8011250 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801124c:	f7f3 fa88 	bl	8004760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011250:	490f      	ldr	r1, [pc, #60]	@ (8011290 <MX_USB_DEVICE_Init+0x58>)
 8011252:	480e      	ldr	r0, [pc, #56]	@ (801128c <MX_USB_DEVICE_Init+0x54>)
 8011254:	f7fe fd1e 	bl	800fc94 <USBD_RegisterClass>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d001      	beq.n	8011262 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801125e:	f7f3 fa7f 	bl	8004760 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011262:	490c      	ldr	r1, [pc, #48]	@ (8011294 <MX_USB_DEVICE_Init+0x5c>)
 8011264:	4809      	ldr	r0, [pc, #36]	@ (801128c <MX_USB_DEVICE_Init+0x54>)
 8011266:	f7fe fc15 	bl	800fa94 <USBD_CDC_RegisterInterface>
 801126a:	4603      	mov	r3, r0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d001      	beq.n	8011274 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011270:	f7f3 fa76 	bl	8004760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011274:	4805      	ldr	r0, [pc, #20]	@ (801128c <MX_USB_DEVICE_Init+0x54>)
 8011276:	f7fe fd43 	bl	800fd00 <USBD_Start>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d001      	beq.n	8011284 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011280:	f7f3 fa6e 	bl	8004760 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011284:	bf00      	nop
 8011286:	bd80      	pop	{r7, pc}
 8011288:	200000c8 	.word	0x200000c8
 801128c:	200017e8 	.word	0x200017e8
 8011290:	2000002c 	.word	0x2000002c
 8011294:	200000b4 	.word	0x200000b4

08011298 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801129c:	2200      	movs	r2, #0
 801129e:	4905      	ldr	r1, [pc, #20]	@ (80112b4 <CDC_Init_FS+0x1c>)
 80112a0:	4805      	ldr	r0, [pc, #20]	@ (80112b8 <CDC_Init_FS+0x20>)
 80112a2:	f7fe fc11 	bl	800fac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80112a6:	4905      	ldr	r1, [pc, #20]	@ (80112bc <CDC_Init_FS+0x24>)
 80112a8:	4803      	ldr	r0, [pc, #12]	@ (80112b8 <CDC_Init_FS+0x20>)
 80112aa:	f7fe fc2f 	bl	800fb0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80112ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	20001cc4 	.word	0x20001cc4
 80112b8:	200017e8 	.word	0x200017e8
 80112bc:	20001ac4 	.word	0x20001ac4

080112c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80112c0:	b480      	push	{r7}
 80112c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80112c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	4603      	mov	r3, r0
 80112d8:	6039      	str	r1, [r7, #0]
 80112da:	71fb      	strb	r3, [r7, #7]
 80112dc:	4613      	mov	r3, r2
 80112de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80112e0:	79fb      	ldrb	r3, [r7, #7]
 80112e2:	2b23      	cmp	r3, #35	@ 0x23
 80112e4:	f200 8097 	bhi.w	8011416 <CDC_Control_FS+0x146>
 80112e8:	a201      	add	r2, pc, #4	@ (adr r2, 80112f0 <CDC_Control_FS+0x20>)
 80112ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ee:	bf00      	nop
 80112f0:	08011417 	.word	0x08011417
 80112f4:	08011417 	.word	0x08011417
 80112f8:	08011417 	.word	0x08011417
 80112fc:	08011417 	.word	0x08011417
 8011300:	08011417 	.word	0x08011417
 8011304:	08011417 	.word	0x08011417
 8011308:	08011417 	.word	0x08011417
 801130c:	08011417 	.word	0x08011417
 8011310:	08011417 	.word	0x08011417
 8011314:	08011417 	.word	0x08011417
 8011318:	08011417 	.word	0x08011417
 801131c:	08011417 	.word	0x08011417
 8011320:	08011417 	.word	0x08011417
 8011324:	08011417 	.word	0x08011417
 8011328:	08011417 	.word	0x08011417
 801132c:	08011417 	.word	0x08011417
 8011330:	08011417 	.word	0x08011417
 8011334:	08011417 	.word	0x08011417
 8011338:	08011417 	.word	0x08011417
 801133c:	08011417 	.word	0x08011417
 8011340:	08011417 	.word	0x08011417
 8011344:	08011417 	.word	0x08011417
 8011348:	08011417 	.word	0x08011417
 801134c:	08011417 	.word	0x08011417
 8011350:	08011417 	.word	0x08011417
 8011354:	08011417 	.word	0x08011417
 8011358:	08011417 	.word	0x08011417
 801135c:	08011417 	.word	0x08011417
 8011360:	08011417 	.word	0x08011417
 8011364:	08011417 	.word	0x08011417
 8011368:	08011417 	.word	0x08011417
 801136c:	08011417 	.word	0x08011417
 8011370:	08011381 	.word	0x08011381
 8011374:	080113c3 	.word	0x080113c3
 8011378:	08011417 	.word	0x08011417
 801137c:	08011417 	.word	0x08011417
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	461a      	mov	r2, r3
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	3301      	adds	r3, #1
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	021b      	lsls	r3, r3, #8
 801138e:	431a      	orrs	r2, r3
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	3302      	adds	r3, #2
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	041b      	lsls	r3, r3, #16
 8011398:	431a      	orrs	r2, r3
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	3303      	adds	r3, #3
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	061b      	lsls	r3, r3, #24
 80113a2:	4313      	orrs	r3, r2
 80113a4:	4a20      	ldr	r2, [pc, #128]	@ (8011428 <CDC_Control_FS+0x158>)
 80113a6:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	791a      	ldrb	r2, [r3, #4]
 80113ac:	4b1e      	ldr	r3, [pc, #120]	@ (8011428 <CDC_Control_FS+0x158>)
 80113ae:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	795a      	ldrb	r2, [r3, #5]
 80113b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011428 <CDC_Control_FS+0x158>)
 80113b6:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	799a      	ldrb	r2, [r3, #6]
 80113bc:	4b1a      	ldr	r3, [pc, #104]	@ (8011428 <CDC_Control_FS+0x158>)
 80113be:	719a      	strb	r2, [r3, #6]
    break;
 80113c0:	e02a      	b.n	8011418 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80113c2:	4b19      	ldr	r3, [pc, #100]	@ (8011428 <CDC_Control_FS+0x158>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80113cc:	4b16      	ldr	r3, [pc, #88]	@ (8011428 <CDC_Control_FS+0x158>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	0a1a      	lsrs	r2, r3, #8
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	3301      	adds	r3, #1
 80113d6:	b2d2      	uxtb	r2, r2
 80113d8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80113da:	4b13      	ldr	r3, [pc, #76]	@ (8011428 <CDC_Control_FS+0x158>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	0c1a      	lsrs	r2, r3, #16
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	3302      	adds	r3, #2
 80113e4:	b2d2      	uxtb	r2, r2
 80113e6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80113e8:	4b0f      	ldr	r3, [pc, #60]	@ (8011428 <CDC_Control_FS+0x158>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	0e1a      	lsrs	r2, r3, #24
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	3303      	adds	r3, #3
 80113f2:	b2d2      	uxtb	r2, r2
 80113f4:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	3304      	adds	r3, #4
 80113fa:	4a0b      	ldr	r2, [pc, #44]	@ (8011428 <CDC_Control_FS+0x158>)
 80113fc:	7912      	ldrb	r2, [r2, #4]
 80113fe:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	3305      	adds	r3, #5
 8011404:	4a08      	ldr	r2, [pc, #32]	@ (8011428 <CDC_Control_FS+0x158>)
 8011406:	7952      	ldrb	r2, [r2, #5]
 8011408:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	3306      	adds	r3, #6
 801140e:	4a06      	ldr	r2, [pc, #24]	@ (8011428 <CDC_Control_FS+0x158>)
 8011410:	7992      	ldrb	r2, [r2, #6]
 8011412:	701a      	strb	r2, [r3, #0]
	break;
 8011414:	e000      	b.n	8011418 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011416:	bf00      	nop
  }

  return (USBD_OK);
 8011418:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801141a:	4618      	mov	r0, r3
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop
 8011428:	200000ac 	.word	0x200000ac

0801142c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 8011436:	4b0b      	ldr	r3, [pc, #44]	@ (8011464 <CDC_Receive_FS+0x38>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d006      	beq.n	801144c <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 801143e:	4b09      	ldr	r3, [pc, #36]	@ (8011464 <CDC_Receive_FS+0x38>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	683a      	ldr	r2, [r7, #0]
 8011444:	6812      	ldr	r2, [r2, #0]
 8011446:	4611      	mov	r1, r2
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801144c:	6879      	ldr	r1, [r7, #4]
 801144e:	4806      	ldr	r0, [pc, #24]	@ (8011468 <CDC_Receive_FS+0x3c>)
 8011450:	f7fe fb5c 	bl	800fb0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011454:	4804      	ldr	r0, [pc, #16]	@ (8011468 <CDC_Receive_FS+0x3c>)
 8011456:	f7fe fbb7 	bl	800fbc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801145a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	20001ec4 	.word	0x20001ec4
 8011468:	200017e8 	.word	0x200017e8

0801146c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	460b      	mov	r3, r1
 8011476:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011478:	2300      	movs	r3, #0
 801147a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801147c:	4b0d      	ldr	r3, [pc, #52]	@ (80114b4 <CDC_Transmit_FS+0x48>)
 801147e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011482:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801148a:	2b00      	cmp	r3, #0
 801148c:	d001      	beq.n	8011492 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801148e:	2301      	movs	r3, #1
 8011490:	e00b      	b.n	80114aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011492:	887b      	ldrh	r3, [r7, #2]
 8011494:	461a      	mov	r2, r3
 8011496:	6879      	ldr	r1, [r7, #4]
 8011498:	4806      	ldr	r0, [pc, #24]	@ (80114b4 <CDC_Transmit_FS+0x48>)
 801149a:	f7fe fb15 	bl	800fac8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801149e:	4805      	ldr	r0, [pc, #20]	@ (80114b4 <CDC_Transmit_FS+0x48>)
 80114a0:	f7fe fb52 	bl	800fb48 <USBD_CDC_TransmitPacket>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80114a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	200017e8 	.word	0x200017e8

080114b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b087      	sub	sp, #28
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	4613      	mov	r3, r2
 80114c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80114c6:	2300      	movs	r3, #0
 80114c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80114ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	371c      	adds	r7, #28
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
	...

080114dc <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 80114dc:	b480      	push	{r7}
 80114de:	b083      	sub	sp, #12
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 80114e4:	4a04      	ldr	r2, [pc, #16]	@ (80114f8 <CDC_Attach_Rx+0x1c>)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6013      	str	r3, [r2, #0]
}
 80114ea:	bf00      	nop
 80114ec:	370c      	adds	r7, #12
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	20001ec4 	.word	0x20001ec4

080114fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	4603      	mov	r3, r0
 8011504:	6039      	str	r1, [r7, #0]
 8011506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	2212      	movs	r2, #18
 801150c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801150e:	4b03      	ldr	r3, [pc, #12]	@ (801151c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011510:	4618      	mov	r0, r3
 8011512:	370c      	adds	r7, #12
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	200000e4 	.word	0x200000e4

08011520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	6039      	str	r1, [r7, #0]
 801152a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	2204      	movs	r2, #4
 8011530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011532:	4b03      	ldr	r3, [pc, #12]	@ (8011540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	200000f8 	.word	0x200000f8

08011544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	6039      	str	r1, [r7, #0]
 801154e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011550:	79fb      	ldrb	r3, [r7, #7]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d105      	bne.n	8011562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	4907      	ldr	r1, [pc, #28]	@ (8011578 <USBD_FS_ProductStrDescriptor+0x34>)
 801155a:	4808      	ldr	r0, [pc, #32]	@ (801157c <USBD_FS_ProductStrDescriptor+0x38>)
 801155c:	f7ff fd80 	bl	8011060 <USBD_GetString>
 8011560:	e004      	b.n	801156c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011562:	683a      	ldr	r2, [r7, #0]
 8011564:	4904      	ldr	r1, [pc, #16]	@ (8011578 <USBD_FS_ProductStrDescriptor+0x34>)
 8011566:	4805      	ldr	r0, [pc, #20]	@ (801157c <USBD_FS_ProductStrDescriptor+0x38>)
 8011568:	f7ff fd7a 	bl	8011060 <USBD_GetString>
  }
  return USBD_StrDesc;
 801156c:	4b02      	ldr	r3, [pc, #8]	@ (8011578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801156e:	4618      	mov	r0, r3
 8011570:	3708      	adds	r7, #8
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	20001ec8 	.word	0x20001ec8
 801157c:	080129ec 	.word	0x080129ec

08011580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	6039      	str	r1, [r7, #0]
 801158a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801158c:	683a      	ldr	r2, [r7, #0]
 801158e:	4904      	ldr	r1, [pc, #16]	@ (80115a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011590:	4804      	ldr	r0, [pc, #16]	@ (80115a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011592:	f7ff fd65 	bl	8011060 <USBD_GetString>
  return USBD_StrDesc;
 8011596:	4b02      	ldr	r3, [pc, #8]	@ (80115a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011598:	4618      	mov	r0, r3
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	20001ec8 	.word	0x20001ec8
 80115a4:	08012a04 	.word	0x08012a04

080115a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	4603      	mov	r3, r0
 80115b0:	6039      	str	r1, [r7, #0]
 80115b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	221a      	movs	r2, #26
 80115b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115ba:	f000 f843 	bl	8011644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115be:	4b02      	ldr	r3, [pc, #8]	@ (80115c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3708      	adds	r7, #8
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	200000fc 	.word	0x200000fc

080115cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	6039      	str	r1, [r7, #0]
 80115d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115d8:	79fb      	ldrb	r3, [r7, #7]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d105      	bne.n	80115ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115de:	683a      	ldr	r2, [r7, #0]
 80115e0:	4907      	ldr	r1, [pc, #28]	@ (8011600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115e2:	4808      	ldr	r0, [pc, #32]	@ (8011604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115e4:	f7ff fd3c 	bl	8011060 <USBD_GetString>
 80115e8:	e004      	b.n	80115f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	4904      	ldr	r1, [pc, #16]	@ (8011600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115ee:	4805      	ldr	r0, [pc, #20]	@ (8011604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115f0:	f7ff fd36 	bl	8011060 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115f4:	4b02      	ldr	r3, [pc, #8]	@ (8011600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	20001ec8 	.word	0x20001ec8
 8011604:	08012a18 	.word	0x08012a18

08011608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	6039      	str	r1, [r7, #0]
 8011612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	4907      	ldr	r1, [pc, #28]	@ (801163c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801161e:	4808      	ldr	r0, [pc, #32]	@ (8011640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011620:	f7ff fd1e 	bl	8011060 <USBD_GetString>
 8011624:	e004      	b.n	8011630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	4904      	ldr	r1, [pc, #16]	@ (801163c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801162a:	4805      	ldr	r0, [pc, #20]	@ (8011640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801162c:	f7ff fd18 	bl	8011060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011630:	4b02      	ldr	r3, [pc, #8]	@ (801163c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011632:	4618      	mov	r0, r3
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	20001ec8 	.word	0x20001ec8
 8011640:	08012a24 	.word	0x08012a24

08011644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801164a:	4b0f      	ldr	r3, [pc, #60]	@ (8011688 <Get_SerialNum+0x44>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011650:	4b0e      	ldr	r3, [pc, #56]	@ (801168c <Get_SerialNum+0x48>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011656:	4b0e      	ldr	r3, [pc, #56]	@ (8011690 <Get_SerialNum+0x4c>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801165c:	68fa      	ldr	r2, [r7, #12]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4413      	add	r3, r2
 8011662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d009      	beq.n	801167e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801166a:	2208      	movs	r2, #8
 801166c:	4909      	ldr	r1, [pc, #36]	@ (8011694 <Get_SerialNum+0x50>)
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	f000 f814 	bl	801169c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011674:	2204      	movs	r2, #4
 8011676:	4908      	ldr	r1, [pc, #32]	@ (8011698 <Get_SerialNum+0x54>)
 8011678:	68b8      	ldr	r0, [r7, #8]
 801167a:	f000 f80f 	bl	801169c <IntToUnicode>
  }
}
 801167e:	bf00      	nop
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	1fff7a10 	.word	0x1fff7a10
 801168c:	1fff7a14 	.word	0x1fff7a14
 8011690:	1fff7a18 	.word	0x1fff7a18
 8011694:	200000fe 	.word	0x200000fe
 8011698:	2000010e 	.word	0x2000010e

0801169c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801169c:	b480      	push	{r7}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4613      	mov	r3, r2
 80116a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80116aa:	2300      	movs	r3, #0
 80116ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80116ae:	2300      	movs	r3, #0
 80116b0:	75fb      	strb	r3, [r7, #23]
 80116b2:	e027      	b.n	8011704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	0f1b      	lsrs	r3, r3, #28
 80116b8:	2b09      	cmp	r3, #9
 80116ba:	d80b      	bhi.n	80116d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	0f1b      	lsrs	r3, r3, #28
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	7dfb      	ldrb	r3, [r7, #23]
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	4619      	mov	r1, r3
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	440b      	add	r3, r1
 80116cc:	3230      	adds	r2, #48	@ 0x30
 80116ce:	b2d2      	uxtb	r2, r2
 80116d0:	701a      	strb	r2, [r3, #0]
 80116d2:	e00a      	b.n	80116ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	0f1b      	lsrs	r3, r3, #28
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	7dfb      	ldrb	r3, [r7, #23]
 80116dc:	005b      	lsls	r3, r3, #1
 80116de:	4619      	mov	r1, r3
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	440b      	add	r3, r1
 80116e4:	3237      	adds	r2, #55	@ 0x37
 80116e6:	b2d2      	uxtb	r2, r2
 80116e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	011b      	lsls	r3, r3, #4
 80116ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116f0:	7dfb      	ldrb	r3, [r7, #23]
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	3301      	adds	r3, #1
 80116f6:	68ba      	ldr	r2, [r7, #8]
 80116f8:	4413      	add	r3, r2
 80116fa:	2200      	movs	r2, #0
 80116fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80116fe:	7dfb      	ldrb	r3, [r7, #23]
 8011700:	3301      	adds	r3, #1
 8011702:	75fb      	strb	r3, [r7, #23]
 8011704:	7dfa      	ldrb	r2, [r7, #23]
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	429a      	cmp	r2, r3
 801170a:	d3d3      	bcc.n	80116b4 <IntToUnicode+0x18>
  }
}
 801170c:	bf00      	nop
 801170e:	bf00      	nop
 8011710:	371c      	adds	r7, #28
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
	...

0801171c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b08a      	sub	sp, #40	@ 0x28
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011724:	f107 0314 	add.w	r3, r7, #20
 8011728:	2200      	movs	r2, #0
 801172a:	601a      	str	r2, [r3, #0]
 801172c:	605a      	str	r2, [r3, #4]
 801172e:	609a      	str	r2, [r3, #8]
 8011730:	60da      	str	r2, [r3, #12]
 8011732:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801173c:	d13a      	bne.n	80117b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801173e:	2300      	movs	r3, #0
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	4b1e      	ldr	r3, [pc, #120]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 8011744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011746:	4a1d      	ldr	r2, [pc, #116]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 8011748:	f043 0301 	orr.w	r3, r3, #1
 801174c:	6313      	str	r3, [r2, #48]	@ 0x30
 801174e:	4b1b      	ldr	r3, [pc, #108]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 8011750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011752:	f003 0301 	and.w	r3, r3, #1
 8011756:	613b      	str	r3, [r7, #16]
 8011758:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801175a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011760:	2302      	movs	r3, #2
 8011762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011764:	2300      	movs	r3, #0
 8011766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011768:	2303      	movs	r3, #3
 801176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801176c:	230a      	movs	r3, #10
 801176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011770:	f107 0314 	add.w	r3, r7, #20
 8011774:	4619      	mov	r1, r3
 8011776:	4812      	ldr	r0, [pc, #72]	@ (80117c0 <HAL_PCD_MspInit+0xa4>)
 8011778:	f7f4 fe50 	bl	800641c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801177c:	4b0f      	ldr	r3, [pc, #60]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 801177e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011780:	4a0e      	ldr	r2, [pc, #56]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 8011782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011786:	6353      	str	r3, [r2, #52]	@ 0x34
 8011788:	2300      	movs	r3, #0
 801178a:	60fb      	str	r3, [r7, #12]
 801178c:	4b0b      	ldr	r3, [pc, #44]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 801178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011790:	4a0a      	ldr	r2, [pc, #40]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 8011792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011796:	6453      	str	r3, [r2, #68]	@ 0x44
 8011798:	4b08      	ldr	r3, [pc, #32]	@ (80117bc <HAL_PCD_MspInit+0xa0>)
 801179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801179c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80117a4:	2200      	movs	r2, #0
 80117a6:	2100      	movs	r1, #0
 80117a8:	2043      	movs	r0, #67	@ 0x43
 80117aa:	f7f4 f9e4 	bl	8005b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80117ae:	2043      	movs	r0, #67	@ 0x43
 80117b0:	f7f4 f9fd 	bl	8005bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80117b4:	bf00      	nop
 80117b6:	3728      	adds	r7, #40	@ 0x28
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	40023800 	.word	0x40023800
 80117c0:	40020000 	.word	0x40020000

080117c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80117d8:	4619      	mov	r1, r3
 80117da:	4610      	mov	r0, r2
 80117dc:	f7fe fadd 	bl	800fd9a <USBD_LL_SetupStage>
}
 80117e0:	bf00      	nop
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	460b      	mov	r3, r1
 80117f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80117fa:	78fa      	ldrb	r2, [r7, #3]
 80117fc:	6879      	ldr	r1, [r7, #4]
 80117fe:	4613      	mov	r3, r2
 8011800:	00db      	lsls	r3, r3, #3
 8011802:	4413      	add	r3, r2
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	440b      	add	r3, r1
 8011808:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	78fb      	ldrb	r3, [r7, #3]
 8011810:	4619      	mov	r1, r3
 8011812:	f7fe fb17 	bl	800fe44 <USBD_LL_DataOutStage>
}
 8011816:	bf00      	nop
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b082      	sub	sp, #8
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	460b      	mov	r3, r1
 8011828:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011830:	78fa      	ldrb	r2, [r7, #3]
 8011832:	6879      	ldr	r1, [r7, #4]
 8011834:	4613      	mov	r3, r2
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	4413      	add	r3, r2
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	440b      	add	r3, r1
 801183e:	3320      	adds	r3, #32
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	78fb      	ldrb	r3, [r7, #3]
 8011844:	4619      	mov	r1, r3
 8011846:	f7fe fbb0 	bl	800ffaa <USBD_LL_DataInStage>
}
 801184a:	bf00      	nop
 801184c:	3708      	adds	r7, #8
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b082      	sub	sp, #8
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe fcea 	bl	801023a <USBD_LL_SOF>
}
 8011866:	bf00      	nop
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b084      	sub	sp, #16
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011876:	2301      	movs	r3, #1
 8011878:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	79db      	ldrb	r3, [r3, #7]
 801187e:	2b02      	cmp	r3, #2
 8011880:	d001      	beq.n	8011886 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011882:	f7f2 ff6d 	bl	8004760 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801188c:	7bfa      	ldrb	r2, [r7, #15]
 801188e:	4611      	mov	r1, r2
 8011890:	4618      	mov	r0, r3
 8011892:	f7fe fc8e 	bl	80101b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801189c:	4618      	mov	r0, r3
 801189e:	f7fe fc36 	bl	801010e <USBD_LL_Reset>
}
 80118a2:	bf00      	nop
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
	...

080118ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fe fc89 	bl	80101d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	6812      	ldr	r2, [r2, #0]
 80118ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80118d2:	f043 0301 	orr.w	r3, r3, #1
 80118d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	7adb      	ldrb	r3, [r3, #11]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d005      	beq.n	80118ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80118e0:	4b04      	ldr	r3, [pc, #16]	@ (80118f4 <HAL_PCD_SuspendCallback+0x48>)
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	4a03      	ldr	r2, [pc, #12]	@ (80118f4 <HAL_PCD_SuspendCallback+0x48>)
 80118e6:	f043 0306 	orr.w	r3, r3, #6
 80118ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	e000ed00 	.word	0xe000ed00

080118f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011906:	4618      	mov	r0, r3
 8011908:	f7fe fc7f 	bl	801020a <USBD_LL_Resume>
}
 801190c:	bf00      	nop
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011926:	78fa      	ldrb	r2, [r7, #3]
 8011928:	4611      	mov	r1, r2
 801192a:	4618      	mov	r0, r3
 801192c:	f7fe fcd7 	bl	80102de <USBD_LL_IsoOUTIncomplete>
}
 8011930:	bf00      	nop
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	460b      	mov	r3, r1
 8011942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801194a:	78fa      	ldrb	r2, [r7, #3]
 801194c:	4611      	mov	r1, r2
 801194e:	4618      	mov	r0, r3
 8011950:	f7fe fc93 	bl	801027a <USBD_LL_IsoINIncomplete>
}
 8011954:	bf00      	nop
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801196a:	4618      	mov	r0, r3
 801196c:	f7fe fce9 	bl	8010342 <USBD_LL_DevConnected>
}
 8011970:	bf00      	nop
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011986:	4618      	mov	r0, r3
 8011988:	f7fe fce6 	bl	8010358 <USBD_LL_DevDisconnected>
}
 801198c:	bf00      	nop
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d13c      	bne.n	8011a1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80119a4:	4a20      	ldr	r2, [pc, #128]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	4a1e      	ldr	r2, [pc, #120]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80119b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80119ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80119bc:	4b1a      	ldr	r3, [pc, #104]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119be:	2204      	movs	r2, #4
 80119c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80119c2:	4b19      	ldr	r3, [pc, #100]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119c4:	2202      	movs	r2, #2
 80119c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80119c8:	4b17      	ldr	r3, [pc, #92]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119ca:	2200      	movs	r2, #0
 80119cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80119ce:	4b16      	ldr	r3, [pc, #88]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119d0:	2202      	movs	r2, #2
 80119d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80119d4:	4b14      	ldr	r3, [pc, #80]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80119da:	4b13      	ldr	r3, [pc, #76]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119dc:	2200      	movs	r2, #0
 80119de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80119e0:	4b11      	ldr	r3, [pc, #68]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80119e6:	4b10      	ldr	r3, [pc, #64]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80119ec:	4b0e      	ldr	r3, [pc, #56]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80119f2:	480d      	ldr	r0, [pc, #52]	@ (8011a28 <USBD_LL_Init+0x94>)
 80119f4:	f7f8 fad3 	bl	8009f9e <HAL_PCD_Init>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d001      	beq.n	8011a02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80119fe:	f7f2 feaf 	bl	8004760 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a02:	2180      	movs	r1, #128	@ 0x80
 8011a04:	4808      	ldr	r0, [pc, #32]	@ (8011a28 <USBD_LL_Init+0x94>)
 8011a06:	f7f9 fd00 	bl	800b40a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a0a:	2240      	movs	r2, #64	@ 0x40
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	4806      	ldr	r0, [pc, #24]	@ (8011a28 <USBD_LL_Init+0x94>)
 8011a10:	f7f9 fcb4 	bl	800b37c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a14:	2280      	movs	r2, #128	@ 0x80
 8011a16:	2101      	movs	r1, #1
 8011a18:	4803      	ldr	r0, [pc, #12]	@ (8011a28 <USBD_LL_Init+0x94>)
 8011a1a:	f7f9 fcaf 	bl	800b37c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	200020c8 	.word	0x200020c8

08011a2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7f8 fbba 	bl	800a1bc <HAL_PCD_Start>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a4c:	7bfb      	ldrb	r3, [r7, #15]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 f942 	bl	8011cd8 <USBD_Get_USB_Status>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3710      	adds	r7, #16
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b084      	sub	sp, #16
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
 8011a6a:	4608      	mov	r0, r1
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	461a      	mov	r2, r3
 8011a70:	4603      	mov	r3, r0
 8011a72:	70fb      	strb	r3, [r7, #3]
 8011a74:	460b      	mov	r3, r1
 8011a76:	70bb      	strb	r3, [r7, #2]
 8011a78:	4613      	mov	r3, r2
 8011a7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a80:	2300      	movs	r3, #0
 8011a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011a8a:	78bb      	ldrb	r3, [r7, #2]
 8011a8c:	883a      	ldrh	r2, [r7, #0]
 8011a8e:	78f9      	ldrb	r1, [r7, #3]
 8011a90:	f7f9 f88e 	bl	800abb0 <HAL_PCD_EP_Open>
 8011a94:	4603      	mov	r3, r0
 8011a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a98:	7bfb      	ldrb	r3, [r7, #15]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f000 f91c 	bl	8011cd8 <USBD_Get_USB_Status>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}

08011aae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011aae:	b580      	push	{r7, lr}
 8011ab0:	b084      	sub	sp, #16
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ac8:	78fa      	ldrb	r2, [r7, #3]
 8011aca:	4611      	mov	r1, r2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7f9 f8d9 	bl	800ac84 <HAL_PCD_EP_Close>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f000 f8fd 	bl	8011cd8 <USBD_Get_USB_Status>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	460b      	mov	r3, r1
 8011af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011af8:	2300      	movs	r3, #0
 8011afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b06:	78fa      	ldrb	r2, [r7, #3]
 8011b08:	4611      	mov	r1, r2
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f9 f991 	bl	800ae32 <HAL_PCD_EP_SetStall>
 8011b10:	4603      	mov	r3, r0
 8011b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b14:	7bfb      	ldrb	r3, [r7, #15]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f000 f8de 	bl	8011cd8 <USBD_Get_USB_Status>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b084      	sub	sp, #16
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	460b      	mov	r3, r1
 8011b34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b44:	78fa      	ldrb	r2, [r7, #3]
 8011b46:	4611      	mov	r1, r2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f9 f9d5 	bl	800aef8 <HAL_PCD_EP_ClrStall>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b52:	7bfb      	ldrb	r3, [r7, #15]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f000 f8bf 	bl	8011cd8 <USBD_Get_USB_Status>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b085      	sub	sp, #20
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	da0b      	bge.n	8011b9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011b84:	78fb      	ldrb	r3, [r7, #3]
 8011b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b8a:	68f9      	ldr	r1, [r7, #12]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	00db      	lsls	r3, r3, #3
 8011b90:	4413      	add	r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	440b      	add	r3, r1
 8011b96:	3316      	adds	r3, #22
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	e00b      	b.n	8011bb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011b9c:	78fb      	ldrb	r3, [r7, #3]
 8011b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011ba2:	68f9      	ldr	r1, [r7, #12]
 8011ba4:	4613      	mov	r3, r2
 8011ba6:	00db      	lsls	r3, r3, #3
 8011ba8:	4413      	add	r3, r2
 8011baa:	009b      	lsls	r3, r3, #2
 8011bac:	440b      	add	r3, r1
 8011bae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011bb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3714      	adds	r7, #20
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	460b      	mov	r3, r1
 8011bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bda:	78fa      	ldrb	r2, [r7, #3]
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7f8 ffc2 	bl	800ab68 <HAL_PCD_SetAddress>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011be8:	7bfb      	ldrb	r3, [r7, #15]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f000 f874 	bl	8011cd8 <USBD_Get_USB_Status>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b086      	sub	sp, #24
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	60f8      	str	r0, [r7, #12]
 8011c06:	607a      	str	r2, [r7, #4]
 8011c08:	603b      	str	r3, [r7, #0]
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c12:	2300      	movs	r3, #0
 8011c14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c1c:	7af9      	ldrb	r1, [r7, #11]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	f7f9 f8cc 	bl	800adbe <HAL_PCD_EP_Transmit>
 8011c26:	4603      	mov	r3, r0
 8011c28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f000 f853 	bl	8011cd8 <USBD_Get_USB_Status>
 8011c32:	4603      	mov	r3, r0
 8011c34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c36:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3718      	adds	r7, #24
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b086      	sub	sp, #24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	607a      	str	r2, [r7, #4]
 8011c4a:	603b      	str	r3, [r7, #0]
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c50:	2300      	movs	r3, #0
 8011c52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c54:	2300      	movs	r3, #0
 8011c56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c5e:	7af9      	ldrb	r1, [r7, #11]
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	f7f9 f858 	bl	800ad18 <HAL_PCD_EP_Receive>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c6c:	7dfb      	ldrb	r3, [r7, #23]
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f000 f832 	bl	8011cd8 <USBD_Get_USB_Status>
 8011c74:	4603      	mov	r3, r0
 8011c76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c78:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3718      	adds	r7, #24
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b082      	sub	sp, #8
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c94:	78fa      	ldrb	r2, [r7, #3]
 8011c96:	4611      	mov	r1, r2
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7f9 f878 	bl	800ad8e <HAL_PCD_EP_GetRxCount>
 8011c9e:	4603      	mov	r3, r0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011cb0:	4b03      	ldr	r3, [pc, #12]	@ (8011cc0 <USBD_static_malloc+0x18>)
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	370c      	adds	r7, #12
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	200025ac 	.word	0x200025ac

08011cc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]

}
 8011ccc:	bf00      	nop
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	4603      	mov	r3, r0
 8011ce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	2b03      	cmp	r3, #3
 8011cea:	d817      	bhi.n	8011d1c <USBD_Get_USB_Status+0x44>
 8011cec:	a201      	add	r2, pc, #4	@ (adr r2, 8011cf4 <USBD_Get_USB_Status+0x1c>)
 8011cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf2:	bf00      	nop
 8011cf4:	08011d05 	.word	0x08011d05
 8011cf8:	08011d0b 	.word	0x08011d0b
 8011cfc:	08011d11 	.word	0x08011d11
 8011d00:	08011d17 	.word	0x08011d17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	73fb      	strb	r3, [r7, #15]
    break;
 8011d08:	e00b      	b.n	8011d22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d0a:	2303      	movs	r3, #3
 8011d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d0e:	e008      	b.n	8011d22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d10:	2301      	movs	r3, #1
 8011d12:	73fb      	strb	r3, [r7, #15]
    break;
 8011d14:	e005      	b.n	8011d22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d16:	2303      	movs	r3, #3
 8011d18:	73fb      	strb	r3, [r7, #15]
    break;
 8011d1a:	e002      	b.n	8011d22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d1c:	2303      	movs	r3, #3
 8011d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d20:	bf00      	nop
  }
  return usb_status;
 8011d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3714      	adds	r7, #20
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <__itoa>:
 8011d30:	1e93      	subs	r3, r2, #2
 8011d32:	2b22      	cmp	r3, #34	@ 0x22
 8011d34:	b510      	push	{r4, lr}
 8011d36:	460c      	mov	r4, r1
 8011d38:	d904      	bls.n	8011d44 <__itoa+0x14>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	700b      	strb	r3, [r1, #0]
 8011d3e:	461c      	mov	r4, r3
 8011d40:	4620      	mov	r0, r4
 8011d42:	bd10      	pop	{r4, pc}
 8011d44:	2a0a      	cmp	r2, #10
 8011d46:	d109      	bne.n	8011d5c <__itoa+0x2c>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	da07      	bge.n	8011d5c <__itoa+0x2c>
 8011d4c:	232d      	movs	r3, #45	@ 0x2d
 8011d4e:	700b      	strb	r3, [r1, #0]
 8011d50:	4240      	negs	r0, r0
 8011d52:	2101      	movs	r1, #1
 8011d54:	4421      	add	r1, r4
 8011d56:	f000 f805 	bl	8011d64 <__utoa>
 8011d5a:	e7f1      	b.n	8011d40 <__itoa+0x10>
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	e7f9      	b.n	8011d54 <__itoa+0x24>

08011d60 <itoa>:
 8011d60:	f7ff bfe6 	b.w	8011d30 <__itoa>

08011d64 <__utoa>:
 8011d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d66:	4c1f      	ldr	r4, [pc, #124]	@ (8011de4 <__utoa+0x80>)
 8011d68:	b08b      	sub	sp, #44	@ 0x2c
 8011d6a:	4605      	mov	r5, r0
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	466e      	mov	r6, sp
 8011d70:	f104 0c20 	add.w	ip, r4, #32
 8011d74:	6820      	ldr	r0, [r4, #0]
 8011d76:	6861      	ldr	r1, [r4, #4]
 8011d78:	4637      	mov	r7, r6
 8011d7a:	c703      	stmia	r7!, {r0, r1}
 8011d7c:	3408      	adds	r4, #8
 8011d7e:	4564      	cmp	r4, ip
 8011d80:	463e      	mov	r6, r7
 8011d82:	d1f7      	bne.n	8011d74 <__utoa+0x10>
 8011d84:	7921      	ldrb	r1, [r4, #4]
 8011d86:	7139      	strb	r1, [r7, #4]
 8011d88:	1e91      	subs	r1, r2, #2
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	6038      	str	r0, [r7, #0]
 8011d8e:	2922      	cmp	r1, #34	@ 0x22
 8011d90:	f04f 0100 	mov.w	r1, #0
 8011d94:	d904      	bls.n	8011da0 <__utoa+0x3c>
 8011d96:	7019      	strb	r1, [r3, #0]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	b00b      	add	sp, #44	@ 0x2c
 8011d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011da0:	1e58      	subs	r0, r3, #1
 8011da2:	4684      	mov	ip, r0
 8011da4:	fbb5 f7f2 	udiv	r7, r5, r2
 8011da8:	fb02 5617 	mls	r6, r2, r7, r5
 8011dac:	3628      	adds	r6, #40	@ 0x28
 8011dae:	446e      	add	r6, sp
 8011db0:	460c      	mov	r4, r1
 8011db2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011db6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011dba:	462e      	mov	r6, r5
 8011dbc:	42b2      	cmp	r2, r6
 8011dbe:	f101 0101 	add.w	r1, r1, #1
 8011dc2:	463d      	mov	r5, r7
 8011dc4:	d9ee      	bls.n	8011da4 <__utoa+0x40>
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	545a      	strb	r2, [r3, r1]
 8011dca:	1919      	adds	r1, r3, r4
 8011dcc:	1aa5      	subs	r5, r4, r2
 8011dce:	42aa      	cmp	r2, r5
 8011dd0:	dae3      	bge.n	8011d9a <__utoa+0x36>
 8011dd2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011dd6:	780e      	ldrb	r6, [r1, #0]
 8011dd8:	7006      	strb	r6, [r0, #0]
 8011dda:	3201      	adds	r2, #1
 8011ddc:	f801 5901 	strb.w	r5, [r1], #-1
 8011de0:	e7f4      	b.n	8011dcc <__utoa+0x68>
 8011de2:	bf00      	nop
 8011de4:	08013cec 	.word	0x08013cec

08011de8 <siprintf>:
 8011de8:	b40e      	push	{r1, r2, r3}
 8011dea:	b510      	push	{r4, lr}
 8011dec:	b09d      	sub	sp, #116	@ 0x74
 8011dee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011df0:	9002      	str	r0, [sp, #8]
 8011df2:	9006      	str	r0, [sp, #24]
 8011df4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011df8:	480a      	ldr	r0, [pc, #40]	@ (8011e24 <siprintf+0x3c>)
 8011dfa:	9107      	str	r1, [sp, #28]
 8011dfc:	9104      	str	r1, [sp, #16]
 8011dfe:	490a      	ldr	r1, [pc, #40]	@ (8011e28 <siprintf+0x40>)
 8011e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e04:	9105      	str	r1, [sp, #20]
 8011e06:	2400      	movs	r4, #0
 8011e08:	a902      	add	r1, sp, #8
 8011e0a:	6800      	ldr	r0, [r0, #0]
 8011e0c:	9301      	str	r3, [sp, #4]
 8011e0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011e10:	f000 f9b6 	bl	8012180 <_svfiprintf_r>
 8011e14:	9b02      	ldr	r3, [sp, #8]
 8011e16:	701c      	strb	r4, [r3, #0]
 8011e18:	b01d      	add	sp, #116	@ 0x74
 8011e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e1e:	b003      	add	sp, #12
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop
 8011e24:	20000118 	.word	0x20000118
 8011e28:	ffff0208 	.word	0xffff0208

08011e2c <memset>:
 8011e2c:	4402      	add	r2, r0
 8011e2e:	4603      	mov	r3, r0
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d100      	bne.n	8011e36 <memset+0xa>
 8011e34:	4770      	bx	lr
 8011e36:	f803 1b01 	strb.w	r1, [r3], #1
 8011e3a:	e7f9      	b.n	8011e30 <memset+0x4>

08011e3c <strncpy>:
 8011e3c:	b510      	push	{r4, lr}
 8011e3e:	3901      	subs	r1, #1
 8011e40:	4603      	mov	r3, r0
 8011e42:	b132      	cbz	r2, 8011e52 <strncpy+0x16>
 8011e44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e48:	f803 4b01 	strb.w	r4, [r3], #1
 8011e4c:	3a01      	subs	r2, #1
 8011e4e:	2c00      	cmp	r4, #0
 8011e50:	d1f7      	bne.n	8011e42 <strncpy+0x6>
 8011e52:	441a      	add	r2, r3
 8011e54:	2100      	movs	r1, #0
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d100      	bne.n	8011e5c <strncpy+0x20>
 8011e5a:	bd10      	pop	{r4, pc}
 8011e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8011e60:	e7f9      	b.n	8011e56 <strncpy+0x1a>
	...

08011e64 <__errno>:
 8011e64:	4b01      	ldr	r3, [pc, #4]	@ (8011e6c <__errno+0x8>)
 8011e66:	6818      	ldr	r0, [r3, #0]
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop
 8011e6c:	20000118 	.word	0x20000118

08011e70 <__libc_init_array>:
 8011e70:	b570      	push	{r4, r5, r6, lr}
 8011e72:	4d0d      	ldr	r5, [pc, #52]	@ (8011ea8 <__libc_init_array+0x38>)
 8011e74:	4c0d      	ldr	r4, [pc, #52]	@ (8011eac <__libc_init_array+0x3c>)
 8011e76:	1b64      	subs	r4, r4, r5
 8011e78:	10a4      	asrs	r4, r4, #2
 8011e7a:	2600      	movs	r6, #0
 8011e7c:	42a6      	cmp	r6, r4
 8011e7e:	d109      	bne.n	8011e94 <__libc_init_array+0x24>
 8011e80:	4d0b      	ldr	r5, [pc, #44]	@ (8011eb0 <__libc_init_array+0x40>)
 8011e82:	4c0c      	ldr	r4, [pc, #48]	@ (8011eb4 <__libc_init_array+0x44>)
 8011e84:	f000 fc64 	bl	8012750 <_init>
 8011e88:	1b64      	subs	r4, r4, r5
 8011e8a:	10a4      	asrs	r4, r4, #2
 8011e8c:	2600      	movs	r6, #0
 8011e8e:	42a6      	cmp	r6, r4
 8011e90:	d105      	bne.n	8011e9e <__libc_init_array+0x2e>
 8011e92:	bd70      	pop	{r4, r5, r6, pc}
 8011e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e98:	4798      	blx	r3
 8011e9a:	3601      	adds	r6, #1
 8011e9c:	e7ee      	b.n	8011e7c <__libc_init_array+0xc>
 8011e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ea2:	4798      	blx	r3
 8011ea4:	3601      	adds	r6, #1
 8011ea6:	e7f2      	b.n	8011e8e <__libc_init_array+0x1e>
 8011ea8:	08013d4c 	.word	0x08013d4c
 8011eac:	08013d4c 	.word	0x08013d4c
 8011eb0:	08013d4c 	.word	0x08013d4c
 8011eb4:	08013d50 	.word	0x08013d50

08011eb8 <__retarget_lock_acquire_recursive>:
 8011eb8:	4770      	bx	lr

08011eba <__retarget_lock_release_recursive>:
 8011eba:	4770      	bx	lr

08011ebc <memcpy>:
 8011ebc:	440a      	add	r2, r1
 8011ebe:	4291      	cmp	r1, r2
 8011ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ec4:	d100      	bne.n	8011ec8 <memcpy+0xc>
 8011ec6:	4770      	bx	lr
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ed2:	4291      	cmp	r1, r2
 8011ed4:	d1f9      	bne.n	8011eca <memcpy+0xe>
 8011ed6:	bd10      	pop	{r4, pc}

08011ed8 <_free_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4605      	mov	r5, r0
 8011edc:	2900      	cmp	r1, #0
 8011ede:	d041      	beq.n	8011f64 <_free_r+0x8c>
 8011ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ee4:	1f0c      	subs	r4, r1, #4
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	bfb8      	it	lt
 8011eea:	18e4      	addlt	r4, r4, r3
 8011eec:	f000 f8e0 	bl	80120b0 <__malloc_lock>
 8011ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8011f68 <_free_r+0x90>)
 8011ef2:	6813      	ldr	r3, [r2, #0]
 8011ef4:	b933      	cbnz	r3, 8011f04 <_free_r+0x2c>
 8011ef6:	6063      	str	r3, [r4, #4]
 8011ef8:	6014      	str	r4, [r2, #0]
 8011efa:	4628      	mov	r0, r5
 8011efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f00:	f000 b8dc 	b.w	80120bc <__malloc_unlock>
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	d908      	bls.n	8011f1a <_free_r+0x42>
 8011f08:	6820      	ldr	r0, [r4, #0]
 8011f0a:	1821      	adds	r1, r4, r0
 8011f0c:	428b      	cmp	r3, r1
 8011f0e:	bf01      	itttt	eq
 8011f10:	6819      	ldreq	r1, [r3, #0]
 8011f12:	685b      	ldreq	r3, [r3, #4]
 8011f14:	1809      	addeq	r1, r1, r0
 8011f16:	6021      	streq	r1, [r4, #0]
 8011f18:	e7ed      	b.n	8011ef6 <_free_r+0x1e>
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	b10b      	cbz	r3, 8011f24 <_free_r+0x4c>
 8011f20:	42a3      	cmp	r3, r4
 8011f22:	d9fa      	bls.n	8011f1a <_free_r+0x42>
 8011f24:	6811      	ldr	r1, [r2, #0]
 8011f26:	1850      	adds	r0, r2, r1
 8011f28:	42a0      	cmp	r0, r4
 8011f2a:	d10b      	bne.n	8011f44 <_free_r+0x6c>
 8011f2c:	6820      	ldr	r0, [r4, #0]
 8011f2e:	4401      	add	r1, r0
 8011f30:	1850      	adds	r0, r2, r1
 8011f32:	4283      	cmp	r3, r0
 8011f34:	6011      	str	r1, [r2, #0]
 8011f36:	d1e0      	bne.n	8011efa <_free_r+0x22>
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	6053      	str	r3, [r2, #4]
 8011f3e:	4408      	add	r0, r1
 8011f40:	6010      	str	r0, [r2, #0]
 8011f42:	e7da      	b.n	8011efa <_free_r+0x22>
 8011f44:	d902      	bls.n	8011f4c <_free_r+0x74>
 8011f46:	230c      	movs	r3, #12
 8011f48:	602b      	str	r3, [r5, #0]
 8011f4a:	e7d6      	b.n	8011efa <_free_r+0x22>
 8011f4c:	6820      	ldr	r0, [r4, #0]
 8011f4e:	1821      	adds	r1, r4, r0
 8011f50:	428b      	cmp	r3, r1
 8011f52:	bf04      	itt	eq
 8011f54:	6819      	ldreq	r1, [r3, #0]
 8011f56:	685b      	ldreq	r3, [r3, #4]
 8011f58:	6063      	str	r3, [r4, #4]
 8011f5a:	bf04      	itt	eq
 8011f5c:	1809      	addeq	r1, r1, r0
 8011f5e:	6021      	streq	r1, [r4, #0]
 8011f60:	6054      	str	r4, [r2, #4]
 8011f62:	e7ca      	b.n	8011efa <_free_r+0x22>
 8011f64:	bd38      	pop	{r3, r4, r5, pc}
 8011f66:	bf00      	nop
 8011f68:	20002910 	.word	0x20002910

08011f6c <sbrk_aligned>:
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8011fac <sbrk_aligned+0x40>)
 8011f70:	460c      	mov	r4, r1
 8011f72:	6831      	ldr	r1, [r6, #0]
 8011f74:	4605      	mov	r5, r0
 8011f76:	b911      	cbnz	r1, 8011f7e <sbrk_aligned+0x12>
 8011f78:	f000 fba4 	bl	80126c4 <_sbrk_r>
 8011f7c:	6030      	str	r0, [r6, #0]
 8011f7e:	4621      	mov	r1, r4
 8011f80:	4628      	mov	r0, r5
 8011f82:	f000 fb9f 	bl	80126c4 <_sbrk_r>
 8011f86:	1c43      	adds	r3, r0, #1
 8011f88:	d103      	bne.n	8011f92 <sbrk_aligned+0x26>
 8011f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8011f8e:	4620      	mov	r0, r4
 8011f90:	bd70      	pop	{r4, r5, r6, pc}
 8011f92:	1cc4      	adds	r4, r0, #3
 8011f94:	f024 0403 	bic.w	r4, r4, #3
 8011f98:	42a0      	cmp	r0, r4
 8011f9a:	d0f8      	beq.n	8011f8e <sbrk_aligned+0x22>
 8011f9c:	1a21      	subs	r1, r4, r0
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	f000 fb90 	bl	80126c4 <_sbrk_r>
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	d1f2      	bne.n	8011f8e <sbrk_aligned+0x22>
 8011fa8:	e7ef      	b.n	8011f8a <sbrk_aligned+0x1e>
 8011faa:	bf00      	nop
 8011fac:	2000290c 	.word	0x2000290c

08011fb0 <_malloc_r>:
 8011fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fb4:	1ccd      	adds	r5, r1, #3
 8011fb6:	f025 0503 	bic.w	r5, r5, #3
 8011fba:	3508      	adds	r5, #8
 8011fbc:	2d0c      	cmp	r5, #12
 8011fbe:	bf38      	it	cc
 8011fc0:	250c      	movcc	r5, #12
 8011fc2:	2d00      	cmp	r5, #0
 8011fc4:	4606      	mov	r6, r0
 8011fc6:	db01      	blt.n	8011fcc <_malloc_r+0x1c>
 8011fc8:	42a9      	cmp	r1, r5
 8011fca:	d904      	bls.n	8011fd6 <_malloc_r+0x26>
 8011fcc:	230c      	movs	r3, #12
 8011fce:	6033      	str	r3, [r6, #0]
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80120ac <_malloc_r+0xfc>
 8011fda:	f000 f869 	bl	80120b0 <__malloc_lock>
 8011fde:	f8d8 3000 	ldr.w	r3, [r8]
 8011fe2:	461c      	mov	r4, r3
 8011fe4:	bb44      	cbnz	r4, 8012038 <_malloc_r+0x88>
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	4630      	mov	r0, r6
 8011fea:	f7ff ffbf 	bl	8011f6c <sbrk_aligned>
 8011fee:	1c43      	adds	r3, r0, #1
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	d158      	bne.n	80120a6 <_malloc_r+0xf6>
 8011ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8011ff8:	4627      	mov	r7, r4
 8011ffa:	2f00      	cmp	r7, #0
 8011ffc:	d143      	bne.n	8012086 <_malloc_r+0xd6>
 8011ffe:	2c00      	cmp	r4, #0
 8012000:	d04b      	beq.n	801209a <_malloc_r+0xea>
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	4639      	mov	r1, r7
 8012006:	4630      	mov	r0, r6
 8012008:	eb04 0903 	add.w	r9, r4, r3
 801200c:	f000 fb5a 	bl	80126c4 <_sbrk_r>
 8012010:	4581      	cmp	r9, r0
 8012012:	d142      	bne.n	801209a <_malloc_r+0xea>
 8012014:	6821      	ldr	r1, [r4, #0]
 8012016:	1a6d      	subs	r5, r5, r1
 8012018:	4629      	mov	r1, r5
 801201a:	4630      	mov	r0, r6
 801201c:	f7ff ffa6 	bl	8011f6c <sbrk_aligned>
 8012020:	3001      	adds	r0, #1
 8012022:	d03a      	beq.n	801209a <_malloc_r+0xea>
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	442b      	add	r3, r5
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	f8d8 3000 	ldr.w	r3, [r8]
 801202e:	685a      	ldr	r2, [r3, #4]
 8012030:	bb62      	cbnz	r2, 801208c <_malloc_r+0xdc>
 8012032:	f8c8 7000 	str.w	r7, [r8]
 8012036:	e00f      	b.n	8012058 <_malloc_r+0xa8>
 8012038:	6822      	ldr	r2, [r4, #0]
 801203a:	1b52      	subs	r2, r2, r5
 801203c:	d420      	bmi.n	8012080 <_malloc_r+0xd0>
 801203e:	2a0b      	cmp	r2, #11
 8012040:	d917      	bls.n	8012072 <_malloc_r+0xc2>
 8012042:	1961      	adds	r1, r4, r5
 8012044:	42a3      	cmp	r3, r4
 8012046:	6025      	str	r5, [r4, #0]
 8012048:	bf18      	it	ne
 801204a:	6059      	strne	r1, [r3, #4]
 801204c:	6863      	ldr	r3, [r4, #4]
 801204e:	bf08      	it	eq
 8012050:	f8c8 1000 	streq.w	r1, [r8]
 8012054:	5162      	str	r2, [r4, r5]
 8012056:	604b      	str	r3, [r1, #4]
 8012058:	4630      	mov	r0, r6
 801205a:	f000 f82f 	bl	80120bc <__malloc_unlock>
 801205e:	f104 000b 	add.w	r0, r4, #11
 8012062:	1d23      	adds	r3, r4, #4
 8012064:	f020 0007 	bic.w	r0, r0, #7
 8012068:	1ac2      	subs	r2, r0, r3
 801206a:	bf1c      	itt	ne
 801206c:	1a1b      	subne	r3, r3, r0
 801206e:	50a3      	strne	r3, [r4, r2]
 8012070:	e7af      	b.n	8011fd2 <_malloc_r+0x22>
 8012072:	6862      	ldr	r2, [r4, #4]
 8012074:	42a3      	cmp	r3, r4
 8012076:	bf0c      	ite	eq
 8012078:	f8c8 2000 	streq.w	r2, [r8]
 801207c:	605a      	strne	r2, [r3, #4]
 801207e:	e7eb      	b.n	8012058 <_malloc_r+0xa8>
 8012080:	4623      	mov	r3, r4
 8012082:	6864      	ldr	r4, [r4, #4]
 8012084:	e7ae      	b.n	8011fe4 <_malloc_r+0x34>
 8012086:	463c      	mov	r4, r7
 8012088:	687f      	ldr	r7, [r7, #4]
 801208a:	e7b6      	b.n	8011ffa <_malloc_r+0x4a>
 801208c:	461a      	mov	r2, r3
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	42a3      	cmp	r3, r4
 8012092:	d1fb      	bne.n	801208c <_malloc_r+0xdc>
 8012094:	2300      	movs	r3, #0
 8012096:	6053      	str	r3, [r2, #4]
 8012098:	e7de      	b.n	8012058 <_malloc_r+0xa8>
 801209a:	230c      	movs	r3, #12
 801209c:	6033      	str	r3, [r6, #0]
 801209e:	4630      	mov	r0, r6
 80120a0:	f000 f80c 	bl	80120bc <__malloc_unlock>
 80120a4:	e794      	b.n	8011fd0 <_malloc_r+0x20>
 80120a6:	6005      	str	r5, [r0, #0]
 80120a8:	e7d6      	b.n	8012058 <_malloc_r+0xa8>
 80120aa:	bf00      	nop
 80120ac:	20002910 	.word	0x20002910

080120b0 <__malloc_lock>:
 80120b0:	4801      	ldr	r0, [pc, #4]	@ (80120b8 <__malloc_lock+0x8>)
 80120b2:	f7ff bf01 	b.w	8011eb8 <__retarget_lock_acquire_recursive>
 80120b6:	bf00      	nop
 80120b8:	20002908 	.word	0x20002908

080120bc <__malloc_unlock>:
 80120bc:	4801      	ldr	r0, [pc, #4]	@ (80120c4 <__malloc_unlock+0x8>)
 80120be:	f7ff befc 	b.w	8011eba <__retarget_lock_release_recursive>
 80120c2:	bf00      	nop
 80120c4:	20002908 	.word	0x20002908

080120c8 <__ssputs_r>:
 80120c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120cc:	688e      	ldr	r6, [r1, #8]
 80120ce:	461f      	mov	r7, r3
 80120d0:	42be      	cmp	r6, r7
 80120d2:	680b      	ldr	r3, [r1, #0]
 80120d4:	4682      	mov	sl, r0
 80120d6:	460c      	mov	r4, r1
 80120d8:	4690      	mov	r8, r2
 80120da:	d82d      	bhi.n	8012138 <__ssputs_r+0x70>
 80120dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80120e4:	d026      	beq.n	8012134 <__ssputs_r+0x6c>
 80120e6:	6965      	ldr	r5, [r4, #20]
 80120e8:	6909      	ldr	r1, [r1, #16]
 80120ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120ee:	eba3 0901 	sub.w	r9, r3, r1
 80120f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120f6:	1c7b      	adds	r3, r7, #1
 80120f8:	444b      	add	r3, r9
 80120fa:	106d      	asrs	r5, r5, #1
 80120fc:	429d      	cmp	r5, r3
 80120fe:	bf38      	it	cc
 8012100:	461d      	movcc	r5, r3
 8012102:	0553      	lsls	r3, r2, #21
 8012104:	d527      	bpl.n	8012156 <__ssputs_r+0x8e>
 8012106:	4629      	mov	r1, r5
 8012108:	f7ff ff52 	bl	8011fb0 <_malloc_r>
 801210c:	4606      	mov	r6, r0
 801210e:	b360      	cbz	r0, 801216a <__ssputs_r+0xa2>
 8012110:	6921      	ldr	r1, [r4, #16]
 8012112:	464a      	mov	r2, r9
 8012114:	f7ff fed2 	bl	8011ebc <memcpy>
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801211e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012122:	81a3      	strh	r3, [r4, #12]
 8012124:	6126      	str	r6, [r4, #16]
 8012126:	6165      	str	r5, [r4, #20]
 8012128:	444e      	add	r6, r9
 801212a:	eba5 0509 	sub.w	r5, r5, r9
 801212e:	6026      	str	r6, [r4, #0]
 8012130:	60a5      	str	r5, [r4, #8]
 8012132:	463e      	mov	r6, r7
 8012134:	42be      	cmp	r6, r7
 8012136:	d900      	bls.n	801213a <__ssputs_r+0x72>
 8012138:	463e      	mov	r6, r7
 801213a:	6820      	ldr	r0, [r4, #0]
 801213c:	4632      	mov	r2, r6
 801213e:	4641      	mov	r1, r8
 8012140:	f000 faa6 	bl	8012690 <memmove>
 8012144:	68a3      	ldr	r3, [r4, #8]
 8012146:	1b9b      	subs	r3, r3, r6
 8012148:	60a3      	str	r3, [r4, #8]
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	4433      	add	r3, r6
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	2000      	movs	r0, #0
 8012152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012156:	462a      	mov	r2, r5
 8012158:	f000 fac4 	bl	80126e4 <_realloc_r>
 801215c:	4606      	mov	r6, r0
 801215e:	2800      	cmp	r0, #0
 8012160:	d1e0      	bne.n	8012124 <__ssputs_r+0x5c>
 8012162:	6921      	ldr	r1, [r4, #16]
 8012164:	4650      	mov	r0, sl
 8012166:	f7ff feb7 	bl	8011ed8 <_free_r>
 801216a:	230c      	movs	r3, #12
 801216c:	f8ca 3000 	str.w	r3, [sl]
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012176:	81a3      	strh	r3, [r4, #12]
 8012178:	f04f 30ff 	mov.w	r0, #4294967295
 801217c:	e7e9      	b.n	8012152 <__ssputs_r+0x8a>
	...

08012180 <_svfiprintf_r>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	4698      	mov	r8, r3
 8012186:	898b      	ldrh	r3, [r1, #12]
 8012188:	061b      	lsls	r3, r3, #24
 801218a:	b09d      	sub	sp, #116	@ 0x74
 801218c:	4607      	mov	r7, r0
 801218e:	460d      	mov	r5, r1
 8012190:	4614      	mov	r4, r2
 8012192:	d510      	bpl.n	80121b6 <_svfiprintf_r+0x36>
 8012194:	690b      	ldr	r3, [r1, #16]
 8012196:	b973      	cbnz	r3, 80121b6 <_svfiprintf_r+0x36>
 8012198:	2140      	movs	r1, #64	@ 0x40
 801219a:	f7ff ff09 	bl	8011fb0 <_malloc_r>
 801219e:	6028      	str	r0, [r5, #0]
 80121a0:	6128      	str	r0, [r5, #16]
 80121a2:	b930      	cbnz	r0, 80121b2 <_svfiprintf_r+0x32>
 80121a4:	230c      	movs	r3, #12
 80121a6:	603b      	str	r3, [r7, #0]
 80121a8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ac:	b01d      	add	sp, #116	@ 0x74
 80121ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b2:	2340      	movs	r3, #64	@ 0x40
 80121b4:	616b      	str	r3, [r5, #20]
 80121b6:	2300      	movs	r3, #0
 80121b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ba:	2320      	movs	r3, #32
 80121bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80121c4:	2330      	movs	r3, #48	@ 0x30
 80121c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012364 <_svfiprintf_r+0x1e4>
 80121ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121ce:	f04f 0901 	mov.w	r9, #1
 80121d2:	4623      	mov	r3, r4
 80121d4:	469a      	mov	sl, r3
 80121d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121da:	b10a      	cbz	r2, 80121e0 <_svfiprintf_r+0x60>
 80121dc:	2a25      	cmp	r2, #37	@ 0x25
 80121de:	d1f9      	bne.n	80121d4 <_svfiprintf_r+0x54>
 80121e0:	ebba 0b04 	subs.w	fp, sl, r4
 80121e4:	d00b      	beq.n	80121fe <_svfiprintf_r+0x7e>
 80121e6:	465b      	mov	r3, fp
 80121e8:	4622      	mov	r2, r4
 80121ea:	4629      	mov	r1, r5
 80121ec:	4638      	mov	r0, r7
 80121ee:	f7ff ff6b 	bl	80120c8 <__ssputs_r>
 80121f2:	3001      	adds	r0, #1
 80121f4:	f000 80a7 	beq.w	8012346 <_svfiprintf_r+0x1c6>
 80121f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121fa:	445a      	add	r2, fp
 80121fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80121fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012202:	2b00      	cmp	r3, #0
 8012204:	f000 809f 	beq.w	8012346 <_svfiprintf_r+0x1c6>
 8012208:	2300      	movs	r3, #0
 801220a:	f04f 32ff 	mov.w	r2, #4294967295
 801220e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012212:	f10a 0a01 	add.w	sl, sl, #1
 8012216:	9304      	str	r3, [sp, #16]
 8012218:	9307      	str	r3, [sp, #28]
 801221a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801221e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012220:	4654      	mov	r4, sl
 8012222:	2205      	movs	r2, #5
 8012224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012228:	484e      	ldr	r0, [pc, #312]	@ (8012364 <_svfiprintf_r+0x1e4>)
 801222a:	f7ed ffd9 	bl	80001e0 <memchr>
 801222e:	9a04      	ldr	r2, [sp, #16]
 8012230:	b9d8      	cbnz	r0, 801226a <_svfiprintf_r+0xea>
 8012232:	06d0      	lsls	r0, r2, #27
 8012234:	bf44      	itt	mi
 8012236:	2320      	movmi	r3, #32
 8012238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801223c:	0711      	lsls	r1, r2, #28
 801223e:	bf44      	itt	mi
 8012240:	232b      	movmi	r3, #43	@ 0x2b
 8012242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012246:	f89a 3000 	ldrb.w	r3, [sl]
 801224a:	2b2a      	cmp	r3, #42	@ 0x2a
 801224c:	d015      	beq.n	801227a <_svfiprintf_r+0xfa>
 801224e:	9a07      	ldr	r2, [sp, #28]
 8012250:	4654      	mov	r4, sl
 8012252:	2000      	movs	r0, #0
 8012254:	f04f 0c0a 	mov.w	ip, #10
 8012258:	4621      	mov	r1, r4
 801225a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801225e:	3b30      	subs	r3, #48	@ 0x30
 8012260:	2b09      	cmp	r3, #9
 8012262:	d94b      	bls.n	80122fc <_svfiprintf_r+0x17c>
 8012264:	b1b0      	cbz	r0, 8012294 <_svfiprintf_r+0x114>
 8012266:	9207      	str	r2, [sp, #28]
 8012268:	e014      	b.n	8012294 <_svfiprintf_r+0x114>
 801226a:	eba0 0308 	sub.w	r3, r0, r8
 801226e:	fa09 f303 	lsl.w	r3, r9, r3
 8012272:	4313      	orrs	r3, r2
 8012274:	9304      	str	r3, [sp, #16]
 8012276:	46a2      	mov	sl, r4
 8012278:	e7d2      	b.n	8012220 <_svfiprintf_r+0xa0>
 801227a:	9b03      	ldr	r3, [sp, #12]
 801227c:	1d19      	adds	r1, r3, #4
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	9103      	str	r1, [sp, #12]
 8012282:	2b00      	cmp	r3, #0
 8012284:	bfbb      	ittet	lt
 8012286:	425b      	neglt	r3, r3
 8012288:	f042 0202 	orrlt.w	r2, r2, #2
 801228c:	9307      	strge	r3, [sp, #28]
 801228e:	9307      	strlt	r3, [sp, #28]
 8012290:	bfb8      	it	lt
 8012292:	9204      	strlt	r2, [sp, #16]
 8012294:	7823      	ldrb	r3, [r4, #0]
 8012296:	2b2e      	cmp	r3, #46	@ 0x2e
 8012298:	d10a      	bne.n	80122b0 <_svfiprintf_r+0x130>
 801229a:	7863      	ldrb	r3, [r4, #1]
 801229c:	2b2a      	cmp	r3, #42	@ 0x2a
 801229e:	d132      	bne.n	8012306 <_svfiprintf_r+0x186>
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	1d1a      	adds	r2, r3, #4
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	9203      	str	r2, [sp, #12]
 80122a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122ac:	3402      	adds	r4, #2
 80122ae:	9305      	str	r3, [sp, #20]
 80122b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012374 <_svfiprintf_r+0x1f4>
 80122b4:	7821      	ldrb	r1, [r4, #0]
 80122b6:	2203      	movs	r2, #3
 80122b8:	4650      	mov	r0, sl
 80122ba:	f7ed ff91 	bl	80001e0 <memchr>
 80122be:	b138      	cbz	r0, 80122d0 <_svfiprintf_r+0x150>
 80122c0:	9b04      	ldr	r3, [sp, #16]
 80122c2:	eba0 000a 	sub.w	r0, r0, sl
 80122c6:	2240      	movs	r2, #64	@ 0x40
 80122c8:	4082      	lsls	r2, r0
 80122ca:	4313      	orrs	r3, r2
 80122cc:	3401      	adds	r4, #1
 80122ce:	9304      	str	r3, [sp, #16]
 80122d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d4:	4824      	ldr	r0, [pc, #144]	@ (8012368 <_svfiprintf_r+0x1e8>)
 80122d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122da:	2206      	movs	r2, #6
 80122dc:	f7ed ff80 	bl	80001e0 <memchr>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d036      	beq.n	8012352 <_svfiprintf_r+0x1d2>
 80122e4:	4b21      	ldr	r3, [pc, #132]	@ (801236c <_svfiprintf_r+0x1ec>)
 80122e6:	bb1b      	cbnz	r3, 8012330 <_svfiprintf_r+0x1b0>
 80122e8:	9b03      	ldr	r3, [sp, #12]
 80122ea:	3307      	adds	r3, #7
 80122ec:	f023 0307 	bic.w	r3, r3, #7
 80122f0:	3308      	adds	r3, #8
 80122f2:	9303      	str	r3, [sp, #12]
 80122f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122f6:	4433      	add	r3, r6
 80122f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80122fa:	e76a      	b.n	80121d2 <_svfiprintf_r+0x52>
 80122fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012300:	460c      	mov	r4, r1
 8012302:	2001      	movs	r0, #1
 8012304:	e7a8      	b.n	8012258 <_svfiprintf_r+0xd8>
 8012306:	2300      	movs	r3, #0
 8012308:	3401      	adds	r4, #1
 801230a:	9305      	str	r3, [sp, #20]
 801230c:	4619      	mov	r1, r3
 801230e:	f04f 0c0a 	mov.w	ip, #10
 8012312:	4620      	mov	r0, r4
 8012314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012318:	3a30      	subs	r2, #48	@ 0x30
 801231a:	2a09      	cmp	r2, #9
 801231c:	d903      	bls.n	8012326 <_svfiprintf_r+0x1a6>
 801231e:	2b00      	cmp	r3, #0
 8012320:	d0c6      	beq.n	80122b0 <_svfiprintf_r+0x130>
 8012322:	9105      	str	r1, [sp, #20]
 8012324:	e7c4      	b.n	80122b0 <_svfiprintf_r+0x130>
 8012326:	fb0c 2101 	mla	r1, ip, r1, r2
 801232a:	4604      	mov	r4, r0
 801232c:	2301      	movs	r3, #1
 801232e:	e7f0      	b.n	8012312 <_svfiprintf_r+0x192>
 8012330:	ab03      	add	r3, sp, #12
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	462a      	mov	r2, r5
 8012336:	4b0e      	ldr	r3, [pc, #56]	@ (8012370 <_svfiprintf_r+0x1f0>)
 8012338:	a904      	add	r1, sp, #16
 801233a:	4638      	mov	r0, r7
 801233c:	f3af 8000 	nop.w
 8012340:	1c42      	adds	r2, r0, #1
 8012342:	4606      	mov	r6, r0
 8012344:	d1d6      	bne.n	80122f4 <_svfiprintf_r+0x174>
 8012346:	89ab      	ldrh	r3, [r5, #12]
 8012348:	065b      	lsls	r3, r3, #25
 801234a:	f53f af2d 	bmi.w	80121a8 <_svfiprintf_r+0x28>
 801234e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012350:	e72c      	b.n	80121ac <_svfiprintf_r+0x2c>
 8012352:	ab03      	add	r3, sp, #12
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	462a      	mov	r2, r5
 8012358:	4b05      	ldr	r3, [pc, #20]	@ (8012370 <_svfiprintf_r+0x1f0>)
 801235a:	a904      	add	r1, sp, #16
 801235c:	4638      	mov	r0, r7
 801235e:	f000 f879 	bl	8012454 <_printf_i>
 8012362:	e7ed      	b.n	8012340 <_svfiprintf_r+0x1c0>
 8012364:	08013d11 	.word	0x08013d11
 8012368:	08013d1b 	.word	0x08013d1b
 801236c:	00000000 	.word	0x00000000
 8012370:	080120c9 	.word	0x080120c9
 8012374:	08013d17 	.word	0x08013d17

08012378 <_printf_common>:
 8012378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801237c:	4616      	mov	r6, r2
 801237e:	4698      	mov	r8, r3
 8012380:	688a      	ldr	r2, [r1, #8]
 8012382:	690b      	ldr	r3, [r1, #16]
 8012384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012388:	4293      	cmp	r3, r2
 801238a:	bfb8      	it	lt
 801238c:	4613      	movlt	r3, r2
 801238e:	6033      	str	r3, [r6, #0]
 8012390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012394:	4607      	mov	r7, r0
 8012396:	460c      	mov	r4, r1
 8012398:	b10a      	cbz	r2, 801239e <_printf_common+0x26>
 801239a:	3301      	adds	r3, #1
 801239c:	6033      	str	r3, [r6, #0]
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	0699      	lsls	r1, r3, #26
 80123a2:	bf42      	ittt	mi
 80123a4:	6833      	ldrmi	r3, [r6, #0]
 80123a6:	3302      	addmi	r3, #2
 80123a8:	6033      	strmi	r3, [r6, #0]
 80123aa:	6825      	ldr	r5, [r4, #0]
 80123ac:	f015 0506 	ands.w	r5, r5, #6
 80123b0:	d106      	bne.n	80123c0 <_printf_common+0x48>
 80123b2:	f104 0a19 	add.w	sl, r4, #25
 80123b6:	68e3      	ldr	r3, [r4, #12]
 80123b8:	6832      	ldr	r2, [r6, #0]
 80123ba:	1a9b      	subs	r3, r3, r2
 80123bc:	42ab      	cmp	r3, r5
 80123be:	dc26      	bgt.n	801240e <_printf_common+0x96>
 80123c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80123c4:	6822      	ldr	r2, [r4, #0]
 80123c6:	3b00      	subs	r3, #0
 80123c8:	bf18      	it	ne
 80123ca:	2301      	movne	r3, #1
 80123cc:	0692      	lsls	r2, r2, #26
 80123ce:	d42b      	bmi.n	8012428 <_printf_common+0xb0>
 80123d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80123d4:	4641      	mov	r1, r8
 80123d6:	4638      	mov	r0, r7
 80123d8:	47c8      	blx	r9
 80123da:	3001      	adds	r0, #1
 80123dc:	d01e      	beq.n	801241c <_printf_common+0xa4>
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	6922      	ldr	r2, [r4, #16]
 80123e2:	f003 0306 	and.w	r3, r3, #6
 80123e6:	2b04      	cmp	r3, #4
 80123e8:	bf02      	ittt	eq
 80123ea:	68e5      	ldreq	r5, [r4, #12]
 80123ec:	6833      	ldreq	r3, [r6, #0]
 80123ee:	1aed      	subeq	r5, r5, r3
 80123f0:	68a3      	ldr	r3, [r4, #8]
 80123f2:	bf0c      	ite	eq
 80123f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123f8:	2500      	movne	r5, #0
 80123fa:	4293      	cmp	r3, r2
 80123fc:	bfc4      	itt	gt
 80123fe:	1a9b      	subgt	r3, r3, r2
 8012400:	18ed      	addgt	r5, r5, r3
 8012402:	2600      	movs	r6, #0
 8012404:	341a      	adds	r4, #26
 8012406:	42b5      	cmp	r5, r6
 8012408:	d11a      	bne.n	8012440 <_printf_common+0xc8>
 801240a:	2000      	movs	r0, #0
 801240c:	e008      	b.n	8012420 <_printf_common+0xa8>
 801240e:	2301      	movs	r3, #1
 8012410:	4652      	mov	r2, sl
 8012412:	4641      	mov	r1, r8
 8012414:	4638      	mov	r0, r7
 8012416:	47c8      	blx	r9
 8012418:	3001      	adds	r0, #1
 801241a:	d103      	bne.n	8012424 <_printf_common+0xac>
 801241c:	f04f 30ff 	mov.w	r0, #4294967295
 8012420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012424:	3501      	adds	r5, #1
 8012426:	e7c6      	b.n	80123b6 <_printf_common+0x3e>
 8012428:	18e1      	adds	r1, r4, r3
 801242a:	1c5a      	adds	r2, r3, #1
 801242c:	2030      	movs	r0, #48	@ 0x30
 801242e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012432:	4422      	add	r2, r4
 8012434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801243c:	3302      	adds	r3, #2
 801243e:	e7c7      	b.n	80123d0 <_printf_common+0x58>
 8012440:	2301      	movs	r3, #1
 8012442:	4622      	mov	r2, r4
 8012444:	4641      	mov	r1, r8
 8012446:	4638      	mov	r0, r7
 8012448:	47c8      	blx	r9
 801244a:	3001      	adds	r0, #1
 801244c:	d0e6      	beq.n	801241c <_printf_common+0xa4>
 801244e:	3601      	adds	r6, #1
 8012450:	e7d9      	b.n	8012406 <_printf_common+0x8e>
	...

08012454 <_printf_i>:
 8012454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012458:	7e0f      	ldrb	r7, [r1, #24]
 801245a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801245c:	2f78      	cmp	r7, #120	@ 0x78
 801245e:	4691      	mov	r9, r2
 8012460:	4680      	mov	r8, r0
 8012462:	460c      	mov	r4, r1
 8012464:	469a      	mov	sl, r3
 8012466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801246a:	d807      	bhi.n	801247c <_printf_i+0x28>
 801246c:	2f62      	cmp	r7, #98	@ 0x62
 801246e:	d80a      	bhi.n	8012486 <_printf_i+0x32>
 8012470:	2f00      	cmp	r7, #0
 8012472:	f000 80d1 	beq.w	8012618 <_printf_i+0x1c4>
 8012476:	2f58      	cmp	r7, #88	@ 0x58
 8012478:	f000 80b8 	beq.w	80125ec <_printf_i+0x198>
 801247c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012484:	e03a      	b.n	80124fc <_printf_i+0xa8>
 8012486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801248a:	2b15      	cmp	r3, #21
 801248c:	d8f6      	bhi.n	801247c <_printf_i+0x28>
 801248e:	a101      	add	r1, pc, #4	@ (adr r1, 8012494 <_printf_i+0x40>)
 8012490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012494:	080124ed 	.word	0x080124ed
 8012498:	08012501 	.word	0x08012501
 801249c:	0801247d 	.word	0x0801247d
 80124a0:	0801247d 	.word	0x0801247d
 80124a4:	0801247d 	.word	0x0801247d
 80124a8:	0801247d 	.word	0x0801247d
 80124ac:	08012501 	.word	0x08012501
 80124b0:	0801247d 	.word	0x0801247d
 80124b4:	0801247d 	.word	0x0801247d
 80124b8:	0801247d 	.word	0x0801247d
 80124bc:	0801247d 	.word	0x0801247d
 80124c0:	080125ff 	.word	0x080125ff
 80124c4:	0801252b 	.word	0x0801252b
 80124c8:	080125b9 	.word	0x080125b9
 80124cc:	0801247d 	.word	0x0801247d
 80124d0:	0801247d 	.word	0x0801247d
 80124d4:	08012621 	.word	0x08012621
 80124d8:	0801247d 	.word	0x0801247d
 80124dc:	0801252b 	.word	0x0801252b
 80124e0:	0801247d 	.word	0x0801247d
 80124e4:	0801247d 	.word	0x0801247d
 80124e8:	080125c1 	.word	0x080125c1
 80124ec:	6833      	ldr	r3, [r6, #0]
 80124ee:	1d1a      	adds	r2, r3, #4
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6032      	str	r2, [r6, #0]
 80124f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80124fc:	2301      	movs	r3, #1
 80124fe:	e09c      	b.n	801263a <_printf_i+0x1e6>
 8012500:	6833      	ldr	r3, [r6, #0]
 8012502:	6820      	ldr	r0, [r4, #0]
 8012504:	1d19      	adds	r1, r3, #4
 8012506:	6031      	str	r1, [r6, #0]
 8012508:	0606      	lsls	r6, r0, #24
 801250a:	d501      	bpl.n	8012510 <_printf_i+0xbc>
 801250c:	681d      	ldr	r5, [r3, #0]
 801250e:	e003      	b.n	8012518 <_printf_i+0xc4>
 8012510:	0645      	lsls	r5, r0, #25
 8012512:	d5fb      	bpl.n	801250c <_printf_i+0xb8>
 8012514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012518:	2d00      	cmp	r5, #0
 801251a:	da03      	bge.n	8012524 <_printf_i+0xd0>
 801251c:	232d      	movs	r3, #45	@ 0x2d
 801251e:	426d      	negs	r5, r5
 8012520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012524:	4858      	ldr	r0, [pc, #352]	@ (8012688 <_printf_i+0x234>)
 8012526:	230a      	movs	r3, #10
 8012528:	e011      	b.n	801254e <_printf_i+0xfa>
 801252a:	6821      	ldr	r1, [r4, #0]
 801252c:	6833      	ldr	r3, [r6, #0]
 801252e:	0608      	lsls	r0, r1, #24
 8012530:	f853 5b04 	ldr.w	r5, [r3], #4
 8012534:	d402      	bmi.n	801253c <_printf_i+0xe8>
 8012536:	0649      	lsls	r1, r1, #25
 8012538:	bf48      	it	mi
 801253a:	b2ad      	uxthmi	r5, r5
 801253c:	2f6f      	cmp	r7, #111	@ 0x6f
 801253e:	4852      	ldr	r0, [pc, #328]	@ (8012688 <_printf_i+0x234>)
 8012540:	6033      	str	r3, [r6, #0]
 8012542:	bf14      	ite	ne
 8012544:	230a      	movne	r3, #10
 8012546:	2308      	moveq	r3, #8
 8012548:	2100      	movs	r1, #0
 801254a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801254e:	6866      	ldr	r6, [r4, #4]
 8012550:	60a6      	str	r6, [r4, #8]
 8012552:	2e00      	cmp	r6, #0
 8012554:	db05      	blt.n	8012562 <_printf_i+0x10e>
 8012556:	6821      	ldr	r1, [r4, #0]
 8012558:	432e      	orrs	r6, r5
 801255a:	f021 0104 	bic.w	r1, r1, #4
 801255e:	6021      	str	r1, [r4, #0]
 8012560:	d04b      	beq.n	80125fa <_printf_i+0x1a6>
 8012562:	4616      	mov	r6, r2
 8012564:	fbb5 f1f3 	udiv	r1, r5, r3
 8012568:	fb03 5711 	mls	r7, r3, r1, r5
 801256c:	5dc7      	ldrb	r7, [r0, r7]
 801256e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012572:	462f      	mov	r7, r5
 8012574:	42bb      	cmp	r3, r7
 8012576:	460d      	mov	r5, r1
 8012578:	d9f4      	bls.n	8012564 <_printf_i+0x110>
 801257a:	2b08      	cmp	r3, #8
 801257c:	d10b      	bne.n	8012596 <_printf_i+0x142>
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	07df      	lsls	r7, r3, #31
 8012582:	d508      	bpl.n	8012596 <_printf_i+0x142>
 8012584:	6923      	ldr	r3, [r4, #16]
 8012586:	6861      	ldr	r1, [r4, #4]
 8012588:	4299      	cmp	r1, r3
 801258a:	bfde      	ittt	le
 801258c:	2330      	movle	r3, #48	@ 0x30
 801258e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012592:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012596:	1b92      	subs	r2, r2, r6
 8012598:	6122      	str	r2, [r4, #16]
 801259a:	f8cd a000 	str.w	sl, [sp]
 801259e:	464b      	mov	r3, r9
 80125a0:	aa03      	add	r2, sp, #12
 80125a2:	4621      	mov	r1, r4
 80125a4:	4640      	mov	r0, r8
 80125a6:	f7ff fee7 	bl	8012378 <_printf_common>
 80125aa:	3001      	adds	r0, #1
 80125ac:	d14a      	bne.n	8012644 <_printf_i+0x1f0>
 80125ae:	f04f 30ff 	mov.w	r0, #4294967295
 80125b2:	b004      	add	sp, #16
 80125b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b8:	6823      	ldr	r3, [r4, #0]
 80125ba:	f043 0320 	orr.w	r3, r3, #32
 80125be:	6023      	str	r3, [r4, #0]
 80125c0:	4832      	ldr	r0, [pc, #200]	@ (801268c <_printf_i+0x238>)
 80125c2:	2778      	movs	r7, #120	@ 0x78
 80125c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	6831      	ldr	r1, [r6, #0]
 80125cc:	061f      	lsls	r7, r3, #24
 80125ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80125d2:	d402      	bmi.n	80125da <_printf_i+0x186>
 80125d4:	065f      	lsls	r7, r3, #25
 80125d6:	bf48      	it	mi
 80125d8:	b2ad      	uxthmi	r5, r5
 80125da:	6031      	str	r1, [r6, #0]
 80125dc:	07d9      	lsls	r1, r3, #31
 80125de:	bf44      	itt	mi
 80125e0:	f043 0320 	orrmi.w	r3, r3, #32
 80125e4:	6023      	strmi	r3, [r4, #0]
 80125e6:	b11d      	cbz	r5, 80125f0 <_printf_i+0x19c>
 80125e8:	2310      	movs	r3, #16
 80125ea:	e7ad      	b.n	8012548 <_printf_i+0xf4>
 80125ec:	4826      	ldr	r0, [pc, #152]	@ (8012688 <_printf_i+0x234>)
 80125ee:	e7e9      	b.n	80125c4 <_printf_i+0x170>
 80125f0:	6823      	ldr	r3, [r4, #0]
 80125f2:	f023 0320 	bic.w	r3, r3, #32
 80125f6:	6023      	str	r3, [r4, #0]
 80125f8:	e7f6      	b.n	80125e8 <_printf_i+0x194>
 80125fa:	4616      	mov	r6, r2
 80125fc:	e7bd      	b.n	801257a <_printf_i+0x126>
 80125fe:	6833      	ldr	r3, [r6, #0]
 8012600:	6825      	ldr	r5, [r4, #0]
 8012602:	6961      	ldr	r1, [r4, #20]
 8012604:	1d18      	adds	r0, r3, #4
 8012606:	6030      	str	r0, [r6, #0]
 8012608:	062e      	lsls	r6, r5, #24
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	d501      	bpl.n	8012612 <_printf_i+0x1be>
 801260e:	6019      	str	r1, [r3, #0]
 8012610:	e002      	b.n	8012618 <_printf_i+0x1c4>
 8012612:	0668      	lsls	r0, r5, #25
 8012614:	d5fb      	bpl.n	801260e <_printf_i+0x1ba>
 8012616:	8019      	strh	r1, [r3, #0]
 8012618:	2300      	movs	r3, #0
 801261a:	6123      	str	r3, [r4, #16]
 801261c:	4616      	mov	r6, r2
 801261e:	e7bc      	b.n	801259a <_printf_i+0x146>
 8012620:	6833      	ldr	r3, [r6, #0]
 8012622:	1d1a      	adds	r2, r3, #4
 8012624:	6032      	str	r2, [r6, #0]
 8012626:	681e      	ldr	r6, [r3, #0]
 8012628:	6862      	ldr	r2, [r4, #4]
 801262a:	2100      	movs	r1, #0
 801262c:	4630      	mov	r0, r6
 801262e:	f7ed fdd7 	bl	80001e0 <memchr>
 8012632:	b108      	cbz	r0, 8012638 <_printf_i+0x1e4>
 8012634:	1b80      	subs	r0, r0, r6
 8012636:	6060      	str	r0, [r4, #4]
 8012638:	6863      	ldr	r3, [r4, #4]
 801263a:	6123      	str	r3, [r4, #16]
 801263c:	2300      	movs	r3, #0
 801263e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012642:	e7aa      	b.n	801259a <_printf_i+0x146>
 8012644:	6923      	ldr	r3, [r4, #16]
 8012646:	4632      	mov	r2, r6
 8012648:	4649      	mov	r1, r9
 801264a:	4640      	mov	r0, r8
 801264c:	47d0      	blx	sl
 801264e:	3001      	adds	r0, #1
 8012650:	d0ad      	beq.n	80125ae <_printf_i+0x15a>
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	079b      	lsls	r3, r3, #30
 8012656:	d413      	bmi.n	8012680 <_printf_i+0x22c>
 8012658:	68e0      	ldr	r0, [r4, #12]
 801265a:	9b03      	ldr	r3, [sp, #12]
 801265c:	4298      	cmp	r0, r3
 801265e:	bfb8      	it	lt
 8012660:	4618      	movlt	r0, r3
 8012662:	e7a6      	b.n	80125b2 <_printf_i+0x15e>
 8012664:	2301      	movs	r3, #1
 8012666:	4632      	mov	r2, r6
 8012668:	4649      	mov	r1, r9
 801266a:	4640      	mov	r0, r8
 801266c:	47d0      	blx	sl
 801266e:	3001      	adds	r0, #1
 8012670:	d09d      	beq.n	80125ae <_printf_i+0x15a>
 8012672:	3501      	adds	r5, #1
 8012674:	68e3      	ldr	r3, [r4, #12]
 8012676:	9903      	ldr	r1, [sp, #12]
 8012678:	1a5b      	subs	r3, r3, r1
 801267a:	42ab      	cmp	r3, r5
 801267c:	dcf2      	bgt.n	8012664 <_printf_i+0x210>
 801267e:	e7eb      	b.n	8012658 <_printf_i+0x204>
 8012680:	2500      	movs	r5, #0
 8012682:	f104 0619 	add.w	r6, r4, #25
 8012686:	e7f5      	b.n	8012674 <_printf_i+0x220>
 8012688:	08013d22 	.word	0x08013d22
 801268c:	08013d33 	.word	0x08013d33

08012690 <memmove>:
 8012690:	4288      	cmp	r0, r1
 8012692:	b510      	push	{r4, lr}
 8012694:	eb01 0402 	add.w	r4, r1, r2
 8012698:	d902      	bls.n	80126a0 <memmove+0x10>
 801269a:	4284      	cmp	r4, r0
 801269c:	4623      	mov	r3, r4
 801269e:	d807      	bhi.n	80126b0 <memmove+0x20>
 80126a0:	1e43      	subs	r3, r0, #1
 80126a2:	42a1      	cmp	r1, r4
 80126a4:	d008      	beq.n	80126b8 <memmove+0x28>
 80126a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126ae:	e7f8      	b.n	80126a2 <memmove+0x12>
 80126b0:	4402      	add	r2, r0
 80126b2:	4601      	mov	r1, r0
 80126b4:	428a      	cmp	r2, r1
 80126b6:	d100      	bne.n	80126ba <memmove+0x2a>
 80126b8:	bd10      	pop	{r4, pc}
 80126ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80126be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80126c2:	e7f7      	b.n	80126b4 <memmove+0x24>

080126c4 <_sbrk_r>:
 80126c4:	b538      	push	{r3, r4, r5, lr}
 80126c6:	4d06      	ldr	r5, [pc, #24]	@ (80126e0 <_sbrk_r+0x1c>)
 80126c8:	2300      	movs	r3, #0
 80126ca:	4604      	mov	r4, r0
 80126cc:	4608      	mov	r0, r1
 80126ce:	602b      	str	r3, [r5, #0]
 80126d0:	f7f2 fb52 	bl	8004d78 <_sbrk>
 80126d4:	1c43      	adds	r3, r0, #1
 80126d6:	d102      	bne.n	80126de <_sbrk_r+0x1a>
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	b103      	cbz	r3, 80126de <_sbrk_r+0x1a>
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	bd38      	pop	{r3, r4, r5, pc}
 80126e0:	20002904 	.word	0x20002904

080126e4 <_realloc_r>:
 80126e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e8:	4607      	mov	r7, r0
 80126ea:	4614      	mov	r4, r2
 80126ec:	460d      	mov	r5, r1
 80126ee:	b921      	cbnz	r1, 80126fa <_realloc_r+0x16>
 80126f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126f4:	4611      	mov	r1, r2
 80126f6:	f7ff bc5b 	b.w	8011fb0 <_malloc_r>
 80126fa:	b92a      	cbnz	r2, 8012708 <_realloc_r+0x24>
 80126fc:	f7ff fbec 	bl	8011ed8 <_free_r>
 8012700:	4625      	mov	r5, r4
 8012702:	4628      	mov	r0, r5
 8012704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012708:	f000 f81a 	bl	8012740 <_malloc_usable_size_r>
 801270c:	4284      	cmp	r4, r0
 801270e:	4606      	mov	r6, r0
 8012710:	d802      	bhi.n	8012718 <_realloc_r+0x34>
 8012712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012716:	d8f4      	bhi.n	8012702 <_realloc_r+0x1e>
 8012718:	4621      	mov	r1, r4
 801271a:	4638      	mov	r0, r7
 801271c:	f7ff fc48 	bl	8011fb0 <_malloc_r>
 8012720:	4680      	mov	r8, r0
 8012722:	b908      	cbnz	r0, 8012728 <_realloc_r+0x44>
 8012724:	4645      	mov	r5, r8
 8012726:	e7ec      	b.n	8012702 <_realloc_r+0x1e>
 8012728:	42b4      	cmp	r4, r6
 801272a:	4622      	mov	r2, r4
 801272c:	4629      	mov	r1, r5
 801272e:	bf28      	it	cs
 8012730:	4632      	movcs	r2, r6
 8012732:	f7ff fbc3 	bl	8011ebc <memcpy>
 8012736:	4629      	mov	r1, r5
 8012738:	4638      	mov	r0, r7
 801273a:	f7ff fbcd 	bl	8011ed8 <_free_r>
 801273e:	e7f1      	b.n	8012724 <_realloc_r+0x40>

08012740 <_malloc_usable_size_r>:
 8012740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012744:	1f18      	subs	r0, r3, #4
 8012746:	2b00      	cmp	r3, #0
 8012748:	bfbc      	itt	lt
 801274a:	580b      	ldrlt	r3, [r1, r0]
 801274c:	18c0      	addlt	r0, r0, r3
 801274e:	4770      	bx	lr

08012750 <_init>:
 8012750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012752:	bf00      	nop
 8012754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012756:	bc08      	pop	{r3}
 8012758:	469e      	mov	lr, r3
 801275a:	4770      	bx	lr

0801275c <_fini>:
 801275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801275e:	bf00      	nop
 8012760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012762:	bc08      	pop	{r3}
 8012764:	469e      	mov	lr, r3
 8012766:	4770      	bx	lr
