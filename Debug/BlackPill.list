
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f224  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  0800f3bc  0800f3bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe28  0800fe28  00011108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fe28  0800fe28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe30  0800fe30  00011108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe30  0800fe30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fe34  0800fe34  00010e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  0800fe38  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002014  20000108  0800ff40  00011108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000211c  0800ff40  0001111c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d6  00000000  00000000  00011138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046fd  00000000  00000000  0002c30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00030a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001308  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bef6  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021354  00000000  00000000  0004f4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc00  00000000  00000000  0007082a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011042a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006740  00000000  00000000  00110470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00116bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f3a4 	.word	0x0800f3a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	0800f3a4 	.word	0x0800f3a4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ADC_Conversion_Cplt>:

static uint16_t mediaBuffer[ADC_MEDIA_SIZE][ADC_NUM_SENSORS] = {0};
static uint16_t sumData[ADC_NUM_SENSORS]= {0};
static uint8_t index = 0;

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 8000504:	b490      	push	{r4, r7}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e042      	b.n	800059a <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	4a2b      	ldr	r2, [pc, #172]	@ (80005c4 <ADC_Conversion_Cplt+0xc0>)
 8000518:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <ADC_Conversion_Cplt+0xc4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461c      	mov	r4, r3
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	4829      	ldr	r0, [pc, #164]	@ (80005cc <ADC_Conversion_Cplt+0xc8>)
 8000526:	4623      	mov	r3, r4
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	4423      	add	r3, r4
 800052c:	4413      	add	r3, r2
 800052e:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	1a8a      	subs	r2, r1, r2
 8000536:	b291      	uxth	r1, r2
 8000538:	4a22      	ldr	r2, [pc, #136]	@ (80005c4 <ADC_Conversion_Cplt+0xc0>)
 800053a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <ADC_Conversion_Cplt+0xc0>)
 8000542:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	881a      	ldrh	r2, [r3, #0]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	440a      	add	r2, r1
 8000554:	b291      	uxth	r1, r2
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <ADC_Conversion_Cplt+0xc0>)
 8000558:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <ADC_Conversion_Cplt+0xc4>)
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	4610      	mov	r0, r2
 800056a:	7bfa      	ldrb	r2, [r7, #15]
 800056c:	881c      	ldrh	r4, [r3, #0]
 800056e:	4917      	ldr	r1, [pc, #92]	@ (80005cc <ADC_Conversion_Cplt+0xc8>)
 8000570:	4603      	mov	r3, r0
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4403      	add	r3, r0
 8000576:	4413      	add	r3, r2
 8000578:	4622      	mov	r2, r4
 800057a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4a10      	ldr	r2, [pc, #64]	@ (80005c4 <ADC_Conversion_Cplt+0xc0>)
 8000582:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	440b      	add	r3, r1
 800058e:	0952      	lsrs	r2, r2, #5
 8000590:	b292      	uxth	r2, r2
 8000592:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	3301      	adds	r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	2b08      	cmp	r3, #8
 800059e:	d9b9      	bls.n	8000514 <ADC_Conversion_Cplt+0x10>
	}
	index++;
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <ADC_Conversion_Cplt+0xc4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <ADC_Conversion_Cplt+0xc4>)
 80005aa:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <ADC_Conversion_Cplt+0xc4>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f003 031f 	and.w	r3, r3, #31
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <ADC_Conversion_Cplt+0xc4>)
 80005b8:	701a      	strb	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc90      	pop	{r4, r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000364 	.word	0x20000364
 80005c8:	20000376 	.word	0x20000376
 80005cc:	20000124 	.word	0x20000124

080005d0 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d849      	bhi.n	8000674 <inputState+0xa4>
 80005e0:	a201      	add	r2, pc, #4	@ (adr r2, 80005e8 <inputState+0x18>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	08000609 	.word	0x08000609
 80005ec:	080005f9 	.word	0x080005f9
 80005f0:	08000647 	.word	0x08000647
 80005f4:	08000619 	.word	0x08000619
		case UP:
			if(stateInput->value == DOWN)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d13d      	bne.n	800067c <inputState+0xac>
				stateInput->state = FALLING;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2202      	movs	r2, #2
 8000604:	705a      	strb	r2, [r3, #1]
		break;
 8000606:	e039      	b.n	800067c <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d137      	bne.n	8000680 <inputState+0xb0>
				stateInput->state = RISING;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2203      	movs	r2, #3
 8000614:	705a      	strb	r2, [r3, #1]
		break;
 8000616:	e033      	b.n	8000680 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10e      	bne.n	800063e <inputState+0x6e>
				stateInput->state = UP;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2201      	movs	r2, #1
 8000624:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d027      	beq.n	8000684 <inputState+0xb4>
					stateInput->stateChanged(RISING);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2003      	movs	r0, #3
 800063a:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 800063c:	e022      	b.n	8000684 <inputState+0xb4>
				stateInput->state = DOWN;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	705a      	strb	r2, [r3, #1]
		break;
 8000644:	e01e      	b.n	8000684 <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10e      	bne.n	800066c <inputState+0x9c>
				stateInput->state = DOWN;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d012      	beq.n	8000688 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2002      	movs	r0, #2
 8000668:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 800066a:	e00d      	b.n	8000688 <inputState+0xb8>
				stateInput->state = UP;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	705a      	strb	r2, [r3, #1]
		break;
 8000672:	e009      	b.n	8000688 <inputState+0xb8>
		default:
		stateInput->state = UP;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2201      	movs	r2, #1
 8000678:	705a      	strb	r2, [r3, #1]
	}
}
 800067a:	e006      	b.n	800068a <inputState+0xba>
		break;
 800067c:	bf00      	nop
 800067e:	e004      	b.n	800068a <inputState+0xba>
		break;
 8000680:	bf00      	nop
 8000682:	e002      	b.n	800068a <inputState+0xba>
		break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <inputState+0xba>
		break;
 8000688:	bf00      	nop
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop

08000694 <Debounce_Init>:

void Debounce_Init(){
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <Debounce_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e01d      	b.n	80006dc <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <Debounce_Init+0x60>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <Debounce_Init+0x64>)
 80006a8:	460b      	mov	r3, r1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	440b      	add	r3, r1
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	3308      	adds	r3, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <Debounce_Init+0x60>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <Debounce_Init+0x64>)
 80006c0:	460b      	mov	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	440b      	add	r3, r1
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	3304      	adds	r3, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <Debounce_Init+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <Debounce_Init+0x60>)
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <Debounce_Init+0x60>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0dd      	beq.n	80006a0 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 80006e4:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <Debounce_Init+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	20000384 	.word	0x20000384
 80006f8:	20000378 	.word	0x20000378

080006fc <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <Debounce_Add+0x60>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <Debounce_Add+0x16>
		return 0;
 800070e:	2300      	movs	r3, #0
 8000710:	e01d      	b.n	800074e <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <Debounce_Add+0x60>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	4a11      	ldr	r2, [pc, #68]	@ (8000760 <Debounce_Add+0x64>)
 800071a:	460b      	mov	r3, r1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	440b      	add	r3, r1
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	3308      	adds	r3, #8
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <Debounce_Add+0x60>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	4a0b      	ldr	r2, [pc, #44]	@ (8000760 <Debounce_Add+0x64>)
 8000732:	460b      	mov	r3, r1
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	440b      	add	r3, r1
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	3304      	adds	r3, #4
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <Debounce_Add+0x60>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	b2d1      	uxtb	r1, r2
 800074a:	4a04      	ldr	r2, [pc, #16]	@ (800075c <Debounce_Add+0x60>)
 800074c:	7011      	strb	r1, [r2, #0]
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000384 	.word	0x20000384
 8000760:	20000378 	.word	0x20000378

08000764 <Debouncer_Task>:

void Debouncer_Task(){
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e021      	b.n	80007b4 <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	4914      	ldr	r1, [pc, #80]	@ (80007c4 <Debouncer_Task+0x60>)
 8000774:	4613      	mov	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	440b      	add	r3, r1
 800077e:	3308      	adds	r3, #8
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	79fc      	ldrb	r4, [r7, #7]
 8000784:	4798      	blx	r3
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <Debouncer_Task+0x60>)
 800078c:	4623      	mov	r3, r4
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4423      	add	r3, r4
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	460a      	mov	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <Debouncer_Task+0x60>)
 80007a6:	4413      	add	r3, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff11 	bl	80005d0 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3301      	adds	r3, #1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0da      	beq.n	8000770 <Debouncer_Task+0xc>
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	20000378 	.word	0x20000378

080007c8 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 80007d2:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <MPU6050_Set_I2C_Communication+0x24>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <MPU6050_Set_I2C_Communication+0x28>)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000388 	.word	0x20000388
 80007f0:	2000038c 	.word	0x2000038c

080007f4 <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b099      	sub	sp, #100	@ 0x64
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	e_system status = SYS_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 8000808:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <MPU6050_Init+0x13c>)
 800080a:	681c      	ldr	r4, [r3, #0]
 800080c:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8000810:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	2201      	movs	r2, #1
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	2175      	movs	r1, #117	@ 0x75
 800081e:	20d0      	movs	r0, #208	@ 0xd0
 8000820:	47a0      	blx	r4
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800082a:	4413      	add	r3, r2
 800082c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	if(data == WHO_AM_I_DEFAULT_VALUE){
 8000830:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000834:	2b68      	cmp	r3, #104	@ 0x68
 8000836:	d174      	bne.n	8000922 <MPU6050_Init+0x12e>
		data = 0x00;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 800083e:	4b3d      	ldr	r3, [pc, #244]	@ (8000934 <MPU6050_Init+0x140>)
 8000840:	681c      	ldr	r4, [r3, #0]
 8000842:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8000846:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	9200      	str	r2, [sp, #0]
 8000850:	2201      	movs	r2, #1
 8000852:	216b      	movs	r1, #107	@ 0x6b
 8000854:	20d0      	movs	r0, #208	@ 0xd0
 8000856:	47a0      	blx	r4

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000858:	2307      	movs	r3, #7
 800085a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 800085e:	4b35      	ldr	r3, [pc, #212]	@ (8000934 <MPU6050_Init+0x140>)
 8000860:	681c      	ldr	r4, [r3, #0]
 8000862:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8000866:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800086a:	9201      	str	r2, [sp, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	9200      	str	r2, [sp, #0]
 8000870:	2201      	movs	r2, #1
 8000872:	2119      	movs	r1, #25
 8000874:	20d0      	movs	r0, #208	@ 0xd0
 8000876:	47a0      	blx	r4

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 800087e:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <MPU6050_Init+0x140>)
 8000880:	681c      	ldr	r4, [r3, #0]
 8000882:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8000886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800088a:	9201      	str	r2, [sp, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	9200      	str	r2, [sp, #0]
 8000890:	2201      	movs	r2, #1
 8000892:	211c      	movs	r1, #28
 8000894:	20d0      	movs	r0, #208	@ 0xd0
 8000896:	47a0      	blx	r4

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MPU6050_Init+0x140>)
 80008a0:	681c      	ldr	r4, [r3, #0]
 80008a2:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008aa:	9201      	str	r2, [sp, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	9200      	str	r2, [sp, #0]
 80008b0:	2201      	movs	r2, #1
 80008b2:	211b      	movs	r1, #27
 80008b4:	20d0      	movs	r0, #208	@ 0xd0
 80008b6:	47a0      	blx	r4

		// Set Digital Low Pass Filter
		data = 0x03;
 80008b8:	2303      	movs	r3, #3
 80008ba:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MPU6050_Init+0x140>)
 80008c0:	681c      	ldr	r4, [r3, #0]
 80008c2:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ca:	9201      	str	r2, [sp, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	9200      	str	r2, [sp, #0]
 80008d0:	2201      	movs	r2, #1
 80008d2:	211a      	movs	r1, #26
 80008d4:	20d0      	movs	r0, #208	@ 0xd0
 80008d6:	47a0      	blx	r4
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	2348      	movs	r3, #72	@ 0x48
 80008de:	461a      	mov	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f00e fd25 	bl	800f330 <memset>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			.Angle = {0, 0, 0},
			.dataReady = 0,
			.isInit = 1
		};

		for(uint8_t i=0; i<14; i++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80008f4:	e00b      	b.n	800090e <MPU6050_Init+0x11a>
			mpu->data[i] = 0;
 80008f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		for(uint8_t i=0; i<14; i++){
 8000904:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000908:	3301      	adds	r3, #1
 800090a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800090e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000912:	2b0d      	cmp	r3, #13
 8000914:	d9ef      	bls.n	80008f6 <MPU6050_Init+0x102>
		}

		if(status != SYS_OK){
 8000916:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <MPU6050_Init+0x132>
			return SYS_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e002      	b.n	8000928 <MPU6050_Init+0x134>
		}


	}else{
		return SYS_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <MPU6050_Init+0x134>
	}
	return SYS_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	375c      	adds	r7, #92	@ 0x5c
 800092c:	46bd      	mov	sp, r7
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	2000038c 	.word	0x2000038c
 8000934:	20000388 	.word	0x20000388

08000938 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b087      	sub	sp, #28
 800093c:	af02      	add	r7, sp, #8
 800093e:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000940:	2300      	movs	r3, #0
 8000942:	81fb      	strh	r3, [r7, #14]
 8000944:	e075      	b.n	8000a32 <MPU6050_Calibrate+0xfa>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->data, 14, MPU_TIMEOUT);
 8000946:	4b53      	ldr	r3, [pc, #332]	@ (8000a94 <MPU6050_Calibrate+0x15c>)
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3336      	adds	r3, #54	@ 0x36
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	220e      	movs	r2, #14
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	213b      	movs	r1, #59	@ 0x3b
 800095c:	20d0      	movs	r0, #208	@ 0xd0
 800095e:	47a0      	blx	r4
		mpu->Acc.raw.x += (int16_t)((mpu->data[0] << 8) | mpu->data[1]);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800096a:	b212      	sxth	r2, r2
 800096c:	0212      	lsls	r2, r2, #8
 800096e:	b211      	sxth	r1, r2
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000976:	b212      	sxth	r2, r2
 8000978:	430a      	orrs	r2, r1
 800097a:	b212      	sxth	r2, r2
 800097c:	441a      	add	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
		mpu->Acc.raw.y += (int16_t)((mpu->data[2] << 8) | mpu->data[3]);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 800098c:	b212      	sxth	r2, r2
 800098e:	0212      	lsls	r2, r2, #8
 8000990:	b211      	sxth	r1, r2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000998:	b212      	sxth	r2, r2
 800099a:	430a      	orrs	r2, r1
 800099c:	b212      	sxth	r2, r2
 800099e:	441a      	add	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	611a      	str	r2, [r3, #16]
		mpu->Acc.raw.z += (int16_t)((mpu->data[4] << 8) | mpu->data[5]);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 80009ae:	b212      	sxth	r2, r2
 80009b0:	0212      	lsls	r2, r2, #8
 80009b2:	b211      	sxth	r1, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 80009ba:	b212      	sxth	r2, r2
 80009bc:	430a      	orrs	r2, r1
 80009be:	b212      	sxth	r2, r2
 80009c0:	441a      	add	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	615a      	str	r2, [r3, #20]

		mpu->Gyro.raw.x += (int16_t)((mpu->data[8 ] << 8) | mpu->data[9 ]);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 80009d0:	b212      	sxth	r2, r2
 80009d2:	0212      	lsls	r2, r2, #8
 80009d4:	b211      	sxth	r1, r2
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 80009dc:	b212      	sxth	r2, r2
 80009de:	430a      	orrs	r2, r1
 80009e0:	b212      	sxth	r2, r2
 80009e2:	441a      	add	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
		mpu->Gyro.raw.y += (int16_t)((mpu->data[10] << 8) | mpu->data[11]);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80009f2:	b212      	sxth	r2, r2
 80009f4:	0212      	lsls	r2, r2, #8
 80009f6:	b211      	sxth	r1, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 80009fe:	b212      	sxth	r2, r2
 8000a00:	430a      	orrs	r2, r1
 8000a02:	b212      	sxth	r2, r2
 8000a04:	441a      	add	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	629a      	str	r2, [r3, #40]	@ 0x28
		mpu->Gyro.raw.z += (int16_t)((mpu->data[12] << 8) | mpu->data[13]);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8000a14:	b212      	sxth	r2, r2
 8000a16:	0212      	lsls	r2, r2, #8
 8000a18:	b211      	sxth	r1, r2
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000a20:	b212      	sxth	r2, r2
 8000a22:	430a      	orrs	r2, r1
 8000a24:	b212      	sxth	r2, r2
 8000a26:	441a      	add	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	81fb      	strh	r3, [r7, #14]
 8000a32:	89fb      	ldrh	r3, [r7, #14]
 8000a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a38:	d385      	bcc.n	8000946 <MPU6050_Calibrate+0xe>
	}
    mpu->Acc.offset.x = (int16_t)(mpu->Acc.raw.x >> NUM_SAMPLES_BITS);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	131b      	asrs	r3, r3, #12
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(mpu->Acc.raw.y >> NUM_SAMPLES_BITS);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	131b      	asrs	r3, r3, #12
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(mpu->Acc.raw.z >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	131b      	asrs	r3, r3, #12
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(mpu->Gyro.raw.x >> NUM_SAMPLES_BITS);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6a:	131b      	asrs	r3, r3, #12
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	83da      	strh	r2, [r3, #30]
	mpu->Gyro.offset.y = (int16_t)(mpu->Gyro.raw.y >> NUM_SAMPLES_BITS);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a76:	131b      	asrs	r3, r3, #12
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	841a      	strh	r2, [r3, #32]
	mpu->Gyro.offset.z = (int16_t)(mpu->Gyro.raw.z >> NUM_SAMPLES_BITS);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a82:	131b      	asrs	r3, r3, #12
 8000a84:	b21a      	sxth	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000038c 	.word	0x2000038c

08000a98 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->Acc.raw.x = (((mpu->data[0] << 8) | mpu->data[1]));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60da      	str	r2, [r3, #12]
	mpu->Acc.raw.y = (((mpu->data[2] << 8) | mpu->data[3]));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	611a      	str	r2, [r3, #16]
	mpu->Acc.raw.z = (((mpu->data[4] << 8) | mpu->data[5]));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	615a      	str	r2, [r3, #20]
	// ACC: CALCULATE TRUE ACCELERATION
	mpu->Acc.x = mpu->Acc.raw.x - mpu->Acc.offset.x;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	801a      	strh	r2, [r3, #0]
	mpu->Acc.y = mpu->Acc.raw.y - mpu->Acc.offset.y;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	805a      	strh	r2, [r3, #2]
	mpu->Acc.z = mpu->Acc.raw.z - mpu->Acc.offset.z;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	809a      	strh	r2, [r3, #4]

	// GYR: GET RAW INFORMATION
	mpu->Gyro.raw.x = (((mpu->data[8 ] << 8) | mpu->data[9 ]));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->Gyro.raw.y = (((mpu->data[10] << 8) | mpu->data[11]));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->Gyro.raw.z = (((mpu->data[12] << 8) | mpu->data[13]));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	// GYR: CALCULATE TRUE ACCELERATION
	mpu->Gyro.x = mpu->Gyro.raw.x - mpu->Gyro.offset.x;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	831a      	strh	r2, [r3, #24]
	mpu->Gyro.y = mpu->Gyro.raw.y - mpu->Gyro.offset.y;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	835a      	strh	r2, [r3, #26]
	mpu->Gyro.z = mpu->Gyro.raw.z - mpu->Gyro.offset.z;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	839a      	strh	r2, [r3, #28]

}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000bbe:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <Display_Set_I2C_Master_Transmit+0x24>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000bc4:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <Display_Set_I2C_Master_Transmit+0x28>)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000398 	.word	0x20000398
 8000bdc:	2000039c 	.word	0x2000039c

08000be0 <Display_Init>:

e_system Display_Init(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000bea:	22ae      	movs	r2, #174	@ 0xae
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	@ 0x78
 8000bf0:	f000 f94e 	bl	8000e90 <ssd1306_I2C_Write>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000bfe:	2220      	movs	r2, #32
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	@ 0x78
 8000c04:	f000 f944 	bl	8000e90 <ssd1306_I2C_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4413      	add	r3, r2
 8000c10:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c12:	2210      	movs	r2, #16
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	@ 0x78
 8000c18:	f000 f93a 	bl	8000e90 <ssd1306_I2C_Write>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4413      	add	r3, r2
 8000c24:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000c26:	22b0      	movs	r2, #176	@ 0xb0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	@ 0x78
 8000c2c:	f000 f930 	bl	8000e90 <ssd1306_I2C_Write>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4413      	add	r3, r2
 8000c38:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000c3a:	22c8      	movs	r2, #200	@ 0xc8
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	@ 0x78
 8000c40:	f000 f926 	bl	8000e90 <ssd1306_I2C_Write>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	@ 0x78
 8000c54:	f000 f91c 	bl	8000e90 <ssd1306_I2C_Write>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4413      	add	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000c62:	2210      	movs	r2, #16
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	@ 0x78
 8000c68:	f000 f912 	bl	8000e90 <ssd1306_I2C_Write>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4413      	add	r3, r2
 8000c74:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000c76:	2240      	movs	r2, #64	@ 0x40
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	@ 0x78
 8000c7c:	f000 f908 	bl	8000e90 <ssd1306_I2C_Write>
 8000c80:	4603      	mov	r3, r0
 8000c82:	461a      	mov	r2, r3
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4413      	add	r3, r2
 8000c88:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000c8a:	2281      	movs	r2, #129	@ 0x81
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	@ 0x78
 8000c90:	f000 f8fe 	bl	8000e90 <ssd1306_I2C_Write>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000c9e:	22ff      	movs	r2, #255	@ 0xff
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2078      	movs	r0, #120	@ 0x78
 8000ca4:	f000 f8f4 	bl	8000e90 <ssd1306_I2C_Write>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4413      	add	r3, r2
 8000cb0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000cb2:	22a1      	movs	r2, #161	@ 0xa1
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2078      	movs	r0, #120	@ 0x78
 8000cb8:	f000 f8ea 	bl	8000e90 <ssd1306_I2C_Write>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000cc6:	22a6      	movs	r2, #166	@ 0xa6
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	@ 0x78
 8000ccc:	f000 f8e0 	bl	8000e90 <ssd1306_I2C_Write>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000cda:	22a8      	movs	r2, #168	@ 0xa8
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2078      	movs	r0, #120	@ 0x78
 8000ce0:	f000 f8d6 	bl	8000e90 <ssd1306_I2C_Write>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4413      	add	r3, r2
 8000cec:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000cee:	223f      	movs	r2, #63	@ 0x3f
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2078      	movs	r0, #120	@ 0x78
 8000cf4:	f000 f8cc 	bl	8000e90 <ssd1306_I2C_Write>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4413      	add	r3, r2
 8000d00:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d02:	22a4      	movs	r2, #164	@ 0xa4
 8000d04:	2100      	movs	r1, #0
 8000d06:	2078      	movs	r0, #120	@ 0x78
 8000d08:	f000 f8c2 	bl	8000e90 <ssd1306_I2C_Write>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4413      	add	r3, r2
 8000d14:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000d16:	22d3      	movs	r2, #211	@ 0xd3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2078      	movs	r0, #120	@ 0x78
 8000d1c:	f000 f8b8 	bl	8000e90 <ssd1306_I2C_Write>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4413      	add	r3, r2
 8000d28:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2078      	movs	r0, #120	@ 0x78
 8000d30:	f000 f8ae 	bl	8000e90 <ssd1306_I2C_Write>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000d3e:	22d5      	movs	r2, #213	@ 0xd5
 8000d40:	2100      	movs	r1, #0
 8000d42:	2078      	movs	r0, #120	@ 0x78
 8000d44:	f000 f8a4 	bl	8000e90 <ssd1306_I2C_Write>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4413      	add	r3, r2
 8000d50:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000d52:	22f0      	movs	r2, #240	@ 0xf0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2078      	movs	r0, #120	@ 0x78
 8000d58:	f000 f89a 	bl	8000e90 <ssd1306_I2C_Write>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4413      	add	r3, r2
 8000d64:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000d66:	22d9      	movs	r2, #217	@ 0xd9
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2078      	movs	r0, #120	@ 0x78
 8000d6c:	f000 f890 	bl	8000e90 <ssd1306_I2C_Write>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4413      	add	r3, r2
 8000d78:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000d7a:	2222      	movs	r2, #34	@ 0x22
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2078      	movs	r0, #120	@ 0x78
 8000d80:	f000 f886 	bl	8000e90 <ssd1306_I2C_Write>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000d8e:	22da      	movs	r2, #218	@ 0xda
 8000d90:	2100      	movs	r1, #0
 8000d92:	2078      	movs	r0, #120	@ 0x78
 8000d94:	f000 f87c 	bl	8000e90 <ssd1306_I2C_Write>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	4413      	add	r3, r2
 8000da0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000da2:	2212      	movs	r2, #18
 8000da4:	2100      	movs	r1, #0
 8000da6:	2078      	movs	r0, #120	@ 0x78
 8000da8:	f000 f872 	bl	8000e90 <ssd1306_I2C_Write>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4413      	add	r3, r2
 8000db4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000db6:	22db      	movs	r2, #219	@ 0xdb
 8000db8:	2100      	movs	r1, #0
 8000dba:	2078      	movs	r0, #120	@ 0x78
 8000dbc:	f000 f868 	bl	8000e90 <ssd1306_I2C_Write>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000dca:	2220      	movs	r2, #32
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2078      	movs	r0, #120	@ 0x78
 8000dd0:	f000 f85e 	bl	8000e90 <ssd1306_I2C_Write>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4413      	add	r3, r2
 8000ddc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000dde:	228d      	movs	r2, #141	@ 0x8d
 8000de0:	2100      	movs	r1, #0
 8000de2:	2078      	movs	r0, #120	@ 0x78
 8000de4:	f000 f854 	bl	8000e90 <ssd1306_I2C_Write>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4413      	add	r3, r2
 8000df0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000df2:	2214      	movs	r2, #20
 8000df4:	2100      	movs	r1, #0
 8000df6:	2078      	movs	r0, #120	@ 0x78
 8000df8:	f000 f84a 	bl	8000e90 <ssd1306_I2C_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4413      	add	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000e06:	22af      	movs	r2, #175	@ 0xaf
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	@ 0x78
 8000e0c:	f000 f840 	bl	8000e90 <ssd1306_I2C_Write>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4413      	add	r3, r2
 8000e18:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e1a:	222e      	movs	r2, #46	@ 0x2e
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	@ 0x78
 8000e20:	f000 f836 	bl	8000e90 <ssd1306_I2C_Write>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f8d8 	bl	8000fe4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <Display_Init+0x2a8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <Display_Init+0x2a8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <Display_Init+0x2a8>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <Display_Init+0x2ac>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	711a      	strb	r2, [r3, #4]
	Update.Page = 0;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <Display_Init+0x2ac>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	70da      	strb	r2, [r3, #3]
	Update.Ready_DMA = FALSE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <Display_Init+0x2ac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	705a      	strb	r2, [r3, #1]
	Update.Ready_MPU_data = FALSE;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <Display_Init+0x2ac>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	709a      	strb	r2, [r3, #2]
	Update.Ready_To_Refresh = FALSE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Display_Init+0x2ac>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <Display_Init+0x2ac>)
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	3b50      	subs	r3, #80	@ 0x50
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <Display_Init+0x2ac>)
 8000e6e:	715a      	strb	r2, [r3, #5]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <Display_Init+0x2ac>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	719a      	strb	r2, [r3, #6]
	Update.PageData[2] = 0x10; //< y acá upper start
 8000e76:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <Display_Init+0x2ac>)
 8000e78:	2210      	movs	r2, #16
 8000e7a:	71da      	strb	r2, [r3, #7]

	/* Return OK */
	return status;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000390 	.word	0x20000390
 8000e8c:	200007a0 	.word	0x200007a0

08000e90 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	71bb      	strb	r3, [r7, #6]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <ssd1306_I2C_Write+0x38>)
 8000eac:	681c      	ldr	r4, [r3, #0]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b298      	uxth	r0, r3
 8000eb2:	f107 010c 	add.w	r1, r7, #12
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	2202      	movs	r2, #2
 8000eba:	47a0      	blx	r4
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000039c 	.word	0x2000039c

08000ecc <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 8000ecc:	b598      	push	{r3, r4, r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d057      	beq.n	8000f88 <Display_UpdateScreen_Task+0xbc>
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d053      	beq.n	8000f88 <Display_UpdateScreen_Task+0xbc>
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f94 <Display_UpdateScreen_Task+0xc8>)
 8000ee2:	795b      	ldrb	r3, [r3, #5]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d04f      	beq.n	8000f88 <Display_UpdateScreen_Task+0xbc>

		switch(Update.state){
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <Display_UpdateScreen_Task+0x2a>
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d01f      	beq.n	8000f34 <Display_UpdateScreen_Task+0x68>
 8000ef4:	e03b      	b.n	8000f6e <Display_UpdateScreen_Task+0xa2>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000ef8:	78db      	ldrb	r3, [r3, #3]
 8000efa:	3b50      	subs	r3, #80	@ 0x50
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f00:	715a      	strb	r2, [r3, #5]
			Update.PageData[1] = 0x00;                   // Lower Column
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	719a      	strb	r2, [r3, #6]
			Update.PageData[2] = 0x10;                   // Upper Column
 8000f08:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f0a:	2210      	movs	r2, #16
 8000f0c:	71da      	strb	r2, [r3, #7]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <Display_UpdateScreen_Task+0xcc>)
 8000f10:	681c      	ldr	r4, [r3, #0]
 8000f12:	2303      	movs	r3, #3
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <Display_UpdateScreen_Task+0xd0>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	2078      	movs	r0, #120	@ 0x78
 8000f1a:	47a0      	blx	r4
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <Display_UpdateScreen_Task+0x64>
				Update.state = DATA;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	711a      	strb	r2, [r3, #4]
				Update.Ready_DMA = FALSE;
 8000f28:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000f2e:	e021      	b.n	8000f74 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e02a      	b.n	8000f8a <Display_UpdateScreen_Task+0xbe>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <Display_UpdateScreen_Task+0xcc>)
 8000f36:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000f3e:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <Display_UpdateScreen_Task+0xd4>)
 8000f40:	441a      	add	r2, r3
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	2140      	movs	r1, #64	@ 0x40
 8000f46:	2078      	movs	r0, #120	@ 0x78
 8000f48:	47a0      	blx	r4
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10c      	bne.n	8000f6a <Display_UpdateScreen_Task+0x9e>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f52:	78db      	ldrb	r3, [r3, #3]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f5a:	70da      	strb	r2, [r3, #3]
				Update.state = PAGE;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	711a      	strb	r2, [r3, #4]
				Update.Ready_DMA = FALSE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000f68:	e004      	b.n	8000f74 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00d      	b.n	8000f8a <Display_UpdateScreen_Task+0xbe>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f70:	2208      	movs	r2, #8
 8000f72:	70da      	strb	r2, [r3, #3]
		}
		if(Update.Page > 7){
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d905      	bls.n	8000f88 <Display_UpdateScreen_Task+0xbc>
			Update.Page = 0;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	70da      	strb	r2, [r3, #3]
			Update.Ready_To_Refresh = FALSE;
 8000f82:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <Display_UpdateScreen_Task+0xc4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd98      	pop	{r3, r4, r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200007a0 	.word	0x200007a0
 8000f94:	20000390 	.word	0x20000390
 8000f98:	20000398 	.word	0x20000398
 8000f9c:	200007a5 	.word	0x200007a5
 8000fa0:	200003a0 	.word	0x200003a0

08000fa4 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 8000fae:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <Display_I2C_DMA_Ready+0x1c>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	7053      	strb	r3, [r2, #1]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	200007a0 	.word	0x200007a0

08000fc4 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <Display_I2C_Refresh_Ready+0x1c>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	7013      	strb	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	200007a0 	.word	0x200007a0

08000fe4 <Display_Fill>:
{
	SSD1306.CurrentX = x;
	SSD1306.CurrentY = y;
}

void Display_Fill(SSD1306_COLOR_t color) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00d      	b.n	8001010 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <Display_Fill+0x1a>
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	e000      	b.n	8001000 <Display_Fill+0x1c>
 8000ffe:	21ff      	movs	r1, #255	@ 0xff
 8001000:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <Display_Fill+0x44>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001016:	d3ed      	bcc.n	8000ff4 <Display_Fill+0x10>
	}
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200003a0 	.word	0x200003a0

0800102c <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
 8001036:	460b      	mov	r3, r1
 8001038:	80bb      	strh	r3, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	70fb      	strb	r3, [r7, #3]
	if (
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b7f      	cmp	r3, #127	@ 0x7f
 8001042:	d848      	bhi.n	80010d6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	2b3f      	cmp	r3, #63	@ 0x3f
 8001048:	d845      	bhi.n	80010d6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <Display_DrawPixel+0xb8>)
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf0c      	ite	eq
 8001058:	2301      	moveq	r3, #1
 800105a:	2300      	movne	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d11a      	bne.n	800109c <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001066:	88fa      	ldrh	r2, [r7, #6]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	08db      	lsrs	r3, r3, #3
 800106c:	b298      	uxth	r0, r3
 800106e:	4603      	mov	r3, r0
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	4413      	add	r3, r2
 8001074:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <Display_DrawPixel+0xbc>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	b25a      	sxtb	r2, r3
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	b25b      	sxtb	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b259      	sxtb	r1, r3
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	01db      	lsls	r3, r3, #7
 8001092:	4413      	add	r3, r2
 8001094:	b2c9      	uxtb	r1, r1
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <Display_DrawPixel+0xbc>)
 8001098:	54d1      	strb	r1, [r2, r3]
 800109a:	e01d      	b.n	80010d8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800109c:	88fa      	ldrh	r2, [r7, #6]
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	b298      	uxth	r0, r3
 80010a4:	4603      	mov	r3, r0
 80010a6:	01db      	lsls	r3, r3, #7
 80010a8:	4413      	add	r3, r2
 80010aa:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <Display_DrawPixel+0xbc>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	b25a      	sxtb	r2, r3
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	4013      	ands	r3, r2
 80010c4:	b259      	sxtb	r1, r3
 80010c6:	88fa      	ldrh	r2, [r7, #6]
 80010c8:	4603      	mov	r3, r0
 80010ca:	01db      	lsls	r3, r3, #7
 80010cc:	4413      	add	r3, r2
 80010ce:	b2c9      	uxtb	r1, r1
 80010d0:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <Display_DrawPixel+0xbc>)
 80010d2:	54d1      	strb	r1, [r2, r3]
 80010d4:	e000      	b.n	80010d8 <Display_DrawPixel+0xac>
		return;
 80010d6:	bf00      	nop
	}
}
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000390 	.word	0x20000390
 80010e8:	200003a0 	.word	0x200003a0

080010ec <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	81fb      	strh	r3, [r7, #14]
 80010fa:	460b      	mov	r3, r1
 80010fc:	81bb      	strh	r3, [r7, #12]
 80010fe:	4613      	mov	r3, r2
 8001100:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	3307      	adds	r3, #7
 8001108:	2b00      	cmp	r3, #0
 800110a:	da00      	bge.n	800110e <Display_DrawBitmap+0x22>
 800110c:	3307      	adds	r3, #7
 800110e:	10db      	asrs	r3, r3, #3
 8001110:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001116:	2300      	movs	r3, #0
 8001118:	82bb      	strh	r3, [r7, #20]
 800111a:	e044      	b.n	80011a6 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	827b      	strh	r3, [r7, #18]
 8001120:	e02f      	b.n	8001182 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001122:	8a7b      	ldrh	r3, [r7, #18]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
 8001132:	e012      	b.n	800115a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001134:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001138:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800113c:	fb03 f202 	mul.w	r2, r3, r2
 8001140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001144:	2b00      	cmp	r3, #0
 8001146:	da00      	bge.n	800114a <Display_DrawBitmap+0x5e>
 8001148:	3307      	adds	r3, #7
 800114a:	10db      	asrs	r3, r3, #3
 800114c:	b21b      	sxth	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	461a      	mov	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800115a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800115e:	2b00      	cmp	r3, #0
 8001160:	da09      	bge.n	8001176 <Display_DrawBitmap+0x8a>
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	8a7b      	ldrh	r3, [r7, #18]
 8001166:	4413      	add	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	89b9      	ldrh	r1, [r7, #12]
 800116c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5b 	bl	800102c <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001176:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800117a:	b29b      	uxth	r3, r3
 800117c:	3301      	adds	r3, #1
 800117e:	b29b      	uxth	r3, r3
 8001180:	827b      	strh	r3, [r7, #18]
 8001182:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbc9      	blt.n	8001122 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800118e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001192:	b29b      	uxth	r3, r3
 8001194:	3301      	adds	r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	82bb      	strh	r3, [r7, #20]
 800119a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	81bb      	strh	r3, [r7, #12]
 80011a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80011aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dbb4      	blt.n	800111c <Display_DrawBitmap+0x30>
        }
    }
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Display_DrawLine>:
        str++;	// Next char
    }
    return *str;	// Everything ok
}

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4623      	mov	r3, r4
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	4603      	mov	r3, r0
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
 80011d6:	4613      	mov	r3, r2
 80011d8:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 80011da:	88fa      	ldrh	r2, [r7, #6]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d004      	beq.n	80011ec <Display_DrawLine+0x30>
 80011e2:	88ba      	ldrh	r2, [r7, #4]
 80011e4:	883b      	ldrh	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	f040 8090 	bne.w	800130c <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f0:	d901      	bls.n	80011f6 <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 80011f2:	237f      	movs	r3, #127	@ 0x7f
 80011f4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80011fa:	d901      	bls.n	8001200 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 80011fc:	237f      	movs	r3, #127	@ 0x7f
 80011fe:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	2b3f      	cmp	r3, #63	@ 0x3f
 8001204:	d901      	bls.n	800120a <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001206:	233f      	movs	r3, #63	@ 0x3f
 8001208:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800120a:	883b      	ldrh	r3, [r7, #0]
 800120c:	2b3f      	cmp	r3, #63	@ 0x3f
 800120e:	d901      	bls.n	8001214 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001210:	233f      	movs	r3, #63	@ 0x3f
 8001212:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	429a      	cmp	r2, r3
 800121a:	d205      	bcs.n	8001228 <Display_DrawLine+0x6c>
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29b      	uxth	r3, r3
 8001224:	b21b      	sxth	r3, r3
 8001226:	e004      	b.n	8001232 <Display_DrawLine+0x76>
 8001228:	88fa      	ldrh	r2, [r7, #6]
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	b21b      	sxth	r3, r3
 8001232:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001234:	88ba      	ldrh	r2, [r7, #4]
 8001236:	883b      	ldrh	r3, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d205      	bcs.n	8001248 <Display_DrawLine+0x8c>
 800123c:	883a      	ldrh	r2, [r7, #0]
 800123e:	88bb      	ldrh	r3, [r7, #4]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b29b      	uxth	r3, r3
 8001244:	b21b      	sxth	r3, r3
 8001246:	e004      	b.n	8001252 <Display_DrawLine+0x96>
 8001248:	88ba      	ldrh	r2, [r7, #4]
 800124a:	883b      	ldrh	r3, [r7, #0]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b29b      	uxth	r3, r3
 8001250:	b21b      	sxth	r3, r3
 8001252:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001254:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d129      	bne.n	80012b0 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 800125c:	883a      	ldrh	r2, [r7, #0]
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	d205      	bcs.n	8001270 <Display_DrawLine+0xb4>
			tmp = y1;
 8001264:	883b      	ldrh	r3, [r7, #0]
 8001266:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800126c:	893b      	ldrh	r3, [r7, #8]
 800126e:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	429a      	cmp	r2, r3
 8001276:	d205      	bcs.n	8001284 <Display_DrawLine+0xc8>
			tmp = x1;
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001280:	893b      	ldrh	r3, [r7, #8]
 8001282:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	81fb      	strh	r3, [r7, #14]
 8001288:	e00c      	b.n	80012a4 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 800128a:	89f9      	ldrh	r1, [r7, #14]
 800128c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feca 	bl	800102c <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	81fb      	strh	r3, [r7, #14]
 80012a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012a8:	883b      	ldrh	r3, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dded      	ble.n	800128a <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 80012ae:	e030      	b.n	8001312 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 80012b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d12b      	bne.n	8001310 <Display_DrawLine+0x154>
		if (y1 < y0) {
 80012b8:	883a      	ldrh	r2, [r7, #0]
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d205      	bcs.n	80012cc <Display_DrawLine+0x110>
			tmp = y1;
 80012c0:	883b      	ldrh	r3, [r7, #0]
 80012c2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80012c8:	893b      	ldrh	r3, [r7, #8]
 80012ca:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d205      	bcs.n	80012e0 <Display_DrawLine+0x124>
			tmp = x1;
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80012dc:	893b      	ldrh	r3, [r7, #8]
 80012de:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	81fb      	strh	r3, [r7, #14]
 80012e4:	e00c      	b.n	8001300 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 80012e6:	89fb      	ldrh	r3, [r7, #14]
 80012e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012ec:	88b9      	ldrh	r1, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe9c 	bl	800102c <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80012f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	81fb      	strh	r3, [r7, #14]
 8001300:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	429a      	cmp	r2, r3
 8001308:	dded      	ble.n	80012e6 <Display_DrawLine+0x12a>
		}
	}
	return;
 800130a:	e001      	b.n	8001310 <Display_DrawLine+0x154>
		return;
 800130c:	bf00      	nop
 800130e:	e000      	b.n	8001312 <Display_DrawLine+0x156>
	return;
 8001310:	bf00      	nop
}
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}

08001318 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b087      	sub	sp, #28
 800131c:	af02      	add	r7, sp, #8
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	4613      	mov	r3, r2
 8001334:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	2b7f      	cmp	r3, #127	@ 0x7f
 800133a:	d836      	bhi.n	80013aa <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001340:	d833      	bhi.n	80013aa <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	4413      	add	r3, r2
 8001348:	2b7f      	cmp	r3, #127	@ 0x7f
 800134a:	dd03      	ble.n	8001354 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001352:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001354:	88ba      	ldrh	r2, [r7, #4]
 8001356:	883b      	ldrh	r3, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	2b3f      	cmp	r3, #63	@ 0x3f
 800135c:	dd03      	ble.n	8001366 <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001364:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e018      	b.n	800139e <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	b29a      	uxth	r2, r3
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	b299      	uxth	r1, r3
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	4413      	add	r3, r2
 800137c:	b29c      	uxth	r4, r3
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	b29a      	uxth	r2, r3
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	b29a      	uxth	r2, r3
 8001388:	88f8      	ldrh	r0, [r7, #6]
 800138a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4613      	mov	r3, r2
 8001392:	4622      	mov	r2, r4
 8001394:	f7ff ff12 	bl	80011bc <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	3301      	adds	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	883a      	ldrh	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d2e1      	bcs.n	800136c <Display_DrawFilledRectangle+0x54>
 80013a8:	e000      	b.n	80013ac <Display_DrawFilledRectangle+0x94>
		return;
 80013aa:	bf00      	nop
	}
}
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}

080013b2 <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013da:	fb92 f3f3 	sdiv	r3, r2, r3
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	729a      	strb	r2, [r3, #10]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	885b      	ldrh	r3, [r3, #2]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	885b      	ldrh	r3, [r3, #2]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10e      	bne.n	800142a <Encoder_Task+0x3a>

		enc->pps100 += enc->pulses;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	88da      	ldrh	r2, [r3, #6]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	889b      	ldrh	r3, [r3, #4]
 8001414:	4413      	add	r3, r2
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7a9b      	ldrb	r3, [r3, #10]
 800142e:	3b01      	subs	r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a9b      	ldrb	r3, [r3, #10]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <Encoder_Task+0x54>
		enc->pps = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	811a      	strh	r2, [r3, #8]
	}
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	889b      	ldrh	r3, [r3, #4]
 800145c:	3301      	adds	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	809a      	strh	r2, [r3, #4]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	enc->pps = enc->pps100;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	88da      	ldrh	r2, [r3, #6]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	811a      	strh	r2, [r3, #8]
	enc->pps100=0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	80da      	strh	r2, [r3, #6]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(e_direction dir), uint16_t max_value){
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	819a      	strh	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <Motor_Set_PER_Speed>:
		motor->setPins(FREE_WHEEL);
		motor->setPWM(0);
	}
}

void Motor_Set_PER_Speed(s_motor *motor, int8_t speed){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL || motor->setPWM == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d054      	beq.n	800158e <Motor_Set_PER_Speed+0xbe>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d050      	beq.n	800158e <Motor_Set_PER_Speed+0xbe>
		return;
	if(speed > 100)
 80014ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f0:	2b64      	cmp	r3, #100	@ 0x64
 80014f2:	dd01      	ble.n	80014f8 <Motor_Set_PER_Speed+0x28>
		speed = 100;
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 80014f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014fc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001500:	da01      	bge.n	8001506 <Motor_Set_PER_Speed+0x36>
		speed = -100;
 8001502:	239c      	movs	r3, #156	@ 0x9c
 8001504:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 8001506:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	429a      	cmp	r2, r3
 8001510:	d03f      	beq.n	8001592 <Motor_Set_PER_Speed+0xc2>
		return;

	motor->vel = speed * 600;
 8001512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001516:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800151a:	fb03 f202 	mul.w	r2, r3, r2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8001522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dd10      	ble.n	800154c <Motor_Set_PER_Speed+0x7c>
		motor->direction = FORWARD;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	701a      	strb	r2, [r3, #0]
		motor->setPins(FORWARD);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2002      	movs	r0, #2
 8001536:	4798      	blx	r3
		motor->setPWM((uint16_t)motor->vel-1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6892      	ldr	r2, [r2, #8]
 8001540:	b292      	uxth	r2, r2
 8001542:	3a01      	subs	r2, #1
 8001544:	b292      	uxth	r2, r2
 8001546:	4610      	mov	r0, r2
 8001548:	4798      	blx	r3
 800154a:	e023      	b.n	8001594 <Motor_Set_PER_Speed+0xc4>
	}else if(speed < 0){
 800154c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da10      	bge.n	8001576 <Motor_Set_PER_Speed+0xa6>
		motor->direction = BACKWARD;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	701a      	strb	r2, [r3, #0]
		motor->setPins(BACKWARD);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2003      	movs	r0, #3
 8001560:	4798      	blx	r3
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6892      	ldr	r2, [r2, #8]
 800156a:	b292      	uxth	r2, r2
 800156c:	43d2      	mvns	r2, r2
 800156e:	b292      	uxth	r2, r2
 8001570:	4610      	mov	r0, r2
 8001572:	4798      	blx	r3
 8001574:	e00e      	b.n	8001594 <Motor_Set_PER_Speed+0xc4>
	}else{
		motor->direction = FREE_WHEEL;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
		motor->setPins(FREE_WHEEL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2001      	movs	r0, #1
 8001582:	4798      	blx	r3
		motor->setPWM(0);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	2000      	movs	r0, #0
 800158a:	4798      	blx	r3
 800158c:	e002      	b.n	8001594 <Motor_Set_PER_Speed+0xc4>
		return;
 800158e:	bf00      	nop
 8001590:	e000      	b.n	8001594 <Motor_Set_PER_Speed+0xc4>
		return;
 8001592:	bf00      	nop
	}
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	motor->setPins(BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d10c      	bne.n	80015c4 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	899b      	ldrh	r3, [r3, #12]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	899b      	ldrh	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
	}
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <Comm_Task>:

void Comm_Task(s_commData* comm){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800164c:	429a      	cmp	r2, r3
 800164e:	d002      	beq.n	8001656 <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f819 	bl	8001688 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	789a      	ldrb	r2, [r3, #2]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	78db      	ldrb	r3, [r3, #3]
 800165e:	429a      	cmp	r2, r3
 8001660:	d00e      	beq.n	8001680 <Comm_Task+0x48>
		if(!comm->isESP01){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <Comm_Task+0x48>
				comm->dataWriter(comm);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001696:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001698:	e11b      	b.n	80018d2 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	f200 810e 	bhi.w	80018c2 <decodeProtocol+0x23a>
 80016a6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ac <decodeProtocol+0x24>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016c9 	.word	0x080016c9
 80016b0:	080016fb 	.word	0x080016fb
 80016b4:	0800173d 	.word	0x0800173d
 80016b8:	0800177f 	.word	0x0800177f
 80016bc:	080017c1 	.word	0x080017c1
 80016c0:	080017f3 	.word	0x080017f3
 80016c4:	08001845 	.word	0x08001845
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	b2d1      	uxtb	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80016e2:	2b55      	cmp	r3, #85	@ 0x55
 80016e4:	f040 80f2 	bne.w	80018cc <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 80016f8:	e0e8      	b.n	80018cc <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	b2d1      	uxtb	r1, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001714:	2b4e      	cmp	r3, #78	@ 0x4e
 8001716:	d104      	bne.n	8001722 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001720:	e0d7      	b.n	80018d2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001728:	3b01      	subs	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800173a:	e0ca      	b.n	80018d2 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	b2d1      	uxtb	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001756:	2b45      	cmp	r3, #69	@ 0x45
 8001758:	d104      	bne.n	8001764 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001762:	e0b6      	b.n	80018d2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800176a:	3b01      	subs	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800177c:	e0a9      	b.n	80018d2 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	b2d1      	uxtb	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800178e:	461a      	mov	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001798:	2b52      	cmp	r3, #82	@ 0x52
 800179a:	d104      	bne.n	80017a6 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80017a4:	e095      	b.n	80018d2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80017be:	e088      	b.n	80018d2 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	b2d1      	uxtb	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80017e4:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <decodeProtocol+0x264>)
 80017e6:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2205      	movs	r2, #5
 80017ec:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80017f0:	e06f      	b.n	80018d2 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	b2d1      	uxtb	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800180c:	2b3a      	cmp	r3, #58	@ 0x3a
 800180e:	d10c      	bne.n	800182a <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2206      	movs	r2, #6
 8001814:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001818:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <decodeProtocol+0x264>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001820:	b2da      	uxtb	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001828:	e053      	b.n	80018d2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001830:	3b01      	subs	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001842:	e046      	b.n	80018d2 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <decodeProtocol+0x264>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d914      	bls.n	8001876 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	b2d1      	uxtb	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800186c:	4053      	eors	r3, r2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001876:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <decodeProtocol+0x264>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <decodeProtocol+0x264>)
 8001880:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <decodeProtocol+0x264>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d122      	bne.n	80018d0 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800189e:	4619      	mov	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	440b      	add	r3, r1
 80018a4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d111      	bne.n	80018d0 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
				}
			}
			break;
 80018c0:	e006      	b.n	80018d0 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80018ca:	e002      	b.n	80018d2 <decodeProtocol+0x24a>
			break;
 80018cc:	bf00      	nop
 80018ce:	e000      	b.n	80018d2 <decodeProtocol+0x24a>
			break;
 80018d0:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	429a      	cmp	r2, r3
 80018dc:	f47f aedd 	bne.w	800169a <decodeProtocol+0x12>
		}
	}
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200007d1 	.word	0x200007d1

080018f0 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	461a      	mov	r2, r3
 80018fc:	460b      	mov	r3, r1
 80018fe:	72fb      	strb	r3, [r7, #11]
 8001900:	4613      	mov	r3, r2
 8001902:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001904:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 800190a:	4b62      	ldr	r3, [pc, #392]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001910:	4b60      	ldr	r3, [pc, #384]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	b2d1      	uxtb	r1, r2
 8001918:	4a5e      	ldr	r2, [pc, #376]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800191a:	7011      	strb	r1, [r2, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001920:	2155      	movs	r1, #85	@ 0x55
 8001922:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001924:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	b2d1      	uxtb	r1, r2
 800192c:	4a59      	ldr	r2, [pc, #356]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800192e:	7011      	strb	r1, [r2, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001934:	214e      	movs	r1, #78	@ 0x4e
 8001936:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001938:	4b56      	ldr	r3, [pc, #344]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	b2d1      	uxtb	r1, r2
 8001940:	4a54      	ldr	r2, [pc, #336]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001942:	7011      	strb	r1, [r2, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b54      	ldr	r3, [pc, #336]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001948:	2145      	movs	r1, #69	@ 0x45
 800194a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 800194c:	4b51      	ldr	r3, [pc, #324]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a4f      	ldr	r2, [pc, #316]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001956:	7011      	strb	r1, [r2, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a98 <comm_sendCMD+0x1a8>)
 800195c:	2152      	movs	r1, #82	@ 0x52
 800195e:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001960:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <comm_sendCMD+0x1ac>)
 8001966:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001968:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	b2d1      	uxtb	r1, r2
 8001970:	4a48      	ldr	r2, [pc, #288]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001972:	7011      	strb	r1, [r2, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b48      	ldr	r3, [pc, #288]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 800197c:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	b2d1      	uxtb	r1, r2
 8001984:	4a43      	ldr	r2, [pc, #268]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001986:	7011      	strb	r1, [r2, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <comm_sendCMD+0x1a8>)
 800198c:	213a      	movs	r1, #58	@ 0x3a
 800198e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001990:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	b2d1      	uxtb	r1, r2
 8001998:	4a3e      	ldr	r2, [pc, #248]	@ (8001a94 <comm_sendCMD+0x1a4>)
 800199a:	7011      	strb	r1, [r2, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a98 <comm_sendCMD+0x1a8>)
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	2bb1      	cmp	r3, #177	@ 0xb1
 80019a8:	d002      	beq.n	80019b0 <comm_sendCMD+0xc0>
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	2bee      	cmp	r3, #238	@ 0xee
 80019ae:	d109      	bne.n	80019c4 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 80019b0:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <comm_sendCMD+0x1a4>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	b2d1      	uxtb	r1, r2
 80019b8:	4a36      	ldr	r2, [pc, #216]	@ (8001a94 <comm_sendCMD+0x1a4>)
 80019ba:	7011      	strb	r1, [r2, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4a36      	ldr	r2, [pc, #216]	@ (8001a98 <comm_sendCMD+0x1a8>)
 80019c0:	7abb      	ldrb	r3, [r7, #10]
 80019c2:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d013      	beq.n	80019f2 <comm_sendCMD+0x102>
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d010      	beq.n	80019f2 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 80019d0:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <comm_sendCMD+0x1a4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <comm_sendCMD+0x1a8>)
 80019d8:	4413      	add	r3, r2
 80019da:	7aba      	ldrb	r2, [r7, #10]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f00d fcd2 	bl	800f388 <memcpy>
        auxIndex += len;
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <comm_sendCMD+0x1a4>)
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	4413      	add	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <comm_sendCMD+0x1a4>)
 80019f0:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <comm_sendCMD+0x1a4>)
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	4b29      	ldr	r3, [pc, #164]	@ (8001a9c <comm_sendCMD+0x1ac>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <comm_sendCMD+0x1b0>)
 8001a04:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001a06:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <comm_sendCMD+0x1ac>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <comm_sendCMD+0x1b0>)
 8001a0e:	7819      	ldrb	r1, [r3, #0]
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001a12:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <comm_sendCMD+0x1b4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e01f      	b.n	8001a62 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001a2a:	5c9a      	ldrb	r2, [r3, r2]
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <comm_sendCMD+0x1b4>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4053      	eors	r3, r2
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <comm_sendCMD+0x1b4>)
 8001a36:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	b2d1      	uxtb	r1, r2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	70d1      	strb	r1, [r2, #3]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <comm_sendCMD+0x1a8>)
 8001a4e:	5c1a      	ldrb	r2, [r3, r0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	440b      	add	r3, r1
 8001a54:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <comm_sendCMD+0x1a0>)
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <comm_sendCMD+0x1a4>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3d9      	bcc.n	8001a22 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	78db      	ldrb	r3, [r3, #3]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	b2d1      	uxtb	r1, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	70d1      	strb	r1, [r2, #3]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <comm_sendCMD+0x1b4>)
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	440b      	add	r3, r1
 8001a84:	711a      	strb	r2, [r3, #4]
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200007ab 	.word	0x200007ab
 8001a94:	200007ac 	.word	0x200007ac
 8001a98:	200007b0 	.word	0x200007b0
 8001a9c:	200007ce 	.word	0x200007ce
 8001aa0:	200007cf 	.word	0x200007cf
 8001aa4:	200007d0 	.word	0x200007d0

08001aa8 <OLED_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Task(){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8001aae:	4b43      	ldr	r3, [pc, #268]	@ (8001bbc <OLED_Task+0x114>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d07d      	beq.n	8001bb2 <OLED_Task+0x10a>
		switch(Display.state){
 8001ab6:	4b41      	ldr	r3, [pc, #260]	@ (8001bbc <OLED_Task+0x114>)
 8001ab8:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d021      	beq.n	8001b04 <OLED_Task+0x5c>
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	dc76      	bgt.n	8001bb2 <OLED_Task+0x10a>
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <OLED_Task+0x24>
 8001ac8:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001aca:	e072      	b.n	8001bb2 <OLED_Task+0x10a>
			if(HAL_GetTick() - Display.timer > 2000){
 8001acc:	f001 fd50 	bl	8003570 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bbc <OLED_Task+0x114>)
 8001ad4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ade:	d967      	bls.n	8001bb0 <OLED_Task+0x108>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fa7f 	bl	8000fe4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	2340      	movs	r3, #64	@ 0x40
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	4a33      	ldr	r2, [pc, #204]	@ (8001bc0 <OLED_Task+0x118>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff faf9 	bl	80010ec <Display_DrawBitmap>
				Display.state = INPUTS;
 8001afa:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <OLED_Task+0x114>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001b02:	e055      	b.n	8001bb0 <OLED_Task+0x108>
		case INPUTS:
			Display_DrawBitmap(2, 17, My_bitmapSin_t_tulo, 37, 44, SSD1306_COLOR_BLACK);
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	232c      	movs	r3, #44	@ 0x2c
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2325      	movs	r3, #37	@ 0x25
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <OLED_Task+0x11c>)
 8001b10:	2111      	movs	r1, #17
 8001b12:	2002      	movs	r0, #2
 8001b14:	f7ff faea 	bl	80010ec <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	e044      	b.n	8001ba8 <OLED_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	e03b      	b.n	8001b9c <OLED_Task+0xf4>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a28      	ldr	r2, [pc, #160]	@ (8001bc8 <OLED_Task+0x120>)
 8001b28:	3308      	adds	r3, #8
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	885a      	ldrh	r2, [r3, #2]
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	4926      	ldr	r1, [pc, #152]	@ (8001bcc <OLED_Task+0x124>)
 8001b34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d82c      	bhi.n	8001b96 <OLED_Task+0xee>
						pepe = 2 + i * 3;
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	3302      	adds	r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <OLED_Task+0x128>)
 8001b4a:	601a      	str	r2, [r3, #0]
						Display_DrawLine(pepe, 61,  pepe, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <OLED_Task+0x128>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b298      	uxth	r0, r3
 8001b52:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <OLED_Task+0x128>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	491e      	ldr	r1, [pc, #120]	@ (8001bd4 <OLED_Task+0x12c>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	213d      	movs	r1, #61	@ 0x3d
 8001b68:	f7ff fb28 	bl	80011bc <Display_DrawLine>
						Display_DrawLine(pepe+1, 61,  pepe+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <OLED_Task+0x128>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	b298      	uxth	r0, r3
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <OLED_Task+0x128>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	4914      	ldr	r1, [pc, #80]	@ (8001bd4 <OLED_Task+0x12c>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	4619      	mov	r1, r3
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	213d      	movs	r1, #61	@ 0x3d
 8001b90:	f7ff fb14 	bl	80011bc <Display_DrawLine>
						break;
 8001b94:	e005      	b.n	8001ba2 <OLED_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	71bb      	strb	r3, [r7, #6]
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ba0:	d9c0      	bls.n	8001b24 <OLED_Task+0x7c>
			for(uint8_t i = 0; i < 8; i++){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	d9b7      	bls.n	8001b1e <OLED_Task+0x76>
			Display_SetCursor(73, 34);
			Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
			sprintf(Display.auxString, "Gz:%d", MPU6050.Gyro.z);
			Display_SetCursor(73, 51);
			Display_WriteString(Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);*/
			break;
 8001bae:	e000      	b.n	8001bb2 <OLED_Task+0x10a>
			break;
 8001bb0:	bf00      	nop
		}
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000ac0 	.word	0x20000ac0
 8001bc0:	0800f8a0 	.word	0x0800f8a0
 8001bc4:	0800fd2c 	.word	0x0800fd2c
 8001bc8:	20000ed4 	.word	0x20000ed4
 8001bcc:	0800fcd0 	.word	0x0800fcd0
 8001bd0:	20000a20 	.word	0x20000a20
 8001bd4:	0800fca0 	.word	0x0800fca0

08001bd8 <BateryLevel_Task>:

void BateryLevel_Task(){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2309      	movs	r3, #9
 8001be4:	2206      	movs	r2, #6
 8001be6:	2104      	movs	r1, #4
 8001be8:	2003      	movs	r0, #3
 8001bea:	f7ff fb95 	bl	8001318 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <BateryLevel_Task+0x94>)
 8001bf0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001bf2:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d908      	bls.n	8001c0c <BateryLevel_Task+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2309      	movs	r3, #9
 8001c00:	2206      	movs	r2, #6
 8001c02:	2104      	movs	r1, #4
 8001c04:	2003      	movs	r0, #3
 8001c06:	f7ff fb87 	bl	8001318 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8001c0a:	e02b      	b.n	8001c64 <BateryLevel_Task+0x8c>
	}else if(Analog.value[8] >= 3000){
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <BateryLevel_Task+0x94>)
 8001c0e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c10:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d908      	bls.n	8001c2a <BateryLevel_Task+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8001c18:	2301      	movs	r3, #1
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	2206      	movs	r2, #6
 8001c20:	2106      	movs	r1, #6
 8001c22:	2003      	movs	r0, #3
 8001c24:	f7ff fb78 	bl	8001318 <Display_DrawFilledRectangle>
}
 8001c28:	e01c      	b.n	8001c64 <BateryLevel_Task+0x8c>
	}else if(Analog.value[8] >= 2047){
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <BateryLevel_Task+0x94>)
 8001c2c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c2e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d908      	bls.n	8001c48 <BateryLevel_Task+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 8001c36:	2301      	movs	r3, #1
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	2206      	movs	r2, #6
 8001c3e:	2108      	movs	r1, #8
 8001c40:	2003      	movs	r0, #3
 8001c42:	f7ff fb69 	bl	8001318 <Display_DrawFilledRectangle>
}
 8001c46:	e00d      	b.n	8001c64 <BateryLevel_Task+0x8c>
	}else if(Analog.value[8] >= 1023){
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <BateryLevel_Task+0x94>)
 8001c4a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c4c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d907      	bls.n	8001c64 <BateryLevel_Task+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8001c54:	2301      	movs	r3, #1
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2302      	movs	r3, #2
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	210b      	movs	r1, #11
 8001c5e:	2003      	movs	r0, #3
 8001c60:	f7ff fb5a 	bl	8001318 <Display_DrawFilledRectangle>
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000ed4 	.word	0x20000ed4

08001c70 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001c86:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c88:	f000 81c9 	beq.w	800201e <decodeOn_USB+0x3ae>
 8001c8c:	2bf1      	cmp	r3, #241	@ 0xf1
 8001c8e:	f300 81bf 	bgt.w	8002010 <decodeOn_USB+0x3a0>
 8001c92:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c94:	d036      	beq.n	8001d04 <decodeOn_USB+0x94>
 8001c96:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c98:	f300 81ba 	bgt.w	8002010 <decodeOn_USB+0x3a0>
 8001c9c:	2bb1      	cmp	r3, #177	@ 0xb1
 8001c9e:	dc2d      	bgt.n	8001cfc <decodeOn_USB+0x8c>
 8001ca0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ca2:	f2c0 81b5 	blt.w	8002010 <decodeOn_USB+0x3a0>
 8001ca6:	3ba0      	subs	r3, #160	@ 0xa0
 8001ca8:	2b11      	cmp	r3, #17
 8001caa:	f200 81b1 	bhi.w	8002010 <decodeOn_USB+0x3a0>
 8001cae:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb4 <decodeOn_USB+0x44>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001d1f 	.word	0x08001d1f
 8001cb8:	08001d95 	.word	0x08001d95
 8001cbc:	08001def 	.word	0x08001def
 8001cc0:	08001e7b 	.word	0x08001e7b
 8001cc4:	08001f19 	.word	0x08001f19
 8001cc8:	08002011 	.word	0x08002011
 8001ccc:	08002011 	.word	0x08002011
 8001cd0:	08002011 	.word	0x08002011
 8001cd4:	08002011 	.word	0x08002011
 8001cd8:	08002011 	.word	0x08002011
 8001cdc:	08002011 	.word	0x08002011
 8001ce0:	08002011 	.word	0x08002011
 8001ce4:	08002011 	.word	0x08002011
 8001ce8:	08002011 	.word	0x08002011
 8001cec:	08002011 	.word	0x08002011
 8001cf0:	08002011 	.word	0x08002011
 8001cf4:	08002011 	.word	0x08002011
 8001cf8:	08002023 	.word	0x08002023
 8001cfc:	2bde      	cmp	r3, #222	@ 0xde
 8001cfe:	f000 8192 	beq.w	8002026 <decodeOn_USB+0x3b6>
 8001d02:	e185      	b.n	8002010 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	220d      	movs	r2, #13
 8001d08:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001d12:	2301      	movs	r3, #1
 8001d14:	21f0      	movs	r1, #240	@ 0xf0
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fdea 	bl	80018f0 <comm_sendCMD>
		break;
 8001d1c:	e184      	b.n	8002028 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	3303      	adds	r3, #3
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d82a      	bhi.n	8001d86 <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	3303      	adds	r3, #3
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001d3e:	4aa8      	ldr	r2, [pc, #672]	@ (8001fe0 <decodeOn_USB+0x370>)
 8001d40:	3308      	adds	r3, #8
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	885a      	ldrh	r2, [r3, #2]
 8001d48:	4ba6      	ldr	r3, [pc, #664]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001d4a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	3303      	adds	r3, #3
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8001d60:	4ba0      	ldr	r3, [pc, #640]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8001d6a:	4b9e      	ldr	r3, [pc, #632]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001d6c:	785a      	ldrb	r2, [r3, #1]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	21a0      	movs	r1, #160	@ 0xa0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fdb6 	bl	80018f0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
		}
		break;
 8001d84:	e150      	b.n	8002028 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
 8001d86:	2306      	movs	r3, #6
 8001d88:	4a97      	ldr	r2, [pc, #604]	@ (8001fe8 <decodeOn_USB+0x378>)
 8001d8a:	21ee      	movs	r1, #238	@ 0xee
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fdaf 	bl	80018f0 <comm_sendCMD>
		break;
 8001d92:	e149      	b.n	8002028 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e01d      	b.n	8001dd6 <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4a90      	ldr	r2, [pc, #576]	@ (8001fe0 <decodeOn_USB+0x370>)
 8001d9e:	3308      	adds	r3, #8
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	885a      	ldrh	r2, [r3, #2]
 8001da6:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001da8:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4a8d      	ldr	r2, [pc, #564]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001db0:	7811      	ldrb	r1, [r2, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	460a      	mov	r2, r1
 8001db8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a88      	ldr	r2, [pc, #544]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001dc4:	7851      	ldrb	r1, [r2, #1]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	460a      	mov	r2, r1
 8001dcc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d9de      	bls.n	8001d9a <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001de2:	2311      	movs	r3, #17
 8001de4:	21a1      	movs	r1, #161	@ 0xa1
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fd82 	bl	80018f0 <comm_sendCMD>
		break;
 8001dec:	e11c      	b.n	8002028 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	3303      	adds	r3, #3
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d115      	bne.n	8001e2c <decodeOn_USB+0x1bc>
			Motor_Set_PER_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	785b      	ldrb	r3, [r3, #1]
 8001e04:	3304      	adds	r3, #4
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	4876      	ldr	r0, [pc, #472]	@ (8001fec <decodeOn_USB+0x37c>)
 8001e14:	f7ff fb5c 	bl	80014d0 <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 8001e18:	4b75      	ldr	r3, [pc, #468]	@ (8001ff0 <decodeOn_USB+0x380>)
 8001e1a:	220d      	movs	r2, #13
 8001e1c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8001e20:	2301      	movs	r3, #1
 8001e22:	4a74      	ldr	r2, [pc, #464]	@ (8001ff4 <decodeOn_USB+0x384>)
 8001e24:	21a2      	movs	r1, #162	@ 0xa2
 8001e26:	4872      	ldr	r0, [pc, #456]	@ (8001ff0 <decodeOn_USB+0x380>)
 8001e28:	f7ff fd62 	bl	80018f0 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	3303      	adds	r3, #3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d116      	bne.n	8001e6c <decodeOn_USB+0x1fc>
			Motor_Set_PER_Speed(&MotorR, RXBUF[RXCMD + 2]);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	3304      	adds	r3, #4
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4869      	ldr	r0, [pc, #420]	@ (8001ff8 <decodeOn_USB+0x388>)
 8001e52:	f7ff fb3d 	bl	80014d0 <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 8001e56:	4b66      	ldr	r3, [pc, #408]	@ (8001ff0 <decodeOn_USB+0x380>)
 8001e58:	220d      	movs	r2, #13
 8001e5a:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4a64      	ldr	r2, [pc, #400]	@ (8001ff4 <decodeOn_USB+0x384>)
 8001e62:	21a2      	movs	r1, #162	@ 0xa2
 8001e64:	4862      	ldr	r0, [pc, #392]	@ (8001ff0 <decodeOn_USB+0x380>)
 8001e66:	f7ff fd43 	bl	80018f0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8001e6a:	e0dd      	b.n	8002028 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	4a63      	ldr	r2, [pc, #396]	@ (8001ffc <decodeOn_USB+0x38c>)
 8001e70:	21ee      	movs	r1, #238	@ 0xee
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fd3c 	bl	80018f0 <comm_sendCMD>
		break;
 8001e78:	e0d6      	b.n	8002028 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	3303      	adds	r3, #3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11a      	bne.n	8001ec2 <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002000 <decodeOn_USB+0x390>)
 8001e8e:	891a      	ldrh	r2, [r3, #8]
 8001e90:	4b54      	ldr	r3, [pc, #336]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001e92:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8001e9c:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001ea8:	785a      	ldrb	r2, [r3, #1]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	21a3      	movs	r1, #163	@ 0xa3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fd18 	bl	80018f0 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8001ec0:	e0b2      	b.n	8002028 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d11a      	bne.n	8001f0a <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <decodeOn_USB+0x394>)
 8001ed6:	891a      	ldrh	r2, [r3, #8]
 8001ed8:	4b42      	ldr	r3, [pc, #264]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001eda:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8001eee:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001ef0:	785a      	ldrb	r2, [r3, #1]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001efe:	2303      	movs	r3, #3
 8001f00:	21a3      	movs	r1, #163	@ 0xa3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fcf4 	bl	80018f0 <comm_sendCMD>
		break;
 8001f08:	e08e      	b.n	8002028 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8002008 <decodeOn_USB+0x398>)
 8001f0e:	21ee      	movs	r1, #238	@ 0xee
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fced 	bl	80018f0 <comm_sendCMD>
		break;
 8001f16:	e087      	b.n	8002028 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 8001f18:	4b3c      	ldr	r3, [pc, #240]	@ (800200c <decodeOn_USB+0x39c>)
 8001f1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f1e:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f20:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8001f22:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f2e:	785a      	ldrb	r2, [r3, #1]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 8001f36:	4b35      	ldr	r3, [pc, #212]	@ (800200c <decodeOn_USB+0x39c>)
 8001f38:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f3c:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f3e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8001f40:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f4c:	785a      	ldrb	r2, [r3, #1]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <decodeOn_USB+0x39c>)
 8001f56:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f5a:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f5c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8001f68:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f6a:	785a      	ldrb	r2, [r3, #1]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8001f72:	4b26      	ldr	r3, [pc, #152]	@ (800200c <decodeOn_USB+0x39c>)
 8001f74:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f7a:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 8001f86:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f88:	785a      	ldrb	r2, [r3, #1]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <decodeOn_USB+0x39c>)
 8001f92:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f98:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001fa6:	785a      	ldrb	r2, [r3, #1]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <decodeOn_USB+0x39c>)
 8001fb0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001fb6:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <decodeOn_USB+0x374>)
 8001fc4:	785a      	ldrb	r2, [r3, #1]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	21a4      	movs	r1, #164	@ 0xa4
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fc8a 	bl	80018f0 <comm_sendCMD>
		break;
 8001fdc:	e024      	b.n	8002028 <decodeOn_USB+0x3b8>
 8001fde:	bf00      	nop
 8001fe0:	20000ed4 	.word	0x20000ed4
 8001fe4:	20000a28 	.word	0x20000a28
 8001fe8:	0800f3bc 	.word	0x0800f3bc
 8001fec:	20000a30 	.word	0x20000a30
 8001ff0:	20000ef8 	.word	0x20000ef8
 8001ff4:	20001108 	.word	0x20001108
 8001ff8:	20000a48 	.word	0x20000a48
 8001ffc:	0800f3c4 	.word	0x0800f3c4
 8002000:	20000a60 	.word	0x20000a60
 8002004:	20000a6c 	.word	0x20000a6c
 8002008:	0800f3d0 	.word	0x0800f3d0
 800200c:	20000a78 	.word	0x20000a78
	default:
		comm_sendCMD(data, SYSERROR, (uint8_t*)"NO CMD", 17);
 8002010:	2311      	movs	r3, #17
 8002012:	4a07      	ldr	r2, [pc, #28]	@ (8002030 <decodeOn_USB+0x3c0>)
 8002014:	21ee      	movs	r1, #238	@ 0xee
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fc6a 	bl	80018f0 <comm_sendCMD>
		break;
 800201c:	e004      	b.n	8002028 <decodeOn_USB+0x3b8>
		break;
 800201e:	bf00      	nop
 8002020:	e002      	b.n	8002028 <decodeOn_USB+0x3b8>
		break;
 8002022:	bf00      	nop
 8002024:	e000      	b.n	8002028 <decodeOn_USB+0x3b8>
		break;
 8002026:	bf00      	nop
	}
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	0800f3dc 	.word	0x0800f3dc

08002034 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]

}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <task_10ms>:

void task_10ms(){
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	is100ms1--;
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <task_10ms+0x88>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <task_10ms+0x88>)
 800205a:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <task_10ms+0x88>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d12e      	bne.n	80020c2 <task_10ms+0x76>
		is100ms1 = 10;
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <task_10ms+0x88>)
 8002066:	220a      	movs	r2, #10
 8002068:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800206a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800206e:	481a      	ldr	r0, [pc, #104]	@ (80020d8 <task_10ms+0x8c>)
 8002070:	f002 fe3d 	bl	8004cee <HAL_GPIO_TogglePin>

		OLED_Task();
 8002074:	f7ff fd18 	bl	8001aa8 <OLED_Task>

		Display_I2C_Refresh_Ready(TRUE);
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe ffa3 	bl	8000fc4 <Display_I2C_Refresh_Ready>

		is1s--;
 800207e:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <task_10ms+0x90>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	3b01      	subs	r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <task_10ms+0x90>)
 8002088:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 800208a:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <task_10ms+0x90>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d117      	bne.n	80020c2 <task_10ms+0x76>
			is1s = 10;
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <task_10ms+0x90>)
 8002094:	220a      	movs	r2, #10
 8002096:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 8002098:	4811      	ldr	r0, [pc, #68]	@ (80020e0 <task_10ms+0x94>)
 800209a:	f7ff f9e9 	bl	8001470 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 800209e:	4811      	ldr	r0, [pc, #68]	@ (80020e4 <task_10ms+0x98>)
 80020a0:	f7ff f9e6 	bl	8001470 <Encoder_1s_Elapsed>
			is30s--;
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <task_10ms+0x9c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <task_10ms+0x9c>)
 80020ae:	701a      	strb	r2, [r3, #0]
			if(!is30s){
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <task_10ms+0x9c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <task_10ms+0x76>
				is30s = 30;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <task_10ms+0x9c>)
 80020ba:	221e      	movs	r2, #30
 80020bc:	701a      	strb	r2, [r3, #0]
				BateryLevel_Task();
 80020be:	f7ff fd8b 	bl	8001bd8 <BateryLevel_Task>

			}
		}
	}

	Debouncer_Task();
 80020c2:	f7fe fb4f 	bl	8000764 <Debouncer_Task>
	IS10MS = FALSE;
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <task_10ms+0xa0>)
 80020c8:	7813      	ldrb	r3, [r2, #0]
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	7013      	strb	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000
 80020d8:	40020800 	.word	0x40020800
 80020dc:	20000001 	.word	0x20000001
 80020e0:	20000a60 	.word	0x20000a60
 80020e4:	20000a6c 	.word	0x20000a6c
 80020e8:	20000003 	.word	0x20000003
 80020ec:	20000a24 	.word	0x20000a24

080020f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f6:	f001 f9d5 	bl	80034a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 80020fa:	4b78      	ldr	r3, [pc, #480]	@ (80022dc <main+0x1ec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  Display.isInit = FALSE;
 8002102:	4b77      	ldr	r3, [pc, #476]	@ (80022e0 <main+0x1f0>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]

  Display.state = INIT;
 8002108:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <main+0x1f0>)
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002110:	f000 f92a 	bl	8002368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002114:	f000 fb92 	bl	800283c <MX_GPIO_Init>
  MX_DMA_Init();
 8002118:	f000 fb52 	bl	80027c0 <MX_DMA_Init>
  MX_ADC1_Init();
 800211c:	f000 f98e 	bl	800243c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002120:	f00c fb8a 	bl	800e838 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8002124:	f000 fa7a 	bl	800261c <MX_TIM1_Init>
  MX_I2C1_Init();
 8002128:	f000 fa4a 	bl	80025c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 800212c:	f000 fac6 	bl	80026bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 8002130:	4a6c      	ldr	r2, [pc, #432]	@ (80022e4 <main+0x1f4>)
 8002132:	496d      	ldr	r1, [pc, #436]	@ (80022e8 <main+0x1f8>)
 8002134:	486d      	ldr	r0, [pc, #436]	@ (80022ec <main+0x1fc>)
 8002136:	f7ff fa4b 	bl	80015d0 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 800213a:	486d      	ldr	r0, [pc, #436]	@ (80022f0 <main+0x200>)
 800213c:	f00c fcce 	bl	800eadc <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 8002140:	f7fe faa8 	bl	8000694 <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 8002144:	496b      	ldr	r1, [pc, #428]	@ (80022f4 <main+0x204>)
 8002146:	486c      	ldr	r0, [pc, #432]	@ (80022f8 <main+0x208>)
 8002148:	f7fe fad8 	bl	80006fc <Debounce_Add>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <main+0x20c>)
 8002152:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE TIMERS Y PWM*/
  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8002154:	486a      	ldr	r0, [pc, #424]	@ (8002300 <main+0x210>)
 8002156:	f008 f8ed 	bl	800a334 <HAL_TIM_Base_Start_IT>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <main+0x7c>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8002160:	2309      	movs	r3, #9
 8002162:	4a68      	ldr	r2, [pc, #416]	@ (8002304 <main+0x214>)
 8002164:	21ee      	movs	r1, #238	@ 0xee
 8002166:	4861      	ldr	r0, [pc, #388]	@ (80022ec <main+0x1fc>)
 8002168:	f7ff fbc2 	bl	80018f0 <comm_sendCMD>
  }
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 800216c:	4866      	ldr	r0, [pc, #408]	@ (8002308 <main+0x218>)
 800216e:	f008 f8e1 	bl	800a334 <HAL_TIM_Base_Start_IT>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <main+0x94>
  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002178:	230e      	movs	r3, #14
 800217a:	4a64      	ldr	r2, [pc, #400]	@ (800230c <main+0x21c>)
 800217c:	21ee      	movs	r1, #238	@ 0xee
 800217e:	485b      	ldr	r0, [pc, #364]	@ (80022ec <main+0x1fc>)
 8002180:	f7ff fbb6 	bl	80018f0 <comm_sendCMD>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002184:	2100      	movs	r1, #0
 8002186:	4860      	ldr	r0, [pc, #384]	@ (8002308 <main+0x218>)
 8002188:	f008 f990 	bl	800a4ac <HAL_TIM_PWM_Start>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <main+0xae>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002192:	230e      	movs	r3, #14
 8002194:	4a5e      	ldr	r2, [pc, #376]	@ (8002310 <main+0x220>)
 8002196:	21ee      	movs	r1, #238	@ 0xee
 8002198:	4854      	ldr	r0, [pc, #336]	@ (80022ec <main+0x1fc>)
 800219a:	f7ff fba9 	bl	80018f0 <comm_sendCMD>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 800219e:	2104      	movs	r1, #4
 80021a0:	4859      	ldr	r0, [pc, #356]	@ (8002308 <main+0x218>)
 80021a2:	f008 f983 	bl	800a4ac <HAL_TIM_PWM_Start>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <main+0xc8>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 80021ac:	230e      	movs	r3, #14
 80021ae:	4a59      	ldr	r2, [pc, #356]	@ (8002314 <main+0x224>)
 80021b0:	21ee      	movs	r1, #238	@ 0xee
 80021b2:	484e      	ldr	r0, [pc, #312]	@ (80022ec <main+0x1fc>)
 80021b4:	f7ff fb9c 	bl	80018f0 <comm_sendCMD>
  }
  /* FIN INICIALIZACIÓN DE TIMERS Y PWM*/

  /* INICIALIZACIÓN DE MPU6050 */
  if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 80021b8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80021bc:	2201      	movs	r2, #1
 80021be:	21d0      	movs	r1, #208	@ 0xd0
 80021c0:	4855      	ldr	r0, [pc, #340]	@ (8002318 <main+0x228>)
 80021c2:	f003 fe39 	bl	8005e38 <HAL_I2C_IsDeviceReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <main+0xea>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 80021cc:	230d      	movs	r3, #13
 80021ce:	4a53      	ldr	r2, [pc, #332]	@ (800231c <main+0x22c>)
 80021d0:	21ee      	movs	r1, #238	@ 0xee
 80021d2:	4846      	ldr	r0, [pc, #280]	@ (80022ec <main+0x1fc>)
 80021d4:	f7ff fb8c 	bl	80018f0 <comm_sendCMD>
 80021d8:	e013      	b.n	8002202 <main+0x112>
  }else{
	  MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 80021da:	4951      	ldr	r1, [pc, #324]	@ (8002320 <main+0x230>)
 80021dc:	4851      	ldr	r0, [pc, #324]	@ (8002324 <main+0x234>)
 80021de:	f7fe faf3 	bl	80007c8 <MPU6050_Set_I2C_Communication>
	  if(MPU6050_Init(&MPU6050) != SYS_OK){
 80021e2:	483e      	ldr	r0, [pc, #248]	@ (80022dc <main+0x1ec>)
 80021e4:	f7fe fb06 	bl	80007f4 <MPU6050_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <main+0x10c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 80021ee:	230c      	movs	r3, #12
 80021f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002328 <main+0x238>)
 80021f2:	21ee      	movs	r1, #238	@ 0xee
 80021f4:	483d      	ldr	r0, [pc, #244]	@ (80022ec <main+0x1fc>)
 80021f6:	f7ff fb7b 	bl	80018f0 <comm_sendCMD>
 80021fa:	e002      	b.n	8002202 <main+0x112>
	  }else{
		  MPU6050_Calibrate(&MPU6050);
 80021fc:	4837      	ldr	r0, [pc, #220]	@ (80022dc <main+0x1ec>)
 80021fe:	f7fe fb9b 	bl	8000938 <MPU6050_Calibrate>
	  }
  }
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8002202:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002206:	2201      	movs	r2, #1
 8002208:	2178      	movs	r1, #120	@ 0x78
 800220a:	4843      	ldr	r0, [pc, #268]	@ (8002318 <main+0x228>)
 800220c:	f003 fe14 	bl	8005e38 <HAL_I2C_IsDeviceReady>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <main+0x134>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"I2C READY", 9);
 8002216:	2309      	movs	r3, #9
 8002218:	4a44      	ldr	r2, [pc, #272]	@ (800232c <main+0x23c>)
 800221a:	21ee      	movs	r1, #238	@ 0xee
 800221c:	4833      	ldr	r0, [pc, #204]	@ (80022ec <main+0x1fc>)
 800221e:	f7ff fb67 	bl	80018f0 <comm_sendCMD>
 8002222:	e01c      	b.n	800225e <main+0x16e>
  }else{
	  Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002224:	4942      	ldr	r1, [pc, #264]	@ (8002330 <main+0x240>)
 8002226:	4843      	ldr	r0, [pc, #268]	@ (8002334 <main+0x244>)
 8002228:	f7fe fcc4 	bl	8000bb4 <Display_Set_I2C_Master_Transmit>
	  if(Display_Init() != SYS_OK){
 800222c:	f7fe fcd8 	bl	8000be0 <Display_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <main+0x154>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002236:	2309      	movs	r3, #9
 8002238:	4a3f      	ldr	r2, [pc, #252]	@ (8002338 <main+0x248>)
 800223a:	21ee      	movs	r1, #238	@ 0xee
 800223c:	482b      	ldr	r0, [pc, #172]	@ (80022ec <main+0x1fc>)
 800223e:	f7ff fb57 	bl	80018f0 <comm_sendCMD>
 8002242:	e00c      	b.n	800225e <main+0x16e>
	  }else{
		  Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002244:	2301      	movs	r3, #1
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2340      	movs	r3, #64	@ 0x40
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	4a3b      	ldr	r2, [pc, #236]	@ (800233c <main+0x24c>)
 8002250:	2100      	movs	r1, #0
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe ff4a 	bl	80010ec <Display_DrawBitmap>
		  Display.isInit = TRUE;
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <main+0x1f0>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
  }
  /* FIN INICIALIZACIÓN DISPLAY */


  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <main+0x218>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	b29b      	uxth	r3, r3
 8002266:	4a36      	ldr	r2, [pc, #216]	@ (8002340 <main+0x250>)
 8002268:	4936      	ldr	r1, [pc, #216]	@ (8002344 <main+0x254>)
 800226a:	4837      	ldr	r0, [pc, #220]	@ (8002348 <main+0x258>)
 800226c:	f7ff f911 	bl	8001492 <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <main+0x218>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	b29b      	uxth	r3, r3
 8002278:	4a34      	ldr	r2, [pc, #208]	@ (800234c <main+0x25c>)
 800227a:	4935      	ldr	r1, [pc, #212]	@ (8002350 <main+0x260>)
 800227c:	4835      	ldr	r0, [pc, #212]	@ (8002354 <main+0x264>)
 800227e:	f7ff f908 	bl	8001492 <Motor_Init>

  Encoder_Init(&EncoderL, 10);
 8002282:	210a      	movs	r1, #10
 8002284:	4834      	ldr	r0, [pc, #208]	@ (8002358 <main+0x268>)
 8002286:	f7ff f894 	bl	80013b2 <Encoder_Init>
  Encoder_Init(&EncoderR, 10);
 800228a:	210a      	movs	r1, #10
 800228c:	4833      	ldr	r0, [pc, #204]	@ (800235c <main+0x26c>)
 800228e:	f7ff f890 	bl	80013b2 <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  Car.state = IDLE;
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <main+0x270>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
  Display.timer = HAL_GetTick();
 8002298:	f001 f96a 	bl	8003570 <HAL_GetTick>
 800229c:	4603      	mov	r3, r0
 800229e:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <main+0x1f0>)
 80022a0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 80022a4:	4811      	ldr	r0, [pc, #68]	@ (80022ec <main+0x1fc>)
 80022a6:	f7ff f9c7 	bl	8001638 <Comm_Task>
	Display_UpdateScreen_Task();
 80022aa:	f7fe fe0f 	bl	8000ecc <Display_UpdateScreen_Task>
	  /* END USER TASK */

	if(IS10MS)
 80022ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <main+0x274>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <main+0x1d0>
		task_10ms();
 80022bc:	f7ff fec6 	bl	800204c <task_10ms>

	switch(Car.state){
 80022c0:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <main+0x270>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d005      	beq.n	80022d4 <main+0x1e4>
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	dceb      	bgt.n	80022a4 <main+0x1b4>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <main+0x1e8>
 80022d0:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 80022d2:	e002      	b.n	80022da <main+0x1ea>
	case GO_FROM_TO:

		break;
 80022d4:	bf00      	nop
 80022d6:	e7e5      	b.n	80022a4 <main+0x1b4>
		break;
 80022d8:	bf00      	nop
	Comm_Task(&USB.data);
 80022da:	e7e3      	b.n	80022a4 <main+0x1b4>
 80022dc:	20000a78 	.word	0x20000a78
 80022e0:	20000ac0 	.word	0x20000ac0
 80022e4:	08002c71 	.word	0x08002c71
 80022e8:	08001c71 	.word	0x08001c71
 80022ec:	20000ef8 	.word	0x20000ef8
 80022f0:	08002ce5 	.word	0x08002ce5
 80022f4:	08002035 	.word	0x08002035
 80022f8:	08002c59 	.word	0x08002c59
 80022fc:	20000a2c 	.word	0x20000a2c
 8002300:	20000990 	.word	0x20000990
 8002304:	0800f3e4 	.word	0x0800f3e4
 8002308:	200009d8 	.word	0x200009d8
 800230c:	0800f3f0 	.word	0x0800f3f0
 8002310:	0800f400 	.word	0x0800f400
 8002314:	0800f410 	.word	0x0800f410
 8002318:	2000087c 	.word	0x2000087c
 800231c:	0800f420 	.word	0x0800f420
 8002320:	08002c19 	.word	0x08002c19
 8002324:	08002bd9 	.word	0x08002bd9
 8002328:	0800f430 	.word	0x0800f430
 800232c:	0800f440 	.word	0x0800f440
 8002330:	08002ba5 	.word	0x08002ba5
 8002334:	08002b69 	.word	0x08002b69
 8002338:	0800f44c 	.word	0x0800f44c
 800233c:	0800f4a0 	.word	0x0800f4a0
 8002340:	08002d3d 	.word	0x08002d3d
 8002344:	08002e81 	.word	0x08002e81
 8002348:	20000a30 	.word	0x20000a30
 800234c:	08002de1 	.word	0x08002de1
 8002350:	08002ea5 	.word	0x08002ea5
 8002354:	20000a48 	.word	0x20000a48
 8002358:	20000a60 	.word	0x20000a60
 800235c:	20000a6c 	.word	0x20000a6c
 8002360:	2000112c 	.word	0x2000112c
 8002364:	20000a24 	.word	0x20000a24

08002368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b094      	sub	sp, #80	@ 0x50
 800236c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236e:	f107 0320 	add.w	r3, r7, #32
 8002372:	2230      	movs	r2, #48	@ 0x30
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f00c ffda 	bl	800f330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <SystemClock_Config+0xcc>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	4a27      	ldr	r2, [pc, #156]	@ (8002434 <SystemClock_Config+0xcc>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	@ 0x40
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <SystemClock_Config+0xcc>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <SystemClock_Config+0xd0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <SystemClock_Config+0xd0>)
 80023b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <SystemClock_Config+0xd0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ce:	2302      	movs	r3, #2
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023d8:	2319      	movs	r3, #25
 80023da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80023dc:	23c0      	movs	r3, #192	@ 0xc0
 80023de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e0:	2302      	movs	r3, #2
 80023e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023e4:	2304      	movs	r3, #4
 80023e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e8:	f107 0320 	add.w	r3, r7, #32
 80023ec:	4618      	mov	r0, r3
 80023ee:	f007 fae7 	bl	80099c0 <HAL_RCC_OscConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023f8:	f000 fd66 	bl	8002ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fc:	230f      	movs	r3, #15
 80023fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800240c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	2103      	movs	r1, #3
 8002418:	4618      	mov	r0, r3
 800241a:	f007 fd49 	bl	8009eb0 <HAL_RCC_ClockConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002424:	f000 fd50 	bl	8002ec8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002428:	f007 fe28 	bl	800a07c <HAL_RCC_EnableCSS>
}
 800242c:	bf00      	nop
 800242e:	3750      	adds	r7, #80	@ 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000

0800243c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002442:	463b      	mov	r3, r7
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800244e:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002450:	4a59      	ldr	r2, [pc, #356]	@ (80025b8 <MX_ADC1_Init+0x17c>)
 8002452:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002454:	4b57      	ldr	r3, [pc, #348]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002456:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800245a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800245c:	4b55      	ldr	r3, [pc, #340]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002462:	4b54      	ldr	r3, [pc, #336]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002464:	2201      	movs	r2, #1
 8002466:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002468:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800246a:	2200      	movs	r2, #0
 800246c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800246e:	4b51      	ldr	r3, [pc, #324]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002476:	4b4f      	ldr	r3, [pc, #316]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002478:	2200      	movs	r2, #0
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800247c:	4b4d      	ldr	r3, [pc, #308]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800247e:	4a4f      	ldr	r2, [pc, #316]	@ (80025bc <MX_ADC1_Init+0x180>)
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002482:	4b4c      	ldr	r3, [pc, #304]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8002488:	4b4a      	ldr	r3, [pc, #296]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800248a:	2209      	movs	r2, #9
 800248c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800248e:	4b49      	ldr	r3, [pc, #292]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002498:	2201      	movs	r2, #1
 800249a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800249c:	4845      	ldr	r0, [pc, #276]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800249e:	f001 f897 	bl	80035d0 <HAL_ADC_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80024a8:	f000 fd0e 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80024b4:	2303      	movs	r3, #3
 80024b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	4619      	mov	r1, r3
 80024bc:	483d      	ldr	r0, [pc, #244]	@ (80025b4 <MX_ADC1_Init+0x178>)
 80024be:	f001 fae9 	bl	8003a94 <HAL_ADC_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024c8:	f000 fcfe 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024cc:	2302      	movs	r3, #2
 80024ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024d0:	2302      	movs	r3, #2
 80024d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d4:	463b      	mov	r3, r7
 80024d6:	4619      	mov	r1, r3
 80024d8:	4836      	ldr	r0, [pc, #216]	@ (80025b4 <MX_ADC1_Init+0x178>)
 80024da:	f001 fadb 	bl	8003a94 <HAL_ADC_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80024e4:	f000 fcf0 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80024e8:	2303      	movs	r3, #3
 80024ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80024ec:	2303      	movs	r3, #3
 80024ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f0:	463b      	mov	r3, r7
 80024f2:	4619      	mov	r1, r3
 80024f4:	482f      	ldr	r0, [pc, #188]	@ (80025b4 <MX_ADC1_Init+0x178>)
 80024f6:	f001 facd 	bl	8003a94 <HAL_ADC_ConfigChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002500:	f000 fce2 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002504:	2304      	movs	r3, #4
 8002506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002508:	2304      	movs	r3, #4
 800250a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	4619      	mov	r1, r3
 8002510:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002512:	f001 fabf 	bl	8003a94 <HAL_ADC_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800251c:	f000 fcd4 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002520:	2305      	movs	r3, #5
 8002522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002524:	2305      	movs	r3, #5
 8002526:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4619      	mov	r1, r3
 800252c:	4821      	ldr	r0, [pc, #132]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800252e:	f001 fab1 	bl	8003a94 <HAL_ADC_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002538:	f000 fcc6 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800253c:	2306      	movs	r3, #6
 800253e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002540:	2306      	movs	r3, #6
 8002542:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002544:	463b      	mov	r3, r7
 8002546:	4619      	mov	r1, r3
 8002548:	481a      	ldr	r0, [pc, #104]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800254a:	f001 faa3 	bl	8003a94 <HAL_ADC_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002554:	f000 fcb8 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002558:	2307      	movs	r3, #7
 800255a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800255c:	2307      	movs	r3, #7
 800255e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002560:	463b      	mov	r3, r7
 8002562:	4619      	mov	r1, r3
 8002564:	4813      	ldr	r0, [pc, #76]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002566:	f001 fa95 	bl	8003a94 <HAL_ADC_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002570:	f000 fcaa 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002574:	2308      	movs	r3, #8
 8002576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002578:	2308      	movs	r3, #8
 800257a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <MX_ADC1_Init+0x178>)
 8002582:	f001 fa87 	bl	8003a94 <HAL_ADC_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800258c:	f000 fc9c 	bl	8002ec8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002590:	2309      	movs	r3, #9
 8002592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002594:	2309      	movs	r3, #9
 8002596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_ADC1_Init+0x178>)
 800259e:	f001 fa79 	bl	8003a94 <HAL_ADC_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80025a8:	f000 fc8e 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200007d4 	.word	0x200007d4
 80025b8:	40012000 	.word	0x40012000
 80025bc:	0f000001 	.word	0x0f000001

080025c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025c6:	4a13      	ldr	r2, [pc, #76]	@ (8002614 <MX_I2C1_Init+0x54>)
 80025c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025cc:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <MX_I2C1_Init+0x58>)
 80025ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f0:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025fc:	4804      	ldr	r0, [pc, #16]	@ (8002610 <MX_I2C1_Init+0x50>)
 80025fe:	f002 fba9 	bl	8004d54 <HAL_I2C_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002608:	f000 fc5e 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000087c 	.word	0x2000087c
 8002614:	40005400 	.word	0x40005400
 8002618:	00061a80 	.word	0x00061a80

0800261c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <MX_TIM1_Init+0x98>)
 800263a:	4a1f      	ldr	r2, [pc, #124]	@ (80026b8 <MX_TIM1_Init+0x9c>)
 800263c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800263e:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <MX_TIM1_Init+0x98>)
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <MX_TIM1_Init+0x98>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 800264a:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <MX_TIM1_Init+0x98>)
 800264c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <MX_TIM1_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002658:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <MX_TIM1_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <MX_TIM1_Init+0x98>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002664:	4813      	ldr	r0, [pc, #76]	@ (80026b4 <MX_TIM1_Init+0x98>)
 8002666:	f007 fe16 	bl	800a296 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002670:	f000 fc2a 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	@ (80026b4 <MX_TIM1_Init+0x98>)
 8002682:	f008 f975 	bl	800a970 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800268c:	f000 fc1c 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <MX_TIM1_Init+0x98>)
 800269e:	f008 fd2f 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026a8:	f000 fc0e 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000990 	.word	0x20000990
 80026b8:	40010000 	.word	0x40010000

080026bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	@ 0x38
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026ec:	4b32      	ldr	r3, [pc, #200]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 80026ee:	4a33      	ldr	r2, [pc, #204]	@ (80027bc <MX_TIM3_Init+0x100>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80026f2:	4b31      	ldr	r3, [pc, #196]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 80026f4:	220f      	movs	r2, #15
 80026f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80026fe:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 8002700:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002712:	4829      	ldr	r0, [pc, #164]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 8002714:	f007 fdbf 	bl	800a296 <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800271e:	f000 fbd3 	bl	8002ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800272c:	4619      	mov	r1, r3
 800272e:	4822      	ldr	r0, [pc, #136]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 8002730:	f008 f91e 	bl	800a970 <HAL_TIM_ConfigClockSource>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800273a:	f000 fbc5 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800273e:	481e      	ldr	r0, [pc, #120]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 8002740:	f007 fe5a 	bl	800a3f8 <HAL_TIM_PWM_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800274a:	f000 fbbd 	bl	8002ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002756:	f107 0320 	add.w	r3, r7, #32
 800275a:	4619      	mov	r1, r3
 800275c:	4816      	ldr	r0, [pc, #88]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 800275e:	f008 fccf 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002768:	f000 fbae 	bl	8002ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276c:	2360      	movs	r3, #96	@ 0x60
 800276e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	4619      	mov	r1, r3
 8002782:	480d      	ldr	r0, [pc, #52]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 8002784:	f008 f832 	bl	800a7ec <HAL_TIM_PWM_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800278e:	f000 fb9b 	bl	8002ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	2204      	movs	r2, #4
 8002796:	4619      	mov	r1, r3
 8002798:	4807      	ldr	r0, [pc, #28]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 800279a:	f008 f827 	bl	800a7ec <HAL_TIM_PWM_ConfigChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80027a4:	f000 fb90 	bl	8002ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027a8:	4803      	ldr	r0, [pc, #12]	@ (80027b8 <MX_TIM3_Init+0xfc>)
 80027aa:	f000 fd61 	bl	8003270 <HAL_TIM_MspPostInit>

}
 80027ae:	bf00      	nop
 80027b0:	3738      	adds	r7, #56	@ 0x38
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200009d8 	.word	0x200009d8
 80027bc:	40000400 	.word	0x40000400

080027c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <MX_DMA_Init+0x78>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002838 <MX_DMA_Init+0x78>)
 80027d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <MX_DMA_Init+0x78>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <MX_DMA_Init+0x78>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a13      	ldr	r2, [pc, #76]	@ (8002838 <MX_DMA_Init+0x78>)
 80027ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_DMA_Init+0x78>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	200b      	movs	r0, #11
 8002804:	f001 fcdb 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002808:	200b      	movs	r0, #11
 800280a:	f001 fcf4 	bl	80041f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	200c      	movs	r0, #12
 8002814:	f001 fcd3 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002818:	200c      	movs	r0, #12
 800281a:	f001 fcec 	bl	80041f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2038      	movs	r0, #56	@ 0x38
 8002824:	f001 fccb 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002828:	2038      	movs	r0, #56	@ 0x38
 800282a:	f001 fce4 	bl	80041f6 <HAL_NVIC_EnableIRQ>

}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b6e      	ldr	r3, [pc, #440]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b6b      	ldr	r3, [pc, #428]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b67      	ldr	r3, [pc, #412]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a66      	ldr	r2, [pc, #408]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b64      	ldr	r3, [pc, #400]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	4a5f      	ldr	r2, [pc, #380]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	@ 0x30
 800289a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	4b59      	ldr	r3, [pc, #356]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a58      	ldr	r2, [pc, #352]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b56      	ldr	r3, [pc, #344]	@ (8002a10 <MX_GPIO_Init+0x1d4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028c8:	4852      	ldr	r0, [pc, #328]	@ (8002a14 <MX_GPIO_Init+0x1d8>)
 80028ca:	f002 f9f7 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 80028d4:	4850      	ldr	r0, [pc, #320]	@ (8002a18 <MX_GPIO_Init+0x1dc>)
 80028d6:	f002 f9f1 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2108      	movs	r1, #8
 80028de:	484f      	ldr	r0, [pc, #316]	@ (8002a1c <MX_GPIO_Init+0x1e0>)
 80028e0:	f002 f9ec 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80028e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4845      	ldr	r0, [pc, #276]	@ (8002a14 <MX_GPIO_Init+0x1d8>)
 80028fe:	f002 f841 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002902:	2301      	movs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	4840      	ldr	r0, [pc, #256]	@ (8002a18 <MX_GPIO_Init+0x1dc>)
 8002916:	f002 f835 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 800291a:	2304      	movs	r3, #4
 800291c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	483b      	ldr	r0, [pc, #236]	@ (8002a1c <MX_GPIO_Init+0x1e0>)
 800292e:	f002 f829 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002938:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800293c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	4834      	ldr	r0, [pc, #208]	@ (8002a1c <MX_GPIO_Init+0x1e0>)
 800294a:	f002 f81b 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800294e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002960:	2305      	movs	r3, #5
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	482c      	ldr	r0, [pc, #176]	@ (8002a1c <MX_GPIO_Init+0x1e0>)
 800296c:	f002 f80a 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002976:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800297a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4619      	mov	r1, r3
 8002986:	4824      	ldr	r0, [pc, #144]	@ (8002a18 <MX_GPIO_Init+0x1dc>)
 8002988:	f001 fffc 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 800298c:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002992:	2301      	movs	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	481c      	ldr	r0, [pc, #112]	@ (8002a18 <MX_GPIO_Init+0x1dc>)
 80029a6:	f001 ffed 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 80029aa:	2308      	movs	r3, #8
 80029ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4816      	ldr	r0, [pc, #88]	@ (8002a1c <MX_GPIO_Init+0x1e0>)
 80029c2:	f001 ffdf 	bl	8004984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RX_Pin ESP_TX_Pin */
  GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 80029c6:	23c0      	movs	r3, #192	@ 0xc0
 80029c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d6:	2307      	movs	r3, #7
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	480e      	ldr	r0, [pc, #56]	@ (8002a1c <MX_GPIO_Init+0x1e0>)
 80029e2:	f001 ffcf 	bl	8004984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	2017      	movs	r0, #23
 80029ec:	f001 fbe7 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029f0:	2017      	movs	r0, #23
 80029f2:	f001 fc00 	bl	80041f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2028      	movs	r0, #40	@ 0x28
 80029fc:	f001 fbdf 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a00:	2028      	movs	r0, #40	@ 0x28
 8002a02:	f001 fbf8 	bl	80041f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a06:	bf00      	nop
 8002a08:	3728      	adds	r7, #40	@ 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40020400 	.word	0x40020400

08002a20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* HAL CALLBACKS */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a20      	ldr	r2, [pc, #128]	@ (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d123      	bne.n	8002a7a <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8002a32:	2209      	movs	r2, #9
 8002a34:	491f      	ldr	r1, [pc, #124]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a36:	4820      	ldr	r0, [pc, #128]	@ (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002a38:	f000 ff1e 	bl	8003878 <HAL_ADC_Start_DMA>
		is5ms--;
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a46:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8002a48:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d114      	bne.n	8002a7a <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a52:	2214      	movs	r2, #20
 8002a54:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14);
 8002a60:	230e      	movs	r3, #14
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	223b      	movs	r2, #59	@ 0x3b
 8002a6c:	21d0      	movs	r1, #208	@ 0xd0
 8002a6e:	4816      	ldr	r0, [pc, #88]	@ (8002ac8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a70:	f003 f852 	bl	8005b18 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe fa95 	bl	8000fa4 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a13      	ldr	r2, [pc, #76]	@ (8002acc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d110      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x86>
		IS10MS = TRUE;
 8002a84:	4a12      	ldr	r2, [pc, #72]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a86:	7813      	ldrb	r3, [r2, #0]
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	7013      	strb	r3, [r2, #0]
		Motor_Break_Timeout(&MotorL);
 8002a8e:	4811      	ldr	r0, [pc, #68]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a90:	f7fe fd83 	bl	800159a <Motor_Break_Timeout>
		Motor_Break_Timeout(&MotorR);
 8002a94:	4810      	ldr	r0, [pc, #64]	@ (8002ad8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002a96:	f7fe fd80 	bl	800159a <Motor_Break_Timeout>
		Encoder_Task(&EncoderL);
 8002a9a:	4810      	ldr	r0, [pc, #64]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002a9c:	f7fe fca8 	bl	80013f0 <Encoder_Task>
		Encoder_Task(&EncoderR);
 8002aa0:	480f      	ldr	r0, [pc, #60]	@ (8002ae0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002aa2:	f7fe fca5 	bl	80013f0 <Encoder_Task>
	}
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	20000ed4 	.word	0x20000ed4
 8002ab8:	200007d4 	.word	0x200007d4
 8002abc:	20000002 	.word	0x20000002
 8002ac0:	20000a78 	.word	0x20000a78
 8002ac4:	20000aae 	.word	0x20000aae
 8002ac8:	2000087c 	.word	0x2000087c
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	20000a24 	.word	0x20000a24
 8002ad4:	20000a30 	.word	0x20000a30
 8002ad8:	20000a48 	.word	0x20000a48
 8002adc:	20000a60 	.word	0x20000a60
 8002ae0:	20000a6c 	.word	0x20000a6c

08002ae4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	2bd0      	cmp	r3, #208	@ 0xd0
 8002af2:	d102      	bne.n	8002afa <HAL_I2C_MemRxCpltCallback+0x16>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <HAL_I2C_MemRxCpltCallback+0x28>)
 8002af6:	f7fd ffcf 	bl	8000a98 <MPU6050_I2C_DMA_Cplt>
	}
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44

	}
	Display_I2C_DMA_Ready(TRUE);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f7fe fa50 	bl	8000fa4 <Display_I2C_DMA_Ready>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000a78 	.word	0x20000a78

08002b10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8002b18:	4903      	ldr	r1, [pc, #12]	@ (8002b28 <HAL_ADC_ConvCpltCallback+0x18>)
 8002b1a:	4804      	ldr	r0, [pc, #16]	@ (8002b2c <HAL_ADC_ConvCpltCallback+0x1c>)
 8002b1c:	f7fd fcf2 	bl	8000504 <ADC_Conversion_Cplt>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000ee6 	.word	0x20000ee6
 8002b2c:	20000ed4 	.word	0x20000ed4

08002b30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b40:	d102      	bne.n	8002b48 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8002b42:	4807      	ldr	r0, [pc, #28]	@ (8002b60 <HAL_GPIO_EXTI_Callback+0x30>)
 8002b44:	f7fe fc84 	bl	8001450 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4e:	d102      	bne.n	8002b56 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <HAL_GPIO_EXTI_Callback+0x34>)
 8002b52:	f7fe fc7d 	bl	8001450 <Encoder_Add_Pulse>
	}
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000a60 	.word	0x20000a60
 8002b64:	20000a6c 	.word	0x20000a6c

08002b68 <I2C_1_Abstract_Mem_DMA_Transmit>:
/* FIN HAL CALLBACKS */

e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60ba      	str	r2, [r7, #8]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	81fb      	strh	r3, [r7, #14]
 8002b76:	460b      	mov	r3, r1
 8002b78:	737b      	strb	r3, [r7, #13]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8002b7e:	7b7b      	ldrb	r3, [r7, #13]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	89f9      	ldrh	r1, [r7, #14]
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4804      	ldr	r0, [pc, #16]	@ (8002ba0 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 8002b90:	f002 fe64 	bl	800585c <HAL_I2C_Mem_Write_DMA>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000087c 	.word	0x2000087c

08002ba4 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	4603      	mov	r3, r0
 8002bb0:	81fb      	strh	r3, [r7, #14]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8002bb6:	89ba      	ldrh	r2, [r7, #12]
 8002bb8:	89f9      	ldrh	r1, [r7, #14]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8002bc4:	f002 fa20 	bl	8005008 <HAL_I2C_Master_Transmit>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000087c 	.word	0x2000087c

08002bd8 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af04      	add	r7, sp, #16
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	80fb      	strh	r3, [r7, #6]
 8002be4:	460b      	mov	r3, r1
 8002be6:	717b      	strb	r3, [r7, #5]
 8002be8:	4613      	mov	r3, r2
 8002bea:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8002bec:	797b      	ldrb	r3, [r7, #5]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	793b      	ldrb	r3, [r7, #4]
 8002bf2:	b298      	uxth	r0, r3
 8002bf4:	88f9      	ldrh	r1, [r7, #6]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	8a3b      	ldrh	r3, [r7, #16]
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4603      	mov	r3, r0
 8002c04:	4803      	ldr	r0, [pc, #12]	@ (8002c14 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 8002c06:	f002 fafd 	bl	8005204 <HAL_I2C_Mem_Write>
 8002c0a:	4603      	mov	r3, r0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000087c 	.word	0x2000087c

08002c18 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af04      	add	r7, sp, #16
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4603      	mov	r3, r0
 8002c22:	80fb      	strh	r3, [r7, #6]
 8002c24:	460b      	mov	r3, r1
 8002c26:	717b      	strb	r3, [r7, #5]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8002c2c:	797b      	ldrb	r3, [r7, #5]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	793b      	ldrb	r3, [r7, #4]
 8002c32:	b298      	uxth	r0, r3
 8002c34:	88f9      	ldrh	r1, [r7, #6]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	9302      	str	r3, [sp, #8]
 8002c3a:	8a3b      	ldrh	r3, [r7, #16]
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4603      	mov	r3, r0
 8002c44:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 8002c46:	f002 fbd7 	bl	80053f8 <HAL_I2C_Mem_Read>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000087c 	.word	0x2000087c

08002c58 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <KEY_Read_Value+0x14>)
 8002c60:	f002 f814 	bl	8004c8c <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40020000 	.word	0x40020000

08002c70 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8002c78:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <writeOn_USB+0x70>)
 8002c7a:	78da      	ldrb	r2, [r3, #3]
 8002c7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <writeOn_USB+0x70>)
 8002c7e:	789b      	ldrb	r3, [r3, #2]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d909      	bls.n	8002c98 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 8002c84:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <writeOn_USB+0x70>)
 8002c86:	78da      	ldrb	r2, [r3, #3]
 8002c88:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <writeOn_USB+0x70>)
 8002c8a:	789b      	ldrb	r3, [r3, #2]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <writeOn_USB+0x70>)
 8002c92:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 8002c96:	e006      	b.n	8002ca6 <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <writeOn_USB+0x70>)
 8002c9a:	789b      	ldrb	r3, [r3, #2]
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <writeOn_USB+0x70>)
 8002ca2:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <writeOn_USB+0x70>)
 8002ca8:	789b      	ldrb	r3, [r3, #2]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <writeOn_USB+0x70>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce0 <writeOn_USB+0x70>)
 8002cb4:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f00b fed6 	bl	800ea6c <CDC_Transmit_FS>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <writeOn_USB+0x70>)
 8002cc8:	789a      	ldrb	r2, [r3, #2]
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <writeOn_USB+0x70>)
 8002ccc:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b02      	ldr	r3, [pc, #8]	@ (8002ce0 <writeOn_USB+0x70>)
 8002cd6:	709a      	strb	r2, [r3, #2]
	}
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000ef8 	.word	0x20000ef8

08002ce4 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01a      	beq.n	8002d2a <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	81fb      	strh	r3, [r7, #14]
 8002cf8:	e013      	b.n	8002d22 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	441a      	add	r2, r3
 8002d00:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <dataRxOn_USB+0x54>)
 8002d02:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002d06:	1c59      	adds	r1, r3, #1
 8002d08:	b2c8      	uxtb	r0, r1
 8002d0a:	490b      	ldr	r1, [pc, #44]	@ (8002d38 <dataRxOn_USB+0x54>)
 8002d0c:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8002d10:	4619      	mov	r1, r3
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <dataRxOn_USB+0x54>)
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	81fb      	strh	r3, [r7, #14]
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d8e7      	bhi.n	8002cfa <dataRxOn_USB+0x16>
		}
	}
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000ef8 	.word	0x20000ef8

08002d3c <Motor_Left_SetPins>:

void Motor_Left_SetPins(e_direction direction){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d842      	bhi.n	8002dd2 <Motor_Left_SetPins+0x96>
 8002d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d54 <Motor_Left_SetPins+0x18>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002dd1 	.word	0x08002dd1
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d83 	.word	0x08002d83
 8002d60:	08002d9d 	.word	0x08002d9d
 8002d64:	08002db7 	.word	0x08002db7
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d6e:	481b      	ldr	r0, [pc, #108]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002d70:	f001 ffa4 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d7a:	4818      	ldr	r0, [pc, #96]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002d7c:	f001 ff9e 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002d80:	e027      	b.n	8002dd2 <Motor_Left_SetPins+0x96>
	case FORWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 8002d82:	2201      	movs	r2, #1
 8002d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d88:	4814      	ldr	r0, [pc, #80]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002d8a:	f001 ff97 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d94:	4811      	ldr	r0, [pc, #68]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002d96:	f001 ff91 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002d9a:	e01a      	b.n	8002dd2 <Motor_Left_SetPins+0x96>
	case BACKWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002da2:	480e      	ldr	r0, [pc, #56]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002da4:	f001 ff8a 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8002da8:	2201      	movs	r2, #1
 8002daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dae:	480b      	ldr	r0, [pc, #44]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002db0:	f001 ff84 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002db4:	e00d      	b.n	8002dd2 <Motor_Left_SetPins+0x96>
	case BRAKE:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 8002db6:	2201      	movs	r2, #1
 8002db8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dbc:	4807      	ldr	r0, [pc, #28]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002dbe:	f001 ff7d 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <Motor_Left_SetPins+0xa0>)
 8002dca:	f001 ff77 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002dce:	e000      	b.n	8002dd2 <Motor_Left_SetPins+0x96>
		break;
 8002dd0:	bf00      	nop
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020000 	.word	0x40020000

08002de0 <Motor_Right_SetPins>:

void Motor_Right_SetPins(e_direction direction){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d83f      	bhi.n	8002e70 <Motor_Right_SetPins+0x90>
 8002df0:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <Motor_Right_SetPins+0x18>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e6f 	.word	0x08002e6f
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e3d 	.word	0x08002e3d
 8002e08:	08002e57 	.word	0x08002e57
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e12:	4819      	ldr	r0, [pc, #100]	@ (8002e78 <Motor_Right_SetPins+0x98>)
 8002e14:	f001 ff52 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	4817      	ldr	r0, [pc, #92]	@ (8002e7c <Motor_Right_SetPins+0x9c>)
 8002e1e:	f001 ff4d 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002e22:	e025      	b.n	8002e70 <Motor_Right_SetPins+0x90>
	case FORWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 8002e24:	2201      	movs	r2, #1
 8002e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e2a:	4813      	ldr	r0, [pc, #76]	@ (8002e78 <Motor_Right_SetPins+0x98>)
 8002e2c:	f001 ff46 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2108      	movs	r1, #8
 8002e34:	4811      	ldr	r0, [pc, #68]	@ (8002e7c <Motor_Right_SetPins+0x9c>)
 8002e36:	f001 ff41 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002e3a:	e019      	b.n	8002e70 <Motor_Right_SetPins+0x90>
	case BACKWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e42:	480d      	ldr	r0, [pc, #52]	@ (8002e78 <Motor_Right_SetPins+0x98>)
 8002e44:	f001 ff3a 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e4e:	480b      	ldr	r0, [pc, #44]	@ (8002e7c <Motor_Right_SetPins+0x9c>)
 8002e50:	f001 ff34 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002e54:	e00c      	b.n	8002e70 <Motor_Right_SetPins+0x90>
	case BRAKE:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 8002e56:	2201      	movs	r2, #1
 8002e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e5c:	4806      	ldr	r0, [pc, #24]	@ (8002e78 <Motor_Right_SetPins+0x98>)
 8002e5e:	f001 ff2d 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 1);
 8002e62:	2201      	movs	r2, #1
 8002e64:	2108      	movs	r1, #8
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <Motor_Right_SetPins+0x9c>)
 8002e68:	f001 ff28 	bl	8004cbc <HAL_GPIO_WritePin>
		break;
 8002e6c:	e000      	b.n	8002e70 <Motor_Right_SetPins+0x90>
		break;
 8002e6e:	bf00      	nop
	}
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400

08002e80 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <Motor_Left_SetPWM+0x20>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200009d8 	.word	0x200009d8

08002ea4 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <Motor_Right_SetPWM+0x20>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200009d8 	.word	0x200009d8

08002ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ecc:	b672      	cpsid	i
}
 8002ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <Error_Handler+0x8>

08002ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <HAL_MspInit+0x58>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	4a12      	ldr	r2, [pc, #72]	@ (8002f2c <HAL_MspInit+0x58>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_MspInit+0x58>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <HAL_MspInit+0x58>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <HAL_MspInit+0x58>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_MspInit+0x58>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	2051      	movs	r0, #81	@ 0x51
 8002f18:	f001 f951 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002f1c:	2051      	movs	r0, #81	@ 0x51
 8002f1e:	f001 f96a 	bl	80041f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	@ 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a40      	ldr	r2, [pc, #256]	@ (8003050 <HAL_ADC_MspInit+0x120>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d179      	bne.n	8003046 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b3f      	ldr	r3, [pc, #252]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f62:	4b3c      	ldr	r3, [pc, #240]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a37      	ldr	r2, [pc, #220]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b35      	ldr	r3, [pc, #212]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b31      	ldr	r3, [pc, #196]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a30      	ldr	r2, [pc, #192]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <HAL_ADC_MspInit+0x124>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 8002fa6:	23fe      	movs	r3, #254	@ 0xfe
 8002fa8:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002faa:	2303      	movs	r3, #3
 8002fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4827      	ldr	r0, [pc, #156]	@ (8003058 <HAL_ADC_MspInit+0x128>)
 8002fba:	f001 fce3 	bl	8004984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4822      	ldr	r0, [pc, #136]	@ (800305c <HAL_ADC_MspInit+0x12c>)
 8002fd2:	f001 fcd7 	bl	8004984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002fd6:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8002fd8:	4a22      	ldr	r2, [pc, #136]	@ (8003064 <HAL_ADC_MspInit+0x134>)
 8002fda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002fdc:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fee:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8002ff0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ff4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8002ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ffc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8003000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003004:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003006:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8003008:	2200      	movs	r2, #0
 800300a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 800300e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003012:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800301a:	4811      	ldr	r0, [pc, #68]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 800301c:	f001 f906 	bl	800422c <HAL_DMA_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003026:	f7ff ff4f 	bl	8002ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0c      	ldr	r2, [pc, #48]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 800302e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003030:	4a0b      	ldr	r2, [pc, #44]	@ (8003060 <HAL_ADC_MspInit+0x130>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2012      	movs	r0, #18
 800303c:	f001 f8bf 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003040:	2012      	movs	r0, #18
 8003042:	f001 f8d8 	bl	80041f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	@ 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40012000 	.word	0x40012000
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	2000081c 	.word	0x2000081c
 8003064:	40026410 	.word	0x40026410

08003068 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	@ 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a50      	ldr	r2, [pc, #320]	@ (80031c8 <HAL_I2C_MspInit+0x160>)
 8003086:	4293      	cmp	r3, r2
 8003088:	f040 8099 	bne.w	80031be <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <HAL_I2C_MspInit+0x164>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	4a4d      	ldr	r2, [pc, #308]	@ (80031cc <HAL_I2C_MspInit+0x164>)
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	6313      	str	r3, [r2, #48]	@ 0x30
 800309c:	4b4b      	ldr	r3, [pc, #300]	@ (80031cc <HAL_I2C_MspInit+0x164>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80030a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ae:	2312      	movs	r3, #18
 80030b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030ba:	2304      	movs	r3, #4
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	4842      	ldr	r0, [pc, #264]	@ (80031d0 <HAL_I2C_MspInit+0x168>)
 80030c6:	f001 fc5d 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b3f      	ldr	r3, [pc, #252]	@ (80031cc <HAL_I2C_MspInit+0x164>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	4a3e      	ldr	r2, [pc, #248]	@ (80031cc <HAL_I2C_MspInit+0x164>)
 80030d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030da:	4b3c      	ldr	r3, [pc, #240]	@ (80031cc <HAL_I2C_MspInit+0x164>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80030e6:	4b3b      	ldr	r3, [pc, #236]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 80030e8:	4a3b      	ldr	r2, [pc, #236]	@ (80031d8 <HAL_I2C_MspInit+0x170>)
 80030ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80030ec:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f2:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 8003100:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003104:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003106:	4b33      	ldr	r3, [pc, #204]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800310c:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003112:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003118:	4b2e      	ldr	r3, [pc, #184]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 800311a:	2200      	movs	r2, #0
 800311c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311e:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 8003120:	2200      	movs	r2, #0
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003124:	482b      	ldr	r0, [pc, #172]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 8003126:	f001 f881 	bl	800422c <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003130:	f7ff feca 	bl	8002ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a27      	ldr	r2, [pc, #156]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 8003138:	635a      	str	r2, [r3, #52]	@ 0x34
 800313a:	4a26      	ldr	r2, [pc, #152]	@ (80031d4 <HAL_I2C_MspInit+0x16c>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003140:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003142:	4a27      	ldr	r2, [pc, #156]	@ (80031e0 <HAL_I2C_MspInit+0x178>)
 8003144:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003148:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800314c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314e:	4b23      	ldr	r3, [pc, #140]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003154:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800315a:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 800315c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003160:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003168:	4b1c      	ldr	r3, [pc, #112]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800316e:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003170:	2200      	movs	r2, #0
 8003172:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003176:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800317a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003182:	4816      	ldr	r0, [pc, #88]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003184:	f001 f852 	bl	800422c <HAL_DMA_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800318e:	f7ff fe9b 	bl	8002ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 8003196:	639a      	str	r2, [r3, #56]	@ 0x38
 8003198:	4a10      	ldr	r2, [pc, #64]	@ (80031dc <HAL_I2C_MspInit+0x174>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	201f      	movs	r0, #31
 80031a4:	f001 f80b 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031a8:	201f      	movs	r0, #31
 80031aa:	f001 f824 	bl	80041f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2020      	movs	r0, #32
 80031b4:	f001 f803 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80031b8:	2020      	movs	r0, #32
 80031ba:	f001 f81c 	bl	80041f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	@ 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40005400 	.word	0x40005400
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020400 	.word	0x40020400
 80031d4:	200008d0 	.word	0x200008d0
 80031d8:	40026028 	.word	0x40026028
 80031dc:	20000930 	.word	0x20000930
 80031e0:	40026010 	.word	0x40026010

080031e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_TIM_Base_MspInit+0x80>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d116      	bne.n	8003224 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <HAL_TIM_Base_MspInit+0x84>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <HAL_TIM_Base_MspInit+0x84>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6453      	str	r3, [r2, #68]	@ 0x44
 8003206:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <HAL_TIM_Base_MspInit+0x84>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2019      	movs	r0, #25
 8003218:	f000 ffd1 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800321c:	2019      	movs	r0, #25
 800321e:	f000 ffea 	bl	80041f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003222:	e01a      	b.n	800325a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a10      	ldr	r2, [pc, #64]	@ (800326c <HAL_TIM_Base_MspInit+0x88>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <HAL_TIM_Base_MspInit+0x84>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	4a0c      	ldr	r2, [pc, #48]	@ (8003268 <HAL_TIM_Base_MspInit+0x84>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	6413      	str	r3, [r2, #64]	@ 0x40
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <HAL_TIM_Base_MspInit+0x84>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	201d      	movs	r0, #29
 8003250:	f000 ffb5 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003254:	201d      	movs	r0, #29
 8003256:	f000 ffce 	bl	80041f6 <HAL_NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40023800 	.word	0x40023800
 800326c:	40000400 	.word	0x40000400

08003270 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a12      	ldr	r2, [pc, #72]	@ (80032d8 <HAL_TIM_MspPostInit+0x68>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d11d      	bne.n	80032ce <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <HAL_TIM_MspPostInit+0x6c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <HAL_TIM_MspPostInit+0x6c>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_TIM_MspPostInit+0x6c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 80032ae:	2330      	movs	r3, #48	@ 0x30
 80032b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032be:	2302      	movs	r3, #2
 80032c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <HAL_TIM_MspPostInit+0x70>)
 80032ca:	f001 fb5b 	bl	8004984 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032ce:	bf00      	nop
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020400 	.word	0x40020400

080032e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80032e8:	f006 ffba 	bl	800a260 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <NMI_Handler+0x8>

080032f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <MemManage_Handler+0x4>

08003300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <BusFault_Handler+0x4>

08003308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <UsageFault_Handler+0x4>

08003310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333e:	f000 f903 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800334c:	4802      	ldr	r0, [pc, #8]	@ (8003358 <DMA1_Stream0_IRQHandler+0x10>)
 800334e:	f001 f895 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000930 	.word	0x20000930

0800335c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <DMA1_Stream1_IRQHandler+0x10>)
 8003362:	f001 f88b 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200008d0 	.word	0x200008d0

08003370 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003374:	4802      	ldr	r0, [pc, #8]	@ (8003380 <ADC_IRQHandler+0x10>)
 8003376:	f000 f96e 	bl	8003656 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200007d4 	.word	0x200007d4

08003384 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8003388:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800338c:	f001 fcca 	bl	8004d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}

08003394 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800339a:	f007 f937 	bl	800a60c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000990 	.word	0x20000990

080033a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <TIM3_IRQHandler+0x10>)
 80033ae:	f007 f92d 	bl	800a60c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200009d8 	.word	0x200009d8

080033bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <I2C1_EV_IRQHandler+0x10>)
 80033c2:	f002 fe67 	bl	8006094 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2000087c 	.word	0x2000087c

080033d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <I2C1_ER_IRQHandler+0x10>)
 80033d6:	f002 ffce 	bl	8006376 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000087c 	.word	0x2000087c

080033e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 80033e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033ec:	f001 fc9a 	bl	8004d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033f8:	4802      	ldr	r0, [pc, #8]	@ (8003404 <DMA2_Stream0_IRQHandler+0x10>)
 80033fa:	f001 f83f 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000081c 	.word	0x2000081c

08003408 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <OTG_FS_IRQHandler+0x10>)
 800340e:	f005 f9c8 	bl	80087a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20001a18 	.word	0x20001a18

0800341c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <SystemInit+0x20>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <SystemInit+0x20>)
 8003438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800343c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003488 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003454:	f7ff ffea 	bl	800342c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003458:	480c      	ldr	r0, [pc, #48]	@ (800348c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800345a:	490d      	ldr	r1, [pc, #52]	@ (8003490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800345c:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003460:	e002      	b.n	8003468 <LoopCopyDataInit>

08003462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003466:	3304      	adds	r3, #4

08003468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800346a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800346c:	d3f9      	bcc.n	8003462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003470:	4c0a      	ldr	r4, [pc, #40]	@ (800349c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003474:	e001      	b.n	800347a <LoopFillZerobss>

08003476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003478:	3204      	adds	r2, #4

0800347a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800347a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800347c:	d3fb      	bcc.n	8003476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800347e:	f00b ff5f 	bl	800f340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003482:	f7fe fe35 	bl	80020f0 <main>
  bx  lr    
 8003486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800348c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003490:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8003494:	0800fe38 	.word	0x0800fe38
  ldr r2, =_sbss
 8003498:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800349c:	2000211c 	.word	0x2000211c

080034a0 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a0:	e7fe      	b.n	80034a0 <DMA1_Stream2_IRQHandler>
	...

080034a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_Init+0x40>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0d      	ldr	r2, [pc, #52]	@ (80034e4 <HAL_Init+0x40>)
 80034ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_Init+0x40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <HAL_Init+0x40>)
 80034ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c0:	4b08      	ldr	r3, [pc, #32]	@ (80034e4 <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <HAL_Init+0x40>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034cc:	2003      	movs	r0, #3
 80034ce:	f000 fe6b 	bl	80041a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034d2:	200f      	movs	r0, #15
 80034d4:	f000 f808 	bl	80034e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d8:	f7ff fcfc 	bl	8002ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00

080034e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f0:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_InitTick+0x54>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_InitTick+0x58>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fe83 	bl	8004212 <HAL_SYSTICK_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e00e      	b.n	8003534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d80a      	bhi.n	8003532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800351c:	2200      	movs	r2, #0
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f000 fe4b 	bl	80041be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003528:	4a06      	ldr	r2, [pc, #24]	@ (8003544 <HAL_InitTick+0x5c>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000004 	.word	0x20000004
 8003540:	2000000c 	.word	0x2000000c
 8003544:	20000008 	.word	0x20000008

08003548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_IncTick+0x20>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_IncTick+0x24>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4a04      	ldr	r2, [pc, #16]	@ (800356c <HAL_IncTick+0x24>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000000c 	.word	0x2000000c
 800356c:	20001130 	.word	0x20001130

08003570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return uwTick;
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_GetTick+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20001130 	.word	0x20001130

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff ffee 	bl	8003570 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <HAL_Delay+0x44>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035ae:	bf00      	nop
 80035b0:	f7ff ffde 	bl	8003570 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c

080035d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e033      	b.n	800364e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fc9e 	bl	8002f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003616:	f023 0302 	bic.w	r3, r3, #2
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fb68 	bl	8003cf8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
 800363e:	e001      	b.n	8003644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d049      	beq.n	8003720 <HAL_ADC_IRQHandler+0xca>
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d046      	beq.n	8003720 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d12b      	bne.n	8003710 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d127      	bne.n	8003710 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d119      	bne.n	8003710 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0220 	bic.w	r2, r2, #32
 80036ea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff f9fd 	bl	8002b10 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f06f 0212 	mvn.w	r2, #18
 800371e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d057      	beq.n	80037e6 <HAL_ADC_IRQHandler+0x190>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d054      	beq.n	80037e6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d139      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d006      	beq.n	800377e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d12b      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003788:	2b00      	cmp	r3, #0
 800378a:	d124      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11d      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d119      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fc0c 	bl	8003ff4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 020c 	mvn.w	r2, #12
 80037e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d017      	beq.n	800382c <HAL_ADC_IRQHandler+0x1d6>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d014      	beq.n	800382c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10d      	bne.n	800382c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f925 	bl	8003a6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0201 	mvn.w	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800383a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d015      	beq.n	800386e <HAL_ADC_IRQHandler+0x218>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384c:	f043 0202 	orr.w	r2, r3, #2
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0220 	mvn.w	r2, #32
 800385c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f90e 	bl	8003a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0220 	mvn.w	r2, #32
 800386c:	601a      	str	r2, [r3, #0]
  }
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Start_DMA+0x1e>
 8003892:	2302      	movs	r3, #2
 8003894:	e0ce      	b.n	8003a34 <HAL_ADC_Start_DMA+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d018      	beq.n	80038de <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038bc:	4b5f      	ldr	r3, [pc, #380]	@ (8003a3c <HAL_ADC_Start_DMA+0x1c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a40 <HAL_ADC_Start_DMA+0x1c8>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0c9a      	lsrs	r2, r3, #18
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ec:	d107      	bne.n	80038fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	f040 8086 	bne.w	8003a1a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003938:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394c:	d106      	bne.n	800395c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	f023 0206 	bic.w	r2, r3, #6
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
 800395a:	e002      	b.n	8003962 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800396a:	4b36      	ldr	r3, [pc, #216]	@ (8003a44 <HAL_ADC_Start_DMA+0x1cc>)
 800396c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	4a35      	ldr	r2, [pc, #212]	@ (8003a48 <HAL_ADC_Start_DMA+0x1d0>)
 8003974:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	4a34      	ldr	r2, [pc, #208]	@ (8003a4c <HAL_ADC_Start_DMA+0x1d4>)
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	4a33      	ldr	r2, [pc, #204]	@ (8003a50 <HAL_ADC_Start_DMA+0x1d8>)
 8003984:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800398e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800399e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	334c      	adds	r3, #76	@ 0x4c
 80039ba:	4619      	mov	r1, r3
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f000 fce2 	bl	8004388 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d129      	bne.n	8003a32 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	e020      	b.n	8003a32 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a17      	ldr	r2, [pc, #92]	@ (8003a54 <HAL_ADC_Start_DMA+0x1dc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d11b      	bne.n	8003a32 <HAL_ADC_Start_DMA+0x1ba>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d114      	bne.n	8003a32 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e00b      	b.n	8003a32 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f043 0210 	orr.w	r2, r3, #16
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000004 	.word	0x20000004
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	40012300 	.word	0x40012300
 8003a48:	08003ef1 	.word	0x08003ef1
 8003a4c:	08003fab 	.word	0x08003fab
 8003a50:	08003fc7 	.word	0x08003fc7
 8003a54:	40012000 	.word	0x40012000

08003a58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e113      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x244>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b09      	cmp	r3, #9
 8003abe:	d925      	bls.n	8003b0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68d9      	ldr	r1, [r3, #12]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3b1e      	subs	r3, #30
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43da      	mvns	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68d9      	ldr	r1, [r3, #12]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4618      	mov	r0, r3
 8003af8:	4603      	mov	r3, r0
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4403      	add	r3, r0
 8003afe:	3b1e      	subs	r3, #30
 8003b00:	409a      	lsls	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e022      	b.n	8003b52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6919      	ldr	r1, [r3, #16]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	2207      	movs	r2, #7
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6919      	ldr	r1, [r3, #16]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4618      	mov	r0, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4403      	add	r3, r0
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d824      	bhi.n	8003ba4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	3b05      	subs	r3, #5
 8003b6c:	221f      	movs	r2, #31
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	400a      	ands	r2, r1
 8003b7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	3b05      	subs	r3, #5
 8003b96:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ba2:	e04c      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d824      	bhi.n	8003bf6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	3b23      	subs	r3, #35	@ 0x23
 8003bbe:	221f      	movs	r2, #31
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	400a      	ands	r2, r1
 8003bcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4618      	mov	r0, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	3b23      	subs	r3, #35	@ 0x23
 8003be8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bf4:	e023      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	3b41      	subs	r3, #65	@ 0x41
 8003c08:	221f      	movs	r2, #31
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	400a      	ands	r2, r1
 8003c16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	3b41      	subs	r3, #65	@ 0x41
 8003c32:	fa00 f203 	lsl.w	r2, r0, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x250>)
 8003c40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a28      	ldr	r2, [pc, #160]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x254>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10f      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d8>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b12      	cmp	r3, #18
 8003c52:	d10b      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x254>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d12b      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x23a>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cec <HAL_ADC_ConfigChannel+0x258>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <HAL_ADC_ConfigChannel+0x1f4>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b11      	cmp	r3, #17
 8003c86:	d122      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a11      	ldr	r2, [pc, #68]	@ (8003cec <HAL_ADC_ConfigChannel+0x258>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003caa:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x25c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x260>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	0c9a      	lsrs	r2, r3, #18
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003cc0:	e002      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f9      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40012300 	.word	0x40012300
 8003ce8:	40012000 	.word	0x40012000
 8003cec:	10000012 	.word	0x10000012
 8003cf0:	20000004 	.word	0x20000004
 8003cf4:	431bde83 	.word	0x431bde83

08003cf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d00:	4b79      	ldr	r3, [pc, #484]	@ (8003ee8 <ADC_Init+0x1f0>)
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	021a      	lsls	r2, r3, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	4a58      	ldr	r2, [pc, #352]	@ (8003eec <ADC_Init+0x1f4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6899      	ldr	r1, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	e00f      	b.n	8003df6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003df4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0202 	bic.w	r2, r2, #2
 8003e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7e1b      	ldrb	r3, [r3, #24]
 8003e10:	005a      	lsls	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01b      	beq.n	8003e5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003e42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	035a      	lsls	r2, r3, #13
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e007      	b.n	8003e6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	051a      	lsls	r2, r3, #20
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003eae:	025a      	lsls	r2, r3, #9
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6899      	ldr	r1, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	029a      	lsls	r2, r3, #10
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40012300 	.word	0x40012300
 8003eec:	0f000001 	.word	0x0f000001

08003ef0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d13c      	bne.n	8003f84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d12b      	bne.n	8003f7c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d127      	bne.n	8003f7c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d119      	bne.n	8003f7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0220 	bic.w	r2, r2, #32
 8003f56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7fe fdc7 	bl	8002b10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f82:	e00e      	b.n	8003fa2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fd75 	bl	8003a80 <HAL_ADC_ErrorCallback>
}
 8003f96:	e004      	b.n	8003fa2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff fd4d 	bl	8003a58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2240      	movs	r2, #64	@ 0x40
 8003fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff fd4a 	bl	8003a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800403a:	4a04      	ldr	r2, [pc, #16]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	60d3      	str	r3, [r2, #12]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <__NVIC_GetPriorityGrouping+0x18>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0307 	and.w	r3, r3, #7
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0b      	blt.n	8004096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4907      	ldr	r1, [pc, #28]	@ (80040a4 <__NVIC_EnableIRQ+0x38>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e100 	.word	0xe000e100

080040a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db0a      	blt.n	80040d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	490c      	ldr	r1, [pc, #48]	@ (80040f4 <__NVIC_SetPriority+0x4c>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	440b      	add	r3, r1
 80040cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d0:	e00a      	b.n	80040e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4908      	ldr	r1, [pc, #32]	@ (80040f8 <__NVIC_SetPriority+0x50>)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	3b04      	subs	r3, #4
 80040e0:	0112      	lsls	r2, r2, #4
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	440b      	add	r3, r1
 80040e6:	761a      	strb	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000e100 	.word	0xe000e100
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f1c3 0307 	rsb	r3, r3, #7
 8004116:	2b04      	cmp	r3, #4
 8004118:	bf28      	it	cs
 800411a:	2304      	movcs	r3, #4
 800411c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3304      	adds	r3, #4
 8004122:	2b06      	cmp	r3, #6
 8004124:	d902      	bls.n	800412c <NVIC_EncodePriority+0x30>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3b03      	subs	r3, #3
 800412a:	e000      	b.n	800412e <NVIC_EncodePriority+0x32>
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	401a      	ands	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004144:	f04f 31ff 	mov.w	r1, #4294967295
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43d9      	mvns	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	4313      	orrs	r3, r2
         );
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	@ 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004174:	d301      	bcc.n	800417a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004176:	2301      	movs	r3, #1
 8004178:	e00f      	b.n	800419a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800417a:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <SysTick_Config+0x40>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004182:	210f      	movs	r1, #15
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	f7ff ff8e 	bl	80040a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <SysTick_Config+0x40>)
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004192:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <SysTick_Config+0x40>)
 8004194:	2207      	movs	r2, #7
 8004196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	e000e010 	.word	0xe000e010

080041a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff29 	bl	8004008 <__NVIC_SetPriorityGrouping>
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041d0:	f7ff ff3e 	bl	8004050 <__NVIC_GetPriorityGrouping>
 80041d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	6978      	ldr	r0, [r7, #20]
 80041dc:	f7ff ff8e 	bl	80040fc <NVIC_EncodePriority>
 80041e0:	4602      	mov	r2, r0
 80041e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ff5d 	bl	80040a8 <__NVIC_SetPriority>
}
 80041ee:	bf00      	nop
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	4603      	mov	r3, r0
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff31 	bl	800406c <__NVIC_EnableIRQ>
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ffa2 	bl	8004164 <SysTick_Config>
 8004220:	4603      	mov	r3, r0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7ff f99a 	bl	8003570 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e099      	b.n	800437c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004268:	e00f      	b.n	800428a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800426a:	f7ff f981 	bl	8003570 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b05      	cmp	r3, #5
 8004276:	d908      	bls.n	800428a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2203      	movs	r2, #3
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e078      	b.n	800437c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e8      	bne.n	800426a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4b38      	ldr	r3, [pc, #224]	@ (8004384 <HAL_DMA_Init+0x158>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d107      	bne.n	80042f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	4313      	orrs	r3, r2
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	2b04      	cmp	r3, #4
 800431c:	d117      	bne.n	800434e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 faab 	bl	800488c <DMA_CheckFifoParam>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2240      	movs	r2, #64	@ 0x40
 8004340:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800434a:	2301      	movs	r3, #1
 800434c:	e016      	b.n	800437c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa62 	bl	8004820 <DMA_CalcBaseAndBitshift>
 800435c:	4603      	mov	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	223f      	movs	r2, #63	@ 0x3f
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	f010803f 	.word	0xf010803f

08004388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_DMA_Start_IT+0x26>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e040      	b.n	8004430 <HAL_DMA_Start_IT+0xa8>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d12f      	bne.n	8004422 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f9f4 	bl	80047c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e0:	223f      	movs	r2, #63	@ 0x3f
 80043e2:	409a      	lsls	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0216 	orr.w	r2, r2, #22
 80043f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0208 	orr.w	r2, r2, #8
 800440e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e005      	b.n	800442e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800442a:	2302      	movs	r3, #2
 800442c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d004      	beq.n	8004456 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2280      	movs	r2, #128	@ 0x80
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e00c      	b.n	8004470 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004488:	4b8e      	ldr	r3, [pc, #568]	@ (80046c4 <HAL_DMA_IRQHandler+0x248>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a8e      	ldr	r2, [pc, #568]	@ (80046c8 <HAL_DMA_IRQHandler+0x24c>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	2208      	movs	r2, #8
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01a      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d4:	2208      	movs	r2, #8
 80044d6:	409a      	lsls	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	f043 0201 	orr.w	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ec:	2201      	movs	r2, #1
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d012      	beq.n	800451e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	2204      	movs	r2, #4
 8004524:	409a      	lsls	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d012      	beq.n	8004554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004540:	2204      	movs	r2, #4
 8004542:	409a      	lsls	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454c:	f043 0204 	orr.w	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	2210      	movs	r2, #16
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d043      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03c      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004576:	2210      	movs	r2, #16
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d024      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
 80045aa:	e01f      	b.n	80045ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
 80045bc:	e016      	b.n	80045ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0208 	bic.w	r2, r2, #8
 80045da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f0:	2220      	movs	r2, #32
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 808f 	beq.w	800471c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8087 	beq.w	800471c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	2220      	movs	r2, #32
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b05      	cmp	r3, #5
 8004624:	d136      	bne.n	8004694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0216 	bic.w	r2, r2, #22
 8004634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_DMA_IRQHandler+0x1da>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	223f      	movs	r2, #63	@ 0x3f
 800466c:	409a      	lsls	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07e      	beq.n	8004788 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
        }
        return;
 8004692:	e079      	b.n	8004788 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d031      	beq.n	800471c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
 80046c0:	e02c      	b.n	800471c <HAL_DMA_IRQHandler+0x2a0>
 80046c2:	bf00      	nop
 80046c4:	20000004 	.word	0x20000004
 80046c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d023      	beq.n	800471c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	e01e      	b.n	800471c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0210 	bic.w	r2, r2, #16
 80046fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004720:	2b00      	cmp	r3, #0
 8004722:	d032      	beq.n	800478a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d022      	beq.n	8004776 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2205      	movs	r2, #5
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3301      	adds	r3, #1
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	429a      	cmp	r2, r3
 8004752:	d307      	bcc.n	8004764 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <HAL_DMA_IRQHandler+0x2cc>
 8004762:	e000      	b.n	8004766 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004764:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
 8004786:	e000      	b.n	800478a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004788:	bf00      	nop
    }
  }
}
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800479e:	b2db      	uxtb	r3, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b40      	cmp	r3, #64	@ 0x40
 80047f0:	d108      	bne.n	8004804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004802:	e007      	b.n	8004814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3b10      	subs	r3, #16
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <DMA_CalcBaseAndBitshift+0x64>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800483a:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <DMA_CalcBaseAndBitshift+0x68>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d909      	bls.n	8004862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	1d1a      	adds	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004860:	e007      	b.n	8004872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	aaaaaaab 	.word	0xaaaaaaab
 8004888:	0800fe20 	.word	0x0800fe20

0800488c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11f      	bne.n	80048e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d856      	bhi.n	800495a <DMA_CheckFifoParam+0xce>
 80048ac:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <DMA_CheckFifoParam+0x28>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d7 	.word	0x080048d7
 80048bc:	080048c5 	.word	0x080048c5
 80048c0:	0800495b 	.word	0x0800495b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d046      	beq.n	800495e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d4:	e043      	b.n	800495e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048de:	d140      	bne.n	8004962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e4:	e03d      	b.n	8004962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ee:	d121      	bne.n	8004934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d837      	bhi.n	8004966 <DMA_CheckFifoParam+0xda>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <DMA_CheckFifoParam+0x70>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	08004913 	.word	0x08004913
 8004904:	0800490d 	.word	0x0800490d
 8004908:	08004925 	.word	0x08004925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e030      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d025      	beq.n	800496a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004922:	e022      	b.n	800496a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800492c:	d11f      	bne.n	800496e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004932:	e01c      	b.n	800496e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d903      	bls.n	8004942 <DMA_CheckFifoParam+0xb6>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d003      	beq.n	8004948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004940:	e018      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
      break;
 8004946:	e015      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e00b      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 800495a:	bf00      	nop
 800495c:	e00a      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 800495e:	bf00      	nop
 8004960:	e008      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 8004962:	bf00      	nop
 8004964:	e006      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 8004966:	bf00      	nop
 8004968:	e004      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;   
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <DMA_CheckFifoParam+0xe8>
      break;
 8004972:	bf00      	nop
    }
  } 
  
  return status; 
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	@ 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e159      	b.n	8004c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a0:	2201      	movs	r2, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f040 8148 	bne.w	8004c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d005      	beq.n	80049d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d130      	bne.n	8004a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 0201 	and.w	r2, r3, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d017      	beq.n	8004a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d123      	bne.n	8004ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	08da      	lsrs	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3208      	adds	r2, #8
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	220f      	movs	r2, #15
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	08da      	lsrs	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3208      	adds	r2, #8
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a2 	beq.w	8004c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b57      	ldr	r3, [pc, #348]	@ (8004c6c <HAL_GPIO_Init+0x2e8>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	4a56      	ldr	r2, [pc, #344]	@ (8004c6c <HAL_GPIO_Init+0x2e8>)
 8004b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b1a:	4b54      	ldr	r3, [pc, #336]	@ (8004c6c <HAL_GPIO_Init+0x2e8>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b26:	4a52      	ldr	r2, [pc, #328]	@ (8004c70 <HAL_GPIO_Init+0x2ec>)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a49      	ldr	r2, [pc, #292]	@ (8004c74 <HAL_GPIO_Init+0x2f0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d019      	beq.n	8004b86 <HAL_GPIO_Init+0x202>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a48      	ldr	r2, [pc, #288]	@ (8004c78 <HAL_GPIO_Init+0x2f4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_GPIO_Init+0x1fe>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a47      	ldr	r2, [pc, #284]	@ (8004c7c <HAL_GPIO_Init+0x2f8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00d      	beq.n	8004b7e <HAL_GPIO_Init+0x1fa>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a46      	ldr	r2, [pc, #280]	@ (8004c80 <HAL_GPIO_Init+0x2fc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <HAL_GPIO_Init+0x1f6>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a45      	ldr	r2, [pc, #276]	@ (8004c84 <HAL_GPIO_Init+0x300>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_GPIO_Init+0x1f2>
 8004b72:	2304      	movs	r3, #4
 8004b74:	e008      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e006      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e004      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_GPIO_Init+0x204>
 8004b86:	2300      	movs	r3, #0
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f002 0203 	and.w	r2, r2, #3
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	4093      	lsls	r3, r2
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b98:	4935      	ldr	r1, [pc, #212]	@ (8004c70 <HAL_GPIO_Init+0x2ec>)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ba6:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bca:	4a2f      	ldr	r2, [pc, #188]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bf4:	4a24      	ldr	r2, [pc, #144]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bfa:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c24:	4b18      	ldr	r3, [pc, #96]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c48:	4a0f      	ldr	r2, [pc, #60]	@ (8004c88 <HAL_GPIO_Init+0x304>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	f67f aea2 	bls.w	80049a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3724      	adds	r7, #36	@ 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020400 	.word	0x40020400
 8004c7c:	40020800 	.word	0x40020800
 8004c80:	40020c00 	.word	0x40020c00
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40013c00 	.word	0x40013c00

08004c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	887b      	ldrh	r3, [r7, #2]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	e001      	b.n	8004cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ccc:	787b      	ldrb	r3, [r7, #1]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cd8:	e003      	b.n	8004ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	041a      	lsls	r2, r3, #16
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	619a      	str	r2, [r3, #24]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d00:	887a      	ldrh	r2, [r7, #2]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4013      	ands	r3, r2
 8004d06:	041a      	lsls	r2, r3, #16
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	43d9      	mvns	r1, r3
 8004d0c:	887b      	ldrh	r3, [r7, #2]
 8004d0e:	400b      	ands	r3, r1
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	619a      	str	r2, [r3, #24]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d2e:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d3a:	4a05      	ldr	r2, [pc, #20]	@ (8004d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fef4 	bl	8002b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40013c00 	.word	0x40013c00

08004d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e12b      	b.n	8004fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe f974 	bl	8003068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	@ 0x24
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004db8:	f005 fa3e 	bl	800a238 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4a81      	ldr	r2, [pc, #516]	@ (8004fc8 <HAL_I2C_Init+0x274>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d807      	bhi.n	8004dd8 <HAL_I2C_Init+0x84>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a80      	ldr	r2, [pc, #512]	@ (8004fcc <HAL_I2C_Init+0x278>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bf94      	ite	ls
 8004dd0:	2301      	movls	r3, #1
 8004dd2:	2300      	movhi	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e006      	b.n	8004de6 <HAL_I2C_Init+0x92>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a7d      	ldr	r2, [pc, #500]	@ (8004fd0 <HAL_I2C_Init+0x27c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	bf94      	ite	ls
 8004de0:	2301      	movls	r3, #1
 8004de2:	2300      	movhi	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0e7      	b.n	8004fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a78      	ldr	r2, [pc, #480]	@ (8004fd4 <HAL_I2C_Init+0x280>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	0c9b      	lsrs	r3, r3, #18
 8004df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8004fc8 <HAL_I2C_Init+0x274>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d802      	bhi.n	8004e28 <HAL_I2C_Init+0xd4>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	3301      	adds	r3, #1
 8004e26:	e009      	b.n	8004e3c <HAL_I2C_Init+0xe8>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	4a69      	ldr	r2, [pc, #420]	@ (8004fd8 <HAL_I2C_Init+0x284>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	495c      	ldr	r1, [pc, #368]	@ (8004fc8 <HAL_I2C_Init+0x274>)
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	d819      	bhi.n	8004e90 <HAL_I2C_Init+0x13c>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e59      	subs	r1, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e70:	400b      	ands	r3, r1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_I2C_Init+0x138>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1e59      	subs	r1, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8a:	e051      	b.n	8004f30 <HAL_I2C_Init+0x1dc>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	e04f      	b.n	8004f30 <HAL_I2C_Init+0x1dc>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d111      	bne.n	8004ebc <HAL_I2C_Init+0x168>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1e58      	subs	r0, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6859      	ldr	r1, [r3, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	440b      	add	r3, r1
 8004ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	e012      	b.n	8004ee2 <HAL_I2C_Init+0x18e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1e58      	subs	r0, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6859      	ldr	r1, [r3, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	0099      	lsls	r1, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Init+0x196>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e022      	b.n	8004f30 <HAL_I2C_Init+0x1dc>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10e      	bne.n	8004f10 <HAL_I2C_Init+0x1bc>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1e58      	subs	r0, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	440b      	add	r3, r1
 8004f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f0e:	e00f      	b.n	8004f30 <HAL_I2C_Init+0x1dc>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1e58      	subs	r0, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6859      	ldr	r1, [r3, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	0099      	lsls	r1, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	6809      	ldr	r1, [r1, #0]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6911      	ldr	r1, [r2, #16]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68d2      	ldr	r2, [r2, #12]
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	000186a0 	.word	0x000186a0
 8004fcc:	001e847f 	.word	0x001e847f
 8004fd0:	003d08ff 	.word	0x003d08ff
 8004fd4:	431bde83 	.word	0x431bde83
 8004fd8:	10624dd3 	.word	0x10624dd3

08004fdc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fee:	2b80      	cmp	r3, #128	@ 0x80
 8004ff0:	d103      	bne.n	8004ffa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	460b      	mov	r3, r1
 8005016:	817b      	strh	r3, [r7, #10]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800501c:	f7fe faa8 	bl	8003570 <HAL_GetTick>
 8005020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b20      	cmp	r3, #32
 800502c:	f040 80e0 	bne.w	80051f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	2319      	movs	r3, #25
 8005036:	2201      	movs	r2, #1
 8005038:	4970      	ldr	r1, [pc, #448]	@ (80051fc <HAL_I2C_Master_Transmit+0x1f4>)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f002 ffea 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
 8005048:	e0d3      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_I2C_Master_Transmit+0x50>
 8005054:	2302      	movs	r3, #2
 8005056:	e0cc      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d007      	beq.n	800507e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2221      	movs	r2, #33	@ 0x21
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2210      	movs	r2, #16
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	893a      	ldrh	r2, [r7, #8]
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a50      	ldr	r2, [pc, #320]	@ (8005200 <HAL_I2C_Master_Transmit+0x1f8>)
 80050be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050c0:	8979      	ldrh	r1, [r7, #10]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f002 fbe0 	bl	800788c <I2C_MasterRequestWrite>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e08d      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050ec:	e066      	b.n	80051bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f003 f8a8 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d107      	bne.n	8005116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e06b      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d11b      	bne.n	8005190 <HAL_I2C_Master_Transmit+0x188>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d017      	beq.n	8005190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	6a39      	ldr	r1, [r7, #32]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f003 f89f 	bl	80082d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00d      	beq.n	80051bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e01a      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d194      	bne.n	80050ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	00100002 	.word	0x00100002
 8005200:	ffff0000 	.word	0xffff0000

08005204 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800521e:	f7fe f9a7 	bl	8003570 <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b20      	cmp	r3, #32
 800522e:	f040 80d9 	bne.w	80053e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	2319      	movs	r3, #25
 8005238:	2201      	movs	r2, #1
 800523a:	496d      	ldr	r1, [pc, #436]	@ (80053f0 <HAL_I2C_Mem_Write+0x1ec>)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f002 fee9 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	e0cc      	b.n	80053e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_I2C_Mem_Write+0x56>
 8005256:	2302      	movs	r3, #2
 8005258:	e0c5      	b.n	80053e6 <HAL_I2C_Mem_Write+0x1e2>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d007      	beq.n	8005280 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800528e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2221      	movs	r2, #33	@ 0x21
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2240      	movs	r2, #64	@ 0x40
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a4d      	ldr	r2, [pc, #308]	@ (80053f4 <HAL_I2C_Mem_Write+0x1f0>)
 80052c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052c2:	88f8      	ldrh	r0, [r7, #6]
 80052c4:	893a      	ldrh	r2, [r7, #8]
 80052c6:	8979      	ldrh	r1, [r7, #10]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	4603      	mov	r3, r0
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f002 fb5c 	bl	8007990 <I2C_RequestMemoryWrite>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d052      	beq.n	8005384 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e081      	b.n	80053e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f002 ffae 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d107      	bne.n	800530a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e06b      	b.n	80053e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d11b      	bne.n	8005384 <HAL_I2C_Mem_Write+0x180>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1aa      	bne.n	80052e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f002 ffa1 	bl	80082d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d107      	bne.n	80053b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e016      	b.n	80053e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	00100002 	.word	0x00100002
 80053f4:	ffff0000 	.word	0xffff0000

080053f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08c      	sub	sp, #48	@ 0x30
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4603      	mov	r3, r0
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	460b      	mov	r3, r1
 800540c:	813b      	strh	r3, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005412:	f7fe f8ad 	bl	8003570 <HAL_GetTick>
 8005416:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b20      	cmp	r3, #32
 8005422:	f040 8214 	bne.w	800584e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	2319      	movs	r3, #25
 800542c:	2201      	movs	r2, #1
 800542e:	497b      	ldr	r1, [pc, #492]	@ (800561c <HAL_I2C_Mem_Read+0x224>)
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f002 fdef 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
 800543e:	e207      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_I2C_Mem_Read+0x56>
 800544a:	2302      	movs	r3, #2
 800544c:	e200      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d007      	beq.n	8005474 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2222      	movs	r2, #34	@ 0x22
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2240      	movs	r2, #64	@ 0x40
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005620 <HAL_I2C_Mem_Read+0x228>)
 80054b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054b6:	88f8      	ldrh	r0, [r7, #6]
 80054b8:	893a      	ldrh	r2, [r7, #8]
 80054ba:	8979      	ldrh	r1, [r7, #10]
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	4603      	mov	r3, r0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f002 faf8 	bl	8007abc <I2C_RequestMemoryRead>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e1bc      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d113      	bne.n	8005506 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054de:	2300      	movs	r3, #0
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	623b      	str	r3, [r7, #32]
 80054f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e190      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	2b01      	cmp	r3, #1
 800550c:	d11b      	bne.n	8005546 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e170      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554a:	2b02      	cmp	r3, #2
 800554c:	d11b      	bne.n	8005586 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	e150      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800559c:	e144      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	f200 80f1 	bhi.w	800578a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d123      	bne.n	80055f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f002 ff09 	bl	80083cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e145      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055f6:	e117      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d14e      	bne.n	800569e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	2200      	movs	r2, #0
 8005608:	4906      	ldr	r1, [pc, #24]	@ (8005624 <HAL_I2C_Mem_Read+0x22c>)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f002 fd02 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e11a      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
 800561a:	bf00      	nop
 800561c:	00100002 	.word	0x00100002
 8005620:	ffff0000 	.word	0xffff0000
 8005624:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800569c:	e0c4      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	2200      	movs	r2, #0
 80056a6:	496c      	ldr	r1, [pc, #432]	@ (8005858 <HAL_I2C_Mem_Read+0x460>)
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f002 fcb3 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0cb      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	2200      	movs	r2, #0
 8005702:	4955      	ldr	r1, [pc, #340]	@ (8005858 <HAL_I2C_Mem_Read+0x460>)
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f002 fc85 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e09d      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005788:	e04e      	b.n	8005828 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f002 fe1c 	bl	80083cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e058      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d124      	bne.n	8005828 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d107      	bne.n	80057f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f aeb6 	bne.w	800559e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e000      	b.n	8005850 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800584e:	2302      	movs	r3, #2
  }
}
 8005850:	4618      	mov	r0, r3
 8005852:	3728      	adds	r7, #40	@ 0x28
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	00010004 	.word	0x00010004

0800585c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	4603      	mov	r3, r0
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	460b      	mov	r3, r1
 8005870:	813b      	strh	r3, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800587a:	f7fd fe79 	bl	8003570 <HAL_GetTick>
 800587e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b20      	cmp	r3, #32
 800588a:	f040 8136 	bne.w	8005afa <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800588e:	4b9d      	ldr	r3, [pc, #628]	@ (8005b04 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	4a9c      	ldr	r2, [pc, #624]	@ (8005b08 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	0a1a      	lsrs	r2, r3, #8
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009a      	lsls	r2, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d112      	bne.n	80058da <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
 80058d8:	e110      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d0df      	beq.n	80058a8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e102      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d007      	beq.n	800591c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800592a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2221      	movs	r2, #33	@ 0x21
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2240      	movs	r2, #64	@ 0x40
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005946:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800594c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a6c      	ldr	r2, [pc, #432]	@ (8005b0c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800595c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800595e:	897a      	ldrh	r2, [r7, #10]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005964:	893a      	ldrh	r2, [r7, #8]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80a9 	beq.w	8005ad2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d02a      	beq.n	80059de <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598c:	4a60      	ldr	r2, [pc, #384]	@ (8005b10 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800598e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005994:	4a5f      	ldr	r2, [pc, #380]	@ (8005b14 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005996:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599c:	2200      	movs	r2, #0
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	2200      	movs	r2, #0
 80059a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ac:	2200      	movs	r2, #0
 80059ae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b4:	2200      	movs	r2, #0
 80059b6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	4619      	mov	r1, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3310      	adds	r3, #16
 80059c8:	461a      	mov	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	f7fe fcdb 	bl	8004388 <HAL_DMA_Start_IT>
 80059d2:	4603      	mov	r3, r0
 80059d4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80059d6:	7efb      	ldrb	r3, [r7, #27]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d166      	bne.n	8005aaa <HAL_I2C_Mem_Write_DMA+0x24e>
 80059dc:	e013      	b.n	8005a06 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e07a      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005a06:	88f8      	ldrh	r0, [r7, #6]
 8005a08:	893a      	ldrh	r2, [r7, #8]
 8005a0a:	8979      	ldrh	r1, [r7, #10]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	2323      	movs	r3, #35	@ 0x23
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	4603      	mov	r3, r0
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f001 ffba 	bl	8007990 <I2C_RequestMemoryWrite>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d022      	beq.n	8005a68 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fd06 	bl	8004438 <HAL_DMA_Abort_IT>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a34:	2200      	movs	r2, #0
 8005a36:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a46:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e049      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a94:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aa4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e028      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e014      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005afa:	2302      	movs	r3, #2
  }
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000004 	.word	0x20000004
 8005b08:	14f8b589 	.word	0x14f8b589
 8005b0c:	ffff0000 	.word	0xffff0000
 8005b10:	08007c8d 	.word	0x08007c8d
 8005b14:	08007e4b 	.word	0x08007e4b

08005b18 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	@ 0x30
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	817b      	strh	r3, [r7, #10]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	813b      	strh	r3, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b32:	f7fd fd1d 	bl	8003570 <HAL_GetTick>
 8005b36:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	f040 8172 	bne.w	8005e2e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b4a:	4b93      	ldr	r3, [pc, #588]	@ (8005d98 <HAL_I2C_Mem_Read_DMA+0x280>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	08db      	lsrs	r3, r3, #3
 8005b50:	4a92      	ldr	r2, [pc, #584]	@ (8005d9c <HAL_I2C_Mem_Read_DMA+0x284>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	0a1a      	lsrs	r2, r3, #8
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009a      	lsls	r2, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d112      	bne.n	8005b96 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005b92:	2302      	movs	r3, #2
 8005b94:	e14c      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d0df      	beq.n	8005b64 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_I2C_Mem_Read_DMA+0x9a>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e13e      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d007      	beq.n	8005bd8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2222      	movs	r2, #34	@ 0x22
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2240      	movs	r2, #64	@ 0x40
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a62      	ldr	r2, [pc, #392]	@ (8005da0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005c18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005c1a:	897a      	ldrh	r2, [r7, #10]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005c20:	893a      	ldrh	r2, [r7, #8]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80cc 	beq.w	8005dd4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d02d      	beq.n	8005ca0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	4a56      	ldr	r2, [pc, #344]	@ (8005da4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005c4a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	4a55      	ldr	r2, [pc, #340]	@ (8005da8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005c52:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	2200      	movs	r2, #0
 8005c62:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	2200      	movs	r2, #0
 8005c6a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c70:	2200      	movs	r2, #0
 8005c72:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3310      	adds	r3, #16
 8005c7e:	4619      	mov	r1, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	461a      	mov	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8a:	f7fe fb7d 	bl	8004388 <HAL_DMA_Start_IT>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f040 8087 	bne.w	8005dac <HAL_I2C_Mem_Read_DMA+0x294>
 8005c9e:	e013      	b.n	8005cc8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0b3      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005cc8:	88f8      	ldrh	r0, [r7, #6]
 8005cca:	893a      	ldrh	r2, [r7, #8]
 8005ccc:	8979      	ldrh	r1, [r7, #10]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	2323      	movs	r3, #35	@ 0x23
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f001 feef 	bl	8007abc <I2C_RequestMemoryRead>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fba5 	bl	8004438 <HAL_DMA_Abort_IT>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d0a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e081      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d108      	bne.n	8005d46 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e007      	b.n	8005d56 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d82:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d92:	605a      	str	r2, [r3, #4]
 8005d94:	e049      	b.n	8005e2a <HAL_I2C_Mem_Read_DMA+0x312>
 8005d96:	bf00      	nop
 8005d98:	20000004 	.word	0x20000004
 8005d9c:	14f8b589 	.word	0x14f8b589
 8005da0:	ffff0000 	.word	0xffff0000
 8005da4:	08007c8d 	.word	0x08007c8d
 8005da8:	08007e4b 	.word	0x08007e4b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	f043 0210 	orr.w	r2, r3, #16
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e02d      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005dd4:	88f8      	ldrh	r0, [r7, #6]
 8005dd6:	893a      	ldrh	r2, [r7, #8]
 8005dd8:	8979      	ldrh	r1, [r7, #10]
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	2323      	movs	r3, #35	@ 0x23
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	4603      	mov	r3, r0
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f001 fe69 	bl	8007abc <I2C_RequestMemoryRead>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e01d      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e18:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	@ 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	@ 0x28
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	460b      	mov	r3, r1
 8005e46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005e48:	f7fd fb92 	bl	8003570 <HAL_GetTick>
 8005e4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	f040 8111 	bne.w	8006082 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2319      	movs	r3, #25
 8005e66:	2201      	movs	r2, #1
 8005e68:	4988      	ldr	r1, [pc, #544]	@ (800608c <HAL_I2C_IsDeviceReady+0x254>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f002 f8d2 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005e76:	2302      	movs	r3, #2
 8005e78:	e104      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_I2C_IsDeviceReady+0x50>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e0fd      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d007      	beq.n	8005eae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2224      	movs	r2, #36	@ 0x24
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4a70      	ldr	r2, [pc, #448]	@ (8006090 <HAL_I2C_IsDeviceReady+0x258>)
 8005ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f002 f890 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00d      	beq.n	8005f16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f08:	d103      	bne.n	8005f12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f10:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e0b6      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f16:	897b      	ldrh	r3, [r7, #10]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f26:	f7fd fb23 	bl	8003570 <HAL_GetTick>
 8005f2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	bf0c      	ite	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f50:	bf0c      	ite	eq
 8005f52:	2301      	moveq	r3, #1
 8005f54:	2300      	movne	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f5a:	e025      	b.n	8005fa8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f5c:	f7fd fb08 	bl	8003570 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <HAL_I2C_IsDeviceReady+0x13a>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	22a0      	movs	r2, #160	@ 0xa0
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_I2C_IsDeviceReady+0x188>
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <HAL_I2C_IsDeviceReady+0x188>
 8005fba:	7dbb      	ldrb	r3, [r7, #22]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0cd      	beq.n	8005f5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d129      	bne.n	800602a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fe4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2319      	movs	r3, #25
 8006002:	2201      	movs	r2, #1
 8006004:	4921      	ldr	r1, [pc, #132]	@ (800608c <HAL_I2C_IsDeviceReady+0x254>)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f002 f804 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e036      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e02c      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006038:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006042:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2319      	movs	r3, #25
 800604a:	2201      	movs	r2, #1
 800604c:	490f      	ldr	r1, [pc, #60]	@ (800608c <HAL_I2C_IsDeviceReady+0x254>)
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f001 ffe0 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e012      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3301      	adds	r3, #1
 8006062:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	429a      	cmp	r2, r3
 800606a:	f4ff af32 	bcc.w	8005ed2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	00100002 	.word	0x00100002
 8006090:	ffff0000 	.word	0xffff0000

08006094 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d003      	beq.n	80060cc <HAL_I2C_EV_IRQHandler+0x38>
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	f040 80c1 	bne.w	800624e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10d      	bne.n	8006102 <HAL_I2C_EV_IRQHandler+0x6e>
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80060ec:	d003      	beq.n	80060f6 <HAL_I2C_EV_IRQHandler+0x62>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80060f4:	d101      	bne.n	80060fa <HAL_I2C_EV_IRQHandler+0x66>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <HAL_I2C_EV_IRQHandler+0x68>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f000 8132 	beq.w	8006366 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00c      	beq.n	8006126 <HAL_I2C_EV_IRQHandler+0x92>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	0a5b      	lsrs	r3, r3, #9
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d006      	beq.n	8006126 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f002 f9e3 	bl	80084e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fd95 	bl	8006c4e <I2C_Master_SB>
 8006124:	e092      	b.n	800624c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	08db      	lsrs	r3, r3, #3
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <HAL_I2C_EV_IRQHandler+0xb2>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	0a5b      	lsrs	r3, r3, #9
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fe0b 	bl	8006d5a <I2C_Master_ADD10>
 8006144:	e082      	b.n	800624c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0xd2>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	0a5b      	lsrs	r3, r3, #9
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fe25 	bl	8006dae <I2C_Master_ADDR>
 8006164:	e072      	b.n	800624c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	089b      	lsrs	r3, r3, #2
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d03b      	beq.n	80061ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800617c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006180:	f000 80f3 	beq.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	09db      	lsrs	r3, r3, #7
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00f      	beq.n	80061b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	0a9b      	lsrs	r3, r3, #10
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f9e9 	bl	8006580 <I2C_MasterTransmit_TXE>
 80061ae:	e04d      	b.n	800624c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80d6 	beq.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80cf 	beq.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b21      	cmp	r3, #33	@ 0x21
 80061d0:	d103      	bne.n	80061da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa70 	bl	80066b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061d8:	e0c7      	b.n	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b40      	cmp	r3, #64	@ 0x40
 80061de:	f040 80c4 	bne.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fade 	bl	80067a4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061e8:	e0bf      	b.n	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f8:	f000 80b7 	beq.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	099b      	lsrs	r3, r3, #6
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <HAL_I2C_EV_IRQHandler+0x194>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	0a9b      	lsrs	r3, r3, #10
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <HAL_I2C_EV_IRQHandler+0x194>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb57 	bl	80068d4 <I2C_MasterReceive_RXNE>
 8006226:	e011      	b.n	800624c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	089b      	lsrs	r3, r3, #2
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 809a 	beq.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	0a5b      	lsrs	r3, r3, #9
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8093 	beq.w	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc0d 	bl	8006a64 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800624a:	e08e      	b.n	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
 800624c:	e08d      	b.n	800636a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e007      	b.n	8006270 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d012      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	0a5b      	lsrs	r3, r3, #9
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00c      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006298:	69b9      	ldr	r1, [r7, #24]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 ffd6 	bl	800724c <I2C_Slave_ADDR>
 80062a0:	e066      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0a5b      	lsrs	r3, r3, #9
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f810 	bl	80072e0 <I2C_Slave_STOPF>
 80062c0:	e056      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	2b21      	cmp	r3, #33	@ 0x21
 80062c6:	d002      	beq.n	80062ce <HAL_I2C_EV_IRQHandler+0x23a>
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	2b29      	cmp	r3, #41	@ 0x29
 80062cc:	d125      	bne.n	800631a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	09db      	lsrs	r3, r3, #7
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <HAL_I2C_EV_IRQHandler+0x266>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	0a9b      	lsrs	r3, r3, #10
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_I2C_EV_IRQHandler+0x266>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 feec 	bl	80070d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062f8:	e039      	b.n	800636e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d033      	beq.n	800636e <HAL_I2C_EV_IRQHandler+0x2da>
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	0a5b      	lsrs	r3, r3, #9
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d02d      	beq.n	800636e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 ff19 	bl	800714a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006318:	e029      	b.n	800636e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	099b      	lsrs	r3, r3, #6
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00f      	beq.n	8006346 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	0a9b      	lsrs	r3, r3, #10
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	089b      	lsrs	r3, r3, #2
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 ff24 	bl	800718c <I2C_SlaveReceive_RXNE>
 8006344:	e014      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	0a5b      	lsrs	r3, r3, #9
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 ff52 	bl	8007208 <I2C_SlaveReceive_BTF>
 8006364:	e004      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800636e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b08a      	sub	sp, #40	@ 0x28
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006398:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00e      	beq.n	80063c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	0a5b      	lsrs	r3, r3, #9
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <HAL_I2C_ER_IRQHandler+0x78>
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	f043 0302 	orr.w	r3, r3, #2
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80063ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	0a9b      	lsrs	r3, r3, #10
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d03f      	beq.n	800647a <HAL_I2C_ER_IRQHandler+0x104>
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d039      	beq.n	800647a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006406:	7efb      	ldrb	r3, [r7, #27]
 8006408:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006418:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006420:	7ebb      	ldrb	r3, [r7, #26]
 8006422:	2b20      	cmp	r3, #32
 8006424:	d112      	bne.n	800644c <HAL_I2C_ER_IRQHandler+0xd6>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10f      	bne.n	800644c <HAL_I2C_ER_IRQHandler+0xd6>
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	2b21      	cmp	r3, #33	@ 0x21
 8006430:	d008      	beq.n	8006444 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b29      	cmp	r3, #41	@ 0x29
 8006436:	d005      	beq.n	8006444 <HAL_I2C_ER_IRQHandler+0xce>
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	2b28      	cmp	r3, #40	@ 0x28
 800643c:	d106      	bne.n	800644c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b21      	cmp	r3, #33	@ 0x21
 8006442:	d103      	bne.n	800644c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f87b 	bl	8007540 <I2C_Slave_AF>
 800644a:	e016      	b.n	800647a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006454:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800645e:	7efb      	ldrb	r3, [r7, #27]
 8006460:	2b10      	cmp	r3, #16
 8006462:	d002      	beq.n	800646a <HAL_I2C_ER_IRQHandler+0xf4>
 8006464:	7efb      	ldrb	r3, [r7, #27]
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	d107      	bne.n	800647a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006478:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	0adb      	lsrs	r3, r3, #11
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	f043 0308 	orr.w	r3, r3, #8
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80064a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d008      	beq.n	80064bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	431a      	orrs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 f8b6 	bl	8007628 <I2C_ITError>
  }
}
 80064bc:	bf00      	nop
 80064be:	3728      	adds	r7, #40	@ 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
 8006520:	4613      	mov	r3, r2
 8006522:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006596:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d150      	bne.n	8006648 <I2C_MasterTransmit_TXE+0xc8>
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b21      	cmp	r3, #33	@ 0x21
 80065aa:	d14d      	bne.n	8006648 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d01d      	beq.n	80065ee <I2C_MasterTransmit_TXE+0x6e>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d01a      	beq.n	80065ee <I2C_MasterTransmit_TXE+0x6e>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065be:	d016      	beq.n	80065ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2211      	movs	r2, #17
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ff6c 	bl	80064c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ec:	e060      	b.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800660c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b40      	cmp	r3, #64	@ 0x40
 8006626:	d107      	bne.n	8006638 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff87 	bl	8006544 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006636:	e03b      	b.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ff3f 	bl	80064c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006646:	e033      	b.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b21      	cmp	r3, #33	@ 0x21
 800664c:	d005      	beq.n	800665a <I2C_MasterTransmit_TXE+0xda>
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b40      	cmp	r3, #64	@ 0x40
 8006652:	d12d      	bne.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b22      	cmp	r3, #34	@ 0x22
 8006658:	d12a      	bne.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d108      	bne.n	8006676 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006672:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006674:	e01c      	b.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b40      	cmp	r3, #64	@ 0x40
 8006680:	d103      	bne.n	800668a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f88e 	bl	80067a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006688:	e012      	b.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80066ae:	e7ff      	b.n	80066b0 <I2C_MasterTransmit_TXE+0x130>
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b21      	cmp	r3, #33	@ 0x21
 80066d0:	d164      	bne.n	800679c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d012      	beq.n	8006702 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006700:	e04c      	b.n	800679c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d01d      	beq.n	8006744 <I2C_MasterTransmit_BTF+0x8c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b20      	cmp	r3, #32
 800670c:	d01a      	beq.n	8006744 <I2C_MasterTransmit_BTF+0x8c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006714:	d016      	beq.n	8006744 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006724:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2211      	movs	r2, #17
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fec1 	bl	80064c4 <HAL_I2C_MasterTxCpltCallback>
}
 8006742:	e02b      	b.n	800679c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006752:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006762:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b40      	cmp	r3, #64	@ 0x40
 800677c:	d107      	bne.n	800678e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fedc 	bl	8006544 <HAL_I2C_MemTxCpltCallback>
}
 800678c:	e006      	b.n	800679c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fe94 	bl	80064c4 <HAL_I2C_MasterTxCpltCallback>
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11d      	bne.n	80067f8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10b      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	1c9a      	adds	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80067da:	e077      	b.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	121b      	asrs	r3, r3, #8
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067f6:	e069      	b.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d10b      	bne.n	8006818 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006804:	b2da      	uxtb	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006816:	e059      	b.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681c:	2b02      	cmp	r3, #2
 800681e:	d152      	bne.n	80068c6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b22      	cmp	r3, #34	@ 0x22
 8006824:	d10d      	bne.n	8006842 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006834:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006840:	e044      	b.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d015      	beq.n	8006878 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b21      	cmp	r3, #33	@ 0x21
 8006850:	d112      	bne.n	8006878 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006876:	e029      	b.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d124      	bne.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	2b21      	cmp	r3, #33	@ 0x21
 8006886:	d121      	bne.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006896:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff fe40 	bl	8006544 <HAL_I2C_MemTxCpltCallback>
}
 80068c4:	e002      	b.n	80068cc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fe fb88 	bl	8004fdc <I2C_Flush_DR>
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b22      	cmp	r3, #34	@ 0x22
 80068e6:	f040 80b9 	bne.w	8006a5c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ee:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d921      	bls.n	8006942 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	f040 8096 	bne.w	8006a5c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800693e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006940:	e08c      	b.n	8006a5c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	2b02      	cmp	r3, #2
 8006948:	d07f      	beq.n	8006a4a <I2C_MasterReceive_RXNE+0x176>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d002      	beq.n	8006956 <I2C_MasterReceive_RXNE+0x82>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d179      	bne.n	8006a4a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fd06 	bl	8008368 <I2C_WaitOnSTOPRequestThroughIT>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d14c      	bne.n	80069fc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006970:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006980:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b40      	cmp	r3, #64	@ 0x40
 80069ba:	d10a      	bne.n	80069d2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fc f88a 	bl	8002ae4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069d0:	e044      	b.n	8006a5c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d002      	beq.n	80069e6 <I2C_MasterReceive_RXNE+0x112>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d103      	bne.n	80069ee <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80069ec:	e002      	b.n	80069f4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2212      	movs	r2, #18
 80069f2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff fd6f 	bl	80064d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069fa:	e02f      	b.n	8006a5c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fd88 	bl	8006558 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a48:	e008      	b.n	8006a5c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a58:	605a      	str	r2, [r3, #4]
}
 8006a5a:	e7ff      	b.n	8006a5c <I2C_MasterReceive_RXNE+0x188>
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a70:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d11b      	bne.n	8006ab4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a8a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ab2:	e0c8      	b.n	8006c46 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d129      	bne.n	8006b12 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006acc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d00a      	beq.n	8006aea <I2C_MasterReceive_BTF+0x86>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d007      	beq.n	8006aea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ae8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006b10:	e099      	b.n	8006c46 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	f040 8081 	bne.w	8006c20 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d002      	beq.n	8006b2a <I2C_MasterReceive_BTF+0xc6>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d108      	bne.n	8006b3c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e019      	b.n	8006b70 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d002      	beq.n	8006b48 <I2C_MasterReceive_BTF+0xe4>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d108      	bne.n	8006b5a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e00a      	b.n	8006b70 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d007      	beq.n	8006b70 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006bca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b40      	cmp	r3, #64	@ 0x40
 8006bde:	d10a      	bne.n	8006bf6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fb ff78 	bl	8002ae4 <HAL_I2C_MemRxCpltCallback>
}
 8006bf4:	e027      	b.n	8006c46 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d002      	beq.n	8006c0a <I2C_MasterReceive_BTF+0x1a6>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d103      	bne.n	8006c12 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c10:	e002      	b.n	8006c18 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2212      	movs	r2, #18
 8006c16:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fc5d 	bl	80064d8 <HAL_I2C_MasterRxCpltCallback>
}
 8006c1e:	e012      	b.n	8006c46 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b40      	cmp	r3, #64	@ 0x40
 8006c60:	d117      	bne.n	8006c92 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c7a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006c7c:	e067      	b.n	8006d4e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	611a      	str	r2, [r3, #16]
}
 8006c90:	e05d      	b.n	8006d4e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c9a:	d133      	bne.n	8006d04 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b21      	cmp	r3, #33	@ 0x21
 8006ca6:	d109      	bne.n	8006cbc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cb8:	611a      	str	r2, [r3, #16]
 8006cba:	e008      	b.n	8006cce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <I2C_Master_SB+0x92>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d108      	bne.n	8006cf2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d032      	beq.n	8006d4e <I2C_Master_SB+0x100>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d02d      	beq.n	8006d4e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d00:	605a      	str	r2, [r3, #4]
}
 8006d02:	e024      	b.n	8006d4e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10e      	bne.n	8006d2a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	11db      	asrs	r3, r3, #7
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0306 	and.w	r3, r3, #6
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f063 030f 	orn	r3, r3, #15
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]
}
 8006d28:	e011      	b.n	8006d4e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10d      	bne.n	8006d4e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	11db      	asrs	r3, r3, #7
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0306 	and.w	r3, r3, #6
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f063 030e 	orn	r3, r3, #14
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	611a      	str	r2, [r3, #16]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <I2C_Master_ADD10+0x26>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00c      	beq.n	8006da2 <I2C_Master_ADD10+0x48>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006da0:	605a      	str	r2, [r3, #4]
  }
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b091      	sub	sp, #68	@ 0x44
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b22      	cmp	r3, #34	@ 0x22
 8006dd6:	f040 8169 	bne.w	80070ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10f      	bne.n	8006e02 <I2C_Master_ADDR+0x54>
 8006de2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006de6:	2b40      	cmp	r3, #64	@ 0x40
 8006de8:	d10b      	bne.n	8006e02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dea:	2300      	movs	r3, #0
 8006dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	e160      	b.n	80070c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d11d      	bne.n	8006e46 <I2C_Master_ADDR+0x98>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e12:	d118      	bne.n	8006e46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e14:	2300      	movs	r3, #0
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	651a      	str	r2, [r3, #80]	@ 0x50
 8006e44:	e13e      	b.n	80070c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d113      	bne.n	8006e78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e50:	2300      	movs	r3, #0
 8006e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e115      	b.n	80070a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	f040 808a 	bne.w	8006f98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e8a:	d137      	bne.n	8006efc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eaa:	d113      	bne.n	8006ed4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	e0e7      	b.n	80070a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	623b      	str	r3, [r7, #32]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e0d3      	b.n	80070a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d02e      	beq.n	8006f60 <I2C_Master_ADDR+0x1b2>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d02b      	beq.n	8006f60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	2b12      	cmp	r3, #18
 8006f0c:	d102      	bne.n	8006f14 <I2C_Master_ADDR+0x166>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d125      	bne.n	8006f60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d00e      	beq.n	8006f38 <I2C_Master_ADDR+0x18a>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d00b      	beq.n	8006f38 <I2C_Master_ADDR+0x18a>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d008      	beq.n	8006f38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e007      	b.n	8006f48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	61fb      	str	r3, [r7, #28]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	e0a1      	b.n	80070a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e085      	b.n	80070a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d14d      	bne.n	800703e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d016      	beq.n	8006fd6 <I2C_Master_ADDR+0x228>
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d013      	beq.n	8006fd6 <I2C_Master_ADDR+0x228>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d010      	beq.n	8006fd6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e007      	b.n	8006fe6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fe4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff4:	d117      	bne.n	8007026 <I2C_Master_ADDR+0x278>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ffc:	d00b      	beq.n	8007016 <I2C_Master_ADDR+0x268>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	2b01      	cmp	r3, #1
 8007002:	d008      	beq.n	8007016 <I2C_Master_ADDR+0x268>
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	2b08      	cmp	r3, #8
 8007008:	d005      	beq.n	8007016 <I2C_Master_ADDR+0x268>
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	2b10      	cmp	r3, #16
 800700e:	d002      	beq.n	8007016 <I2C_Master_ADDR+0x268>
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	2b20      	cmp	r3, #32
 8007014:	d107      	bne.n	8007026 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007024:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	e032      	b.n	80070a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800704c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705c:	d117      	bne.n	800708e <I2C_Master_ADDR+0x2e0>
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007064:	d00b      	beq.n	800707e <I2C_Master_ADDR+0x2d0>
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	2b01      	cmp	r3, #1
 800706a:	d008      	beq.n	800707e <I2C_Master_ADDR+0x2d0>
 800706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706e:	2b08      	cmp	r3, #8
 8007070:	d005      	beq.n	800707e <I2C_Master_ADDR+0x2d0>
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	2b10      	cmp	r3, #16
 8007076:	d002      	beq.n	800707e <I2C_Master_ADDR+0x2d0>
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	2b20      	cmp	r3, #32
 800707c:	d107      	bne.n	800708e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800708c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80070aa:	e00b      	b.n	80070c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
}
 80070c2:	e7ff      	b.n	80070c4 <I2C_Master_ADDR+0x316>
 80070c4:	bf00      	nop
 80070c6:	3744      	adds	r7, #68	@ 0x44
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d02b      	beq.n	8007142 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d114      	bne.n	8007142 <I2C_SlaveTransmit_TXE+0x72>
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b29      	cmp	r3, #41	@ 0x29
 800711c:	d111      	bne.n	8007142 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800712c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2221      	movs	r2, #33	@ 0x21
 8007132:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2228      	movs	r2, #40	@ 0x28
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff f9d5 	bl	80064ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d011      	beq.n	8007180 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800719a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d02c      	beq.n	8007200 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d114      	bne.n	8007200 <I2C_SlaveReceive_RXNE+0x74>
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071da:	d111      	bne.n	8007200 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2222      	movs	r2, #34	@ 0x22
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2228      	movs	r2, #40	@ 0x28
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff f980 	bl	8006500 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d012      	beq.n	8007240 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007266:	2b28      	cmp	r3, #40	@ 0x28
 8007268:	d127      	bne.n	80072ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007278:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	089b      	lsrs	r3, r3, #2
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007286:	2301      	movs	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	09db      	lsrs	r3, r3, #7
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	81bb      	strh	r3, [r7, #12]
 800729c:	e002      	b.n	80072a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80072ac:	89ba      	ldrh	r2, [r7, #12]
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff f92e 	bl	8006514 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80072b8:	e00e      	b.n	80072d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80072d8:	bf00      	nop
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80072fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007300:	2300      	movs	r3, #0
 8007302:	60bb      	str	r3, [r7, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	60bb      	str	r3, [r7, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800732c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800733c:	d172      	bne.n	8007424 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b22      	cmp	r3, #34	@ 0x22
 8007342:	d002      	beq.n	800734a <I2C_Slave_STOPF+0x6a>
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b2a      	cmp	r3, #42	@ 0x2a
 8007348:	d135      	bne.n	80073b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	b29a      	uxth	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f043 0204 	orr.w	r2, r3, #4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800737c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd fa04 	bl	8004790 <HAL_DMA_GetState>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d049      	beq.n	8007422 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007392:	4a69      	ldr	r2, [pc, #420]	@ (8007538 <I2C_Slave_STOPF+0x258>)
 8007394:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd f84c 	bl	8004438 <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d03d      	beq.n	8007422 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073b4:	e035      	b.n	8007422 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f043 0204 	orr.w	r2, r3, #4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd f9ce 	bl	8004790 <HAL_DMA_GetState>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d014      	beq.n	8007424 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007538 <I2C_Slave_STOPF+0x258>)
 8007400:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007406:	4618      	mov	r0, r3
 8007408:	f7fd f816 	bl	8004438 <HAL_DMA_Abort_IT>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d008      	beq.n	8007424 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	e000      	b.n	8007424 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007422:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d03e      	beq.n	80074ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b04      	cmp	r3, #4
 800743a:	d112      	bne.n	8007462 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746c:	2b40      	cmp	r3, #64	@ 0x40
 800746e:	d112      	bne.n	8007496 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800748c:	b29b      	uxth	r3, r3
 800748e:	3b01      	subs	r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a4:	f043 0204 	orr.w	r2, r3, #4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f8b7 	bl	8007628 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80074ba:	e039      	b.n	8007530 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c0:	d109      	bne.n	80074d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2228      	movs	r2, #40	@ 0x28
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff f815 	bl	8006500 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b28      	cmp	r3, #40	@ 0x28
 80074e0:	d111      	bne.n	8007506 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a15      	ldr	r2, [pc, #84]	@ (800753c <I2C_Slave_STOPF+0x25c>)
 80074e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff f816 	bl	8006530 <HAL_I2C_ListenCpltCallback>
}
 8007504:	e014      	b.n	8007530 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750a:	2b22      	cmp	r3, #34	@ 0x22
 800750c:	d002      	beq.n	8007514 <I2C_Slave_STOPF+0x234>
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b22      	cmp	r3, #34	@ 0x22
 8007512:	d10d      	bne.n	8007530 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fe ffe8 	bl	8006500 <HAL_I2C_SlaveRxCpltCallback>
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	08007ec5 	.word	0x08007ec5
 800753c:	ffff0000 	.word	0xffff0000

08007540 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800754e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d002      	beq.n	8007562 <I2C_Slave_AF+0x22>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b20      	cmp	r3, #32
 8007560:	d129      	bne.n	80075b6 <I2C_Slave_AF+0x76>
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b28      	cmp	r3, #40	@ 0x28
 8007566:	d126      	bne.n	80075b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a2e      	ldr	r2, [pc, #184]	@ (8007624 <I2C_Slave_AF+0xe4>)
 800756c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800757c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007586:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007596:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fe ffbe 	bl	8006530 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80075b4:	e031      	b.n	800761a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	2b21      	cmp	r3, #33	@ 0x21
 80075ba:	d129      	bne.n	8007610 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a19      	ldr	r2, [pc, #100]	@ (8007624 <I2C_Slave_AF+0xe4>)
 80075c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2221      	movs	r2, #33	@ 0x21
 80075c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80075e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007600:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fd fcea 	bl	8004fdc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7fe ff6f 	bl	80064ec <HAL_I2C_SlaveTxCpltCallback>
}
 800760e:	e004      	b.n	800761a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007618:	615a      	str	r2, [r3, #20]
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	ffff0000 	.word	0xffff0000

08007628 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007636:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800763e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b10      	cmp	r3, #16
 8007644:	d002      	beq.n	800764c <I2C_ITError+0x24>
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	d10a      	bne.n	8007662 <I2C_ITError+0x3a>
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2b22      	cmp	r3, #34	@ 0x22
 8007650:	d107      	bne.n	8007662 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007660:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007668:	2b28      	cmp	r3, #40	@ 0x28
 800766a:	d107      	bne.n	800767c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2228      	movs	r2, #40	@ 0x28
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800767a:	e015      	b.n	80076a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800768a:	d00a      	beq.n	80076a2 <I2C_ITError+0x7a>
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	2b60      	cmp	r3, #96	@ 0x60
 8007690:	d007      	beq.n	80076a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076b6:	d162      	bne.n	800777e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d020      	beq.n	8007718 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076da:	4a6a      	ldr	r2, [pc, #424]	@ (8007884 <I2C_ITError+0x25c>)
 80076dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fc fea8 	bl	8004438 <HAL_DMA_Abort_IT>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8089 	beq.w	8007802 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007712:	4610      	mov	r0, r2
 8007714:	4798      	blx	r3
 8007716:	e074      	b.n	8007802 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771c:	4a59      	ldr	r2, [pc, #356]	@ (8007884 <I2C_ITError+0x25c>)
 800771e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	4618      	mov	r0, r3
 8007726:	f7fc fe87 	bl	8004438 <HAL_DMA_Abort_IT>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d068      	beq.n	8007802 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b40      	cmp	r3, #64	@ 0x40
 800773c:	d10b      	bne.n	8007756 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	e041      	b.n	8007802 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b60      	cmp	r3, #96	@ 0x60
 8007788:	d125      	bne.n	80077d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a2:	2b40      	cmp	r3, #64	@ 0x40
 80077a4:	d10b      	bne.n	80077be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fe fecc 	bl	800656c <HAL_I2C_AbortCpltCallback>
 80077d4:	e015      	b.n	8007802 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	d10b      	bne.n	80077fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7fe feab 	bl	8006558 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10e      	bne.n	8007830 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007822:	2b00      	cmp	r3, #0
 8007824:	d104      	bne.n	8007830 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800783e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007846:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b04      	cmp	r3, #4
 8007852:	d113      	bne.n	800787c <I2C_ITError+0x254>
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b28      	cmp	r3, #40	@ 0x28
 8007858:	d110      	bne.n	800787c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a0a      	ldr	r2, [pc, #40]	@ (8007888 <I2C_ITError+0x260>)
 800785e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fe fe5a 	bl	8006530 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	08007ec5 	.word	0x08007ec5
 8007888:	ffff0000 	.word	0xffff0000

0800788c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af02      	add	r7, sp, #8
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	460b      	mov	r3, r1
 800789a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d006      	beq.n	80078b6 <I2C_MasterRequestWrite+0x2a>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d003      	beq.n	80078b6 <I2C_MasterRequestWrite+0x2a>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078b4:	d108      	bne.n	80078c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e00b      	b.n	80078e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078cc:	2b12      	cmp	r3, #18
 80078ce:	d107      	bne.n	80078e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fb91 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00d      	beq.n	8007914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007906:	d103      	bne.n	8007910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800790e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e035      	b.n	8007980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800791c:	d108      	bne.n	8007930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800792c:	611a      	str	r2, [r3, #16]
 800792e:	e01b      	b.n	8007968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	11db      	asrs	r3, r3, #7
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 0306 	and.w	r3, r3, #6
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f063 030f 	orn	r3, r3, #15
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	490e      	ldr	r1, [pc, #56]	@ (8007988 <I2C_MasterRequestWrite+0xfc>)
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fbda 	bl	8008108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e010      	b.n	8007980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4907      	ldr	r1, [pc, #28]	@ (800798c <I2C_MasterRequestWrite+0x100>)
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fbca 	bl	8008108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	00010008 	.word	0x00010008
 800798c:	00010002 	.word	0x00010002

08007990 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af02      	add	r7, sp, #8
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	4608      	mov	r0, r1
 800799a:	4611      	mov	r1, r2
 800799c:	461a      	mov	r2, r3
 800799e:	4603      	mov	r3, r0
 80079a0:	817b      	strh	r3, [r7, #10]
 80079a2:	460b      	mov	r3, r1
 80079a4:	813b      	strh	r3, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fb24 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e0:	d103      	bne.n	80079ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e05f      	b.n	8007aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ee:	897b      	ldrh	r3, [r7, #10]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80079fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	6a3a      	ldr	r2, [r7, #32]
 8007a02:	492d      	ldr	r1, [pc, #180]	@ (8007ab8 <I2C_RequestMemoryWrite+0x128>)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fb7f 	bl	8008108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e04c      	b.n	8007aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fc0a 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d107      	bne.n	8007a52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e02b      	b.n	8007aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d105      	bne.n	8007a68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5c:	893b      	ldrh	r3, [r7, #8]
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	611a      	str	r2, [r3, #16]
 8007a66:	e021      	b.n	8007aac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a68:	893b      	ldrh	r3, [r7, #8]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a78:	6a39      	ldr	r1, [r7, #32]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fbe4 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d107      	bne.n	8007a9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e005      	b.n	8007aae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aa2:	893b      	ldrh	r3, [r7, #8]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	00010002 	.word	0x00010002

08007abc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	817b      	strh	r3, [r7, #10]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	813b      	strh	r3, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fa86 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1c:	d103      	bne.n	8007b26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e0aa      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b2a:	897b      	ldrh	r3, [r7, #10]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	6a3a      	ldr	r2, [r7, #32]
 8007b3e:	4952      	ldr	r1, [pc, #328]	@ (8007c88 <I2C_RequestMemoryRead+0x1cc>)
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fae1 	bl	8008108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e097      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b68:	6a39      	ldr	r1, [r7, #32]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fb6c 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00d      	beq.n	8007b92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d107      	bne.n	8007b8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e076      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d105      	bne.n	8007ba4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	611a      	str	r2, [r3, #16]
 8007ba2:	e021      	b.n	8007be8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ba4:	893b      	ldrh	r3, [r7, #8]
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb4:	6a39      	ldr	r1, [r7, #32]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fb46 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d107      	bne.n	8007bda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e050      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bde:	893b      	ldrh	r3, [r7, #8]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bea:	6a39      	ldr	r1, [r7, #32]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fb2b 	bl	8008248 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00d      	beq.n	8007c14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d107      	bne.n	8007c10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e035      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f9ef 	bl	8008014 <I2C_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00d      	beq.n	8007c58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c4a:	d103      	bne.n	8007c54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e013      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c58:	897b      	ldrh	r3, [r7, #10]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	4906      	ldr	r1, [pc, #24]	@ (8007c88 <I2C_RequestMemoryRead+0x1cc>)
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fa4a 	bl	8008108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	00010002 	.word	0x00010002

08007c8c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ca0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ca8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007cbe:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ccc:	2200      	movs	r2, #0
 8007cce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cdc:	2200      	movs	r2, #0
 8007cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007ce0:	7cfb      	ldrb	r3, [r7, #19]
 8007ce2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007ce6:	2b21      	cmp	r3, #33	@ 0x21
 8007ce8:	d007      	beq.n	8007cfa <I2C_DMAXferCplt+0x6e>
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007cf0:	2b22      	cmp	r3, #34	@ 0x22
 8007cf2:	d131      	bne.n	8007d58 <I2C_DMAXferCplt+0xcc>
 8007cf4:	7cbb      	ldrb	r3, [r7, #18]
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d12e      	bne.n	8007d58 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d08:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007d10:	7cfb      	ldrb	r3, [r7, #19]
 8007d12:	2b29      	cmp	r3, #41	@ 0x29
 8007d14:	d10a      	bne.n	8007d2c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2221      	movs	r2, #33	@ 0x21
 8007d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2228      	movs	r2, #40	@ 0x28
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d24:	6978      	ldr	r0, [r7, #20]
 8007d26:	f7fe fbe1 	bl	80064ec <HAL_I2C_SlaveTxCpltCallback>
 8007d2a:	e00c      	b.n	8007d46 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d2c:	7cfb      	ldrb	r3, [r7, #19]
 8007d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d30:	d109      	bne.n	8007d46 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2222      	movs	r2, #34	@ 0x22
 8007d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2228      	movs	r2, #40	@ 0x28
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d40:	6978      	ldr	r0, [r7, #20]
 8007d42:	f7fe fbdd 	bl	8006500 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007d54:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007d56:	e074      	b.n	8007e42 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d06e      	beq.n	8007e42 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d107      	bne.n	8007d7e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d7c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007d8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d94:	d009      	beq.n	8007daa <I2C_DMAXferCplt+0x11e>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d006      	beq.n	8007daa <I2C_DMAXferCplt+0x11e>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007da2:	d002      	beq.n	8007daa <I2C_DMAXferCplt+0x11e>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d107      	bne.n	8007dba <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007db8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007dc8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dd8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007de8:	6978      	ldr	r0, [r7, #20]
 8007dea:	f7fe fbb5 	bl	8006558 <HAL_I2C_ErrorCallback>
}
 8007dee:	e028      	b.n	8007e42 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b40      	cmp	r3, #64	@ 0x40
 8007e02:	d10a      	bne.n	8007e1a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007e12:	6978      	ldr	r0, [r7, #20]
 8007e14:	f7fa fe66 	bl	8002ae4 <HAL_I2C_MemRxCpltCallback>
}
 8007e18:	e013      	b.n	8007e42 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d002      	beq.n	8007e2e <I2C_DMAXferCplt+0x1a2>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d103      	bne.n	8007e36 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e34:	e002      	b.n	8007e3c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2212      	movs	r2, #18
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e3c:	6978      	ldr	r0, [r7, #20]
 8007e3e:	f7fe fb4b 	bl	80064d8 <HAL_I2C_MasterRxCpltCallback>
}
 8007e42:	bf00      	nop
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e64:	2200      	movs	r2, #0
 8007e66:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e74:	2200      	movs	r2, #0
 8007e76:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fc fc97 	bl	80047ac <HAL_DMA_GetError>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d01b      	beq.n	8007ebc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e92:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	f043 0210 	orr.w	r2, r3, #16
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7fe fb4e 	bl	8006558 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007edc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ede:	4b4b      	ldr	r3, [pc, #300]	@ (800800c <I2C_DMAAbort+0x148>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8008010 <I2C_DMAAbort+0x14c>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	0a1a      	lsrs	r2, r3, #8
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	00da      	lsls	r2, r3, #3
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	f043 0220 	orr.w	r2, r3, #32
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007f0a:	e00a      	b.n	8007f22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f20:	d0ea      	beq.n	8007ef8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	2200      	movs	r2, #0
 8007f30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3e:	2200      	movs	r2, #0
 8007f40:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2200      	movs	r2, #0
 8007f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f64:	2200      	movs	r2, #0
 8007f66:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	2200      	movs	r2, #0
 8007f76:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0201 	bic.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b60      	cmp	r3, #96	@ 0x60
 8007f92:	d10e      	bne.n	8007fb2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007faa:	6978      	ldr	r0, [r7, #20]
 8007fac:	f7fe fade 	bl	800656c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fb0:	e027      	b.n	8008002 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb2:	7cfb      	ldrb	r3, [r7, #19]
 8007fb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fb8:	2b28      	cmp	r3, #40	@ 0x28
 8007fba:	d117      	bne.n	8007fec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2228      	movs	r2, #40	@ 0x28
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007fea:	e007      	b.n	8007ffc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	f7fe faab 	bl	8006558 <HAL_I2C_ErrorCallback>
}
 8008002:	bf00      	nop
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20000004 	.word	0x20000004
 8008010:	14f8b589 	.word	0x14f8b589

08008014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	4613      	mov	r3, r2
 8008022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008024:	e048      	b.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d044      	beq.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802e:	f7fb fa9f 	bl	8003570 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d302      	bcc.n	8008044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d139      	bne.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	0c1b      	lsrs	r3, r3, #16
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b01      	cmp	r3, #1
 800804c:	d10d      	bne.n	800806a <I2C_WaitOnFlagUntilTimeout+0x56>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	43da      	mvns	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4013      	ands	r3, r2
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	e00c      	b.n	8008084 <I2C_WaitOnFlagUntilTimeout+0x70>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	43da      	mvns	r2, r3
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4013      	ands	r3, r2
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	429a      	cmp	r2, r3
 8008088:	d116      	bne.n	80080b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a4:	f043 0220 	orr.w	r2, r3, #32
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e023      	b.n	8008100 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	0c1b      	lsrs	r3, r3, #16
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10d      	bne.n	80080de <I2C_WaitOnFlagUntilTimeout+0xca>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	43da      	mvns	r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4013      	ands	r3, r2
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bf0c      	ite	eq
 80080d4:	2301      	moveq	r3, #1
 80080d6:	2300      	movne	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	e00c      	b.n	80080f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	43da      	mvns	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4013      	ands	r3, r2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf0c      	ite	eq
 80080f0:	2301      	moveq	r3, #1
 80080f2:	2300      	movne	r3, #0
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	79fb      	ldrb	r3, [r7, #7]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d093      	beq.n	8008026 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008116:	e071      	b.n	80081fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008126:	d123      	bne.n	8008170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008136:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815c:	f043 0204 	orr.w	r2, r3, #4
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e067      	b.n	8008240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d041      	beq.n	80081fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008178:	f7fb f9fa 	bl	8003570 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d302      	bcc.n	800818e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d136      	bne.n	80081fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	d10c      	bne.n	80081b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	43da      	mvns	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4013      	ands	r3, r2
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bf14      	ite	ne
 80081aa:	2301      	movne	r3, #1
 80081ac:	2300      	moveq	r3, #0
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	e00b      	b.n	80081ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	43da      	mvns	r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4013      	ands	r3, r2
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	bf14      	ite	ne
 80081c4:	2301      	movne	r3, #1
 80081c6:	2300      	moveq	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d016      	beq.n	80081fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e8:	f043 0220 	orr.w	r2, r3, #32
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e021      	b.n	8008240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	0c1b      	lsrs	r3, r3, #16
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b01      	cmp	r3, #1
 8008204:	d10c      	bne.n	8008220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	43da      	mvns	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4013      	ands	r3, r2
 8008212:	b29b      	uxth	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	bf14      	ite	ne
 8008218:	2301      	movne	r3, #1
 800821a:	2300      	moveq	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	e00b      	b.n	8008238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	43da      	mvns	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4013      	ands	r3, r2
 800822c:	b29b      	uxth	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f af6d 	bne.w	8008118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008254:	e034      	b.n	80082c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f915 	bl	8008486 <I2C_IsAcknowledgeFailed>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e034      	b.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d028      	beq.n	80082c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826e:	f7fb f97f 	bl	8003570 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	429a      	cmp	r2, r3
 800827c:	d302      	bcc.n	8008284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d11d      	bne.n	80082c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800828e:	2b80      	cmp	r3, #128	@ 0x80
 8008290:	d016      	beq.n	80082c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	f043 0220 	orr.w	r2, r3, #32
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e007      	b.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ca:	2b80      	cmp	r3, #128	@ 0x80
 80082cc:	d1c3      	bne.n	8008256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082e4:	e034      	b.n	8008350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 f8cd 	bl	8008486 <I2C_IsAcknowledgeFailed>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e034      	b.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d028      	beq.n	8008350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fe:	f7fb f937 	bl	8003570 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11d      	bne.n	8008350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b04      	cmp	r3, #4
 8008320:	d016      	beq.n	8008350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833c:	f043 0220 	orr.w	r2, r3, #32
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e007      	b.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b04      	cmp	r3, #4
 800835c:	d1c3      	bne.n	80082e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008374:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	08db      	lsrs	r3, r3, #3
 800837a:	4a13      	ldr	r2, [pc, #76]	@ (80083c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	0a1a      	lsrs	r2, r3, #8
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b01      	subs	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839a:	f043 0220 	orr.w	r2, r3, #32
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e008      	b.n	80083b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083b4:	d0e9      	beq.n	800838a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20000004 	.word	0x20000004
 80083c8:	14f8b589 	.word	0x14f8b589

080083cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083d8:	e049      	b.n	800846e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	d119      	bne.n	800841c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0210 	mvn.w	r2, #16
 80083f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e030      	b.n	800847e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800841c:	f7fb f8a8 	bl	8003570 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	429a      	cmp	r2, r3
 800842a:	d302      	bcc.n	8008432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d11d      	bne.n	800846e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b40      	cmp	r3, #64	@ 0x40
 800843e:	d016      	beq.n	800846e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845a:	f043 0220 	orr.w	r2, r3, #32
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e007      	b.n	800847e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008478:	2b40      	cmp	r3, #64	@ 0x40
 800847a:	d1ae      	bne.n	80083da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800849c:	d11b      	bne.n	80084d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c2:	f043 0204 	orr.w	r2, r3, #4
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80084f4:	d103      	bne.n	80084fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80084fc:	e007      	b.n	800850e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008502:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008506:	d102      	bne.n	800850e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2208      	movs	r2, #8
 800850c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af02      	add	r7, sp, #8
 8008520:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e101      	b.n	8008730 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f006 fbe8 	bl	800ed1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2203      	movs	r2, #3
 8008550:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800855a:	d102      	bne.n	8008562 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f002 ff63 	bl	800b432 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	7c1a      	ldrb	r2, [r3, #16]
 8008574:	f88d 2000 	strb.w	r2, [sp]
 8008578:	3304      	adds	r3, #4
 800857a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800857c:	f002 fe42 	bl	800b204 <USB_CoreInit>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e0ce      	b.n	8008730 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f002 ff5b 	bl	800b454 <USB_SetCurrentMode>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e0bf      	b.n	8008730 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e04a      	b.n	800864c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80085b6:	7bfa      	ldrb	r2, [r7, #15]
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	3315      	adds	r3, #21
 80085c6:	2201      	movs	r2, #1
 80085c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80085ca:	7bfa      	ldrb	r2, [r7, #15]
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	3314      	adds	r3, #20
 80085da:	7bfa      	ldrb	r2, [r7, #15]
 80085dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80085de:	7bfa      	ldrb	r2, [r7, #15]
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	b298      	uxth	r0, r3
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	332e      	adds	r3, #46	@ 0x2e
 80085f2:	4602      	mov	r2, r0
 80085f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80085f6:	7bfa      	ldrb	r2, [r7, #15]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3318      	adds	r3, #24
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800860a:	7bfa      	ldrb	r2, [r7, #15]
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	331c      	adds	r3, #28
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800861e:	7bfa      	ldrb	r2, [r7, #15]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	3320      	adds	r3, #32
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008632:	7bfa      	ldrb	r2, [r7, #15]
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	3324      	adds	r3, #36	@ 0x24
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	3301      	adds	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	791b      	ldrb	r3, [r3, #4]
 8008650:	7bfa      	ldrb	r2, [r7, #15]
 8008652:	429a      	cmp	r2, r3
 8008654:	d3af      	bcc.n	80085b6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
 800865a:	e044      	b.n	80086e6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800865c:	7bfa      	ldrb	r2, [r7, #15]
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800866e:	2200      	movs	r2, #0
 8008670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008672:	7bfa      	ldrb	r2, [r7, #15]
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008684:	7bfa      	ldrb	r2, [r7, #15]
 8008686:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008688:	7bfa      	ldrb	r2, [r7, #15]
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800869e:	7bfa      	ldrb	r2, [r7, #15]
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	4613      	mov	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	440b      	add	r3, r1
 80086ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80086b4:	7bfa      	ldrb	r2, [r7, #15]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	440b      	add	r3, r1
 80086c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086ca:	7bfa      	ldrb	r2, [r7, #15]
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	3301      	adds	r3, #1
 80086e4:	73fb      	strb	r3, [r7, #15]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	791b      	ldrb	r3, [r3, #4]
 80086ea:	7bfa      	ldrb	r2, [r7, #15]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d3b5      	bcc.n	800865c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7c1a      	ldrb	r2, [r3, #16]
 80086f8:	f88d 2000 	strb.w	r2, [sp]
 80086fc:	3304      	adds	r3, #4
 80086fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008700:	f002 fef4 	bl	800b4ec <USB_DevInit>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e00c      	b.n	8008730 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4618      	mov	r0, r3
 800872a:	f003 ff3e 	bl	800c5aa <USB_DevDisconnect>

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_PCD_Start+0x1c>
 8008750:	2302      	movs	r3, #2
 8008752:	e022      	b.n	800879a <HAL_PCD_Start+0x62>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800876c:	2b01      	cmp	r3, #1
 800876e:	d105      	bne.n	800877c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008774:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f002 fe45 	bl	800b410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4618      	mov	r0, r3
 800878c:	f003 feec 	bl	800c568 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80087a2:	b590      	push	{r4, r7, lr}
 80087a4:	b08d      	sub	sp, #52	@ 0x34
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f003 ffaa 	bl	800c712 <USB_GetMode>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 848c 	bne.w	80090de <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f003 ff0e 	bl	800c5ec <USB_ReadInterrupts>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 8482 	beq.w	80090dc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f003 fefb 	bl	800c5ec <USB_ReadInterrupts>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d107      	bne.n	8008810 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695a      	ldr	r2, [r3, #20]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f002 0202 	and.w	r2, r2, #2
 800880e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f003 fee9 	bl	800c5ec <USB_ReadInterrupts>
 800881a:	4603      	mov	r3, r0
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b10      	cmp	r3, #16
 8008822:	d161      	bne.n	80088e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0210 	bic.w	r2, r2, #16
 8008832:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4413      	add	r3, r2
 8008850:	3304      	adds	r3, #4
 8008852:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800885a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800885e:	d124      	bne.n	80088aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008866:	4013      	ands	r3, r2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d035      	beq.n	80088d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	091b      	lsrs	r3, r3, #4
 8008874:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	6a38      	ldr	r0, [r7, #32]
 8008880:	f003 fd20 	bl	800c2c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	091b      	lsrs	r3, r3, #4
 800888c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008890:	441a      	add	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088a2:	441a      	add	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	615a      	str	r2, [r3, #20]
 80088a8:	e016      	b.n	80088d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80088b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088b4:	d110      	bne.n	80088d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088bc:	2208      	movs	r2, #8
 80088be:	4619      	mov	r1, r3
 80088c0:	6a38      	ldr	r0, [r7, #32]
 80088c2:	f003 fcff 	bl	800c2c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	695a      	ldr	r2, [r3, #20]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	091b      	lsrs	r3, r3, #4
 80088ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088d2:	441a      	add	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0210 	orr.w	r2, r2, #16
 80088e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f003 fe7d 	bl	800c5ec <USB_ReadInterrupts>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088fc:	f040 80a7 	bne.w	8008a4e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f003 fe82 	bl	800c612 <USB_ReadDevAllOutEpInterrupt>
 800890e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008910:	e099      	b.n	8008a46 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 808e 	beq.w	8008a3a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f003 fea6 	bl	800c67a <USB_ReadDevOutEPInterrupt>
 800892e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00c      	beq.n	8008954 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008946:	461a      	mov	r2, r3
 8008948:	2301      	movs	r3, #1
 800894a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800894c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fea4 	bl	800969c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00c      	beq.n	8008978 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896a:	461a      	mov	r2, r3
 800896c:	2308      	movs	r3, #8
 800896e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 ff7a 	bl	800986c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f003 0310 	and.w	r3, r3, #16
 800897e:	2b00      	cmp	r3, #0
 8008980:	d008      	beq.n	8008994 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898e:	461a      	mov	r2, r3
 8008990:	2310      	movs	r3, #16
 8008992:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d030      	beq.n	8008a00 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089a6:	2b80      	cmp	r3, #128	@ 0x80
 80089a8:	d109      	bne.n	80089be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80089bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80089be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c0:	4613      	mov	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4413      	add	r3, r2
 80089d0:	3304      	adds	r3, #4
 80089d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	78db      	ldrb	r3, [r3, #3]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d108      	bne.n	80089ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2200      	movs	r2, #0
 80089e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f006 fa93 	bl	800ef14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fa:	461a      	mov	r2, r3
 80089fc:	2302      	movs	r3, #2
 80089fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d008      	beq.n	8008a1c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a16:	461a      	mov	r2, r3
 8008a18:	2320      	movs	r3, #32
 8008a1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a32:	461a      	mov	r2, r3
 8008a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f47f af62 	bne.w	8008912 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f003 fdca 	bl	800c5ec <USB_ReadInterrupts>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a62:	f040 80db 	bne.w	8008c1c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f003 fdeb 	bl	800c646 <USB_ReadDevAllInEpInterrupt>
 8008a70:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008a76:	e0cd      	b.n	8008c14 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80c2 	beq.w	8008c08 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f003 fe11 	bl	800c6b6 <USB_ReadDevInEPInterrupt>
 8008a94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d057      	beq.n	8008b50 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	69f9      	ldr	r1, [r7, #28]
 8008abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	799b      	ldrb	r3, [r3, #6]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d132      	bne.n	8008b44 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	3320      	adds	r3, #32
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af4:	4613      	mov	r3, r2
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4403      	add	r3, r0
 8008afe:	331c      	adds	r3, #28
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4419      	add	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b08:	4613      	mov	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4403      	add	r3, r0
 8008b12:	3320      	adds	r3, #32
 8008b14:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d113      	bne.n	8008b44 <HAL_PCD_IRQHandler+0x3a2>
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	3324      	adds	r3, #36	@ 0x24
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d108      	bne.n	8008b44 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	2101      	movs	r1, #1
 8008b40:	f003 fe18 	bl	800c774 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f006 f967 	bl	800ee1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d008      	beq.n	8008b6c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b66:	461a      	mov	r2, r3
 8008b68:	2308      	movs	r3, #8
 8008b6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b82:	461a      	mov	r2, r3
 8008b84:	2310      	movs	r3, #16
 8008b86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d008      	beq.n	8008ba4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	2340      	movs	r3, #64	@ 0x40
 8008ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d023      	beq.n	8008bf6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008bae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bb0:	6a38      	ldr	r0, [r7, #32]
 8008bb2:	f002 fdff 	bl	800b7b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb8:	4613      	mov	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d108      	bne.n	8008be4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f006 f9aa 	bl	800ef38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008c00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fcbd 	bl	8009582 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c10:	085b      	lsrs	r3, r3, #1
 8008c12:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f47f af2e 	bne.w	8008a78 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f003 fce3 	bl	800c5ec <USB_ReadInterrupts>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c30:	d122      	bne.n	8008c78 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d108      	bne.n	8008c62 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008c58:	2100      	movs	r1, #0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fea4 	bl	80099a8 <HAL_PCDEx_LPM_Callback>
 8008c60:	e002      	b.n	8008c68 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f006 f948 	bl	800eef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695a      	ldr	r2, [r3, #20]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f003 fcb5 	bl	800c5ec <USB_ReadInterrupts>
 8008c82:	4603      	mov	r3, r0
 8008c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c8c:	d112      	bne.n	8008cb4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d102      	bne.n	8008ca4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f006 f904 	bl	800eeac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695a      	ldr	r2, [r3, #20]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008cb2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f003 fc97 	bl	800c5ec <USB_ReadInterrupts>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc8:	f040 80b7 	bne.w	8008e3a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008cda:	f023 0301 	bic.w	r3, r3, #1
 8008cde:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2110      	movs	r1, #16
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f002 fd64 	bl	800b7b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cec:	2300      	movs	r3, #0
 8008cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cf0:	e046      	b.n	8008d80 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d16:	0151      	lsls	r1, r2, #5
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	440a      	add	r2, r1
 8008d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d32:	461a      	mov	r2, r3
 8008d34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	791b      	ldrb	r3, [r3, #4]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d3b2      	bcc.n	8008cf2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d9a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008d9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	7bdb      	ldrb	r3, [r3, #15]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d016      	beq.n	8008dd6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008db8:	f043 030b 	orr.w	r3, r3, #11
 8008dbc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dce:	f043 030b 	orr.w	r3, r3, #11
 8008dd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8008dd4:	e015      	b.n	8008e02 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008de4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008de8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008dec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	69fa      	ldr	r2, [r7, #28]
 8008df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dfc:	f043 030b 	orr.w	r3, r3, #11
 8008e00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e10:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008e14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008e24:	461a      	mov	r2, r3
 8008e26:	f003 fca5 	bl	800c774 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695a      	ldr	r2, [r3, #20]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f003 fbd4 	bl	800c5ec <USB_ReadInterrupts>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e4e:	d123      	bne.n	8008e98 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f003 fc6a 	bl	800c72e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f002 fd21 	bl	800b8a6 <USB_GetDevSpeed>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681c      	ldr	r4, [r3, #0]
 8008e70:	f001 f9d6 	bl	800a220 <HAL_RCC_GetHCLKFreq>
 8008e74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f002 fa25 	bl	800b2cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f005 fff3 	bl	800ee6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695a      	ldr	r2, [r3, #20]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f003 fba5 	bl	800c5ec <USB_ReadInterrupts>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d10a      	bne.n	8008ec2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f005 ffd0 	bl	800ee52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	695a      	ldr	r2, [r3, #20]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f002 0208 	and.w	r2, r2, #8
 8008ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f003 fb90 	bl	800c5ec <USB_ReadInterrupts>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ed2:	2b80      	cmp	r3, #128	@ 0x80
 8008ed4:	d123      	bne.n	8008f1e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ee6:	e014      	b.n	8008f12 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eec:	4613      	mov	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d105      	bne.n	8008f0c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fb0a 	bl	8009520 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	3301      	adds	r3, #1
 8008f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	461a      	mov	r2, r3
 8008f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d3e4      	bcc.n	8008ee8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f003 fb62 	bl	800c5ec <USB_ReadInterrupts>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f32:	d13c      	bne.n	8008fae <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f34:	2301      	movs	r3, #1
 8008f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f38:	e02b      	b.n	8008f92 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	3318      	adds	r3, #24
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d115      	bne.n	8008f8c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008f60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da12      	bge.n	8008f8c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	3317      	adds	r3, #23
 8008f76:	2201      	movs	r2, #1
 8008f78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 faca 	bl	8009520 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	3301      	adds	r3, #1
 8008f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	791b      	ldrb	r3, [r3, #4]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d3cd      	bcc.n	8008f3a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	695a      	ldr	r2, [r3, #20]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f003 fb1a 	bl	800c5ec <USB_ReadInterrupts>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fc2:	d156      	bne.n	8009072 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc8:	e045      	b.n	8009056 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fde:	4613      	mov	r3, r2
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d12e      	bne.n	8009050 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ff2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da2b      	bge.n	8009050 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009004:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009008:	429a      	cmp	r2, r3
 800900a:	d121      	bne.n	8009050 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009010:	4613      	mov	r3, r2
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	440b      	add	r3, r1
 800901a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800901e:	2201      	movs	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009048:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800904c:	6053      	str	r3, [r2, #4]
            break;
 800904e:	e008      	b.n	8009062 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	3301      	adds	r3, #1
 8009054:	627b      	str	r3, [r7, #36]	@ 0x24
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	791b      	ldrb	r3, [r3, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	4293      	cmp	r3, r2
 8009060:	d3b3      	bcc.n	8008fca <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695a      	ldr	r2, [r3, #20]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f003 fab8 	bl	800c5ec <USB_ReadInterrupts>
 800907c:	4603      	mov	r3, r0
 800907e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009086:	d10a      	bne.n	800909e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f005 ff67 	bl	800ef5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800909c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f003 faa2 	bl	800c5ec <USB_ReadInterrupts>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d115      	bne.n	80090de <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f005 ff57 	bl	800ef78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6859      	ldr	r1, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	e000      	b.n	80090de <HAL_PCD_IRQHandler+0x93c>
      return;
 80090dc:	bf00      	nop
    }
  }
}
 80090de:	3734      	adds	r7, #52	@ 0x34
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd90      	pop	{r4, r7, pc}

080090e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_PCD_SetAddress+0x1a>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e012      	b.n	8009124 <HAL_PCD_SetAddress+0x40>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	78fa      	ldrb	r2, [r7, #3]
 800910a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f003 fa01 	bl	800c51c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	461a      	mov	r2, r3
 800913a:	4603      	mov	r3, r0
 800913c:	70fb      	strb	r3, [r7, #3]
 800913e:	460b      	mov	r3, r1
 8009140:	803b      	strh	r3, [r7, #0]
 8009142:	4613      	mov	r3, r2
 8009144:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800914a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800914e:	2b00      	cmp	r3, #0
 8009150:	da0f      	bge.n	8009172 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3310      	adds	r3, #16
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	705a      	strb	r2, [r3, #1]
 8009170:	e00f      	b.n	8009192 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	f003 020f 	and.w	r2, r3, #15
 8009178:	4613      	mov	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
 8009188:	3304      	adds	r3, #4
 800918a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	b2da      	uxtb	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800919e:	883b      	ldrh	r3, [r7, #0]
 80091a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	78ba      	ldrb	r2, [r7, #2]
 80091ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d004      	beq.n	80091c0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80091c0:	78bb      	ldrb	r3, [r7, #2]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d102      	bne.n	80091cc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <HAL_PCD_EP_Open+0xae>
 80091d6:	2302      	movs	r3, #2
 80091d8:	e00e      	b.n	80091f8 <HAL_PCD_EP_Open+0xcc>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fb81 	bl	800b8f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80091f6:	7afb      	ldrb	r3, [r7, #11]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800920c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009210:	2b00      	cmp	r3, #0
 8009212:	da0f      	bge.n	8009234 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	f003 020f 	and.w	r2, r3, #15
 800921a:	4613      	mov	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	3310      	adds	r3, #16
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	4413      	add	r3, r2
 8009228:	3304      	adds	r3, #4
 800922a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	705a      	strb	r2, [r3, #1]
 8009232:	e00f      	b.n	8009254 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	f003 020f 	and.w	r2, r3, #15
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	b2da      	uxtb	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_PCD_EP_Close+0x6e>
 800926a:	2302      	movs	r3, #2
 800926c:	e00e      	b.n	800928c <HAL_PCD_EP_Close+0x8c>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	4618      	mov	r0, r3
 800927e:	f002 fbbf 	bl	800ba00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	460b      	mov	r3, r1
 80092a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	f003 020f 	and.w	r2, r3, #15
 80092aa:	4613      	mov	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	3304      	adds	r3, #4
 80092bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2200      	movs	r2, #0
 80092ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2200      	movs	r2, #0
 80092d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092d6:	7afb      	ldrb	r3, [r7, #11]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	799b      	ldrb	r3, [r3, #6]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d102      	bne.n	80092f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	799b      	ldrb	r3, [r3, #6]
 80092f8:	461a      	mov	r2, r3
 80092fa:	6979      	ldr	r1, [r7, #20]
 80092fc:	f002 fc5c 	bl	800bbb8 <USB_EPStartXfer>

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	f003 020f 	and.w	r2, r3, #15
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800932c:	681b      	ldr	r3, [r3, #0]
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	460b      	mov	r3, r1
 8009348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	4613      	mov	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	3310      	adds	r3, #16
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	3304      	adds	r3, #4
 8009360:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2200      	movs	r2, #0
 8009372:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2201      	movs	r2, #1
 8009378:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	b2da      	uxtb	r2, r3
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	799b      	ldrb	r3, [r3, #6]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d102      	bne.n	8009394 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	799b      	ldrb	r3, [r3, #6]
 800939c:	461a      	mov	r2, r3
 800939e:	6979      	ldr	r1, [r7, #20]
 80093a0:	f002 fc0a 	bl	800bbb8 <USB_EPStartXfer>

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	f003 030f 	and.w	r3, r3, #15
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	7912      	ldrb	r2, [r2, #4]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d901      	bls.n	80093cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e04f      	b.n	800946c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80093cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da0f      	bge.n	80093f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 020f 	and.w	r2, r3, #15
 80093da:	4613      	mov	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	3310      	adds	r3, #16
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	4413      	add	r3, r2
 80093e8:	3304      	adds	r3, #4
 80093ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2201      	movs	r2, #1
 80093f0:	705a      	strb	r2, [r3, #1]
 80093f2:	e00d      	b.n	8009410 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4613      	mov	r3, r2
 80093f8:	00db      	lsls	r3, r3, #3
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	b2da      	uxtb	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_PCD_EP_SetStall+0x82>
 800942c:	2302      	movs	r3, #2
 800942e:	e01d      	b.n	800946c <HAL_PCD_EP_SetStall+0xbe>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68f9      	ldr	r1, [r7, #12]
 800943e:	4618      	mov	r0, r3
 8009440:	f002 ff98 	bl	800c374 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7999      	ldrb	r1, [r3, #6]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800945c:	461a      	mov	r2, r3
 800945e:	f003 f989 	bl	800c774 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	7912      	ldrb	r2, [r2, #4]
 800948a:	4293      	cmp	r3, r2
 800948c:	d901      	bls.n	8009492 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e042      	b.n	8009518 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009496:	2b00      	cmp	r3, #0
 8009498:	da0f      	bge.n	80094ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	3310      	adds	r3, #16
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	3304      	adds	r3, #4
 80094b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	705a      	strb	r2, [r3, #1]
 80094b8:	e00f      	b.n	80094da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094ba:	78fb      	ldrb	r3, [r7, #3]
 80094bc:	f003 020f 	and.w	r2, r3, #15
 80094c0:	4613      	mov	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	3304      	adds	r3, #4
 80094d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d101      	bne.n	80094fa <HAL_PCD_EP_ClrStall+0x86>
 80094f6:	2302      	movs	r3, #2
 80094f8:	e00e      	b.n	8009518 <HAL_PCD_EP_ClrStall+0xa4>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68f9      	ldr	r1, [r7, #12]
 8009508:	4618      	mov	r0, r3
 800950a:	f002 ffa1 	bl	800c450 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800952c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009530:	2b00      	cmp	r3, #0
 8009532:	da0c      	bge.n	800954e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	f003 020f 	and.w	r2, r3, #15
 800953a:	4613      	mov	r3, r2
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	3310      	adds	r3, #16
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	3304      	adds	r3, #4
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e00c      	b.n	8009568 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	f003 020f 	and.w	r2, r3, #15
 8009554:	4613      	mov	r3, r2
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	4413      	add	r3, r2
 8009564:	3304      	adds	r3, #4
 8009566:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68f9      	ldr	r1, [r7, #12]
 800956e:	4618      	mov	r0, r3
 8009570:	f002 fdc0 	bl	800c0f4 <USB_EPStopXfer>
 8009574:	4603      	mov	r3, r0
 8009576:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009578:	7afb      	ldrb	r3, [r7, #11]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b08a      	sub	sp, #40	@ 0x28
 8009586:	af02      	add	r7, sp, #8
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	3310      	adds	r3, #16
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	3304      	adds	r3, #4
 80095a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	695a      	ldr	r2, [r3, #20]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d901      	bls.n	80095ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e06b      	b.n	8009692 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d902      	bls.n	80095d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	3303      	adds	r3, #3
 80095da:	089b      	lsrs	r3, r3, #2
 80095dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80095de:	e02a      	b.n	8009636 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d902      	bls.n	80095fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	3303      	adds	r3, #3
 8009600:	089b      	lsrs	r3, r3, #2
 8009602:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	68d9      	ldr	r1, [r3, #12]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	b2da      	uxtb	r2, r3
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	4603      	mov	r3, r0
 8009618:	6978      	ldr	r0, [r7, #20]
 800961a:	f002 fe15 	bl	800c248 <USB_WritePacket>

    ep->xfer_buff  += len;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	441a      	add	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	695a      	ldr	r2, [r3, #20]
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	429a      	cmp	r2, r3
 800964a:	d809      	bhi.n	8009660 <PCD_WriteEmptyTxFifo+0xde>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009654:	429a      	cmp	r2, r3
 8009656:	d203      	bcs.n	8009660 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1bf      	bne.n	80095e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	429a      	cmp	r2, r3
 800966a:	d811      	bhi.n	8009690 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f003 030f 	and.w	r3, r3, #15
 8009672:	2201      	movs	r2, #1
 8009674:	fa02 f303 	lsl.w	r3, r2, r3
 8009678:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	43db      	mvns	r3, r3
 8009686:	6939      	ldr	r1, [r7, #16]
 8009688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800968c:	4013      	ands	r3, r2
 800968e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3720      	adds	r7, #32
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	333c      	adds	r3, #60	@ 0x3c
 80096b4:	3304      	adds	r3, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	799b      	ldrb	r3, [r3, #6]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d17b      	bne.n	80097ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d015      	beq.n	8009708 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	4a61      	ldr	r2, [pc, #388]	@ (8009864 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	f240 80b9 	bls.w	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80b3 	beq.w	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fe:	461a      	mov	r2, r3
 8009700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009704:	6093      	str	r3, [r2, #8]
 8009706:	e0a7      	b.n	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f003 0320 	and.w	r3, r3, #32
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971e:	461a      	mov	r2, r3
 8009720:	2320      	movs	r3, #32
 8009722:	6093      	str	r3, [r2, #8]
 8009724:	e098      	b.n	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	f040 8093 	bne.w	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4a4b      	ldr	r2, [pc, #300]	@ (8009864 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d90f      	bls.n	800975a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00a      	beq.n	800975a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009750:	461a      	mov	r2, r3
 8009752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009756:	6093      	str	r3, [r2, #8]
 8009758:	e07e      	b.n	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	4613      	mov	r3, r2
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	4413      	add	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	4413      	add	r3, r2
 800976c:	3304      	adds	r3, #4
 800976e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	0159      	lsls	r1, r3, #5
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	440b      	add	r3, r1
 800977c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d114      	bne.n	80097bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80097a4:	461a      	mov	r2, r3
 80097a6:	2101      	movs	r1, #1
 80097a8:	f002 ffe4 	bl	800c774 <USB_EP0_OutStart>
 80097ac:	e006      	b.n	80097bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	441a      	add	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f005 fb10 	bl	800ede8 <HAL_PCD_DataOutStageCallback>
 80097c8:	e046      	b.n	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	4a26      	ldr	r2, [pc, #152]	@ (8009868 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d124      	bne.n	800981c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e8:	461a      	mov	r2, r3
 80097ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ee:	6093      	str	r3, [r2, #8]
 80097f0:	e032      	b.n	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009808:	461a      	mov	r2, r3
 800980a:	2320      	movs	r3, #32
 800980c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f005 fae7 	bl	800ede8 <HAL_PCD_DataOutStageCallback>
 800981a:	e01d      	b.n	8009858 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d114      	bne.n	800984c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	4613      	mov	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d108      	bne.n	800984c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009844:	461a      	mov	r2, r3
 8009846:	2100      	movs	r1, #0
 8009848:	f002 ff94 	bl	800c774 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f005 fac8 	bl	800ede8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	4f54300a 	.word	0x4f54300a
 8009868:	4f54310a 	.word	0x4f54310a

0800986c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	333c      	adds	r3, #60	@ 0x3c
 8009884:	3304      	adds	r3, #4
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d90e      	bls.n	80098c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d009      	beq.n	80098c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b8:	461a      	mov	r2, r3
 80098ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f005 fa7f 	bl	800edc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4a0a      	ldr	r2, [pc, #40]	@ (80098f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d90c      	bls.n	80098e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	799b      	ldrb	r3, [r3, #6]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d108      	bne.n	80098e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80098e0:	461a      	mov	r2, r3
 80098e2:	2101      	movs	r1, #1
 80098e4:	f002 ff46 	bl	800c774 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3718      	adds	r7, #24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	4f54300a 	.word	0x4f54300a

080098f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
 8009904:	4613      	mov	r3, r2
 8009906:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d107      	bne.n	8009926 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009916:	883b      	ldrh	r3, [r7, #0]
 8009918:	0419      	lsls	r1, r3, #16
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	430a      	orrs	r2, r1
 8009922:	629a      	str	r2, [r3, #40]	@ 0x28
 8009924:	e028      	b.n	8009978 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992c:	0c1b      	lsrs	r3, r3, #16
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	4413      	add	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	e00d      	b.n	8009956 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	3340      	adds	r3, #64	@ 0x40
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	0c1b      	lsrs	r3, r3, #16
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	4413      	add	r3, r2
 800994e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	3301      	adds	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]
 8009956:	7bfa      	ldrb	r2, [r7, #15]
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	3b01      	subs	r3, #1
 800995c:	429a      	cmp	r2, r3
 800995e:	d3ec      	bcc.n	800993a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009960:	883b      	ldrh	r3, [r7, #0]
 8009962:	0418      	lsls	r0, r3, #16
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6819      	ldr	r1, [r3, #0]
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	3b01      	subs	r3, #1
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	4302      	orrs	r2, r0
 8009970:	3340      	adds	r3, #64	@ 0x40
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	887a      	ldrh	r2, [r7, #2]
 8009998:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e267      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d075      	beq.n	8009aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80099de:	4b88      	ldr	r3, [pc, #544]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f003 030c 	and.w	r3, r3, #12
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d00c      	beq.n	8009a04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099ea:	4b85      	ldr	r3, [pc, #532]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d112      	bne.n	8009a1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099f6:	4b82      	ldr	r3, [pc, #520]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a02:	d10b      	bne.n	8009a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a04:	4b7e      	ldr	r3, [pc, #504]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d05b      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x108>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d157      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e242      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a24:	d106      	bne.n	8009a34 <HAL_RCC_OscConfig+0x74>
 8009a26:	4b76      	ldr	r3, [pc, #472]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a75      	ldr	r2, [pc, #468]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	e01d      	b.n	8009a70 <HAL_RCC_OscConfig+0xb0>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a3c:	d10c      	bne.n	8009a58 <HAL_RCC_OscConfig+0x98>
 8009a3e:	4b70      	ldr	r3, [pc, #448]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a6f      	ldr	r2, [pc, #444]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	e00b      	b.n	8009a70 <HAL_RCC_OscConfig+0xb0>
 8009a58:	4b69      	ldr	r3, [pc, #420]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a68      	ldr	r2, [pc, #416]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	4b66      	ldr	r3, [pc, #408]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a65      	ldr	r2, [pc, #404]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d013      	beq.n	8009aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a78:	f7f9 fd7a 	bl	8003570 <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a7e:	e008      	b.n	8009a92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a80:	f7f9 fd76 	bl	8003570 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b64      	cmp	r3, #100	@ 0x64
 8009a8c:	d901      	bls.n	8009a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e207      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a92:	4b5b      	ldr	r3, [pc, #364]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0f0      	beq.n	8009a80 <HAL_RCC_OscConfig+0xc0>
 8009a9e:	e014      	b.n	8009aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aa0:	f7f9 fd66 	bl	8003570 <HAL_GetTick>
 8009aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009aa6:	e008      	b.n	8009aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009aa8:	f7f9 fd62 	bl	8003570 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b64      	cmp	r3, #100	@ 0x64
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e1f3      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009aba:	4b51      	ldr	r3, [pc, #324]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1f0      	bne.n	8009aa8 <HAL_RCC_OscConfig+0xe8>
 8009ac6:	e000      	b.n	8009aca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d063      	beq.n	8009b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f003 030c 	and.w	r3, r3, #12
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00b      	beq.n	8009afa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ae2:	4b47      	ldr	r3, [pc, #284]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d11c      	bne.n	8009b28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009aee:	4b44      	ldr	r3, [pc, #272]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d116      	bne.n	8009b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009afa:	4b41      	ldr	r3, [pc, #260]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <HAL_RCC_OscConfig+0x152>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d001      	beq.n	8009b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e1c7      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b12:	4b3b      	ldr	r3, [pc, #236]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	4937      	ldr	r1, [pc, #220]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b26:	e03a      	b.n	8009b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d020      	beq.n	8009b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b30:	4b34      	ldr	r3, [pc, #208]	@ (8009c04 <HAL_RCC_OscConfig+0x244>)
 8009b32:	2201      	movs	r2, #1
 8009b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b36:	f7f9 fd1b 	bl	8003570 <HAL_GetTick>
 8009b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b3c:	e008      	b.n	8009b50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b3e:	f7f9 fd17 	bl	8003570 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d901      	bls.n	8009b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e1a8      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b50:	4b2b      	ldr	r3, [pc, #172]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d0f0      	beq.n	8009b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b5c:	4b28      	ldr	r3, [pc, #160]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	4925      	ldr	r1, [pc, #148]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	600b      	str	r3, [r1, #0]
 8009b70:	e015      	b.n	8009b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b72:	4b24      	ldr	r3, [pc, #144]	@ (8009c04 <HAL_RCC_OscConfig+0x244>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7f9 fcfa 	bl	8003570 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b80:	f7f9 fcf6 	bl	8003570 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e187      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b92:	4b1b      	ldr	r3, [pc, #108]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f0      	bne.n	8009b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d036      	beq.n	8009c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d016      	beq.n	8009be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bb2:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <HAL_RCC_OscConfig+0x248>)
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb8:	f7f9 fcda 	bl	8003570 <HAL_GetTick>
 8009bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bc0:	f7f9 fcd6 	bl	8003570 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e167      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009c00 <HAL_RCC_OscConfig+0x240>)
 8009bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0f0      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x200>
 8009bde:	e01b      	b.n	8009c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009be0:	4b09      	ldr	r3, [pc, #36]	@ (8009c08 <HAL_RCC_OscConfig+0x248>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009be6:	f7f9 fcc3 	bl	8003570 <HAL_GetTick>
 8009bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bec:	e00e      	b.n	8009c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bee:	f7f9 fcbf 	bl	8003570 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d907      	bls.n	8009c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e150      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
 8009c00:	40023800 	.word	0x40023800
 8009c04:	42470000 	.word	0x42470000
 8009c08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c0c:	4b88      	ldr	r3, [pc, #544]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1ea      	bne.n	8009bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 8097 	beq.w	8009d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c26:	2300      	movs	r3, #0
 8009c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c2a:	4b81      	ldr	r3, [pc, #516]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10f      	bne.n	8009c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c36:	2300      	movs	r3, #0
 8009c38:	60bb      	str	r3, [r7, #8]
 8009c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c46:	4b7a      	ldr	r3, [pc, #488]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c4e:	60bb      	str	r3, [r7, #8]
 8009c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c52:	2301      	movs	r3, #1
 8009c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c56:	4b77      	ldr	r3, [pc, #476]	@ (8009e34 <HAL_RCC_OscConfig+0x474>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d118      	bne.n	8009c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c62:	4b74      	ldr	r3, [pc, #464]	@ (8009e34 <HAL_RCC_OscConfig+0x474>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a73      	ldr	r2, [pc, #460]	@ (8009e34 <HAL_RCC_OscConfig+0x474>)
 8009c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c6e:	f7f9 fc7f 	bl	8003570 <HAL_GetTick>
 8009c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c74:	e008      	b.n	8009c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c76:	f7f9 fc7b 	bl	8003570 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d901      	bls.n	8009c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e10c      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c88:	4b6a      	ldr	r3, [pc, #424]	@ (8009e34 <HAL_RCC_OscConfig+0x474>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0f0      	beq.n	8009c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d106      	bne.n	8009caa <HAL_RCC_OscConfig+0x2ea>
 8009c9c:	4b64      	ldr	r3, [pc, #400]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca0:	4a63      	ldr	r2, [pc, #396]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009ca2:	f043 0301 	orr.w	r3, r3, #1
 8009ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ca8:	e01c      	b.n	8009ce4 <HAL_RCC_OscConfig+0x324>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d10c      	bne.n	8009ccc <HAL_RCC_OscConfig+0x30c>
 8009cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cb8:	f043 0304 	orr.w	r3, r3, #4
 8009cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cc4:	f043 0301 	orr.w	r3, r3, #1
 8009cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cca:	e00b      	b.n	8009ce4 <HAL_RCC_OscConfig+0x324>
 8009ccc:	4b58      	ldr	r3, [pc, #352]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cd0:	4a57      	ldr	r2, [pc, #348]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cd2:	f023 0301 	bic.w	r3, r3, #1
 8009cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cd8:	4b55      	ldr	r3, [pc, #340]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cdc:	4a54      	ldr	r2, [pc, #336]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009cde:	f023 0304 	bic.w	r3, r3, #4
 8009ce2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d015      	beq.n	8009d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cec:	f7f9 fc40 	bl	8003570 <HAL_GetTick>
 8009cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cf2:	e00a      	b.n	8009d0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cf4:	f7f9 fc3c 	bl	8003570 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e0cb      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d0a:	4b49      	ldr	r3, [pc, #292]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0ee      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x334>
 8009d16:	e014      	b.n	8009d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d18:	f7f9 fc2a 	bl	8003570 <HAL_GetTick>
 8009d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d1e:	e00a      	b.n	8009d36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d20:	f7f9 fc26 	bl	8003570 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e0b5      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d36:	4b3e      	ldr	r3, [pc, #248]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1ee      	bne.n	8009d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d105      	bne.n	8009d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d48:	4b39      	ldr	r3, [pc, #228]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	4a38      	ldr	r2, [pc, #224]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80a1 	beq.w	8009ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d5e:	4b34      	ldr	r3, [pc, #208]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f003 030c 	and.w	r3, r3, #12
 8009d66:	2b08      	cmp	r3, #8
 8009d68:	d05c      	beq.n	8009e24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d141      	bne.n	8009df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d72:	4b31      	ldr	r3, [pc, #196]	@ (8009e38 <HAL_RCC_OscConfig+0x478>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d78:	f7f9 fbfa 	bl	8003570 <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d80:	f7f9 fbf6 	bl	8003570 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e087      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d92:	4b27      	ldr	r3, [pc, #156]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1f0      	bne.n	8009d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69da      	ldr	r2, [r3, #28]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dac:	019b      	lsls	r3, r3, #6
 8009dae:	431a      	orrs	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	085b      	lsrs	r3, r3, #1
 8009db6:	3b01      	subs	r3, #1
 8009db8:	041b      	lsls	r3, r3, #16
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc0:	061b      	lsls	r3, r3, #24
 8009dc2:	491b      	ldr	r1, [pc, #108]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e38 <HAL_RCC_OscConfig+0x478>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dce:	f7f9 fbcf 	bl	8003570 <HAL_GetTick>
 8009dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dd4:	e008      	b.n	8009de8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dd6:	f7f9 fbcb 	bl	8003570 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d901      	bls.n	8009de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e05c      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009de8:	4b11      	ldr	r3, [pc, #68]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0f0      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x416>
 8009df4:	e054      	b.n	8009ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009df6:	4b10      	ldr	r3, [pc, #64]	@ (8009e38 <HAL_RCC_OscConfig+0x478>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dfc:	f7f9 fbb8 	bl	8003570 <HAL_GetTick>
 8009e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e02:	e008      	b.n	8009e16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e04:	f7f9 fbb4 	bl	8003570 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d901      	bls.n	8009e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e045      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e16:	4b06      	ldr	r3, [pc, #24]	@ (8009e30 <HAL_RCC_OscConfig+0x470>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f0      	bne.n	8009e04 <HAL_RCC_OscConfig+0x444>
 8009e22:	e03d      	b.n	8009ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d107      	bne.n	8009e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e038      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
 8009e30:	40023800 	.word	0x40023800
 8009e34:	40007000 	.word	0x40007000
 8009e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8009eac <HAL_RCC_OscConfig+0x4ec>)
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d028      	beq.n	8009e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d121      	bne.n	8009e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d11a      	bne.n	8009e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d111      	bne.n	8009e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	3b01      	subs	r3, #1
 8009e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d107      	bne.n	8009e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d001      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	40023800 	.word	0x40023800

08009eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e0cc      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ec4:	4b68      	ldr	r3, [pc, #416]	@ (800a068 <HAL_RCC_ClockConfig+0x1b8>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0307 	and.w	r3, r3, #7
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d90c      	bls.n	8009eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ed2:	4b65      	ldr	r3, [pc, #404]	@ (800a068 <HAL_RCC_ClockConfig+0x1b8>)
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eda:	4b63      	ldr	r3, [pc, #396]	@ (800a068 <HAL_RCC_ClockConfig+0x1b8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d001      	beq.n	8009eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e0b8      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d020      	beq.n	8009f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d005      	beq.n	8009f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f04:	4b59      	ldr	r3, [pc, #356]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	4a58      	ldr	r2, [pc, #352]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f1c:	4b53      	ldr	r3, [pc, #332]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	4a52      	ldr	r2, [pc, #328]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f28:	4b50      	ldr	r3, [pc, #320]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	494d      	ldr	r1, [pc, #308]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d044      	beq.n	8009fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d107      	bne.n	8009f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f4e:	4b47      	ldr	r3, [pc, #284]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d119      	bne.n	8009f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e07f      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d003      	beq.n	8009f6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d107      	bne.n	8009f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e06f      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e067      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f8e:	4b37      	ldr	r3, [pc, #220]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f023 0203 	bic.w	r2, r3, #3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	4934      	ldr	r1, [pc, #208]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009fa0:	f7f9 fae6 	bl	8003570 <HAL_GetTick>
 8009fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fa6:	e00a      	b.n	8009fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fa8:	f7f9 fae2 	bl	8003570 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d901      	bls.n	8009fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e04f      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f003 020c 	and.w	r2, r3, #12
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d1eb      	bne.n	8009fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fd0:	4b25      	ldr	r3, [pc, #148]	@ (800a068 <HAL_RCC_ClockConfig+0x1b8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0307 	and.w	r3, r3, #7
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d20c      	bcs.n	8009ff8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fde:	4b22      	ldr	r3, [pc, #136]	@ (800a068 <HAL_RCC_ClockConfig+0x1b8>)
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fe6:	4b20      	ldr	r3, [pc, #128]	@ (800a068 <HAL_RCC_ClockConfig+0x1b8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0307 	and.w	r3, r3, #7
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d001      	beq.n	8009ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e032      	b.n	800a05e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d008      	beq.n	800a016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a004:	4b19      	ldr	r3, [pc, #100]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	4916      	ldr	r1, [pc, #88]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 800a012:	4313      	orrs	r3, r2
 800a014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0308 	and.w	r3, r3, #8
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d009      	beq.n	800a036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a022:	4b12      	ldr	r3, [pc, #72]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	490e      	ldr	r1, [pc, #56]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 800a032:	4313      	orrs	r3, r2
 800a034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a036:	f000 f82d 	bl	800a094 <HAL_RCC_GetSysClockFreq>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b0b      	ldr	r3, [pc, #44]	@ (800a06c <HAL_RCC_ClockConfig+0x1bc>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	091b      	lsrs	r3, r3, #4
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	490a      	ldr	r1, [pc, #40]	@ (800a070 <HAL_RCC_ClockConfig+0x1c0>)
 800a048:	5ccb      	ldrb	r3, [r1, r3]
 800a04a:	fa22 f303 	lsr.w	r3, r2, r3
 800a04e:	4a09      	ldr	r2, [pc, #36]	@ (800a074 <HAL_RCC_ClockConfig+0x1c4>)
 800a050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a052:	4b09      	ldr	r3, [pc, #36]	@ (800a078 <HAL_RCC_ClockConfig+0x1c8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4618      	mov	r0, r3
 800a058:	f7f9 fa46 	bl	80034e8 <HAL_InitTick>

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	40023c00 	.word	0x40023c00
 800a06c:	40023800 	.word	0x40023800
 800a070:	0800fe08 	.word	0x0800fe08
 800a074:	20000004 	.word	0x20000004
 800a078:	20000008 	.word	0x20000008

0800a07c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a080:	4b03      	ldr	r3, [pc, #12]	@ (800a090 <HAL_RCC_EnableCSS+0x14>)
 800a082:	2201      	movs	r2, #1
 800a084:	601a      	str	r2, [r3, #0]
}
 800a086:	bf00      	nop
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	4247004c 	.word	0x4247004c

0800a094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a098:	b090      	sub	sp, #64	@ 0x40
 800a09a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0ac:	4b59      	ldr	r3, [pc, #356]	@ (800a214 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f003 030c 	and.w	r3, r3, #12
 800a0b4:	2b08      	cmp	r3, #8
 800a0b6:	d00d      	beq.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x40>
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	f200 80a1 	bhi.w	800a200 <HAL_RCC_GetSysClockFreq+0x16c>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x34>
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d003      	beq.n	800a0ce <HAL_RCC_GetSysClockFreq+0x3a>
 800a0c6:	e09b      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0c8:	4b53      	ldr	r3, [pc, #332]	@ (800a218 <HAL_RCC_GetSysClockFreq+0x184>)
 800a0ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0cc:	e09b      	b.n	800a206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0ce:	4b53      	ldr	r3, [pc, #332]	@ (800a21c <HAL_RCC_GetSysClockFreq+0x188>)
 800a0d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a0d2:	e098      	b.n	800a206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a0d4:	4b4f      	ldr	r3, [pc, #316]	@ (800a214 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a0de:	4b4d      	ldr	r3, [pc, #308]	@ (800a214 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d028      	beq.n	800a13c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a214 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	099b      	lsrs	r3, r3, #6
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	623b      	str	r3, [r7, #32]
 800a0f4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4b47      	ldr	r3, [pc, #284]	@ (800a21c <HAL_RCC_GetSysClockFreq+0x188>)
 800a100:	fb03 f201 	mul.w	r2, r3, r1
 800a104:	2300      	movs	r3, #0
 800a106:	fb00 f303 	mul.w	r3, r0, r3
 800a10a:	4413      	add	r3, r2
 800a10c:	4a43      	ldr	r2, [pc, #268]	@ (800a21c <HAL_RCC_GetSysClockFreq+0x188>)
 800a10e:	fba0 1202 	umull	r1, r2, r0, r2
 800a112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a114:	460a      	mov	r2, r1
 800a116:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a11a:	4413      	add	r3, r2
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a120:	2200      	movs	r2, #0
 800a122:	61bb      	str	r3, [r7, #24]
 800a124:	61fa      	str	r2, [r7, #28]
 800a126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a12a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a12e:	f7f6 f853 	bl	80001d8 <__aeabi_uldivmod>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4613      	mov	r3, r2
 800a138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a13a:	e053      	b.n	800a1e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a13c:	4b35      	ldr	r3, [pc, #212]	@ (800a214 <HAL_RCC_GetSysClockFreq+0x180>)
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	099b      	lsrs	r3, r3, #6
 800a142:	2200      	movs	r2, #0
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	617a      	str	r2, [r7, #20]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a14e:	f04f 0b00 	mov.w	fp, #0
 800a152:	4652      	mov	r2, sl
 800a154:	465b      	mov	r3, fp
 800a156:	f04f 0000 	mov.w	r0, #0
 800a15a:	f04f 0100 	mov.w	r1, #0
 800a15e:	0159      	lsls	r1, r3, #5
 800a160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a164:	0150      	lsls	r0, r2, #5
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	ebb2 080a 	subs.w	r8, r2, sl
 800a16e:	eb63 090b 	sbc.w	r9, r3, fp
 800a172:	f04f 0200 	mov.w	r2, #0
 800a176:	f04f 0300 	mov.w	r3, #0
 800a17a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a17e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a182:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a186:	ebb2 0408 	subs.w	r4, r2, r8
 800a18a:	eb63 0509 	sbc.w	r5, r3, r9
 800a18e:	f04f 0200 	mov.w	r2, #0
 800a192:	f04f 0300 	mov.w	r3, #0
 800a196:	00eb      	lsls	r3, r5, #3
 800a198:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a19c:	00e2      	lsls	r2, r4, #3
 800a19e:	4614      	mov	r4, r2
 800a1a0:	461d      	mov	r5, r3
 800a1a2:	eb14 030a 	adds.w	r3, r4, sl
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	eb45 030b 	adc.w	r3, r5, fp
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	f04f 0300 	mov.w	r3, #0
 800a1b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	028b      	lsls	r3, r1, #10
 800a1be:	4621      	mov	r1, r4
 800a1c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	028a      	lsls	r2, r1, #10
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	60bb      	str	r3, [r7, #8]
 800a1d2:	60fa      	str	r2, [r7, #12]
 800a1d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1d8:	f7f5 fffe 	bl	80001d8 <__aeabi_uldivmod>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	0c1b      	lsrs	r3, r3, #16
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a1f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a1fe:	e002      	b.n	800a206 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a200:	4b05      	ldr	r3, [pc, #20]	@ (800a218 <HAL_RCC_GetSysClockFreq+0x184>)
 800a202:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a204:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3740      	adds	r7, #64	@ 0x40
 800a20c:	46bd      	mov	sp, r7
 800a20e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a212:	bf00      	nop
 800a214:	40023800 	.word	0x40023800
 800a218:	00f42400 	.word	0x00f42400
 800a21c:	017d7840 	.word	0x017d7840

0800a220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a220:	b480      	push	{r7}
 800a222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a224:	4b03      	ldr	r3, [pc, #12]	@ (800a234 <HAL_RCC_GetHCLKFreq+0x14>)
 800a226:	681b      	ldr	r3, [r3, #0]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20000004 	.word	0x20000004

0800a238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a23c:	f7ff fff0 	bl	800a220 <HAL_RCC_GetHCLKFreq>
 800a240:	4602      	mov	r2, r0
 800a242:	4b05      	ldr	r3, [pc, #20]	@ (800a258 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	0a9b      	lsrs	r3, r3, #10
 800a248:	f003 0307 	and.w	r3, r3, #7
 800a24c:	4903      	ldr	r1, [pc, #12]	@ (800a25c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a24e:	5ccb      	ldrb	r3, [r1, r3]
 800a250:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a254:	4618      	mov	r0, r3
 800a256:	bd80      	pop	{r7, pc}
 800a258:	40023800 	.word	0x40023800
 800a25c:	0800fe18 	.word	0x0800fe18

0800a260 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a264:	4b06      	ldr	r3, [pc, #24]	@ (800a280 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a26c:	2b80      	cmp	r3, #128	@ 0x80
 800a26e:	d104      	bne.n	800a27a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a270:	f000 f80a 	bl	800a288 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a274:	4b03      	ldr	r3, [pc, #12]	@ (800a284 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a276:	2280      	movs	r2, #128	@ 0x80
 800a278:	701a      	strb	r2, [r3, #0]
  }
}
 800a27a:	bf00      	nop
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	40023800 	.word	0x40023800
 800a284:	4002380e 	.word	0x4002380e

0800a288 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e041      	b.n	800a32c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d106      	bne.n	800a2c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7f8 ff91 	bl	80031e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f000 fc3b 	bl	800ab50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	d001      	beq.n	800a34c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e044      	b.n	800a3d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0201 	orr.w	r2, r2, #1
 800a362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1e      	ldr	r2, [pc, #120]	@ (800a3e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d018      	beq.n	800a3a0 <HAL_TIM_Base_Start_IT+0x6c>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a376:	d013      	beq.n	800a3a0 <HAL_TIM_Base_Start_IT+0x6c>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a1a      	ldr	r2, [pc, #104]	@ (800a3e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00e      	beq.n	800a3a0 <HAL_TIM_Base_Start_IT+0x6c>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a19      	ldr	r2, [pc, #100]	@ (800a3ec <HAL_TIM_Base_Start_IT+0xb8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d009      	beq.n	800a3a0 <HAL_TIM_Base_Start_IT+0x6c>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a17      	ldr	r2, [pc, #92]	@ (800a3f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d004      	beq.n	800a3a0 <HAL_TIM_Base_Start_IT+0x6c>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a16      	ldr	r2, [pc, #88]	@ (800a3f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d111      	bne.n	800a3c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b06      	cmp	r3, #6
 800a3b0:	d010      	beq.n	800a3d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f042 0201 	orr.w	r2, r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c2:	e007      	b.n	800a3d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0201 	orr.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40010000 	.word	0x40010000
 800a3e8:	40000400 	.word	0x40000400
 800a3ec:	40000800 	.word	0x40000800
 800a3f0:	40000c00 	.word	0x40000c00
 800a3f4:	40014000 	.word	0x40014000

0800a3f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e041      	b.n	800a48e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f839 	bl	800a496 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f000 fb8a 	bl	800ab50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d109      	bne.n	800a4d0 <HAL_TIM_PWM_Start+0x24>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	bf14      	ite	ne
 800a4c8:	2301      	movne	r3, #1
 800a4ca:	2300      	moveq	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	e022      	b.n	800a516 <HAL_TIM_PWM_Start+0x6a>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b04      	cmp	r3, #4
 800a4d4:	d109      	bne.n	800a4ea <HAL_TIM_PWM_Start+0x3e>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	bf14      	ite	ne
 800a4e2:	2301      	movne	r3, #1
 800a4e4:	2300      	moveq	r3, #0
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	e015      	b.n	800a516 <HAL_TIM_PWM_Start+0x6a>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d109      	bne.n	800a504 <HAL_TIM_PWM_Start+0x58>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	bf14      	ite	ne
 800a4fc:	2301      	movne	r3, #1
 800a4fe:	2300      	moveq	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	e008      	b.n	800a516 <HAL_TIM_PWM_Start+0x6a>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	bf14      	ite	ne
 800a510:	2301      	movne	r3, #1
 800a512:	2300      	moveq	r3, #0
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e068      	b.n	800a5f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d104      	bne.n	800a52e <HAL_TIM_PWM_Start+0x82>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a52c:	e013      	b.n	800a556 <HAL_TIM_PWM_Start+0xaa>
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b04      	cmp	r3, #4
 800a532:	d104      	bne.n	800a53e <HAL_TIM_PWM_Start+0x92>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a53c:	e00b      	b.n	800a556 <HAL_TIM_PWM_Start+0xaa>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b08      	cmp	r3, #8
 800a542:	d104      	bne.n	800a54e <HAL_TIM_PWM_Start+0xa2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a54c:	e003      	b.n	800a556 <HAL_TIM_PWM_Start+0xaa>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2202      	movs	r2, #2
 800a552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2201      	movs	r2, #1
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fda8 	bl	800b0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a23      	ldr	r2, [pc, #140]	@ (800a5f8 <HAL_TIM_PWM_Start+0x14c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d107      	bne.n	800a57e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a57c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f8 <HAL_TIM_PWM_Start+0x14c>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d018      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x10e>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a590:	d013      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x10e>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a19      	ldr	r2, [pc, #100]	@ (800a5fc <HAL_TIM_PWM_Start+0x150>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d00e      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x10e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a17      	ldr	r2, [pc, #92]	@ (800a600 <HAL_TIM_PWM_Start+0x154>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d009      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x10e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a16      	ldr	r2, [pc, #88]	@ (800a604 <HAL_TIM_PWM_Start+0x158>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d004      	beq.n	800a5ba <HAL_TIM_PWM_Start+0x10e>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a14      	ldr	r2, [pc, #80]	@ (800a608 <HAL_TIM_PWM_Start+0x15c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d111      	bne.n	800a5de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f003 0307 	and.w	r3, r3, #7
 800a5c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b06      	cmp	r3, #6
 800a5ca:	d010      	beq.n	800a5ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5dc:	e007      	b.n	800a5ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f042 0201 	orr.w	r2, r2, #1
 800a5ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	40010000 	.word	0x40010000
 800a5fc:	40000400 	.word	0x40000400
 800a600:	40000800 	.word	0x40000800
 800a604:	40000c00 	.word	0x40000c00
 800a608:	40014000 	.word	0x40014000

0800a60c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f003 0302 	and.w	r3, r3, #2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d020      	beq.n	800a670 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01b      	beq.n	800a670 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f06f 0202 	mvn.w	r2, #2
 800a640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fa5b 	bl	800ab12 <HAL_TIM_IC_CaptureCallback>
 800a65c:	e005      	b.n	800a66a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa4d 	bl	800aafe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa5e 	bl	800ab26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	d020      	beq.n	800a6bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01b      	beq.n	800a6bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0204 	mvn.w	r2, #4
 800a68c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2202      	movs	r2, #2
 800a692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fa35 	bl	800ab12 <HAL_TIM_IC_CaptureCallback>
 800a6a8:	e005      	b.n	800a6b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa27 	bl	800aafe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa38 	bl	800ab26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d020      	beq.n	800a708 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01b      	beq.n	800a708 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f06f 0208 	mvn.w	r2, #8
 800a6d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2204      	movs	r2, #4
 800a6de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fa0f 	bl	800ab12 <HAL_TIM_IC_CaptureCallback>
 800a6f4:	e005      	b.n	800a702 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa01 	bl	800aafe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fa12 	bl	800ab26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d020      	beq.n	800a754 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f003 0310 	and.w	r3, r3, #16
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d01b      	beq.n	800a754 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f06f 0210 	mvn.w	r2, #16
 800a724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2208      	movs	r2, #8
 800a72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f9e9 	bl	800ab12 <HAL_TIM_IC_CaptureCallback>
 800a740:	e005      	b.n	800a74e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f9db 	bl	800aafe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9ec 	bl	800ab26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00c      	beq.n	800a778 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d007      	beq.n	800a778 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f06f 0201 	mvn.w	r2, #1
 800a770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7f8 f954 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00c      	beq.n	800a79c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d007      	beq.n	800a79c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fd2a 	bl	800b1f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00c      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d007      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f9bd 	bl	800ab3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00c      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d007      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0220 	mvn.w	r2, #32
 800a7dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fcfc 	bl	800b1dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7e4:	bf00      	nop
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a802:	2b01      	cmp	r3, #1
 800a804:	d101      	bne.n	800a80a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a806:	2302      	movs	r3, #2
 800a808:	e0ae      	b.n	800a968 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b0c      	cmp	r3, #12
 800a816:	f200 809f 	bhi.w	800a958 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a81a:	a201      	add	r2, pc, #4	@ (adr r2, 800a820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a855 	.word	0x0800a855
 800a824:	0800a959 	.word	0x0800a959
 800a828:	0800a959 	.word	0x0800a959
 800a82c:	0800a959 	.word	0x0800a959
 800a830:	0800a895 	.word	0x0800a895
 800a834:	0800a959 	.word	0x0800a959
 800a838:	0800a959 	.word	0x0800a959
 800a83c:	0800a959 	.word	0x0800a959
 800a840:	0800a8d7 	.word	0x0800a8d7
 800a844:	0800a959 	.word	0x0800a959
 800a848:	0800a959 	.word	0x0800a959
 800a84c:	0800a959 	.word	0x0800a959
 800a850:	0800a917 	.word	0x0800a917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fa04 	bl	800ac68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0208 	orr.w	r2, r2, #8
 800a86e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	699a      	ldr	r2, [r3, #24]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0204 	bic.w	r2, r2, #4
 800a87e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6999      	ldr	r1, [r3, #24]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	691a      	ldr	r2, [r3, #16]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	619a      	str	r2, [r3, #24]
      break;
 800a892:	e064      	b.n	800a95e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fa4a 	bl	800ad34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6999      	ldr	r1, [r3, #24]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	021a      	lsls	r2, r3, #8
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	619a      	str	r2, [r3, #24]
      break;
 800a8d4:	e043      	b.n	800a95e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fa95 	bl	800ae0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	69da      	ldr	r2, [r3, #28]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f042 0208 	orr.w	r2, r2, #8
 800a8f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69da      	ldr	r2, [r3, #28]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0204 	bic.w	r2, r2, #4
 800a900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	69d9      	ldr	r1, [r3, #28]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	61da      	str	r2, [r3, #28]
      break;
 800a914:	e023      	b.n	800a95e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fadf 	bl	800aee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69da      	ldr	r2, [r3, #28]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	69da      	ldr	r2, [r3, #28]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69d9      	ldr	r1, [r3, #28]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	021a      	lsls	r2, r3, #8
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	61da      	str	r2, [r3, #28]
      break;
 800a956:	e002      	b.n	800a95e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	75fb      	strb	r3, [r7, #23]
      break;
 800a95c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a966:	7dfb      	ldrb	r3, [r7, #23]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_TIM_ConfigClockSource+0x1c>
 800a988:	2302      	movs	r3, #2
 800a98a:	e0b4      	b.n	800aaf6 <HAL_TIM_ConfigClockSource+0x186>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9c4:	d03e      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0xd4>
 800a9c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ca:	f200 8087 	bhi.w	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800a9ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d2:	f000 8086 	beq.w	800aae2 <HAL_TIM_ConfigClockSource+0x172>
 800a9d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9da:	d87f      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800a9dc:	2b70      	cmp	r3, #112	@ 0x70
 800a9de:	d01a      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0xa6>
 800a9e0:	2b70      	cmp	r3, #112	@ 0x70
 800a9e2:	d87b      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800a9e4:	2b60      	cmp	r3, #96	@ 0x60
 800a9e6:	d050      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0x11a>
 800a9e8:	2b60      	cmp	r3, #96	@ 0x60
 800a9ea:	d877      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800a9ec:	2b50      	cmp	r3, #80	@ 0x50
 800a9ee:	d03c      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0xfa>
 800a9f0:	2b50      	cmp	r3, #80	@ 0x50
 800a9f2:	d873      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800a9f4:	2b40      	cmp	r3, #64	@ 0x40
 800a9f6:	d058      	beq.n	800aaaa <HAL_TIM_ConfigClockSource+0x13a>
 800a9f8:	2b40      	cmp	r3, #64	@ 0x40
 800a9fa:	d86f      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800a9fc:	2b30      	cmp	r3, #48	@ 0x30
 800a9fe:	d064      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x15a>
 800aa00:	2b30      	cmp	r3, #48	@ 0x30
 800aa02:	d86b      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d060      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x15a>
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d867      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d05c      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x15a>
 800aa10:	2b10      	cmp	r3, #16
 800aa12:	d05a      	beq.n	800aaca <HAL_TIM_ConfigClockSource+0x15a>
 800aa14:	e062      	b.n	800aadc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa26:	f000 fb25 	bl	800b074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	609a      	str	r2, [r3, #8]
      break;
 800aa42:	e04f      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa54:	f000 fb0e 	bl	800b074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa66:	609a      	str	r2, [r3, #8]
      break;
 800aa68:	e03c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa76:	461a      	mov	r2, r3
 800aa78:	f000 fa82 	bl	800af80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2150      	movs	r1, #80	@ 0x50
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 fadb 	bl	800b03e <TIM_ITRx_SetConfig>
      break;
 800aa88:	e02c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa96:	461a      	mov	r2, r3
 800aa98:	f000 faa1 	bl	800afde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2160      	movs	r1, #96	@ 0x60
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 facb 	bl	800b03e <TIM_ITRx_SetConfig>
      break;
 800aaa8:	e01c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab6:	461a      	mov	r2, r3
 800aab8:	f000 fa62 	bl	800af80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2140      	movs	r1, #64	@ 0x40
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fabb 	bl	800b03e <TIM_ITRx_SetConfig>
      break;
 800aac8:	e00c      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f000 fab2 	bl	800b03e <TIM_ITRx_SetConfig>
      break;
 800aada:	e003      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
      break;
 800aae0:	e000      	b.n	800aae4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab1a:	bf00      	nop
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab2e:	bf00      	nop
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
	...

0800ab50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a3a      	ldr	r2, [pc, #232]	@ (800ac4c <TIM_Base_SetConfig+0xfc>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00f      	beq.n	800ab88 <TIM_Base_SetConfig+0x38>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab6e:	d00b      	beq.n	800ab88 <TIM_Base_SetConfig+0x38>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a37      	ldr	r2, [pc, #220]	@ (800ac50 <TIM_Base_SetConfig+0x100>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d007      	beq.n	800ab88 <TIM_Base_SetConfig+0x38>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a36      	ldr	r2, [pc, #216]	@ (800ac54 <TIM_Base_SetConfig+0x104>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_Base_SetConfig+0x38>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a35      	ldr	r2, [pc, #212]	@ (800ac58 <TIM_Base_SetConfig+0x108>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d108      	bne.n	800ab9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a2b      	ldr	r2, [pc, #172]	@ (800ac4c <TIM_Base_SetConfig+0xfc>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d01b      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba8:	d017      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a28      	ldr	r2, [pc, #160]	@ (800ac50 <TIM_Base_SetConfig+0x100>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d013      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a27      	ldr	r2, [pc, #156]	@ (800ac54 <TIM_Base_SetConfig+0x104>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00f      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a26      	ldr	r2, [pc, #152]	@ (800ac58 <TIM_Base_SetConfig+0x108>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00b      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a25      	ldr	r2, [pc, #148]	@ (800ac5c <TIM_Base_SetConfig+0x10c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d007      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a24      	ldr	r2, [pc, #144]	@ (800ac60 <TIM_Base_SetConfig+0x110>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_Base_SetConfig+0x8a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a23      	ldr	r2, [pc, #140]	@ (800ac64 <TIM_Base_SetConfig+0x114>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d108      	bne.n	800abec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	4313      	orrs	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a0e      	ldr	r2, [pc, #56]	@ (800ac4c <TIM_Base_SetConfig+0xfc>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d103      	bne.n	800ac20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	691a      	ldr	r2, [r3, #16]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d105      	bne.n	800ac3e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f023 0201 	bic.w	r2, r3, #1
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	611a      	str	r2, [r3, #16]
  }
}
 800ac3e:	bf00      	nop
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	40000400 	.word	0x40000400
 800ac54:	40000800 	.word	0x40000800
 800ac58:	40000c00 	.word	0x40000c00
 800ac5c:	40014000 	.word	0x40014000
 800ac60:	40014400 	.word	0x40014400
 800ac64:	40014800 	.word	0x40014800

0800ac68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	f023 0201 	bic.w	r2, r3, #1
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f023 0302 	bic.w	r3, r3, #2
 800acb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	4313      	orrs	r3, r2
 800acba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a1c      	ldr	r2, [pc, #112]	@ (800ad30 <TIM_OC1_SetConfig+0xc8>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d10c      	bne.n	800acde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f023 0308 	bic.w	r3, r3, #8
 800acca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f023 0304 	bic.w	r3, r3, #4
 800acdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a13      	ldr	r2, [pc, #76]	@ (800ad30 <TIM_OC1_SetConfig+0xc8>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d111      	bne.n	800ad0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	621a      	str	r2, [r3, #32]
}
 800ad24:	bf00      	nop
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	40010000 	.word	0x40010000

0800ad34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	f023 0210 	bic.w	r2, r3, #16
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	021b      	lsls	r3, r3, #8
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f023 0320 	bic.w	r3, r3, #32
 800ad7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a1e      	ldr	r2, [pc, #120]	@ (800ae08 <TIM_OC2_SetConfig+0xd4>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d10d      	bne.n	800adb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	011b      	lsls	r3, r3, #4
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a15      	ldr	r2, [pc, #84]	@ (800ae08 <TIM_OC2_SetConfig+0xd4>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d113      	bne.n	800ade0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800adbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	4313      	orrs	r3, r2
 800add2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	40010000 	.word	0x40010000

0800ae0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0303 	bic.w	r3, r3, #3
 800ae42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a1d      	ldr	r2, [pc, #116]	@ (800aedc <TIM_OC3_SetConfig+0xd0>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d10d      	bne.n	800ae86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a14      	ldr	r2, [pc, #80]	@ (800aedc <TIM_OC3_SetConfig+0xd0>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d113      	bne.n	800aeb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	011b      	lsls	r3, r3, #4
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	621a      	str	r2, [r3, #32]
}
 800aed0:	bf00      	nop
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	40010000 	.word	0x40010000

0800aee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	031b      	lsls	r3, r3, #12
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	4313      	orrs	r3, r2
 800af36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a10      	ldr	r2, [pc, #64]	@ (800af7c <TIM_OC4_SetConfig+0x9c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d109      	bne.n	800af54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	019b      	lsls	r3, r3, #6
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	4313      	orrs	r3, r2
 800af52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	621a      	str	r2, [r3, #32]
}
 800af6e:	bf00      	nop
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	40010000 	.word	0x40010000

0800af80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f023 0201 	bic.w	r2, r3, #1
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800afaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f023 030a 	bic.w	r3, r3, #10
 800afbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	621a      	str	r2, [r3, #32]
}
 800afd2:	bf00      	nop
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afde:	b480      	push	{r7}
 800afe0:	b087      	sub	sp, #28
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	f023 0210 	bic.w	r2, r3, #16
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	031b      	lsls	r3, r3, #12
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	4313      	orrs	r3, r2
 800b012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b01a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	4313      	orrs	r3, r2
 800b024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	621a      	str	r2, [r3, #32]
}
 800b032:	bf00      	nop
 800b034:	371c      	adds	r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b03e:	b480      	push	{r7}
 800b040:	b085      	sub	sp, #20
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	f043 0307 	orr.w	r3, r3, #7
 800b060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	609a      	str	r2, [r3, #8]
}
 800b068:	bf00      	nop
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b08e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	021a      	lsls	r2, r3, #8
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	431a      	orrs	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	609a      	str	r2, [r3, #8]
}
 800b0a8:	bf00      	nop
 800b0aa:	371c      	adds	r7, #28
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f003 031f 	and.w	r3, r3, #31
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1a      	ldr	r2, [r3, #32]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	43db      	mvns	r3, r3
 800b0d6:	401a      	ands	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f003 031f 	and.w	r3, r3, #31
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	621a      	str	r2, [r3, #32]
}
 800b0f2:	bf00      	nop
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
	...

0800b100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b110:	2b01      	cmp	r3, #1
 800b112:	d101      	bne.n	800b118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b114:	2302      	movs	r3, #2
 800b116:	e050      	b.n	800b1ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b13e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a1c      	ldr	r2, [pc, #112]	@ (800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d018      	beq.n	800b18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b164:	d013      	beq.n	800b18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a18      	ldr	r2, [pc, #96]	@ (800b1cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d00e      	beq.n	800b18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a16      	ldr	r2, [pc, #88]	@ (800b1d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d009      	beq.n	800b18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a15      	ldr	r2, [pc, #84]	@ (800b1d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d004      	beq.n	800b18e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a13      	ldr	r2, [pc, #76]	@ (800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d10c      	bne.n	800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40010000 	.word	0x40010000
 800b1cc:	40000400 	.word	0x40000400
 800b1d0:	40000800 	.word	0x40000800
 800b1d4:	40000c00 	.word	0x40000c00
 800b1d8:	40014000 	.word	0x40014000

0800b1dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b204:	b084      	sub	sp, #16
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	f107 001c 	add.w	r0, r7, #28
 800b212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b216:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d123      	bne.n	800b266 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b246:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d105      	bne.n	800b25a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 fae8 	bl	800c830 <USB_CoreReset>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]
 800b264:	e01b      	b.n	800b29e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f001 fadc 	bl	800c830 <USB_CoreReset>
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b27c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b288:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b290:	e005      	b.n	800b29e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b29e:	7fbb      	ldrb	r3, [r7, #30]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d10b      	bne.n	800b2bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f043 0206 	orr.w	r2, r3, #6
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f043 0220 	orr.w	r2, r3, #32
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2c8:	b004      	add	sp, #16
 800b2ca:	4770      	bx	lr

0800b2cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d165      	bne.n	800b3ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	4a41      	ldr	r2, [pc, #260]	@ (800b3e8 <USB_SetTurnaroundTime+0x11c>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d906      	bls.n	800b2f6 <USB_SetTurnaroundTime+0x2a>
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	4a40      	ldr	r2, [pc, #256]	@ (800b3ec <USB_SetTurnaroundTime+0x120>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d202      	bcs.n	800b2f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b2f0:	230f      	movs	r3, #15
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	e062      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	4a3c      	ldr	r2, [pc, #240]	@ (800b3ec <USB_SetTurnaroundTime+0x120>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d306      	bcc.n	800b30c <USB_SetTurnaroundTime+0x40>
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	4a3b      	ldr	r2, [pc, #236]	@ (800b3f0 <USB_SetTurnaroundTime+0x124>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d202      	bcs.n	800b30c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b306:	230e      	movs	r3, #14
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	e057      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	4a38      	ldr	r2, [pc, #224]	@ (800b3f0 <USB_SetTurnaroundTime+0x124>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d306      	bcc.n	800b322 <USB_SetTurnaroundTime+0x56>
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	4a37      	ldr	r2, [pc, #220]	@ (800b3f4 <USB_SetTurnaroundTime+0x128>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d202      	bcs.n	800b322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b31c:	230d      	movs	r3, #13
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	e04c      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	4a33      	ldr	r2, [pc, #204]	@ (800b3f4 <USB_SetTurnaroundTime+0x128>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d306      	bcc.n	800b338 <USB_SetTurnaroundTime+0x6c>
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	4a32      	ldr	r2, [pc, #200]	@ (800b3f8 <USB_SetTurnaroundTime+0x12c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d802      	bhi.n	800b338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b332:	230c      	movs	r3, #12
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	e041      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	4a2f      	ldr	r2, [pc, #188]	@ (800b3f8 <USB_SetTurnaroundTime+0x12c>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d906      	bls.n	800b34e <USB_SetTurnaroundTime+0x82>
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	4a2e      	ldr	r2, [pc, #184]	@ (800b3fc <USB_SetTurnaroundTime+0x130>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d802      	bhi.n	800b34e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b348:	230b      	movs	r3, #11
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	e036      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	4a2a      	ldr	r2, [pc, #168]	@ (800b3fc <USB_SetTurnaroundTime+0x130>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d906      	bls.n	800b364 <USB_SetTurnaroundTime+0x98>
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	4a29      	ldr	r2, [pc, #164]	@ (800b400 <USB_SetTurnaroundTime+0x134>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d802      	bhi.n	800b364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b35e:	230a      	movs	r3, #10
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	e02b      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	4a26      	ldr	r2, [pc, #152]	@ (800b400 <USB_SetTurnaroundTime+0x134>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d906      	bls.n	800b37a <USB_SetTurnaroundTime+0xae>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	4a25      	ldr	r2, [pc, #148]	@ (800b404 <USB_SetTurnaroundTime+0x138>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d202      	bcs.n	800b37a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b374:	2309      	movs	r3, #9
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	e020      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	4a21      	ldr	r2, [pc, #132]	@ (800b404 <USB_SetTurnaroundTime+0x138>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d306      	bcc.n	800b390 <USB_SetTurnaroundTime+0xc4>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	4a20      	ldr	r2, [pc, #128]	@ (800b408 <USB_SetTurnaroundTime+0x13c>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d802      	bhi.n	800b390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b38a:	2308      	movs	r3, #8
 800b38c:	617b      	str	r3, [r7, #20]
 800b38e:	e015      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4a1d      	ldr	r2, [pc, #116]	@ (800b408 <USB_SetTurnaroundTime+0x13c>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d906      	bls.n	800b3a6 <USB_SetTurnaroundTime+0xda>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	4a1c      	ldr	r2, [pc, #112]	@ (800b40c <USB_SetTurnaroundTime+0x140>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d202      	bcs.n	800b3a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b3a0:	2307      	movs	r3, #7
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	e00a      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b3a6:	2306      	movs	r3, #6
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	e007      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b3b2:	2309      	movs	r3, #9
 800b3b4:	617b      	str	r3, [r7, #20]
 800b3b6:	e001      	b.n	800b3bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b3b8:	2309      	movs	r3, #9
 800b3ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	029b      	lsls	r3, r3, #10
 800b3d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	371c      	adds	r7, #28
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	00d8acbf 	.word	0x00d8acbf
 800b3ec:	00e4e1c0 	.word	0x00e4e1c0
 800b3f0:	00f42400 	.word	0x00f42400
 800b3f4:	01067380 	.word	0x01067380
 800b3f8:	011a499f 	.word	0x011a499f
 800b3fc:	01312cff 	.word	0x01312cff
 800b400:	014ca43f 	.word	0x014ca43f
 800b404:	016e3600 	.word	0x016e3600
 800b408:	01a6ab1f 	.word	0x01a6ab1f
 800b40c:	01e84800 	.word	0x01e84800

0800b410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f043 0201 	orr.w	r2, r3, #1
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f023 0201 	bic.w	r2, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d115      	bne.n	800b4a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b482:	200a      	movs	r0, #10
 800b484:	f7f8 f880 	bl	8003588 <HAL_Delay>
      ms += 10U;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	330a      	adds	r3, #10
 800b48c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 f93f 	bl	800c712 <USB_GetMode>
 800b494:	4603      	mov	r3, r0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d01e      	beq.n	800b4d8 <USB_SetCurrentMode+0x84>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2bc7      	cmp	r3, #199	@ 0xc7
 800b49e:	d9f0      	bls.n	800b482 <USB_SetCurrentMode+0x2e>
 800b4a0:	e01a      	b.n	800b4d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b4a2:	78fb      	ldrb	r3, [r7, #3]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d115      	bne.n	800b4d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b4b4:	200a      	movs	r0, #10
 800b4b6:	f7f8 f867 	bl	8003588 <HAL_Delay>
      ms += 10U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	330a      	adds	r3, #10
 800b4be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f926 	bl	800c712 <USB_GetMode>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <USB_SetCurrentMode+0x84>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2bc7      	cmp	r3, #199	@ 0xc7
 800b4d0:	d9f0      	bls.n	800b4b4 <USB_SetCurrentMode+0x60>
 800b4d2:	e001      	b.n	800b4d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e005      	b.n	800b4e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2bc8      	cmp	r3, #200	@ 0xc8
 800b4dc:	d101      	bne.n	800b4e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e000      	b.n	800b4e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b086      	sub	sp, #24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b4fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b506:	2300      	movs	r3, #0
 800b508:	613b      	str	r3, [r7, #16]
 800b50a:	e009      	b.n	800b520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3340      	adds	r3, #64	@ 0x40
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	2200      	movs	r2, #0
 800b518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	3301      	adds	r3, #1
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	2b0e      	cmp	r3, #14
 800b524:	d9f2      	bls.n	800b50c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d11c      	bne.n	800b568 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b53c:	f043 0302 	orr.w	r3, r3, #2
 800b540:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b546:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b552:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b55e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	639a      	str	r2, [r3, #56]	@ 0x38
 800b566:	e00b      	b.n	800b580 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b578:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b586:	461a      	mov	r2, r3
 800b588:	2300      	movs	r3, #0
 800b58a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b58c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b590:	2b01      	cmp	r3, #1
 800b592:	d10d      	bne.n	800b5b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d104      	bne.n	800b5a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b59c:	2100      	movs	r1, #0
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f968 	bl	800b874 <USB_SetDevSpeed>
 800b5a4:	e008      	b.n	800b5b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f963 	bl	800b874 <USB_SetDevSpeed>
 800b5ae:	e003      	b.n	800b5b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b5b0:	2103      	movs	r1, #3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f95e 	bl	800b874 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b5b8:	2110      	movs	r1, #16
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f8fa 	bl	800b7b4 <USB_FlushTxFifo>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f924 	bl	800b818 <USB_FlushRxFifo>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5fe:	2300      	movs	r3, #0
 800b600:	613b      	str	r3, [r7, #16]
 800b602:	e043      	b.n	800b68c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	015a      	lsls	r2, r3, #5
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b61a:	d118      	bne.n	800b64e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b62e:	461a      	mov	r2, r3
 800b630:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	e013      	b.n	800b660 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b644:	461a      	mov	r2, r3
 800b646:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	e008      	b.n	800b660 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b65a:	461a      	mov	r2, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b66c:	461a      	mov	r2, r3
 800b66e:	2300      	movs	r3, #0
 800b670:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b67e:	461a      	mov	r2, r3
 800b680:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b684:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	3301      	adds	r3, #1
 800b68a:	613b      	str	r3, [r7, #16]
 800b68c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b690:	461a      	mov	r2, r3
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	4293      	cmp	r3, r2
 800b696:	d3b5      	bcc.n	800b604 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b698:	2300      	movs	r3, #0
 800b69a:	613b      	str	r3, [r7, #16]
 800b69c:	e043      	b.n	800b726 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6b4:	d118      	bne.n	800b6e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	e013      	b.n	800b6fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	e008      	b.n	800b6fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	015a      	lsls	r2, r3, #5
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4413      	add	r3, r2
 800b702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b706:	461a      	mov	r2, r3
 800b708:	2300      	movs	r3, #0
 800b70a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b718:	461a      	mov	r2, r3
 800b71a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b71e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3301      	adds	r3, #1
 800b724:	613b      	str	r3, [r7, #16]
 800b726:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b72a:	461a      	mov	r2, r3
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	4293      	cmp	r3, r2
 800b730:	d3b5      	bcc.n	800b69e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b744:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b752:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b754:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	f043 0210 	orr.w	r2, r3, #16
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	699a      	ldr	r2, [r3, #24]
 800b76c:	4b10      	ldr	r3, [pc, #64]	@ (800b7b0 <USB_DevInit+0x2c4>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b774:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d005      	beq.n	800b788 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	f043 0208 	orr.w	r2, r3, #8
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b788:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d107      	bne.n	800b7a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b798:	f043 0304 	orr.w	r3, r3, #4
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7ac:	b004      	add	sp, #16
 800b7ae:	4770      	bx	lr
 800b7b0:	803c3800 	.word	0x803c3800

0800b7b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7ce:	d901      	bls.n	800b7d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e01b      	b.n	800b80c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	daf2      	bge.n	800b7c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	019b      	lsls	r3, r3, #6
 800b7e4:	f043 0220 	orr.w	r2, r3, #32
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7f8:	d901      	bls.n	800b7fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e006      	b.n	800b80c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	f003 0320 	and.w	r3, r3, #32
 800b806:	2b20      	cmp	r3, #32
 800b808:	d0f0      	beq.n	800b7ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3301      	adds	r3, #1
 800b828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b830:	d901      	bls.n	800b836 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e018      	b.n	800b868 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	daf2      	bge.n	800b824 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2210      	movs	r2, #16
 800b846:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b854:	d901      	bls.n	800b85a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b856:	2303      	movs	r3, #3
 800b858:	e006      	b.n	800b868 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	f003 0310 	and.w	r3, r3, #16
 800b862:	2b10      	cmp	r3, #16
 800b864:	d0f0      	beq.n	800b848 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	68f9      	ldr	r1, [r7, #12]
 800b890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b894:	4313      	orrs	r3, r2
 800b896:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b087      	sub	sp, #28
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f003 0306 	and.w	r3, r3, #6
 800b8be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	75fb      	strb	r3, [r7, #23]
 800b8ca:	e00a      	b.n	800b8e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d002      	beq.n	800b8d8 <USB_GetDevSpeed+0x32>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b06      	cmp	r3, #6
 800b8d6:	d102      	bne.n	800b8de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b8d8:	2302      	movs	r3, #2
 800b8da:	75fb      	strb	r3, [r7, #23]
 800b8dc:	e001      	b.n	800b8e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b8de:	230f      	movs	r3, #15
 800b8e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	371c      	adds	r7, #28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	785b      	ldrb	r3, [r3, #1]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d13a      	bne.n	800b982 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b912:	69da      	ldr	r2, [r3, #28]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	f003 030f 	and.w	r3, r3, #15
 800b91c:	2101      	movs	r1, #1
 800b91e:	fa01 f303 	lsl.w	r3, r1, r3
 800b922:	b29b      	uxth	r3, r3
 800b924:	68f9      	ldr	r1, [r7, #12]
 800b926:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b92a:	4313      	orrs	r3, r2
 800b92c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d155      	bne.n	800b9f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	791b      	ldrb	r3, [r3, #4]
 800b95e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b960:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	059b      	lsls	r3, r3, #22
 800b966:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b968:	4313      	orrs	r3, r2
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	0151      	lsls	r1, r2, #5
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	440a      	add	r2, r1
 800b972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b97a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b97e:	6013      	str	r3, [r2, #0]
 800b980:	e036      	b.n	800b9f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b988:	69da      	ldr	r2, [r3, #28]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	2101      	movs	r1, #1
 800b994:	fa01 f303 	lsl.w	r3, r1, r3
 800b998:	041b      	lsls	r3, r3, #16
 800b99a:	68f9      	ldr	r1, [r7, #12]
 800b99c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	015a      	lsls	r2, r3, #5
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d11a      	bne.n	800b9f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	015a      	lsls	r2, r3, #5
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	791b      	ldrb	r3, [r3, #4]
 800b9d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b9d6:	430b      	orrs	r3, r1
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	0151      	lsls	r1, r2, #5
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	440a      	add	r2, r1
 800b9e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3714      	adds	r7, #20
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
	...

0800ba00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	785b      	ldrb	r3, [r3, #1]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d161      	bne.n	800bae0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba32:	d11f      	bne.n	800ba74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	015a      	lsls	r2, r3, #5
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	0151      	lsls	r1, r2, #5
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	440a      	add	r2, r1
 800ba4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ba52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	0151      	lsls	r1, r2, #5
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	440a      	add	r2, r1
 800ba6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	f003 030f 	and.w	r3, r3, #15
 800ba84:	2101      	movs	r1, #1
 800ba86:	fa01 f303 	lsl.w	r3, r1, r3
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	43db      	mvns	r3, r3
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba94:	4013      	ands	r3, r2
 800ba96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba9e:	69da      	ldr	r2, [r3, #28]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 030f 	and.w	r3, r3, #15
 800baa8:	2101      	movs	r1, #1
 800baaa:	fa01 f303 	lsl.w	r3, r1, r3
 800baae:	b29b      	uxth	r3, r3
 800bab0:	43db      	mvns	r3, r3
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bab8:	4013      	ands	r3, r2
 800baba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	0159      	lsls	r1, r3, #5
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	440b      	add	r3, r1
 800bad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bad6:	4619      	mov	r1, r3
 800bad8:	4b35      	ldr	r3, [pc, #212]	@ (800bbb0 <USB_DeactivateEndpoint+0x1b0>)
 800bada:	4013      	ands	r3, r2
 800badc:	600b      	str	r3, [r1, #0]
 800bade:	e060      	b.n	800bba2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baf6:	d11f      	bne.n	800bb38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	015a      	lsls	r2, r3, #5
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	0151      	lsls	r1, r2, #5
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	440a      	add	r2, r1
 800bb0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	015a      	lsls	r2, r3, #5
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	0151      	lsls	r1, r2, #5
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	440a      	add	r2, r1
 800bb2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	2101      	movs	r1, #1
 800bb4a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb4e:	041b      	lsls	r3, r3, #16
 800bb50:	43db      	mvns	r3, r3
 800bb52:	68f9      	ldr	r1, [r7, #12]
 800bb54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb58:	4013      	ands	r3, r2
 800bb5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb62:	69da      	ldr	r2, [r3, #28]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	f003 030f 	and.w	r3, r3, #15
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb72:	041b      	lsls	r3, r3, #16
 800bb74:	43db      	mvns	r3, r3
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	0159      	lsls	r1, r3, #5
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	440b      	add	r3, r1
 800bb96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <USB_DeactivateEndpoint+0x1b4>)
 800bb9e:	4013      	ands	r3, r2
 800bba0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	ec337800 	.word	0xec337800
 800bbb4:	eff37800 	.word	0xeff37800

0800bbb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08a      	sub	sp, #40	@ 0x28
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	785b      	ldrb	r3, [r3, #1]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	f040 817f 	bne.w	800bed8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d132      	bne.n	800bc48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	015a      	lsls	r2, r3, #5
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	0151      	lsls	r1, r2, #5
 800bbf4:	69fa      	ldr	r2, [r7, #28]
 800bbf6:	440a      	add	r2, r1
 800bbf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbfc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bc00:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bc04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	015a      	lsls	r2, r3, #5
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	69ba      	ldr	r2, [r7, #24]
 800bc16:	0151      	lsls	r1, r2, #5
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	440a      	add	r2, r1
 800bc1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	69ba      	ldr	r2, [r7, #24]
 800bc36:	0151      	lsls	r1, r2, #5
 800bc38:	69fa      	ldr	r2, [r7, #28]
 800bc3a:	440a      	add	r2, r1
 800bc3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc40:	0cdb      	lsrs	r3, r3, #19
 800bc42:	04db      	lsls	r3, r3, #19
 800bc44:	6113      	str	r3, [r2, #16]
 800bc46:	e097      	b.n	800bd78 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	0151      	lsls	r1, r2, #5
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	440a      	add	r2, r1
 800bc5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc62:	0cdb      	lsrs	r3, r3, #19
 800bc64:	04db      	lsls	r3, r3, #19
 800bc66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	0151      	lsls	r1, r2, #5
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	440a      	add	r2, r1
 800bc7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc82:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bc86:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bc8a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d11a      	bne.n	800bcc8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	691a      	ldr	r2, [r3, #16]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d903      	bls.n	800bca6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	689a      	ldr	r2, [r3, #8]
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	015a      	lsls	r2, r3, #5
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	0151      	lsls	r1, r2, #5
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	440a      	add	r2, r1
 800bcbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bcc4:	6113      	str	r3, [r2, #16]
 800bcc6:	e044      	b.n	800bd52 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	691a      	ldr	r2, [r3, #16]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	1e5a      	subs	r2, r3, #1
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcdc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	015a      	lsls	r2, r3, #5
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	4413      	add	r3, r2
 800bce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcea:	691a      	ldr	r2, [r3, #16]
 800bcec:	8afb      	ldrh	r3, [r7, #22]
 800bcee:	04d9      	lsls	r1, r3, #19
 800bcf0:	4ba4      	ldr	r3, [pc, #656]	@ (800bf84 <USB_EPStartXfer+0x3cc>)
 800bcf2:	400b      	ands	r3, r1
 800bcf4:	69b9      	ldr	r1, [r7, #24]
 800bcf6:	0148      	lsls	r0, r1, #5
 800bcf8:	69f9      	ldr	r1, [r7, #28]
 800bcfa:	4401      	add	r1, r0
 800bcfc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bd00:	4313      	orrs	r3, r2
 800bd02:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	791b      	ldrb	r3, [r3, #4]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d122      	bne.n	800bd52 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	69ba      	ldr	r2, [r7, #24]
 800bd1c:	0151      	lsls	r1, r2, #5
 800bd1e:	69fa      	ldr	r2, [r7, #28]
 800bd20:	440a      	add	r2, r1
 800bd22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd26:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bd2a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd38:	691a      	ldr	r2, [r3, #16]
 800bd3a:	8afb      	ldrh	r3, [r7, #22]
 800bd3c:	075b      	lsls	r3, r3, #29
 800bd3e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800bd42:	69b9      	ldr	r1, [r7, #24]
 800bd44:	0148      	lsls	r0, r1, #5
 800bd46:	69f9      	ldr	r1, [r7, #28]
 800bd48:	4401      	add	r1, r0
 800bd4a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	015a      	lsls	r2, r3, #5
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd5e:	691a      	ldr	r2, [r3, #16]
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd68:	69b9      	ldr	r1, [r7, #24]
 800bd6a:	0148      	lsls	r0, r1, #5
 800bd6c:	69f9      	ldr	r1, [r7, #28]
 800bd6e:	4401      	add	r1, r0
 800bd70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bd74:	4313      	orrs	r3, r2
 800bd76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d14b      	bne.n	800be16 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d009      	beq.n	800bd9a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd92:	461a      	mov	r2, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	69db      	ldr	r3, [r3, #28]
 800bd98:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	791b      	ldrb	r3, [r3, #4]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d128      	bne.n	800bdf4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d110      	bne.n	800bdd4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	015a      	lsls	r2, r3, #5
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	0151      	lsls	r1, r2, #5
 800bdc4:	69fa      	ldr	r2, [r7, #28]
 800bdc6:	440a      	add	r2, r1
 800bdc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bdd0:	6013      	str	r3, [r2, #0]
 800bdd2:	e00f      	b.n	800bdf4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	0151      	lsls	r1, r2, #5
 800bde6:	69fa      	ldr	r2, [r7, #28]
 800bde8:	440a      	add	r2, r1
 800bdea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdf2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	0151      	lsls	r1, r2, #5
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	440a      	add	r2, r1
 800be0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	e166      	b.n	800c0e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	015a      	lsls	r2, r3, #5
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	4413      	add	r3, r2
 800be1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	0151      	lsls	r1, r2, #5
 800be28:	69fa      	ldr	r2, [r7, #28]
 800be2a:	440a      	add	r2, r1
 800be2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800be34:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	791b      	ldrb	r3, [r3, #4]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d015      	beq.n	800be6a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 814e 	beq.w	800c0e4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	f003 030f 	and.w	r3, r3, #15
 800be58:	2101      	movs	r1, #1
 800be5a:	fa01 f303 	lsl.w	r3, r1, r3
 800be5e:	69f9      	ldr	r1, [r7, #28]
 800be60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be64:	4313      	orrs	r3, r2
 800be66:	634b      	str	r3, [r1, #52]	@ 0x34
 800be68:	e13c      	b.n	800c0e4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be76:	2b00      	cmp	r3, #0
 800be78:	d110      	bne.n	800be9c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	015a      	lsls	r2, r3, #5
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	4413      	add	r3, r2
 800be82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	0151      	lsls	r1, r2, #5
 800be8c:	69fa      	ldr	r2, [r7, #28]
 800be8e:	440a      	add	r2, r1
 800be90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	e00f      	b.n	800bebc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	0151      	lsls	r1, r2, #5
 800beae:	69fa      	ldr	r2, [r7, #28]
 800beb0:	440a      	add	r2, r1
 800beb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800beba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	68d9      	ldr	r1, [r3, #12]
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	781a      	ldrb	r2, [r3, #0]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	b298      	uxth	r0, r3
 800beca:	79fb      	ldrb	r3, [r7, #7]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4603      	mov	r3, r0
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f9b9 	bl	800c248 <USB_WritePacket>
 800bed6:	e105      	b.n	800c0e4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	69ba      	ldr	r2, [r7, #24]
 800bee8:	0151      	lsls	r1, r2, #5
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	440a      	add	r2, r1
 800beee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bef2:	0cdb      	lsrs	r3, r3, #19
 800bef4:	04db      	lsls	r3, r3, #19
 800bef6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	015a      	lsls	r2, r3, #5
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	4413      	add	r3, r2
 800bf00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	69ba      	ldr	r2, [r7, #24]
 800bf08:	0151      	lsls	r1, r2, #5
 800bf0a:	69fa      	ldr	r2, [r7, #28]
 800bf0c:	440a      	add	r2, r1
 800bf0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800bf16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800bf1a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d132      	bne.n	800bf88 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	689a      	ldr	r2, [r3, #8]
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	015a      	lsls	r2, r3, #5
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	4413      	add	r3, r2
 800bf42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf50:	69b9      	ldr	r1, [r7, #24]
 800bf52:	0148      	lsls	r0, r1, #5
 800bf54:	69f9      	ldr	r1, [r7, #28]
 800bf56:	4401      	add	r1, r0
 800bf58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	0151      	lsls	r1, r2, #5
 800bf72:	69fa      	ldr	r2, [r7, #28]
 800bf74:	440a      	add	r2, r1
 800bf76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf7e:	6113      	str	r3, [r2, #16]
 800bf80:	e062      	b.n	800c048 <USB_EPStartXfer+0x490>
 800bf82:	bf00      	nop
 800bf84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d123      	bne.n	800bfd8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	691a      	ldr	r2, [r3, #16]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfa6:	69b9      	ldr	r1, [r7, #24]
 800bfa8:	0148      	lsls	r0, r1, #5
 800bfaa:	69f9      	ldr	r1, [r7, #28]
 800bfac:	4401      	add	r1, r0
 800bfae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	015a      	lsls	r2, r3, #5
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	69ba      	ldr	r2, [r7, #24]
 800bfc6:	0151      	lsls	r1, r2, #5
 800bfc8:	69fa      	ldr	r2, [r7, #28]
 800bfca:	440a      	add	r2, r1
 800bfcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bfd4:	6113      	str	r3, [r2, #16]
 800bfd6:	e037      	b.n	800c048 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	691a      	ldr	r2, [r3, #16]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	1e5a      	subs	r2, r3, #1
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	8afa      	ldrh	r2, [r7, #22]
 800bff4:	fb03 f202 	mul.w	r2, r3, r2
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c008:	691a      	ldr	r2, [r3, #16]
 800c00a:	8afb      	ldrh	r3, [r7, #22]
 800c00c:	04d9      	lsls	r1, r3, #19
 800c00e:	4b38      	ldr	r3, [pc, #224]	@ (800c0f0 <USB_EPStartXfer+0x538>)
 800c010:	400b      	ands	r3, r1
 800c012:	69b9      	ldr	r1, [r7, #24]
 800c014:	0148      	lsls	r0, r1, #5
 800c016:	69f9      	ldr	r1, [r7, #28]
 800c018:	4401      	add	r1, r0
 800c01a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c01e:	4313      	orrs	r3, r2
 800c020:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	015a      	lsls	r2, r3, #5
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	4413      	add	r3, r2
 800c02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c02e:	691a      	ldr	r2, [r3, #16]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c038:	69b9      	ldr	r1, [r7, #24]
 800c03a:	0148      	lsls	r0, r1, #5
 800c03c:	69f9      	ldr	r1, [r7, #28]
 800c03e:	4401      	add	r1, r0
 800c040:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c044:	4313      	orrs	r3, r2
 800c046:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d10d      	bne.n	800c06a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	68d9      	ldr	r1, [r3, #12]
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	015a      	lsls	r2, r3, #5
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	4413      	add	r3, r2
 800c062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c066:	460a      	mov	r2, r1
 800c068:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	791b      	ldrb	r3, [r3, #4]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d128      	bne.n	800c0c4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d110      	bne.n	800c0a4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	015a      	lsls	r2, r3, #5
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	4413      	add	r3, r2
 800c08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	0151      	lsls	r1, r2, #5
 800c094:	69fa      	ldr	r2, [r7, #28]
 800c096:	440a      	add	r2, r1
 800c098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c09c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	e00f      	b.n	800c0c4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69ba      	ldr	r2, [r7, #24]
 800c0b4:	0151      	lsls	r1, r2, #5
 800c0b6:	69fa      	ldr	r2, [r7, #28]
 800c0b8:	440a      	add	r2, r1
 800c0ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	0151      	lsls	r1, r2, #5
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	440a      	add	r2, r1
 800c0da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c0e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3720      	adds	r7, #32
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	1ff80000 	.word	0x1ff80000

0800c0f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b087      	sub	sp, #28
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d14a      	bne.n	800c1a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c12a:	f040 8086 	bne.w	800c23a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	4413      	add	r3, r2
 800c138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	7812      	ldrb	r2, [r2, #0]
 800c142:	0151      	lsls	r1, r2, #5
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	440a      	add	r2, r1
 800c148:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c14c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c150:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	7812      	ldrb	r2, [r2, #0]
 800c166:	0151      	lsls	r1, r2, #5
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	440a      	add	r2, r1
 800c16c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c174:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3301      	adds	r3, #1
 800c17a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c182:	4293      	cmp	r3, r2
 800c184:	d902      	bls.n	800c18c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	75fb      	strb	r3, [r7, #23]
          break;
 800c18a:	e056      	b.n	800c23a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1a4:	d0e7      	beq.n	800c176 <USB_EPStopXfer+0x82>
 800c1a6:	e048      	b.n	800c23a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	015a      	lsls	r2, r3, #5
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1c0:	d13b      	bne.n	800c23a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	7812      	ldrb	r2, [r2, #0]
 800c1d6:	0151      	lsls	r1, r2, #5
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	440a      	add	r2, r1
 800c1dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c1e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	015a      	lsls	r2, r3, #5
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	7812      	ldrb	r2, [r2, #0]
 800c1fa:	0151      	lsls	r1, r2, #5
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	440a      	add	r2, r1
 800c200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c208:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3301      	adds	r3, #1
 800c20e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c216:	4293      	cmp	r3, r2
 800c218:	d902      	bls.n	800c220 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	75fb      	strb	r3, [r7, #23]
          break;
 800c21e:	e00c      	b.n	800c23a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c238:	d0e7      	beq.n	800c20a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c248:	b480      	push	{r7}
 800c24a:	b089      	sub	sp, #36	@ 0x24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	4611      	mov	r1, r2
 800c254:	461a      	mov	r2, r3
 800c256:	460b      	mov	r3, r1
 800c258:	71fb      	strb	r3, [r7, #7]
 800c25a:	4613      	mov	r3, r2
 800c25c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d123      	bne.n	800c2b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c26e:	88bb      	ldrh	r3, [r7, #4]
 800c270:	3303      	adds	r3, #3
 800c272:	089b      	lsrs	r3, r3, #2
 800c274:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c276:	2300      	movs	r3, #0
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	e018      	b.n	800c2ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c27c:	79fb      	ldrb	r3, [r7, #7]
 800c27e:	031a      	lsls	r2, r3, #12
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	4413      	add	r3, r2
 800c284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c288:	461a      	mov	r2, r3
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	3301      	adds	r3, #1
 800c294:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	3301      	adds	r3, #1
 800c29a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	61bb      	str	r3, [r7, #24]
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d3e2      	bcc.n	800c27c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3724      	adds	r7, #36	@ 0x24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b08b      	sub	sp, #44	@ 0x2c
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c2da:	88fb      	ldrh	r3, [r7, #6]
 800c2dc:	089b      	lsrs	r3, r3, #2
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c2e2:	88fb      	ldrh	r3, [r7, #6]
 800c2e4:	f003 0303 	and.w	r3, r3, #3
 800c2e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	623b      	str	r3, [r7, #32]
 800c2ee:	e014      	b.n	800c31a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fe:	3301      	adds	r3, #1
 800c300:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	3301      	adds	r3, #1
 800c306:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	3301      	adds	r3, #1
 800c30c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	3301      	adds	r3, #1
 800c312:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	3301      	adds	r3, #1
 800c318:	623b      	str	r3, [r7, #32]
 800c31a:	6a3a      	ldr	r2, [r7, #32]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d3e6      	bcc.n	800c2f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c322:	8bfb      	ldrh	r3, [r7, #30]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01e      	beq.n	800c366 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c332:	461a      	mov	r2, r3
 800c334:	f107 0310 	add.w	r3, r7, #16
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	6a3b      	ldr	r3, [r7, #32]
 800c340:	b2db      	uxtb	r3, r3
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	fa22 f303 	lsr.w	r3, r2, r3
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	701a      	strb	r2, [r3, #0]
      i++;
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	3301      	adds	r3, #1
 800c352:	623b      	str	r3, [r7, #32]
      pDest++;
 800c354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c356:	3301      	adds	r3, #1
 800c358:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c35a:	8bfb      	ldrh	r3, [r7, #30]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c360:	8bfb      	ldrh	r3, [r7, #30]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1ea      	bne.n	800c33c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c368:	4618      	mov	r0, r3
 800c36a:	372c      	adds	r7, #44	@ 0x2c
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	785b      	ldrb	r3, [r3, #1]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d12c      	bne.n	800c3ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	015a      	lsls	r2, r3, #5
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	4413      	add	r3, r2
 800c398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	db12      	blt.n	800c3c8 <USB_EPSetStall+0x54>
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00f      	beq.n	800c3c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	0151      	lsls	r1, r2, #5
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	440a      	add	r2, r1
 800c3be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c3c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	0151      	lsls	r1, r2, #5
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	440a      	add	r2, r1
 800c3de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	e02b      	b.n	800c442 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	015a      	lsls	r2, r3, #5
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	db12      	blt.n	800c422 <USB_EPSetStall+0xae>
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00f      	beq.n	800c422 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	015a      	lsls	r2, r3, #5
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	4413      	add	r3, r2
 800c40a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	0151      	lsls	r1, r2, #5
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	440a      	add	r2, r1
 800c418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c41c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c420:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	015a      	lsls	r2, r3, #5
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	4413      	add	r3, r2
 800c42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	0151      	lsls	r1, r2, #5
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	440a      	add	r2, r1
 800c438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c43c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c440:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	785b      	ldrb	r3, [r3, #1]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d128      	bne.n	800c4be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	0151      	lsls	r1, r2, #5
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	440a      	add	r2, r1
 800c482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c486:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c48a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	791b      	ldrb	r3, [r3, #4]
 800c490:	2b03      	cmp	r3, #3
 800c492:	d003      	beq.n	800c49c <USB_EPClearStall+0x4c>
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	791b      	ldrb	r3, [r3, #4]
 800c498:	2b02      	cmp	r3, #2
 800c49a:	d138      	bne.n	800c50e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	015a      	lsls	r2, r3, #5
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	0151      	lsls	r1, r2, #5
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	440a      	add	r2, r1
 800c4b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	e027      	b.n	800c50e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	0151      	lsls	r1, r2, #5
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	440a      	add	r2, r1
 800c4d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c4dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	791b      	ldrb	r3, [r3, #4]
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	d003      	beq.n	800c4ee <USB_EPClearStall+0x9e>
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	791b      	ldrb	r3, [r3, #4]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d10f      	bne.n	800c50e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	0151      	lsls	r1, r2, #5
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	440a      	add	r2, r1
 800c504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c50c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c53a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c53e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	78fb      	ldrb	r3, [r7, #3]
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c550:	68f9      	ldr	r1, [r7, #12]
 800c552:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c556:	4313      	orrs	r3, r2
 800c558:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c582:	f023 0303 	bic.w	r3, r3, #3
 800c586:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c596:	f023 0302 	bic.w	r3, r3, #2
 800c59a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b085      	sub	sp, #20
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5d8:	f043 0302 	orr.w	r3, r3, #2
 800c5dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	4013      	ands	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c604:	68fb      	ldr	r3, [r7, #12]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	4013      	ands	r3, r2
 800c634:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	0c1b      	lsrs	r3, r3, #16
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c662:	69db      	ldr	r3, [r3, #28]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	4013      	ands	r3, r2
 800c668:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	b29b      	uxth	r3, r3
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b085      	sub	sp, #20
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	460b      	mov	r3, r1
 800c684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c68a:	78fb      	ldrb	r3, [r7, #3]
 800c68c:	015a      	lsls	r2, r3, #5
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	4413      	add	r3, r2
 800c692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b087      	sub	sp, #28
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	f003 030f 	and.w	r3, r3, #15
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e6:	01db      	lsls	r3, r3, #7
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	015a      	lsls	r2, r3, #5
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	4013      	ands	r3, r2
 800c702:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c704:	68bb      	ldr	r3, [r7, #8]
}
 800c706:	4618      	mov	r0, r3
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	f003 0301 	and.w	r3, r3, #1
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c72e:	b480      	push	{r7}
 800c730:	b085      	sub	sp, #20
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c748:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c74c:	f023 0307 	bic.w	r3, r3, #7
 800c750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	460b      	mov	r3, r1
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	333c      	adds	r3, #60	@ 0x3c
 800c78a:	3304      	adds	r3, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	4a26      	ldr	r2, [pc, #152]	@ (800c82c <USB_EP0_OutStart+0xb8>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d90a      	bls.n	800c7ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7a8:	d101      	bne.n	800c7ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e037      	b.n	800c81e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7dc:	f043 0318 	orr.w	r3, r3, #24
 800c7e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c7f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c7f6:	7afb      	ldrb	r3, [r7, #11]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d10f      	bne.n	800c81c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c802:	461a      	mov	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c816:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c81a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	371c      	adds	r7, #28
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	4f54300a 	.word	0x4f54300a

0800c830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c838:	2300      	movs	r3, #0
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	3301      	adds	r3, #1
 800c840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c848:	d901      	bls.n	800c84e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e01b      	b.n	800c886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	daf2      	bge.n	800c83c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c856:	2300      	movs	r3, #0
 800c858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f043 0201 	orr.w	r2, r3, #1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c872:	d901      	bls.n	800c878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c874:	2303      	movs	r3, #3
 800c876:	e006      	b.n	800c886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b01      	cmp	r3, #1
 800c882:	d0f0      	beq.n	800c866 <USB_CoreReset+0x36>

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
	...

0800c894 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	460b      	mov	r3, r1
 800c89e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c8a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c8a4:	f002 fd00 	bl	800f2a8 <USBD_static_malloc>
 800c8a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d109      	bne.n	800c8c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	32b0      	adds	r2, #176	@ 0xb0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	e0d4      	b.n	800ca6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c8c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f002 fd30 	bl	800f330 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	32b0      	adds	r2, #176	@ 0xb0
 800c8da:	68f9      	ldr	r1, [r7, #12]
 800c8dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	32b0      	adds	r2, #176	@ 0xb0
 800c8ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7c1b      	ldrb	r3, [r3, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d138      	bne.n	800c96e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8fc:	4b5e      	ldr	r3, [pc, #376]	@ (800ca78 <USBD_CDC_Init+0x1e4>)
 800c8fe:	7819      	ldrb	r1, [r3, #0]
 800c900:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c904:	2202      	movs	r2, #2
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f002 fbab 	bl	800f062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c90c:	4b5a      	ldr	r3, [pc, #360]	@ (800ca78 <USBD_CDC_Init+0x1e4>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	f003 020f 	and.w	r2, r3, #15
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	440b      	add	r3, r1
 800c920:	3324      	adds	r3, #36	@ 0x24
 800c922:	2201      	movs	r2, #1
 800c924:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c926:	4b55      	ldr	r3, [pc, #340]	@ (800ca7c <USBD_CDC_Init+0x1e8>)
 800c928:	7819      	ldrb	r1, [r3, #0]
 800c92a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c92e:	2202      	movs	r2, #2
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f002 fb96 	bl	800f062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c936:	4b51      	ldr	r3, [pc, #324]	@ (800ca7c <USBD_CDC_Init+0x1e8>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f003 020f 	and.w	r2, r3, #15
 800c93e:	6879      	ldr	r1, [r7, #4]
 800c940:	4613      	mov	r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	440b      	add	r3, r1
 800c94a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c94e:	2201      	movs	r2, #1
 800c950:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c952:	4b4b      	ldr	r3, [pc, #300]	@ (800ca80 <USBD_CDC_Init+0x1ec>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	f003 020f 	and.w	r2, r3, #15
 800c95a:	6879      	ldr	r1, [r7, #4]
 800c95c:	4613      	mov	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	440b      	add	r3, r1
 800c966:	3326      	adds	r3, #38	@ 0x26
 800c968:	2210      	movs	r2, #16
 800c96a:	801a      	strh	r2, [r3, #0]
 800c96c:	e035      	b.n	800c9da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c96e:	4b42      	ldr	r3, [pc, #264]	@ (800ca78 <USBD_CDC_Init+0x1e4>)
 800c970:	7819      	ldrb	r1, [r3, #0]
 800c972:	2340      	movs	r3, #64	@ 0x40
 800c974:	2202      	movs	r2, #2
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f002 fb73 	bl	800f062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c97c:	4b3e      	ldr	r3, [pc, #248]	@ (800ca78 <USBD_CDC_Init+0x1e4>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	f003 020f 	and.w	r2, r3, #15
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	4613      	mov	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	440b      	add	r3, r1
 800c990:	3324      	adds	r3, #36	@ 0x24
 800c992:	2201      	movs	r2, #1
 800c994:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c996:	4b39      	ldr	r3, [pc, #228]	@ (800ca7c <USBD_CDC_Init+0x1e8>)
 800c998:	7819      	ldrb	r1, [r3, #0]
 800c99a:	2340      	movs	r3, #64	@ 0x40
 800c99c:	2202      	movs	r2, #2
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f002 fb5f 	bl	800f062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c9a4:	4b35      	ldr	r3, [pc, #212]	@ (800ca7c <USBD_CDC_Init+0x1e8>)
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	f003 020f 	and.w	r2, r3, #15
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	440b      	add	r3, r1
 800c9b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c9bc:	2201      	movs	r2, #1
 800c9be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c9c0:	4b2f      	ldr	r3, [pc, #188]	@ (800ca80 <USBD_CDC_Init+0x1ec>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	f003 020f 	and.w	r2, r3, #15
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3326      	adds	r3, #38	@ 0x26
 800c9d6:	2210      	movs	r2, #16
 800c9d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c9da:	4b29      	ldr	r3, [pc, #164]	@ (800ca80 <USBD_CDC_Init+0x1ec>)
 800c9dc:	7819      	ldrb	r1, [r3, #0]
 800c9de:	2308      	movs	r3, #8
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f002 fb3d 	bl	800f062 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c9e8:	4b25      	ldr	r3, [pc, #148]	@ (800ca80 <USBD_CDC_Init+0x1ec>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	f003 020f 	and.w	r2, r3, #15
 800c9f0:	6879      	ldr	r1, [r7, #4]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	440b      	add	r3, r1
 800c9fc:	3324      	adds	r3, #36	@ 0x24
 800c9fe:	2201      	movs	r2, #1
 800ca00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	33b0      	adds	r3, #176	@ 0xb0
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ca38:	2302      	movs	r3, #2
 800ca3a:	e018      	b.n	800ca6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7c1b      	ldrb	r3, [r3, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10a      	bne.n	800ca5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca44:	4b0d      	ldr	r3, [pc, #52]	@ (800ca7c <USBD_CDC_Init+0x1e8>)
 800ca46:	7819      	ldrb	r1, [r3, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ca4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f002 fbf4 	bl	800f240 <USBD_LL_PrepareReceive>
 800ca58:	e008      	b.n	800ca6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca5a:	4b08      	ldr	r3, [pc, #32]	@ (800ca7c <USBD_CDC_Init+0x1e8>)
 800ca5c:	7819      	ldrb	r1, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ca64:	2340      	movs	r3, #64	@ 0x40
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f002 fbea 	bl	800f240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20000097 	.word	0x20000097
 800ca7c:	20000098 	.word	0x20000098
 800ca80:	20000099 	.word	0x20000099

0800ca84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ca90:	4b3a      	ldr	r3, [pc, #232]	@ (800cb7c <USBD_CDC_DeInit+0xf8>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f002 fb09 	bl	800f0ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ca9c:	4b37      	ldr	r3, [pc, #220]	@ (800cb7c <USBD_CDC_DeInit+0xf8>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	f003 020f 	and.w	r2, r3, #15
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	440b      	add	r3, r1
 800cab0:	3324      	adds	r3, #36	@ 0x24
 800cab2:	2200      	movs	r2, #0
 800cab4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cab6:	4b32      	ldr	r3, [pc, #200]	@ (800cb80 <USBD_CDC_DeInit+0xfc>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f002 faf6 	bl	800f0ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cac2:	4b2f      	ldr	r3, [pc, #188]	@ (800cb80 <USBD_CDC_DeInit+0xfc>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	f003 020f 	and.w	r2, r3, #15
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	4613      	mov	r3, r2
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4413      	add	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	440b      	add	r3, r1
 800cad6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cada:	2200      	movs	r2, #0
 800cadc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cade:	4b29      	ldr	r3, [pc, #164]	@ (800cb84 <USBD_CDC_DeInit+0x100>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f002 fae2 	bl	800f0ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800caea:	4b26      	ldr	r3, [pc, #152]	@ (800cb84 <USBD_CDC_DeInit+0x100>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	f003 020f 	and.w	r2, r3, #15
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	4613      	mov	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	440b      	add	r3, r1
 800cafe:	3324      	adds	r3, #36	@ 0x24
 800cb00:	2200      	movs	r2, #0
 800cb02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cb04:	4b1f      	ldr	r3, [pc, #124]	@ (800cb84 <USBD_CDC_DeInit+0x100>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	f003 020f 	and.w	r2, r3, #15
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	440b      	add	r3, r1
 800cb18:	3326      	adds	r3, #38	@ 0x26
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	32b0      	adds	r2, #176	@ 0xb0
 800cb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01f      	beq.n	800cb70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	33b0      	adds	r3, #176	@ 0xb0
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	32b0      	adds	r2, #176	@ 0xb0
 800cb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f002 fbb6 	bl	800f2c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	32b0      	adds	r2, #176	@ 0xb0
 800cb62:	2100      	movs	r1, #0
 800cb64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000097 	.word	0x20000097
 800cb80:	20000098 	.word	0x20000098
 800cb84:	20000099 	.word	0x20000099

0800cb88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	32b0      	adds	r2, #176	@ 0xb0
 800cb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	e0bf      	b.n	800cd38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d050      	beq.n	800cc66 <USBD_CDC_Setup+0xde>
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	f040 80af 	bne.w	800cd28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	88db      	ldrh	r3, [r3, #6]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d03a      	beq.n	800cc48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	b25b      	sxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	da1b      	bge.n	800cc14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	33b0      	adds	r3, #176	@ 0xb0
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cbf2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	88d2      	ldrh	r2, [r2, #6]
 800cbf8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	88db      	ldrh	r3, [r3, #6]
 800cbfe:	2b07      	cmp	r3, #7
 800cc00:	bf28      	it	cs
 800cc02:	2307      	movcs	r3, #7
 800cc04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	89fa      	ldrh	r2, [r7, #14]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f001 fd93 	bl	800e738 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cc12:	e090      	b.n	800cd36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	785a      	ldrb	r2, [r3, #1]
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	88db      	ldrh	r3, [r3, #6]
 800cc22:	2b3f      	cmp	r3, #63	@ 0x3f
 800cc24:	d803      	bhi.n	800cc2e <USBD_CDC_Setup+0xa6>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	88db      	ldrh	r3, [r3, #6]
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	e000      	b.n	800cc30 <USBD_CDC_Setup+0xa8>
 800cc2e:	2240      	movs	r2, #64	@ 0x40
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cc36:	6939      	ldr	r1, [r7, #16]
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cc3e:	461a      	mov	r2, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f001 fda5 	bl	800e790 <USBD_CtlPrepareRx>
      break;
 800cc46:	e076      	b.n	800cd36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	33b0      	adds	r3, #176	@ 0xb0
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	7850      	ldrb	r0, [r2, #1]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	6839      	ldr	r1, [r7, #0]
 800cc62:	4798      	blx	r3
      break;
 800cc64:	e067      	b.n	800cd36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	785b      	ldrb	r3, [r3, #1]
 800cc6a:	2b0b      	cmp	r3, #11
 800cc6c:	d851      	bhi.n	800cd12 <USBD_CDC_Setup+0x18a>
 800cc6e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc74 <USBD_CDC_Setup+0xec>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cca5 	.word	0x0800cca5
 800cc78:	0800cd21 	.word	0x0800cd21
 800cc7c:	0800cd13 	.word	0x0800cd13
 800cc80:	0800cd13 	.word	0x0800cd13
 800cc84:	0800cd13 	.word	0x0800cd13
 800cc88:	0800cd13 	.word	0x0800cd13
 800cc8c:	0800cd13 	.word	0x0800cd13
 800cc90:	0800cd13 	.word	0x0800cd13
 800cc94:	0800cd13 	.word	0x0800cd13
 800cc98:	0800cd13 	.word	0x0800cd13
 800cc9c:	0800cccf 	.word	0x0800cccf
 800cca0:	0800ccf9 	.word	0x0800ccf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d107      	bne.n	800ccc0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ccb0:	f107 030a 	add.w	r3, r7, #10
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f001 fd3d 	bl	800e738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccbe:	e032      	b.n	800cd26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 fcbb 	bl	800e63e <USBD_CtlError>
            ret = USBD_FAIL;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	75fb      	strb	r3, [r7, #23]
          break;
 800cccc:	e02b      	b.n	800cd26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d107      	bne.n	800ccea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ccda:	f107 030d 	add.w	r3, r7, #13
 800ccde:	2201      	movs	r2, #1
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f001 fd28 	bl	800e738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cce8:	e01d      	b.n	800cd26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f001 fca6 	bl	800e63e <USBD_CtlError>
            ret = USBD_FAIL;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	75fb      	strb	r3, [r7, #23]
          break;
 800ccf6:	e016      	b.n	800cd26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d00f      	beq.n	800cd24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f001 fc99 	bl	800e63e <USBD_CtlError>
            ret = USBD_FAIL;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd10:	e008      	b.n	800cd24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f001 fc92 	bl	800e63e <USBD_CtlError>
          ret = USBD_FAIL;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	75fb      	strb	r3, [r7, #23]
          break;
 800cd1e:	e002      	b.n	800cd26 <USBD_CDC_Setup+0x19e>
          break;
 800cd20:	bf00      	nop
 800cd22:	e008      	b.n	800cd36 <USBD_CDC_Setup+0x1ae>
          break;
 800cd24:	bf00      	nop
      }
      break;
 800cd26:	e006      	b.n	800cd36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f001 fc87 	bl	800e63e <USBD_CtlError>
      ret = USBD_FAIL;
 800cd30:	2303      	movs	r3, #3
 800cd32:	75fb      	strb	r3, [r7, #23]
      break;
 800cd34:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	32b0      	adds	r2, #176	@ 0xb0
 800cd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e065      	b.n	800ce36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	32b0      	adds	r2, #176	@ 0xb0
 800cd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	f003 020f 	and.w	r2, r3, #15
 800cd80:	6879      	ldr	r1, [r7, #4]
 800cd82:	4613      	mov	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3318      	adds	r3, #24
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d02f      	beq.n	800cdf4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	f003 020f 	and.w	r2, r3, #15
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	440b      	add	r3, r1
 800cda6:	3318      	adds	r3, #24
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	78fb      	ldrb	r3, [r7, #3]
 800cdac:	f003 010f 	and.w	r1, r3, #15
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	440b      	add	r3, r1
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4403      	add	r3, r0
 800cdbc:	331c      	adds	r3, #28
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	fbb2 f1f3 	udiv	r1, r2, r3
 800cdc4:	fb01 f303 	mul.w	r3, r1, r3
 800cdc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d112      	bne.n	800cdf4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cdce:	78fb      	ldrb	r3, [r7, #3]
 800cdd0:	f003 020f 	and.w	r2, r3, #15
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	440b      	add	r3, r1
 800cde0:	3318      	adds	r3, #24
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cde6:	78f9      	ldrb	r1, [r7, #3]
 800cde8:	2300      	movs	r3, #0
 800cdea:	2200      	movs	r2, #0
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f002 fa06 	bl	800f1fe <USBD_LL_Transmit>
 800cdf2:	e01f      	b.n	800ce34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	33b0      	adds	r3, #176	@ 0xb0
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d010      	beq.n	800ce34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	33b0      	adds	r3, #176	@ 0xb0
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ce30:	78fa      	ldrb	r2, [r7, #3]
 800ce32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	32b0      	adds	r2, #176	@ 0xb0
 800ce54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	32b0      	adds	r2, #176	@ 0xb0
 800ce64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	e01a      	b.n	800cea6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f002 fa04 	bl	800f282 <USBD_LL_GetRxDataSize>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	33b0      	adds	r3, #176	@ 0xb0
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cea0:	4611      	mov	r1, r2
 800cea2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	32b0      	adds	r2, #176	@ 0xb0
 800cec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cecc:	2303      	movs	r3, #3
 800cece:	e024      	b.n	800cf1a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	33b0      	adds	r3, #176	@ 0xb0
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d019      	beq.n	800cf18 <USBD_CDC_EP0_RxReady+0x6a>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ceea:	2bff      	cmp	r3, #255	@ 0xff
 800ceec:	d014      	beq.n	800cf18 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	33b0      	adds	r3, #176	@ 0xb0
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	4413      	add	r3, r2
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cf06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cf0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	22ff      	movs	r2, #255	@ 0xff
 800cf14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf2c:	2182      	movs	r1, #130	@ 0x82
 800cf2e:	4818      	ldr	r0, [pc, #96]	@ (800cf90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf30:	f000 fd4f 	bl	800d9d2 <USBD_GetEpDesc>
 800cf34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf36:	2101      	movs	r1, #1
 800cf38:	4815      	ldr	r0, [pc, #84]	@ (800cf90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf3a:	f000 fd4a 	bl	800d9d2 <USBD_GetEpDesc>
 800cf3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf40:	2181      	movs	r1, #129	@ 0x81
 800cf42:	4813      	ldr	r0, [pc, #76]	@ (800cf90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf44:	f000 fd45 	bl	800d9d2 <USBD_GetEpDesc>
 800cf48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	2210      	movs	r2, #16
 800cf54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d006      	beq.n	800cf6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf64:	711a      	strb	r2, [r3, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d006      	beq.n	800cf7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cf78:	711a      	strb	r2, [r3, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2243      	movs	r2, #67	@ 0x43
 800cf82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf84:	4b02      	ldr	r3, [pc, #8]	@ (800cf90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000054 	.word	0x20000054

0800cf94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf9c:	2182      	movs	r1, #130	@ 0x82
 800cf9e:	4818      	ldr	r0, [pc, #96]	@ (800d000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfa0:	f000 fd17 	bl	800d9d2 <USBD_GetEpDesc>
 800cfa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	4815      	ldr	r0, [pc, #84]	@ (800d000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfaa:	f000 fd12 	bl	800d9d2 <USBD_GetEpDesc>
 800cfae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cfb0:	2181      	movs	r1, #129	@ 0x81
 800cfb2:	4813      	ldr	r0, [pc, #76]	@ (800d000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfb4:	f000 fd0d 	bl	800d9d2 <USBD_GetEpDesc>
 800cfb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2210      	movs	r2, #16
 800cfc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d006      	beq.n	800cfda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	711a      	strb	r2, [r3, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f042 0202 	orr.w	r2, r2, #2
 800cfd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d006      	beq.n	800cfee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	711a      	strb	r2, [r3, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f042 0202 	orr.w	r2, r2, #2
 800cfec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2243      	movs	r2, #67	@ 0x43
 800cff2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cff4:	4b02      	ldr	r3, [pc, #8]	@ (800d000 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3718      	adds	r7, #24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000054 	.word	0x20000054

0800d004 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d00c:	2182      	movs	r1, #130	@ 0x82
 800d00e:	4818      	ldr	r0, [pc, #96]	@ (800d070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d010:	f000 fcdf 	bl	800d9d2 <USBD_GetEpDesc>
 800d014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d016:	2101      	movs	r1, #1
 800d018:	4815      	ldr	r0, [pc, #84]	@ (800d070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d01a:	f000 fcda 	bl	800d9d2 <USBD_GetEpDesc>
 800d01e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d020:	2181      	movs	r1, #129	@ 0x81
 800d022:	4813      	ldr	r0, [pc, #76]	@ (800d070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d024:	f000 fcd5 	bl	800d9d2 <USBD_GetEpDesc>
 800d028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	2210      	movs	r2, #16
 800d034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d006      	beq.n	800d04a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	2200      	movs	r2, #0
 800d040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d044:	711a      	strb	r2, [r3, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d006      	beq.n	800d05e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d058:	711a      	strb	r2, [r3, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2243      	movs	r2, #67	@ 0x43
 800d062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d064:	4b02      	ldr	r3, [pc, #8]	@ (800d070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	20000054 	.word	0x20000054

0800d074 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	220a      	movs	r2, #10
 800d080:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d082:	4b03      	ldr	r3, [pc, #12]	@ (800d090 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	20000010 	.word	0x20000010

0800d094 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e009      	b.n	800d0bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	33b0      	adds	r3, #176	@ 0xb0
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	32b0      	adds	r2, #176	@ 0xb0
 800d0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e008      	b.n	800d100 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	371c      	adds	r7, #28
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	32b0      	adds	r2, #176	@ 0xb0
 800d120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d124:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d12c:	2303      	movs	r3, #3
 800d12e:	e004      	b.n	800d13a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3714      	adds	r7, #20
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
	...

0800d148 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	32b0      	adds	r2, #176	@ 0xb0
 800d15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d160:	2301      	movs	r3, #1
 800d162:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d16a:	2303      	movs	r3, #3
 800d16c:	e025      	b.n	800d1ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d174:	2b00      	cmp	r3, #0
 800d176:	d11f      	bne.n	800d1b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d180:	4b10      	ldr	r3, [pc, #64]	@ (800d1c4 <USBD_CDC_TransmitPacket+0x7c>)
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	f003 020f 	and.w	r2, r3, #15
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	4613      	mov	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4403      	add	r3, r0
 800d19a:	3318      	adds	r3, #24
 800d19c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d19e:	4b09      	ldr	r3, [pc, #36]	@ (800d1c4 <USBD_CDC_TransmitPacket+0x7c>)
 800d1a0:	7819      	ldrb	r1, [r3, #0]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f002 f825 	bl	800f1fe <USBD_LL_Transmit>

    ret = USBD_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20000097 	.word	0x20000097

0800d1c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	32b0      	adds	r2, #176	@ 0xb0
 800d1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	32b0      	adds	r2, #176	@ 0xb0
 800d1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d101      	bne.n	800d1f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e018      	b.n	800d228 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7c1b      	ldrb	r3, [r3, #16]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10a      	bne.n	800d214 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d1fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d230 <USBD_CDC_ReceivePacket+0x68>)
 800d200:	7819      	ldrb	r1, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f002 f817 	bl	800f240 <USBD_LL_PrepareReceive>
 800d212:	e008      	b.n	800d226 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d214:	4b06      	ldr	r3, [pc, #24]	@ (800d230 <USBD_CDC_ReceivePacket+0x68>)
 800d216:	7819      	ldrb	r1, [r3, #0]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d21e:	2340      	movs	r3, #64	@ 0x40
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f002 f80d 	bl	800f240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	20000098 	.word	0x20000098

0800d234 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	4613      	mov	r3, r2
 800d240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d248:	2303      	movs	r3, #3
 800d24a:	e01f      	b.n	800d28c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	79fa      	ldrb	r2, [r7, #7]
 800d27e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f001 fe87 	bl	800ef94 <USBD_LL_Init>
 800d286:	4603      	mov	r3, r0
 800d288:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e025      	b.n	800d2f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	32ae      	adds	r2, #174	@ 0xae
 800d2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00f      	beq.n	800d2e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	32ae      	adds	r2, #174	@ 0xae
 800d2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d8:	f107 020e 	add.w	r2, r7, #14
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4798      	blx	r3
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f001 fe8f 	bl	800f02c <USBD_LL_Start>
 800d30e:	4603      	mov	r3, r0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d320:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d322:	4618      	mov	r0, r3
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d344:	2b00      	cmp	r3, #0
 800d346:	d009      	beq.n	800d35c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	78fa      	ldrb	r2, [r7, #3]
 800d352:	4611      	mov	r1, r2
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	4798      	blx	r3
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b084      	sub	sp, #16
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	460b      	mov	r3, r1
 800d370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	78fa      	ldrb	r2, [r7, #3]
 800d380:	4611      	mov	r1, r2
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	4798      	blx	r3
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d38c:	2303      	movs	r3, #3
 800d38e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b084      	sub	sp, #16
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f001 f90c 	bl	800e5ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d3ce:	f003 031f 	and.w	r3, r3, #31
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d01a      	beq.n	800d40c <USBD_LL_SetupStage+0x72>
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d822      	bhi.n	800d420 <USBD_LL_SetupStage+0x86>
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d002      	beq.n	800d3e4 <USBD_LL_SetupStage+0x4a>
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d00a      	beq.n	800d3f8 <USBD_LL_SetupStage+0x5e>
 800d3e2:	e01d      	b.n	800d420 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fb63 	bl	800dab8 <USBD_StdDevReq>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f6:	e020      	b.n	800d43a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d3fe:	4619      	mov	r1, r3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fbcb 	bl	800db9c <USBD_StdItfReq>
 800d406:	4603      	mov	r3, r0
 800d408:	73fb      	strb	r3, [r7, #15]
      break;
 800d40a:	e016      	b.n	800d43a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 fc2d 	bl	800dc74 <USBD_StdEPReq>
 800d41a:	4603      	mov	r3, r0
 800d41c:	73fb      	strb	r3, [r7, #15]
      break;
 800d41e:	e00c      	b.n	800d43a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d426:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	4619      	mov	r1, r3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f001 fe5c 	bl	800f0ec <USBD_LL_StallEP>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
      break;
 800d438:	bf00      	nop
  }

  return ret;
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	460b      	mov	r3, r1
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d456:	7afb      	ldrb	r3, [r7, #11]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d16e      	bne.n	800d53a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d46a:	2b03      	cmp	r3, #3
 800d46c:	f040 8098 	bne.w	800d5a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	689a      	ldr	r2, [r3, #8]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d913      	bls.n	800d4a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	1ad2      	subs	r2, r2, r3
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	68da      	ldr	r2, [r3, #12]
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	4293      	cmp	r3, r2
 800d494:	bf28      	it	cs
 800d496:	4613      	movcs	r3, r2
 800d498:	461a      	mov	r2, r3
 800d49a:	6879      	ldr	r1, [r7, #4]
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f001 f994 	bl	800e7ca <USBD_CtlContinueRx>
 800d4a2:	e07d      	b.n	800d5a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d4aa:	f003 031f 	and.w	r3, r3, #31
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d014      	beq.n	800d4dc <USBD_LL_DataOutStage+0x98>
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	d81d      	bhi.n	800d4f2 <USBD_LL_DataOutStage+0xae>
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <USBD_LL_DataOutStage+0x7c>
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d003      	beq.n	800d4c6 <USBD_LL_DataOutStage+0x82>
 800d4be:	e018      	b.n	800d4f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	75bb      	strb	r3, [r7, #22]
            break;
 800d4c4:	e018      	b.n	800d4f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f000 fa64 	bl	800d99e <USBD_CoreFindIF>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	75bb      	strb	r3, [r7, #22]
            break;
 800d4da:	e00d      	b.n	800d4f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 fa66 	bl	800d9b8 <USBD_CoreFindEP>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	75bb      	strb	r3, [r7, #22]
            break;
 800d4f0:	e002      	b.n	800d4f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	75bb      	strb	r3, [r7, #22]
            break;
 800d4f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d4f8:	7dbb      	ldrb	r3, [r7, #22]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d119      	bne.n	800d532 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b03      	cmp	r3, #3
 800d508:	d113      	bne.n	800d532 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d50a:	7dba      	ldrb	r2, [r7, #22]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	32ae      	adds	r2, #174	@ 0xae
 800d510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00b      	beq.n	800d532 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d51a:	7dba      	ldrb	r2, [r7, #22]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d522:	7dba      	ldrb	r2, [r7, #22]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	32ae      	adds	r2, #174	@ 0xae
 800d528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f001 f95a 	bl	800e7ec <USBD_CtlSendStatus>
 800d538:	e032      	b.n	800d5a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d53a:	7afb      	ldrb	r3, [r7, #11]
 800d53c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d540:	b2db      	uxtb	r3, r3
 800d542:	4619      	mov	r1, r3
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f000 fa37 	bl	800d9b8 <USBD_CoreFindEP>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d54e:	7dbb      	ldrb	r3, [r7, #22]
 800d550:	2bff      	cmp	r3, #255	@ 0xff
 800d552:	d025      	beq.n	800d5a0 <USBD_LL_DataOutStage+0x15c>
 800d554:	7dbb      	ldrb	r3, [r7, #22]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d122      	bne.n	800d5a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b03      	cmp	r3, #3
 800d564:	d117      	bne.n	800d596 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d566:	7dba      	ldrb	r2, [r7, #22]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	32ae      	adds	r2, #174	@ 0xae
 800d56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00f      	beq.n	800d596 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d576:	7dba      	ldrb	r2, [r7, #22]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d57e:	7dba      	ldrb	r2, [r7, #22]
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	32ae      	adds	r2, #174	@ 0xae
 800d584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	7afa      	ldrb	r2, [r7, #11]
 800d58c:	4611      	mov	r1, r2
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	4798      	blx	r3
 800d592:	4603      	mov	r3, r0
 800d594:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d596:	7dfb      	ldrb	r3, [r7, #23]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	e000      	b.n	800d5a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b086      	sub	sp, #24
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	607a      	str	r2, [r7, #4]
 800d5b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d5b8:	7afb      	ldrb	r3, [r7, #11]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d16f      	bne.n	800d69e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3314      	adds	r3, #20
 800d5c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d15a      	bne.n	800d684 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d914      	bls.n	800d604 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	1ad2      	subs	r2, r2, r3
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f001 f8bc 	bl	800e76e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f001 fe1f 	bl	800f240 <USBD_LL_PrepareReceive>
 800d602:	e03f      	b.n	800d684 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	68da      	ldr	r2, [r3, #12]
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d11c      	bne.n	800d64a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d618:	429a      	cmp	r2, r3
 800d61a:	d316      	bcc.n	800d64a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d626:	429a      	cmp	r2, r3
 800d628:	d20f      	bcs.n	800d64a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d62a:	2200      	movs	r2, #0
 800d62c:	2100      	movs	r1, #0
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f001 f89d 	bl	800e76e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d63c:	2300      	movs	r3, #0
 800d63e:	2200      	movs	r2, #0
 800d640:	2100      	movs	r1, #0
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f001 fdfc 	bl	800f240 <USBD_LL_PrepareReceive>
 800d648:	e01c      	b.n	800d684 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b03      	cmp	r3, #3
 800d654:	d10f      	bne.n	800d676 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d009      	beq.n	800d676 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2200      	movs	r2, #0
 800d666:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d676:	2180      	movs	r1, #128	@ 0x80
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f001 fd37 	bl	800f0ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f001 f8c7 	bl	800e812 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d03a      	beq.n	800d704 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f7ff fe42 	bl	800d318 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d69c:	e032      	b.n	800d704 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d69e:	7afb      	ldrb	r3, [r7, #11]
 800d6a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 f985 	bl	800d9b8 <USBD_CoreFindEP>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	2bff      	cmp	r3, #255	@ 0xff
 800d6b6:	d025      	beq.n	800d704 <USBD_LL_DataInStage+0x15a>
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d122      	bne.n	800d704 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d11c      	bne.n	800d704 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d6ca:	7dfa      	ldrb	r2, [r7, #23]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	32ae      	adds	r2, #174	@ 0xae
 800d6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d014      	beq.n	800d704 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d6da:	7dfa      	ldrb	r2, [r7, #23]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d6e2:	7dfa      	ldrb	r2, [r7, #23]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	32ae      	adds	r2, #174	@ 0xae
 800d6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	7afa      	ldrb	r2, [r7, #11]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	4798      	blx	r3
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d6fa:	7dbb      	ldrb	r3, [r7, #22]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d001      	beq.n	800d704 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d700:	7dbb      	ldrb	r3, [r7, #22]
 800d702:	e000      	b.n	800d706 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d746:	2b00      	cmp	r3, #0
 800d748:	d014      	beq.n	800d774 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00e      	beq.n	800d774 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	6852      	ldr	r2, [r2, #4]
 800d762:	b2d2      	uxtb	r2, r2
 800d764:	4611      	mov	r1, r2
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	4798      	blx	r3
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d001      	beq.n	800d774 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d770:	2303      	movs	r3, #3
 800d772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d774:	2340      	movs	r3, #64	@ 0x40
 800d776:	2200      	movs	r2, #0
 800d778:	2100      	movs	r1, #0
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f001 fc71 	bl	800f062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2240      	movs	r2, #64	@ 0x40
 800d78c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d790:	2340      	movs	r3, #64	@ 0x40
 800d792:	2200      	movs	r2, #0
 800d794:	2180      	movs	r1, #128	@ 0x80
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f001 fc63 	bl	800f062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2240      	movs	r2, #64	@ 0x40
 800d7a6:	621a      	str	r2, [r3, #32]

  return ret;
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b083      	sub	sp, #12
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	78fa      	ldrb	r2, [r7, #3]
 800d7c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b083      	sub	sp, #12
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b04      	cmp	r3, #4
 800d7e4:	d006      	beq.n	800d7f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2204      	movs	r2, #4
 800d7f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b04      	cmp	r3, #4
 800d81c:	d106      	bne.n	800d82c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d824:	b2da      	uxtb	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	370c      	adds	r7, #12
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b082      	sub	sp, #8
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	2b03      	cmp	r3, #3
 800d84c:	d110      	bne.n	800d870 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00b      	beq.n	800d870 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d005      	beq.n	800d870 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d86a:	69db      	ldr	r3, [r3, #28]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b082      	sub	sp, #8
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	460b      	mov	r3, r1
 800d884:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	32ae      	adds	r2, #174	@ 0xae
 800d890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d101      	bne.n	800d89c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d898:	2303      	movs	r3, #3
 800d89a:	e01c      	b.n	800d8d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b03      	cmp	r3, #3
 800d8a6:	d115      	bne.n	800d8d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	32ae      	adds	r2, #174	@ 0xae
 800d8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b6:	6a1b      	ldr	r3, [r3, #32]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00b      	beq.n	800d8d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	32ae      	adds	r2, #174	@ 0xae
 800d8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ca:	6a1b      	ldr	r3, [r3, #32]
 800d8cc:	78fa      	ldrb	r2, [r7, #3]
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b082      	sub	sp, #8
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	32ae      	adds	r2, #174	@ 0xae
 800d8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e01c      	b.n	800d93a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d906:	b2db      	uxtb	r3, r3
 800d908:	2b03      	cmp	r3, #3
 800d90a:	d115      	bne.n	800d938 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	32ae      	adds	r2, #174	@ 0xae
 800d916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00b      	beq.n	800d938 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	32ae      	adds	r2, #174	@ 0xae
 800d92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d930:	78fa      	ldrb	r2, [r7, #3]
 800d932:	4611      	mov	r1, r2
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d960:	2300      	movs	r3, #0
 800d962:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00e      	beq.n	800d994 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	6852      	ldr	r2, [r2, #4]
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	4611      	mov	r1, r2
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	4798      	blx	r3
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d990:	2303      	movs	r3, #3
 800d992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d994:	7bfb      	ldrb	r3, [r7, #15]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b083      	sub	sp, #12
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d9aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d9c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	370c      	adds	r7, #12
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b086      	sub	sp, #24
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	7812      	ldrb	r2, [r2, #0]
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d91f      	bls.n	800da38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d9fe:	e013      	b.n	800da28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800da00:	f107 030a 	add.w	r3, r7, #10
 800da04:	4619      	mov	r1, r3
 800da06:	6978      	ldr	r0, [r7, #20]
 800da08:	f000 f81b 	bl	800da42 <USBD_GetNextDesc>
 800da0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	785b      	ldrb	r3, [r3, #1]
 800da12:	2b05      	cmp	r3, #5
 800da14:	d108      	bne.n	800da28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	789b      	ldrb	r3, [r3, #2]
 800da1e:	78fa      	ldrb	r2, [r7, #3]
 800da20:	429a      	cmp	r2, r3
 800da22:	d008      	beq.n	800da36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800da24:	2300      	movs	r3, #0
 800da26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	885b      	ldrh	r3, [r3, #2]
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	897b      	ldrh	r3, [r7, #10]
 800da30:	429a      	cmp	r2, r3
 800da32:	d8e5      	bhi.n	800da00 <USBD_GetEpDesc+0x2e>
 800da34:	e000      	b.n	800da38 <USBD_GetEpDesc+0x66>
          break;
 800da36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800da38:	693b      	ldr	r3, [r7, #16]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800da42:	b480      	push	{r7}
 800da44:	b085      	sub	sp, #20
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	7812      	ldrb	r2, [r2, #0]
 800da58:	4413      	add	r3, r2
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	461a      	mov	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4413      	add	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800da6c:	68fb      	ldr	r3, [r7, #12]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b087      	sub	sp, #28
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	3301      	adds	r3, #1
 800da90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800da98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800da9c:	021b      	lsls	r3, r3, #8
 800da9e:	b21a      	sxth	r2, r3
 800daa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	b21b      	sxth	r3, r3
 800daa8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800daaa:	89fb      	ldrh	r3, [r7, #14]
}
 800daac:	4618      	mov	r0, r3
 800daae:	371c      	adds	r7, #28
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dace:	2b40      	cmp	r3, #64	@ 0x40
 800dad0:	d005      	beq.n	800dade <USBD_StdDevReq+0x26>
 800dad2:	2b40      	cmp	r3, #64	@ 0x40
 800dad4:	d857      	bhi.n	800db86 <USBD_StdDevReq+0xce>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00f      	beq.n	800dafa <USBD_StdDevReq+0x42>
 800dada:	2b20      	cmp	r3, #32
 800dadc:	d153      	bne.n	800db86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	32ae      	adds	r2, #174	@ 0xae
 800dae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	4798      	blx	r3
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]
      break;
 800daf8:	e04a      	b.n	800db90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	2b09      	cmp	r3, #9
 800db00:	d83b      	bhi.n	800db7a <USBD_StdDevReq+0xc2>
 800db02:	a201      	add	r2, pc, #4	@ (adr r2, 800db08 <USBD_StdDevReq+0x50>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db5d 	.word	0x0800db5d
 800db0c:	0800db71 	.word	0x0800db71
 800db10:	0800db7b 	.word	0x0800db7b
 800db14:	0800db67 	.word	0x0800db67
 800db18:	0800db7b 	.word	0x0800db7b
 800db1c:	0800db3b 	.word	0x0800db3b
 800db20:	0800db31 	.word	0x0800db31
 800db24:	0800db7b 	.word	0x0800db7b
 800db28:	0800db53 	.word	0x0800db53
 800db2c:	0800db45 	.word	0x0800db45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fa3c 	bl	800dfb0 <USBD_GetDescriptor>
          break;
 800db38:	e024      	b.n	800db84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fba1 	bl	800e284 <USBD_SetAddress>
          break;
 800db42:	e01f      	b.n	800db84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fbe0 	bl	800e30c <USBD_SetConfig>
 800db4c:	4603      	mov	r3, r0
 800db4e:	73fb      	strb	r3, [r7, #15]
          break;
 800db50:	e018      	b.n	800db84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db52:	6839      	ldr	r1, [r7, #0]
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 fc83 	bl	800e460 <USBD_GetConfig>
          break;
 800db5a:	e013      	b.n	800db84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fcb4 	bl	800e4cc <USBD_GetStatus>
          break;
 800db64:	e00e      	b.n	800db84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db66:	6839      	ldr	r1, [r7, #0]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fce3 	bl	800e534 <USBD_SetFeature>
          break;
 800db6e:	e009      	b.n	800db84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fd07 	bl	800e586 <USBD_ClrFeature>
          break;
 800db78:	e004      	b.n	800db84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fd5e 	bl	800e63e <USBD_CtlError>
          break;
 800db82:	bf00      	nop
      }
      break;
 800db84:	e004      	b.n	800db90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fd58 	bl	800e63e <USBD_CtlError>
      break;
 800db8e:	bf00      	nop
  }

  return ret;
 800db90:	7bfb      	ldrb	r3, [r7, #15]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop

0800db9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbb2:	2b40      	cmp	r3, #64	@ 0x40
 800dbb4:	d005      	beq.n	800dbc2 <USBD_StdItfReq+0x26>
 800dbb6:	2b40      	cmp	r3, #64	@ 0x40
 800dbb8:	d852      	bhi.n	800dc60 <USBD_StdItfReq+0xc4>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <USBD_StdItfReq+0x26>
 800dbbe:	2b20      	cmp	r3, #32
 800dbc0:	d14e      	bne.n	800dc60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d840      	bhi.n	800dc52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	889b      	ldrh	r3, [r3, #4]
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d836      	bhi.n	800dc48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	889b      	ldrh	r3, [r3, #4]
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff fedb 	bl	800d99e <USBD_CoreFindIF>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
 800dbee:	2bff      	cmp	r3, #255	@ 0xff
 800dbf0:	d01d      	beq.n	800dc2e <USBD_StdItfReq+0x92>
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d11a      	bne.n	800dc2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dbf8:	7bba      	ldrb	r2, [r7, #14]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	32ae      	adds	r2, #174	@ 0xae
 800dbfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00f      	beq.n	800dc28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dc08:	7bba      	ldrb	r2, [r7, #14]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc10:	7bba      	ldrb	r2, [r7, #14]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	32ae      	adds	r2, #174	@ 0xae
 800dc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	6839      	ldr	r1, [r7, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	4798      	blx	r3
 800dc22:	4603      	mov	r3, r0
 800dc24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc26:	e004      	b.n	800dc32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc2c:	e001      	b.n	800dc32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	88db      	ldrh	r3, [r3, #6]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d110      	bne.n	800dc5c <USBD_StdItfReq+0xc0>
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10d      	bne.n	800dc5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fdd3 	bl	800e7ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc46:	e009      	b.n	800dc5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fcf7 	bl	800e63e <USBD_CtlError>
          break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fcf2 	bl	800e63e <USBD_CtlError>
          break;
 800dc5a:	e000      	b.n	800dc5e <USBD_StdItfReq+0xc2>
          break;
 800dc5c:	bf00      	nop
      }
      break;
 800dc5e:	e004      	b.n	800dc6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fceb 	bl	800e63e <USBD_CtlError>
      break;
 800dc68:	bf00      	nop
  }

  return ret;
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	889b      	ldrh	r3, [r3, #4]
 800dc86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc90:	2b40      	cmp	r3, #64	@ 0x40
 800dc92:	d007      	beq.n	800dca4 <USBD_StdEPReq+0x30>
 800dc94:	2b40      	cmp	r3, #64	@ 0x40
 800dc96:	f200 817f 	bhi.w	800df98 <USBD_StdEPReq+0x324>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d02a      	beq.n	800dcf4 <USBD_StdEPReq+0x80>
 800dc9e:	2b20      	cmp	r3, #32
 800dca0:	f040 817a 	bne.w	800df98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dca4:	7bbb      	ldrb	r3, [r7, #14]
 800dca6:	4619      	mov	r1, r3
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff fe85 	bl	800d9b8 <USBD_CoreFindEP>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcb2:	7b7b      	ldrb	r3, [r7, #13]
 800dcb4:	2bff      	cmp	r3, #255	@ 0xff
 800dcb6:	f000 8174 	beq.w	800dfa2 <USBD_StdEPReq+0x32e>
 800dcba:	7b7b      	ldrb	r3, [r7, #13]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f040 8170 	bne.w	800dfa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dcc2:	7b7a      	ldrb	r2, [r7, #13]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dcca:	7b7a      	ldrb	r2, [r7, #13]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	32ae      	adds	r2, #174	@ 0xae
 800dcd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 8163 	beq.w	800dfa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dcdc:	7b7a      	ldrb	r2, [r7, #13]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	32ae      	adds	r2, #174	@ 0xae
 800dce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	4798      	blx	r3
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dcf2:	e156      	b.n	800dfa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	785b      	ldrb	r3, [r3, #1]
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d008      	beq.n	800dd0e <USBD_StdEPReq+0x9a>
 800dcfc:	2b03      	cmp	r3, #3
 800dcfe:	f300 8145 	bgt.w	800df8c <USBD_StdEPReq+0x318>
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f000 809b 	beq.w	800de3e <USBD_StdEPReq+0x1ca>
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d03c      	beq.n	800dd86 <USBD_StdEPReq+0x112>
 800dd0c:	e13e      	b.n	800df8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d002      	beq.n	800dd20 <USBD_StdEPReq+0xac>
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d016      	beq.n	800dd4c <USBD_StdEPReq+0xd8>
 800dd1e:	e02c      	b.n	800dd7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00d      	beq.n	800dd42 <USBD_StdEPReq+0xce>
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	2b80      	cmp	r3, #128	@ 0x80
 800dd2a:	d00a      	beq.n	800dd42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd2c:	7bbb      	ldrb	r3, [r7, #14]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 f9db 	bl	800f0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd36:	2180      	movs	r1, #128	@ 0x80
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f001 f9d7 	bl	800f0ec <USBD_LL_StallEP>
 800dd3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd40:	e020      	b.n	800dd84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fc7a 	bl	800e63e <USBD_CtlError>
              break;
 800dd4a:	e01b      	b.n	800dd84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	885b      	ldrh	r3, [r3, #2]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10e      	bne.n	800dd72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00b      	beq.n	800dd72 <USBD_StdEPReq+0xfe>
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
 800dd5c:	2b80      	cmp	r3, #128	@ 0x80
 800dd5e:	d008      	beq.n	800dd72 <USBD_StdEPReq+0xfe>
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	88db      	ldrh	r3, [r3, #6]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d104      	bne.n	800dd72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd68:	7bbb      	ldrb	r3, [r7, #14]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 f9bd 	bl	800f0ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fd3a 	bl	800e7ec <USBD_CtlSendStatus>

              break;
 800dd78:	e004      	b.n	800dd84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fc5e 	bl	800e63e <USBD_CtlError>
              break;
 800dd82:	bf00      	nop
          }
          break;
 800dd84:	e107      	b.n	800df96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	d002      	beq.n	800dd98 <USBD_StdEPReq+0x124>
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d016      	beq.n	800ddc4 <USBD_StdEPReq+0x150>
 800dd96:	e04b      	b.n	800de30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00d      	beq.n	800ddba <USBD_StdEPReq+0x146>
 800dd9e:	7bbb      	ldrb	r3, [r7, #14]
 800dda0:	2b80      	cmp	r3, #128	@ 0x80
 800dda2:	d00a      	beq.n	800ddba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	4619      	mov	r1, r3
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f001 f99f 	bl	800f0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddae:	2180      	movs	r1, #128	@ 0x80
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f001 f99b 	bl	800f0ec <USBD_LL_StallEP>
 800ddb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ddb8:	e040      	b.n	800de3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 fc3e 	bl	800e63e <USBD_CtlError>
              break;
 800ddc2:	e03b      	b.n	800de3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	885b      	ldrh	r3, [r3, #2]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d136      	bne.n	800de3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ddcc:	7bbb      	ldrb	r3, [r7, #14]
 800ddce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d004      	beq.n	800dde0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f001 f9a5 	bl	800f12a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fd03 	bl	800e7ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
 800dde8:	4619      	mov	r1, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff fde4 	bl	800d9b8 <USBD_CoreFindEP>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddf4:	7b7b      	ldrb	r3, [r7, #13]
 800ddf6:	2bff      	cmp	r3, #255	@ 0xff
 800ddf8:	d01f      	beq.n	800de3a <USBD_StdEPReq+0x1c6>
 800ddfa:	7b7b      	ldrb	r3, [r7, #13]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d11c      	bne.n	800de3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800de00:	7b7a      	ldrb	r2, [r7, #13]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800de08:	7b7a      	ldrb	r2, [r7, #13]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	32ae      	adds	r2, #174	@ 0xae
 800de0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d010      	beq.n	800de3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de18:	7b7a      	ldrb	r2, [r7, #13]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	32ae      	adds	r2, #174	@ 0xae
 800de1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	4798      	blx	r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800de2e:	e004      	b.n	800de3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fc03 	bl	800e63e <USBD_CtlError>
              break;
 800de38:	e000      	b.n	800de3c <USBD_StdEPReq+0x1c8>
              break;
 800de3a:	bf00      	nop
          }
          break;
 800de3c:	e0ab      	b.n	800df96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b02      	cmp	r3, #2
 800de48:	d002      	beq.n	800de50 <USBD_StdEPReq+0x1dc>
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d032      	beq.n	800deb4 <USBD_StdEPReq+0x240>
 800de4e:	e097      	b.n	800df80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de50:	7bbb      	ldrb	r3, [r7, #14]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d007      	beq.n	800de66 <USBD_StdEPReq+0x1f2>
 800de56:	7bbb      	ldrb	r3, [r7, #14]
 800de58:	2b80      	cmp	r3, #128	@ 0x80
 800de5a:	d004      	beq.n	800de66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fbed 	bl	800e63e <USBD_CtlError>
                break;
 800de64:	e091      	b.n	800df8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	da0b      	bge.n	800de86 <USBD_StdEPReq+0x212>
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de74:	4613      	mov	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4413      	add	r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	3310      	adds	r3, #16
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	3304      	adds	r3, #4
 800de84:	e00b      	b.n	800de9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de86:	7bbb      	ldrb	r3, [r7, #14]
 800de88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de8c:	4613      	mov	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	4413      	add	r3, r2
 800de9c:	3304      	adds	r3, #4
 800de9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2200      	movs	r2, #0
 800dea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2202      	movs	r2, #2
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fc43 	bl	800e738 <USBD_CtlSendData>
              break;
 800deb2:	e06a      	b.n	800df8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800deb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	da11      	bge.n	800dee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	f003 020f 	and.w	r2, r3, #15
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	4613      	mov	r3, r2
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	4413      	add	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	440b      	add	r3, r1
 800dece:	3324      	adds	r3, #36	@ 0x24
 800ded0:	881b      	ldrh	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d117      	bne.n	800df06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fbb0 	bl	800e63e <USBD_CtlError>
                  break;
 800dede:	e054      	b.n	800df8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	f003 020f 	and.w	r2, r3, #15
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	4613      	mov	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	440b      	add	r3, r1
 800def2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d104      	bne.n	800df06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 fb9d 	bl	800e63e <USBD_CtlError>
                  break;
 800df04:	e041      	b.n	800df8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	da0b      	bge.n	800df26 <USBD_StdEPReq+0x2b2>
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800df14:	4613      	mov	r3, r2
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4413      	add	r3, r2
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	3310      	adds	r3, #16
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	4413      	add	r3, r2
 800df22:	3304      	adds	r3, #4
 800df24:	e00b      	b.n	800df3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df26:	7bbb      	ldrb	r3, [r7, #14]
 800df28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	4413      	add	r3, r2
 800df3c:	3304      	adds	r3, #4
 800df3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df40:	7bbb      	ldrb	r3, [r7, #14]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <USBD_StdEPReq+0x2d8>
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	2b80      	cmp	r3, #128	@ 0x80
 800df4a:	d103      	bne.n	800df54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2200      	movs	r2, #0
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	e00e      	b.n	800df72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df54:	7bbb      	ldrb	r3, [r7, #14]
 800df56:	4619      	mov	r1, r3
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f001 f905 	bl	800f168 <USBD_LL_IsStallEP>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d003      	beq.n	800df6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2201      	movs	r2, #1
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	e002      	b.n	800df72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2202      	movs	r2, #2
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fbdd 	bl	800e738 <USBD_CtlSendData>
              break;
 800df7e:	e004      	b.n	800df8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fb5b 	bl	800e63e <USBD_CtlError>
              break;
 800df88:	bf00      	nop
          }
          break;
 800df8a:	e004      	b.n	800df96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fb55 	bl	800e63e <USBD_CtlError>
          break;
 800df94:	bf00      	nop
      }
      break;
 800df96:	e005      	b.n	800dfa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fb4f 	bl	800e63e <USBD_CtlError>
      break;
 800dfa0:	e000      	b.n	800dfa4 <USBD_StdEPReq+0x330>
      break;
 800dfa2:	bf00      	nop
  }

  return ret;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
	...

0800dfb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	885b      	ldrh	r3, [r3, #2]
 800dfca:	0a1b      	lsrs	r3, r3, #8
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	2b06      	cmp	r3, #6
 800dfd2:	f200 8128 	bhi.w	800e226 <USBD_GetDescriptor+0x276>
 800dfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800dfdc <USBD_GetDescriptor+0x2c>)
 800dfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfdc:	0800dff9 	.word	0x0800dff9
 800dfe0:	0800e011 	.word	0x0800e011
 800dfe4:	0800e051 	.word	0x0800e051
 800dfe8:	0800e227 	.word	0x0800e227
 800dfec:	0800e227 	.word	0x0800e227
 800dff0:	0800e1c7 	.word	0x0800e1c7
 800dff4:	0800e1f3 	.word	0x0800e1f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	7c12      	ldrb	r2, [r2, #16]
 800e004:	f107 0108 	add.w	r1, r7, #8
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
 800e00c:	60f8      	str	r0, [r7, #12]
      break;
 800e00e:	e112      	b.n	800e236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7c1b      	ldrb	r3, [r3, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10d      	bne.n	800e034 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e020:	f107 0208 	add.w	r2, r7, #8
 800e024:	4610      	mov	r0, r2
 800e026:	4798      	blx	r3
 800e028:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3301      	adds	r3, #1
 800e02e:	2202      	movs	r2, #2
 800e030:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e032:	e100      	b.n	800e236 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03c:	f107 0208 	add.w	r2, r7, #8
 800e040:	4610      	mov	r0, r2
 800e042:	4798      	blx	r3
 800e044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3301      	adds	r3, #1
 800e04a:	2202      	movs	r2, #2
 800e04c:	701a      	strb	r2, [r3, #0]
      break;
 800e04e:	e0f2      	b.n	800e236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	885b      	ldrh	r3, [r3, #2]
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b05      	cmp	r3, #5
 800e058:	f200 80ac 	bhi.w	800e1b4 <USBD_GetDescriptor+0x204>
 800e05c:	a201      	add	r2, pc, #4	@ (adr r2, 800e064 <USBD_GetDescriptor+0xb4>)
 800e05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e062:	bf00      	nop
 800e064:	0800e07d 	.word	0x0800e07d
 800e068:	0800e0b1 	.word	0x0800e0b1
 800e06c:	0800e0e5 	.word	0x0800e0e5
 800e070:	0800e119 	.word	0x0800e119
 800e074:	0800e14d 	.word	0x0800e14d
 800e078:	0800e181 	.word	0x0800e181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00b      	beq.n	800e0a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	7c12      	ldrb	r2, [r2, #16]
 800e094:	f107 0108 	add.w	r1, r7, #8
 800e098:	4610      	mov	r0, r2
 800e09a:	4798      	blx	r3
 800e09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e09e:	e091      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 facb 	bl	800e63e <USBD_CtlError>
            err++;
 800e0a8:	7afb      	ldrb	r3, [r7, #11]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ae:	e089      	b.n	800e1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00b      	beq.n	800e0d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	7c12      	ldrb	r2, [r2, #16]
 800e0c8:	f107 0108 	add.w	r1, r7, #8
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	4798      	blx	r3
 800e0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0d2:	e077      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fab1 	bl	800e63e <USBD_CtlError>
            err++;
 800e0dc:	7afb      	ldrb	r3, [r7, #11]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e0e2:	e06f      	b.n	800e1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	7c12      	ldrb	r2, [r2, #16]
 800e0fc:	f107 0108 	add.w	r1, r7, #8
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
 800e104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e106:	e05d      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fa97 	bl	800e63e <USBD_CtlError>
            err++;
 800e110:	7afb      	ldrb	r3, [r7, #11]
 800e112:	3301      	adds	r3, #1
 800e114:	72fb      	strb	r3, [r7, #11]
          break;
 800e116:	e055      	b.n	800e1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00b      	beq.n	800e13c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	7c12      	ldrb	r2, [r2, #16]
 800e130:	f107 0108 	add.w	r1, r7, #8
 800e134:	4610      	mov	r0, r2
 800e136:	4798      	blx	r3
 800e138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e13a:	e043      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fa7d 	bl	800e63e <USBD_CtlError>
            err++;
 800e144:	7afb      	ldrb	r3, [r7, #11]
 800e146:	3301      	adds	r3, #1
 800e148:	72fb      	strb	r3, [r7, #11]
          break;
 800e14a:	e03b      	b.n	800e1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7c12      	ldrb	r2, [r2, #16]
 800e164:	f107 0108 	add.w	r1, r7, #8
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16e:	e029      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa63 	bl	800e63e <USBD_CtlError>
            err++;
 800e178:	7afb      	ldrb	r3, [r7, #11]
 800e17a:	3301      	adds	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
          break;
 800e17e:	e021      	b.n	800e1c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e192:	699b      	ldr	r3, [r3, #24]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	7c12      	ldrb	r2, [r2, #16]
 800e198:	f107 0108 	add.w	r1, r7, #8
 800e19c:	4610      	mov	r0, r2
 800e19e:	4798      	blx	r3
 800e1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1a2:	e00f      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fa49 	bl	800e63e <USBD_CtlError>
            err++;
 800e1ac:	7afb      	ldrb	r3, [r7, #11]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1b2:	e007      	b.n	800e1c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fa41 	bl	800e63e <USBD_CtlError>
          err++;
 800e1bc:	7afb      	ldrb	r3, [r7, #11]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e1c2:	bf00      	nop
      }
      break;
 800e1c4:	e037      	b.n	800e236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	7c1b      	ldrb	r3, [r3, #16]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d109      	bne.n	800e1e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d6:	f107 0208 	add.w	r2, r7, #8
 800e1da:	4610      	mov	r0, r2
 800e1dc:	4798      	blx	r3
 800e1de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1e0:	e029      	b.n	800e236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fa2a 	bl	800e63e <USBD_CtlError>
        err++;
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e1f0:	e021      	b.n	800e236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7c1b      	ldrb	r3, [r3, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d10d      	bne.n	800e216 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e202:	f107 0208 	add.w	r2, r7, #8
 800e206:	4610      	mov	r0, r2
 800e208:	4798      	blx	r3
 800e20a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	3301      	adds	r3, #1
 800e210:	2207      	movs	r2, #7
 800e212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e214:	e00f      	b.n	800e236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 fa10 	bl	800e63e <USBD_CtlError>
        err++;
 800e21e:	7afb      	ldrb	r3, [r7, #11]
 800e220:	3301      	adds	r3, #1
 800e222:	72fb      	strb	r3, [r7, #11]
      break;
 800e224:	e007      	b.n	800e236 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fa08 	bl	800e63e <USBD_CtlError>
      err++;
 800e22e:	7afb      	ldrb	r3, [r7, #11]
 800e230:	3301      	adds	r3, #1
 800e232:	72fb      	strb	r3, [r7, #11]
      break;
 800e234:	bf00      	nop
  }

  if (err != 0U)
 800e236:	7afb      	ldrb	r3, [r7, #11]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d11e      	bne.n	800e27a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	88db      	ldrh	r3, [r3, #6]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d016      	beq.n	800e272 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e244:	893b      	ldrh	r3, [r7, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00e      	beq.n	800e268 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	88da      	ldrh	r2, [r3, #6]
 800e24e:	893b      	ldrh	r3, [r7, #8]
 800e250:	4293      	cmp	r3, r2
 800e252:	bf28      	it	cs
 800e254:	4613      	movcs	r3, r2
 800e256:	b29b      	uxth	r3, r3
 800e258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e25a:	893b      	ldrh	r3, [r7, #8]
 800e25c:	461a      	mov	r2, r3
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fa69 	bl	800e738 <USBD_CtlSendData>
 800e266:	e009      	b.n	800e27c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e268:	6839      	ldr	r1, [r7, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 f9e7 	bl	800e63e <USBD_CtlError>
 800e270:	e004      	b.n	800e27c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 faba 	bl	800e7ec <USBD_CtlSendStatus>
 800e278:	e000      	b.n	800e27c <USBD_GetDescriptor+0x2cc>
    return;
 800e27a:	bf00      	nop
  }
}
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop

0800e284 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	889b      	ldrh	r3, [r3, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d131      	bne.n	800e2fa <USBD_SetAddress+0x76>
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	88db      	ldrh	r3, [r3, #6]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d12d      	bne.n	800e2fa <USBD_SetAddress+0x76>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	885b      	ldrh	r3, [r3, #2]
 800e2a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2a4:	d829      	bhi.n	800e2fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	885b      	ldrh	r3, [r3, #2]
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d104      	bne.n	800e2c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 f9bc 	bl	800e63e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c6:	e01d      	b.n	800e304 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	7bfa      	ldrb	r2, [r7, #15]
 800e2cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 ff73 	bl	800f1c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fa86 	bl	800e7ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d004      	beq.n	800e2f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ee:	e009      	b.n	800e304 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f8:	e004      	b.n	800e304 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 f99e 	bl	800e63e <USBD_CtlError>
  }
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	885b      	ldrh	r3, [r3, #2]
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	4b4e      	ldr	r3, [pc, #312]	@ (800e45c <USBD_SetConfig+0x150>)
 800e322:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e324:	4b4d      	ldr	r3, [pc, #308]	@ (800e45c <USBD_SetConfig+0x150>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d905      	bls.n	800e338 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 f985 	bl	800e63e <USBD_CtlError>
    return USBD_FAIL;
 800e334:	2303      	movs	r3, #3
 800e336:	e08c      	b.n	800e452 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	2b02      	cmp	r3, #2
 800e342:	d002      	beq.n	800e34a <USBD_SetConfig+0x3e>
 800e344:	2b03      	cmp	r3, #3
 800e346:	d029      	beq.n	800e39c <USBD_SetConfig+0x90>
 800e348:	e075      	b.n	800e436 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e34a:	4b44      	ldr	r3, [pc, #272]	@ (800e45c <USBD_SetConfig+0x150>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d020      	beq.n	800e394 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e352:	4b42      	ldr	r3, [pc, #264]	@ (800e45c <USBD_SetConfig+0x150>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	461a      	mov	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e35c:	4b3f      	ldr	r3, [pc, #252]	@ (800e45c <USBD_SetConfig+0x150>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7fe ffe3 	bl	800d32e <USBD_SetClassConfig>
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d008      	beq.n	800e384 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 f962 	bl	800e63e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2202      	movs	r2, #2
 800e37e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e382:	e065      	b.n	800e450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fa31 	bl	800e7ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2203      	movs	r2, #3
 800e38e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e392:	e05d      	b.n	800e450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fa29 	bl	800e7ec <USBD_CtlSendStatus>
      break;
 800e39a:	e059      	b.n	800e450 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e39c:	4b2f      	ldr	r3, [pc, #188]	@ (800e45c <USBD_SetConfig+0x150>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d112      	bne.n	800e3ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e3ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e45c <USBD_SetConfig+0x150>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3b6:	4b29      	ldr	r3, [pc, #164]	@ (800e45c <USBD_SetConfig+0x150>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7fe ffd2 	bl	800d366 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 fa12 	bl	800e7ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3c8:	e042      	b.n	800e450 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e3ca:	4b24      	ldr	r3, [pc, #144]	@ (800e45c <USBD_SetConfig+0x150>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d02a      	beq.n	800e42e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7fe ffc0 	bl	800d366 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e3e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e45c <USBD_SetConfig+0x150>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e45c <USBD_SetConfig+0x150>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7fe ff99 	bl	800d32e <USBD_SetClassConfig>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00f      	beq.n	800e426 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e406:	6839      	ldr	r1, [r7, #0]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f918 	bl	800e63e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	4619      	mov	r1, r3
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7fe ffa5 	bl	800d366 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2202      	movs	r2, #2
 800e420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e424:	e014      	b.n	800e450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f9e0 	bl	800e7ec <USBD_CtlSendStatus>
      break;
 800e42c:	e010      	b.n	800e450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f9dc 	bl	800e7ec <USBD_CtlSendStatus>
      break;
 800e434:	e00c      	b.n	800e450 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f900 	bl	800e63e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e43e:	4b07      	ldr	r3, [pc, #28]	@ (800e45c <USBD_SetConfig+0x150>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fe ff8e 	bl	800d366 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e44a:	2303      	movs	r3, #3
 800e44c:	73fb      	strb	r3, [r7, #15]
      break;
 800e44e:	bf00      	nop
  }

  return ret;
 800e450:	7bfb      	ldrb	r3, [r7, #15]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	20001134 	.word	0x20001134

0800e460 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	88db      	ldrh	r3, [r3, #6]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d004      	beq.n	800e47c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f8e2 	bl	800e63e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e47a:	e023      	b.n	800e4c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b02      	cmp	r3, #2
 800e486:	dc02      	bgt.n	800e48e <USBD_GetConfig+0x2e>
 800e488:	2b00      	cmp	r3, #0
 800e48a:	dc03      	bgt.n	800e494 <USBD_GetConfig+0x34>
 800e48c:	e015      	b.n	800e4ba <USBD_GetConfig+0x5a>
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d00b      	beq.n	800e4aa <USBD_GetConfig+0x4a>
 800e492:	e012      	b.n	800e4ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3308      	adds	r3, #8
 800e49e:	2201      	movs	r2, #1
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 f948 	bl	800e738 <USBD_CtlSendData>
        break;
 800e4a8:	e00c      	b.n	800e4c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f940 	bl	800e738 <USBD_CtlSendData>
        break;
 800e4b8:	e004      	b.n	800e4c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 f8be 	bl	800e63e <USBD_CtlError>
        break;
 800e4c2:	bf00      	nop
}
 800e4c4:	bf00      	nop
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d81e      	bhi.n	800e522 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	88db      	ldrh	r3, [r3, #6]
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d004      	beq.n	800e4f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f8a5 	bl	800e63e <USBD_CtlError>
        break;
 800e4f4:	e01a      	b.n	800e52c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e502:	2b00      	cmp	r3, #0
 800e504:	d005      	beq.n	800e512 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	f043 0202 	orr.w	r2, r3, #2
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	330c      	adds	r3, #12
 800e516:	2202      	movs	r2, #2
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f90c 	bl	800e738 <USBD_CtlSendData>
      break;
 800e520:	e004      	b.n	800e52c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 f88a 	bl	800e63e <USBD_CtlError>
      break;
 800e52a:	bf00      	nop
  }
}
 800e52c:	bf00      	nop
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	885b      	ldrh	r3, [r3, #2]
 800e542:	2b01      	cmp	r3, #1
 800e544:	d107      	bne.n	800e556 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2201      	movs	r2, #1
 800e54a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f94c 	bl	800e7ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e554:	e013      	b.n	800e57e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	885b      	ldrh	r3, [r3, #2]
 800e55a:	2b02      	cmp	r3, #2
 800e55c:	d10b      	bne.n	800e576 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	889b      	ldrh	r3, [r3, #4]
 800e562:	0a1b      	lsrs	r3, r3, #8
 800e564:	b29b      	uxth	r3, r3
 800e566:	b2da      	uxtb	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f93c 	bl	800e7ec <USBD_CtlSendStatus>
}
 800e574:	e003      	b.n	800e57e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f860 	bl	800e63e <USBD_CtlError>
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e596:	b2db      	uxtb	r3, r3
 800e598:	3b01      	subs	r3, #1
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d80b      	bhi.n	800e5b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	885b      	ldrh	r3, [r3, #2]
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d10c      	bne.n	800e5c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f91c 	bl	800e7ec <USBD_CtlSendStatus>
      }
      break;
 800e5b4:	e004      	b.n	800e5c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 f840 	bl	800e63e <USBD_CtlError>
      break;
 800e5be:	e000      	b.n	800e5c2 <USBD_ClrFeature+0x3c>
      break;
 800e5c0:	bf00      	nop
  }
}
 800e5c2:	bf00      	nop
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	781a      	ldrb	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	781a      	ldrb	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f7ff fa40 	bl	800da7a <SWAPBYTE>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	3301      	adds	r3, #1
 800e606:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3301      	adds	r3, #1
 800e60c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f7ff fa33 	bl	800da7a <SWAPBYTE>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	3301      	adds	r3, #1
 800e620:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3301      	adds	r3, #1
 800e626:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f7ff fa26 	bl	800da7a <SWAPBYTE>
 800e62e:	4603      	mov	r3, r0
 800e630:	461a      	mov	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	80da      	strh	r2, [r3, #6]
}
 800e636:	bf00      	nop
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e648:	2180      	movs	r1, #128	@ 0x80
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fd4e 	bl	800f0ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e650:	2100      	movs	r1, #0
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fd4a 	bl	800f0ec <USBD_LL_StallEP>
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d042      	beq.n	800e6fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e67a:	6938      	ldr	r0, [r7, #16]
 800e67c:	f000 f842 	bl	800e704 <USBD_GetLen>
 800e680:	4603      	mov	r3, r0
 800e682:	3301      	adds	r3, #1
 800e684:	005b      	lsls	r3, r3, #1
 800e686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e68a:	d808      	bhi.n	800e69e <USBD_GetString+0x3e>
 800e68c:	6938      	ldr	r0, [r7, #16]
 800e68e:	f000 f839 	bl	800e704 <USBD_GetLen>
 800e692:	4603      	mov	r3, r0
 800e694:	3301      	adds	r3, #1
 800e696:	b29b      	uxth	r3, r3
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	e001      	b.n	800e6a2 <USBD_GetString+0x42>
 800e69e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e6a6:	7dfb      	ldrb	r3, [r7, #23]
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	7812      	ldrb	r2, [r2, #0]
 800e6b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	4413      	add	r3, r2
 800e6be:	2203      	movs	r2, #3
 800e6c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6c8:	e013      	b.n	800e6f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	693a      	ldr	r2, [r7, #16]
 800e6d2:	7812      	ldrb	r2, [r2, #0]
 800e6d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	613b      	str	r3, [r7, #16]
    idx++;
 800e6dc:	7dfb      	ldrb	r3, [r7, #23]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e6e2:	7dfb      	ldrb	r3, [r7, #23]
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	4413      	add	r3, r2
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800e6ec:	7dfb      	ldrb	r3, [r7, #23]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1e7      	bne.n	800e6ca <USBD_GetString+0x6a>
 800e6fa:	e000      	b.n	800e6fe <USBD_GetString+0x9e>
    return;
 800e6fc:	bf00      	nop
  }
}
 800e6fe:	3718      	adds	r7, #24
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e70c:	2300      	movs	r3, #0
 800e70e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e714:	e005      	b.n	800e722 <USBD_GetLen+0x1e>
  {
    len++;
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	3301      	adds	r3, #1
 800e71a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	3301      	adds	r3, #1
 800e720:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1f5      	bne.n	800e716 <USBD_GetLen+0x12>
  }

  return len;
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2202      	movs	r2, #2
 800e748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	2100      	movs	r1, #0
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f000 fd4d 	bl	800f1fe <USBD_LL_Transmit>

  return USBD_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	2100      	movs	r1, #0
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 fd3c 	bl	800f1fe <USBD_LL_Transmit>

  return USBD_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2203      	movs	r2, #3
 800e7a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f000 fd40 	bl	800f240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	2100      	movs	r1, #0
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 fd2f 	bl	800f240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2204      	movs	r2, #4
 800e7f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	2200      	movs	r2, #0
 800e800:	2100      	movs	r1, #0
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fcfb 	bl	800f1fe <USBD_LL_Transmit>

  return USBD_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b082      	sub	sp, #8
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2205      	movs	r2, #5
 800e81e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e822:	2300      	movs	r3, #0
 800e824:	2200      	movs	r2, #0
 800e826:	2100      	movs	r1, #0
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fd09 	bl	800f240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e83c:	2200      	movs	r2, #0
 800e83e:	4912      	ldr	r1, [pc, #72]	@ (800e888 <MX_USB_DEVICE_Init+0x50>)
 800e840:	4812      	ldr	r0, [pc, #72]	@ (800e88c <MX_USB_DEVICE_Init+0x54>)
 800e842:	f7fe fcf7 	bl	800d234 <USBD_Init>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e84c:	f7f4 fb3c 	bl	8002ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e850:	490f      	ldr	r1, [pc, #60]	@ (800e890 <MX_USB_DEVICE_Init+0x58>)
 800e852:	480e      	ldr	r0, [pc, #56]	@ (800e88c <MX_USB_DEVICE_Init+0x54>)
 800e854:	f7fe fd1e 	bl	800d294 <USBD_RegisterClass>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e85e:	f7f4 fb33 	bl	8002ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e862:	490c      	ldr	r1, [pc, #48]	@ (800e894 <MX_USB_DEVICE_Init+0x5c>)
 800e864:	4809      	ldr	r0, [pc, #36]	@ (800e88c <MX_USB_DEVICE_Init+0x54>)
 800e866:	f7fe fc15 	bl	800d094 <USBD_CDC_RegisterInterface>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e870:	f7f4 fb2a 	bl	8002ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e874:	4805      	ldr	r0, [pc, #20]	@ (800e88c <MX_USB_DEVICE_Init+0x54>)
 800e876:	f7fe fd43 	bl	800d300 <USBD_Start>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e880:	f7f4 fb22 	bl	8002ec8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e884:	bf00      	nop
 800e886:	bd80      	pop	{r7, pc}
 800e888:	200000b8 	.word	0x200000b8
 800e88c:	20001138 	.word	0x20001138
 800e890:	2000001c 	.word	0x2000001c
 800e894:	200000a4 	.word	0x200000a4

0800e898 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e89c:	2200      	movs	r2, #0
 800e89e:	4905      	ldr	r1, [pc, #20]	@ (800e8b4 <CDC_Init_FS+0x1c>)
 800e8a0:	4805      	ldr	r0, [pc, #20]	@ (800e8b8 <CDC_Init_FS+0x20>)
 800e8a2:	f7fe fc11 	bl	800d0c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e8a6:	4905      	ldr	r1, [pc, #20]	@ (800e8bc <CDC_Init_FS+0x24>)
 800e8a8:	4803      	ldr	r0, [pc, #12]	@ (800e8b8 <CDC_Init_FS+0x20>)
 800e8aa:	f7fe fc2f 	bl	800d10c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e8ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	20001614 	.word	0x20001614
 800e8b8:	20001138 	.word	0x20001138
 800e8bc:	20001414 	.word	0x20001414

0800e8c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e8c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	6039      	str	r1, [r7, #0]
 800e8da:	71fb      	strb	r3, [r7, #7]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	2b23      	cmp	r3, #35	@ 0x23
 800e8e4:	f200 8097 	bhi.w	800ea16 <CDC_Control_FS+0x146>
 800e8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f0 <CDC_Control_FS+0x20>)
 800e8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ee:	bf00      	nop
 800e8f0:	0800ea17 	.word	0x0800ea17
 800e8f4:	0800ea17 	.word	0x0800ea17
 800e8f8:	0800ea17 	.word	0x0800ea17
 800e8fc:	0800ea17 	.word	0x0800ea17
 800e900:	0800ea17 	.word	0x0800ea17
 800e904:	0800ea17 	.word	0x0800ea17
 800e908:	0800ea17 	.word	0x0800ea17
 800e90c:	0800ea17 	.word	0x0800ea17
 800e910:	0800ea17 	.word	0x0800ea17
 800e914:	0800ea17 	.word	0x0800ea17
 800e918:	0800ea17 	.word	0x0800ea17
 800e91c:	0800ea17 	.word	0x0800ea17
 800e920:	0800ea17 	.word	0x0800ea17
 800e924:	0800ea17 	.word	0x0800ea17
 800e928:	0800ea17 	.word	0x0800ea17
 800e92c:	0800ea17 	.word	0x0800ea17
 800e930:	0800ea17 	.word	0x0800ea17
 800e934:	0800ea17 	.word	0x0800ea17
 800e938:	0800ea17 	.word	0x0800ea17
 800e93c:	0800ea17 	.word	0x0800ea17
 800e940:	0800ea17 	.word	0x0800ea17
 800e944:	0800ea17 	.word	0x0800ea17
 800e948:	0800ea17 	.word	0x0800ea17
 800e94c:	0800ea17 	.word	0x0800ea17
 800e950:	0800ea17 	.word	0x0800ea17
 800e954:	0800ea17 	.word	0x0800ea17
 800e958:	0800ea17 	.word	0x0800ea17
 800e95c:	0800ea17 	.word	0x0800ea17
 800e960:	0800ea17 	.word	0x0800ea17
 800e964:	0800ea17 	.word	0x0800ea17
 800e968:	0800ea17 	.word	0x0800ea17
 800e96c:	0800ea17 	.word	0x0800ea17
 800e970:	0800e981 	.word	0x0800e981
 800e974:	0800e9c3 	.word	0x0800e9c3
 800e978:	0800ea17 	.word	0x0800ea17
 800e97c:	0800ea17 	.word	0x0800ea17
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	461a      	mov	r2, r3
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	3301      	adds	r3, #1
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	021b      	lsls	r3, r3, #8
 800e98e:	431a      	orrs	r2, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	3302      	adds	r3, #2
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	041b      	lsls	r3, r3, #16
 800e998:	431a      	orrs	r2, r3
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	3303      	adds	r3, #3
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	061b      	lsls	r3, r3, #24
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	4a20      	ldr	r2, [pc, #128]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9a6:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	791a      	ldrb	r2, [r3, #4]
 800e9ac:	4b1e      	ldr	r3, [pc, #120]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9ae:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	795a      	ldrb	r2, [r3, #5]
 800e9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9b6:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	799a      	ldrb	r2, [r3, #6]
 800e9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9be:	719a      	strb	r2, [r3, #6]
    break;
 800e9c0:	e02a      	b.n	800ea18 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800e9c2:	4b19      	ldr	r3, [pc, #100]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800e9cc:	4b16      	ldr	r3, [pc, #88]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	0a1a      	lsrs	r2, r3, #8
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	b2d2      	uxtb	r2, r2
 800e9d8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800e9da:	4b13      	ldr	r3, [pc, #76]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	0c1a      	lsrs	r2, r3, #16
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	3302      	adds	r3, #2
 800e9e4:	b2d2      	uxtb	r2, r2
 800e9e6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800e9e8:	4b0f      	ldr	r3, [pc, #60]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	0e1a      	lsrs	r2, r3, #24
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	3303      	adds	r3, #3
 800e9f2:	b2d2      	uxtb	r2, r2
 800e9f4:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	4a0b      	ldr	r2, [pc, #44]	@ (800ea28 <CDC_Control_FS+0x158>)
 800e9fc:	7912      	ldrb	r2, [r2, #4]
 800e9fe:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	3305      	adds	r3, #5
 800ea04:	4a08      	ldr	r2, [pc, #32]	@ (800ea28 <CDC_Control_FS+0x158>)
 800ea06:	7952      	ldrb	r2, [r2, #5]
 800ea08:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	3306      	adds	r3, #6
 800ea0e:	4a06      	ldr	r2, [pc, #24]	@ (800ea28 <CDC_Control_FS+0x158>)
 800ea10:	7992      	ldrb	r2, [r2, #6]
 800ea12:	701a      	strb	r2, [r3, #0]
	break;
 800ea14:	e000      	b.n	800ea18 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea16:	bf00      	nop
  }

  return (USBD_OK);
 800ea18:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	2000009c 	.word	0x2000009c

0800ea2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 800ea36:	4b0b      	ldr	r3, [pc, #44]	@ (800ea64 <CDC_Receive_FS+0x38>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d006      	beq.n	800ea4c <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 800ea3e:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <CDC_Receive_FS+0x38>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	6812      	ldr	r2, [r2, #0]
 800ea46:	4611      	mov	r1, r2
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea4c:	6879      	ldr	r1, [r7, #4]
 800ea4e:	4806      	ldr	r0, [pc, #24]	@ (800ea68 <CDC_Receive_FS+0x3c>)
 800ea50:	f7fe fb5c 	bl	800d10c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea54:	4804      	ldr	r0, [pc, #16]	@ (800ea68 <CDC_Receive_FS+0x3c>)
 800ea56:	f7fe fbb7 	bl	800d1c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea5a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3708      	adds	r7, #8
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	20001814 	.word	0x20001814
 800ea68:	20001138 	.word	0x20001138

0800ea6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea7c:	4b0d      	ldr	r3, [pc, #52]	@ (800eab4 <CDC_Transmit_FS+0x48>)
 800ea7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d001      	beq.n	800ea92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e00b      	b.n	800eaaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea92:	887b      	ldrh	r3, [r7, #2]
 800ea94:	461a      	mov	r2, r3
 800ea96:	6879      	ldr	r1, [r7, #4]
 800ea98:	4806      	ldr	r0, [pc, #24]	@ (800eab4 <CDC_Transmit_FS+0x48>)
 800ea9a:	f7fe fb15 	bl	800d0c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea9e:	4805      	ldr	r0, [pc, #20]	@ (800eab4 <CDC_Transmit_FS+0x48>)
 800eaa0:	f7fe fb52 	bl	800d148 <USBD_CDC_TransmitPacket>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20001138 	.word	0x20001138

0800eab8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	4613      	mov	r3, r2
 800eac4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eaca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	371c      	adds	r7, #28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
	...

0800eadc <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 800eae4:	4a04      	ldr	r2, [pc, #16]	@ (800eaf8 <CDC_Attach_Rx+0x1c>)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6013      	str	r3, [r2, #0]
}
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	20001814 	.word	0x20001814

0800eafc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	6039      	str	r1, [r7, #0]
 800eb06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2212      	movs	r2, #18
 800eb0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb0e:	4b03      	ldr	r3, [pc, #12]	@ (800eb1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr
 800eb1c:	200000d4 	.word	0x200000d4

0800eb20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	4603      	mov	r3, r0
 800eb28:	6039      	str	r1, [r7, #0]
 800eb2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2204      	movs	r2, #4
 800eb30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb32:	4b03      	ldr	r3, [pc, #12]	@ (800eb40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	200000e8 	.word	0x200000e8

0800eb44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	6039      	str	r1, [r7, #0]
 800eb4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb50:	79fb      	ldrb	r3, [r7, #7]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d105      	bne.n	800eb62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	4907      	ldr	r1, [pc, #28]	@ (800eb78 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb5a:	4808      	ldr	r0, [pc, #32]	@ (800eb7c <USBD_FS_ProductStrDescriptor+0x38>)
 800eb5c:	f7ff fd80 	bl	800e660 <USBD_GetString>
 800eb60:	e004      	b.n	800eb6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4904      	ldr	r1, [pc, #16]	@ (800eb78 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb66:	4805      	ldr	r0, [pc, #20]	@ (800eb7c <USBD_FS_ProductStrDescriptor+0x38>)
 800eb68:	f7ff fd7a 	bl	800e660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb6c:	4b02      	ldr	r3, [pc, #8]	@ (800eb78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	20001818 	.word	0x20001818
 800eb7c:	0800f458 	.word	0x0800f458

0800eb80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	6039      	str	r1, [r7, #0]
 800eb8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	4904      	ldr	r1, [pc, #16]	@ (800eba0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb90:	4804      	ldr	r0, [pc, #16]	@ (800eba4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb92:	f7ff fd65 	bl	800e660 <USBD_GetString>
  return USBD_StrDesc;
 800eb96:	4b02      	ldr	r3, [pc, #8]	@ (800eba0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	20001818 	.word	0x20001818
 800eba4:	0800f470 	.word	0x0800f470

0800eba8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	4603      	mov	r3, r0
 800ebb0:	6039      	str	r1, [r7, #0]
 800ebb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	221a      	movs	r2, #26
 800ebb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebba:	f000 f843 	bl	800ec44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ebbe:	4b02      	ldr	r3, [pc, #8]	@ (800ebc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	200000ec 	.word	0x200000ec

0800ebcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	6039      	str	r1, [r7, #0]
 800ebd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d105      	bne.n	800ebea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	4907      	ldr	r1, [pc, #28]	@ (800ec00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebe2:	4808      	ldr	r0, [pc, #32]	@ (800ec04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebe4:	f7ff fd3c 	bl	800e660 <USBD_GetString>
 800ebe8:	e004      	b.n	800ebf4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	4904      	ldr	r1, [pc, #16]	@ (800ec00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebee:	4805      	ldr	r0, [pc, #20]	@ (800ec04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebf0:	f7ff fd36 	bl	800e660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	@ (800ec00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20001818 	.word	0x20001818
 800ec04:	0800f484 	.word	0x0800f484

0800ec08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	4603      	mov	r3, r0
 800ec10:	6039      	str	r1, [r7, #0]
 800ec12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d105      	bne.n	800ec26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	4907      	ldr	r1, [pc, #28]	@ (800ec3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec1e:	4808      	ldr	r0, [pc, #32]	@ (800ec40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec20:	f7ff fd1e 	bl	800e660 <USBD_GetString>
 800ec24:	e004      	b.n	800ec30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	4904      	ldr	r1, [pc, #16]	@ (800ec3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec2a:	4805      	ldr	r0, [pc, #20]	@ (800ec40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec2c:	f7ff fd18 	bl	800e660 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec30:	4b02      	ldr	r3, [pc, #8]	@ (800ec3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20001818 	.word	0x20001818
 800ec40:	0800f490 	.word	0x0800f490

0800ec44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec88 <Get_SerialNum+0x44>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec50:	4b0e      	ldr	r3, [pc, #56]	@ (800ec8c <Get_SerialNum+0x48>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec56:	4b0e      	ldr	r3, [pc, #56]	@ (800ec90 <Get_SerialNum+0x4c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4413      	add	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d009      	beq.n	800ec7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec6a:	2208      	movs	r2, #8
 800ec6c:	4909      	ldr	r1, [pc, #36]	@ (800ec94 <Get_SerialNum+0x50>)
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f000 f814 	bl	800ec9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec74:	2204      	movs	r2, #4
 800ec76:	4908      	ldr	r1, [pc, #32]	@ (800ec98 <Get_SerialNum+0x54>)
 800ec78:	68b8      	ldr	r0, [r7, #8]
 800ec7a:	f000 f80f 	bl	800ec9c <IntToUnicode>
  }
}
 800ec7e:	bf00      	nop
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	1fff7a10 	.word	0x1fff7a10
 800ec8c:	1fff7a14 	.word	0x1fff7a14
 800ec90:	1fff7a18 	.word	0x1fff7a18
 800ec94:	200000ee 	.word	0x200000ee
 800ec98:	200000fe 	.word	0x200000fe

0800ec9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4613      	mov	r3, r2
 800eca8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecae:	2300      	movs	r3, #0
 800ecb0:	75fb      	strb	r3, [r7, #23]
 800ecb2:	e027      	b.n	800ed04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	0f1b      	lsrs	r3, r3, #28
 800ecb8:	2b09      	cmp	r3, #9
 800ecba:	d80b      	bhi.n	800ecd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	0f1b      	lsrs	r3, r3, #28
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
 800ecc4:	005b      	lsls	r3, r3, #1
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	440b      	add	r3, r1
 800eccc:	3230      	adds	r2, #48	@ 0x30
 800ecce:	b2d2      	uxtb	r2, r2
 800ecd0:	701a      	strb	r2, [r3, #0]
 800ecd2:	e00a      	b.n	800ecea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	0f1b      	lsrs	r3, r3, #28
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
 800ecdc:	005b      	lsls	r3, r3, #1
 800ecde:	4619      	mov	r1, r3
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	440b      	add	r3, r1
 800ece4:	3237      	adds	r2, #55	@ 0x37
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	011b      	lsls	r3, r3, #4
 800ecee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecfe:	7dfb      	ldrb	r3, [r7, #23]
 800ed00:	3301      	adds	r3, #1
 800ed02:	75fb      	strb	r3, [r7, #23]
 800ed04:	7dfa      	ldrb	r2, [r7, #23]
 800ed06:	79fb      	ldrb	r3, [r7, #7]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d3d3      	bcc.n	800ecb4 <IntToUnicode+0x18>
  }
}
 800ed0c:	bf00      	nop
 800ed0e:	bf00      	nop
 800ed10:	371c      	adds	r7, #28
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
	...

0800ed1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b08a      	sub	sp, #40	@ 0x28
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed24:	f107 0314 	add.w	r3, r7, #20
 800ed28:	2200      	movs	r2, #0
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	605a      	str	r2, [r3, #4]
 800ed2e:	609a      	str	r2, [r3, #8]
 800ed30:	60da      	str	r2, [r3, #12]
 800ed32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed3c:	d13a      	bne.n	800edb4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed3e:	2300      	movs	r3, #0
 800ed40:	613b      	str	r3, [r7, #16]
 800ed42:	4b1e      	ldr	r3, [pc, #120]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed46:	4a1d      	ldr	r2, [pc, #116]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed48:	f043 0301 	orr.w	r3, r3, #1
 800ed4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ed4e:	4b1b      	ldr	r3, [pc, #108]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	613b      	str	r3, [r7, #16]
 800ed58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ed5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed60:	2302      	movs	r3, #2
 800ed62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed64:	2300      	movs	r3, #0
 800ed66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed6c:	230a      	movs	r3, #10
 800ed6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed70:	f107 0314 	add.w	r3, r7, #20
 800ed74:	4619      	mov	r1, r3
 800ed76:	4812      	ldr	r0, [pc, #72]	@ (800edc0 <HAL_PCD_MspInit+0xa4>)
 800ed78:	f7f5 fe04 	bl	8004984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed7c:	4b0f      	ldr	r3, [pc, #60]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed80:	4a0e      	ldr	r2, [pc, #56]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed86:	6353      	str	r3, [r2, #52]	@ 0x34
 800ed88:	2300      	movs	r3, #0
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	4b0b      	ldr	r3, [pc, #44]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed90:	4a0a      	ldr	r2, [pc, #40]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ed96:	6453      	str	r3, [r2, #68]	@ 0x44
 800ed98:	4b08      	ldr	r3, [pc, #32]	@ (800edbc <HAL_PCD_MspInit+0xa0>)
 800ed9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eda0:	60fb      	str	r3, [r7, #12]
 800eda2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eda4:	2200      	movs	r2, #0
 800eda6:	2100      	movs	r1, #0
 800eda8:	2043      	movs	r0, #67	@ 0x43
 800edaa:	f7f5 fa08 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edae:	2043      	movs	r0, #67	@ 0x43
 800edb0:	f7f5 fa21 	bl	80041f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800edb4:	bf00      	nop
 800edb6:	3728      	adds	r7, #40	@ 0x28
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	40023800 	.word	0x40023800
 800edc0:	40020000 	.word	0x40020000

0800edc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800edd8:	4619      	mov	r1, r3
 800edda:	4610      	mov	r0, r2
 800eddc:	f7fe fadd 	bl	800d39a <USBD_LL_SetupStage>
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800edfa:	78fa      	ldrb	r2, [r7, #3]
 800edfc:	6879      	ldr	r1, [r7, #4]
 800edfe:	4613      	mov	r3, r2
 800ee00:	00db      	lsls	r3, r3, #3
 800ee02:	4413      	add	r3, r2
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	440b      	add	r3, r1
 800ee08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	78fb      	ldrb	r3, [r7, #3]
 800ee10:	4619      	mov	r1, r3
 800ee12:	f7fe fb17 	bl	800d444 <USBD_LL_DataOutStage>
}
 800ee16:	bf00      	nop
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	460b      	mov	r3, r1
 800ee28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ee30:	78fa      	ldrb	r2, [r7, #3]
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	4613      	mov	r3, r2
 800ee36:	00db      	lsls	r3, r3, #3
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	440b      	add	r3, r1
 800ee3e:	3320      	adds	r3, #32
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	78fb      	ldrb	r3, [r7, #3]
 800ee44:	4619      	mov	r1, r3
 800ee46:	f7fe fbb0 	bl	800d5aa <USBD_LL_DataInStage>
}
 800ee4a:	bf00      	nop
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b082      	sub	sp, #8
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe fcea 	bl	800d83a <USBD_LL_SOF>
}
 800ee66:	bf00      	nop
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee76:	2301      	movs	r3, #1
 800ee78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	79db      	ldrb	r3, [r3, #7]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d001      	beq.n	800ee86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee82:	f7f4 f821 	bl	8002ec8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee8c:	7bfa      	ldrb	r2, [r7, #15]
 800ee8e:	4611      	mov	r1, r2
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fe fc8e 	bl	800d7b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fe fc36 	bl	800d70e <USBD_LL_Reset>
}
 800eea2:	bf00      	nop
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
	...

0800eeac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fe fc89 	bl	800d7d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	6812      	ldr	r2, [r2, #0]
 800eece:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eed2:	f043 0301 	orr.w	r3, r3, #1
 800eed6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	7adb      	ldrb	r3, [r3, #11]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eee0:	4b04      	ldr	r3, [pc, #16]	@ (800eef4 <HAL_PCD_SuspendCallback+0x48>)
 800eee2:	691b      	ldr	r3, [r3, #16]
 800eee4:	4a03      	ldr	r2, [pc, #12]	@ (800eef4 <HAL_PCD_SuspendCallback+0x48>)
 800eee6:	f043 0306 	orr.w	r3, r3, #6
 800eeea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eeec:	bf00      	nop
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	e000ed00 	.word	0xe000ed00

0800eef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fc7f 	bl	800d80a <USBD_LL_Resume>
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef26:	78fa      	ldrb	r2, [r7, #3]
 800ef28:	4611      	mov	r1, r2
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fe fcd7 	bl	800d8de <USBD_LL_IsoOUTIncomplete>
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	460b      	mov	r3, r1
 800ef42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef4a:	78fa      	ldrb	r2, [r7, #3]
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fe fc93 	bl	800d87a <USBD_LL_IsoINIncomplete>
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe fce9 	bl	800d942 <USBD_LL_DevConnected>
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fce6 	bl	800d958 <USBD_LL_DevDisconnected>
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d13c      	bne.n	800f01e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800efa4:	4a20      	ldr	r2, [pc, #128]	@ (800f028 <USBD_LL_Init+0x94>)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a1e      	ldr	r2, [pc, #120]	@ (800f028 <USBD_LL_Init+0x94>)
 800efb0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efb4:	4b1c      	ldr	r3, [pc, #112]	@ (800f028 <USBD_LL_Init+0x94>)
 800efb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800efba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800efbc:	4b1a      	ldr	r3, [pc, #104]	@ (800f028 <USBD_LL_Init+0x94>)
 800efbe:	2204      	movs	r2, #4
 800efc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800efc2:	4b19      	ldr	r3, [pc, #100]	@ (800f028 <USBD_LL_Init+0x94>)
 800efc4:	2202      	movs	r2, #2
 800efc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efc8:	4b17      	ldr	r3, [pc, #92]	@ (800f028 <USBD_LL_Init+0x94>)
 800efca:	2200      	movs	r2, #0
 800efcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efce:	4b16      	ldr	r3, [pc, #88]	@ (800f028 <USBD_LL_Init+0x94>)
 800efd0:	2202      	movs	r2, #2
 800efd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800efd4:	4b14      	ldr	r3, [pc, #80]	@ (800f028 <USBD_LL_Init+0x94>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800efda:	4b13      	ldr	r3, [pc, #76]	@ (800f028 <USBD_LL_Init+0x94>)
 800efdc:	2200      	movs	r2, #0
 800efde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800efe0:	4b11      	ldr	r3, [pc, #68]	@ (800f028 <USBD_LL_Init+0x94>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800efe6:	4b10      	ldr	r3, [pc, #64]	@ (800f028 <USBD_LL_Init+0x94>)
 800efe8:	2200      	movs	r2, #0
 800efea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800efec:	4b0e      	ldr	r3, [pc, #56]	@ (800f028 <USBD_LL_Init+0x94>)
 800efee:	2200      	movs	r2, #0
 800eff0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eff2:	480d      	ldr	r0, [pc, #52]	@ (800f028 <USBD_LL_Init+0x94>)
 800eff4:	f7f9 fa91 	bl	800851a <HAL_PCD_Init>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800effe:	f7f3 ff63 	bl	8002ec8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f002:	2180      	movs	r1, #128	@ 0x80
 800f004:	4808      	ldr	r0, [pc, #32]	@ (800f028 <USBD_LL_Init+0x94>)
 800f006:	f7fa fcbe 	bl	8009986 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f00a:	2240      	movs	r2, #64	@ 0x40
 800f00c:	2100      	movs	r1, #0
 800f00e:	4806      	ldr	r0, [pc, #24]	@ (800f028 <USBD_LL_Init+0x94>)
 800f010:	f7fa fc72 	bl	80098f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f014:	2280      	movs	r2, #128	@ 0x80
 800f016:	2101      	movs	r1, #1
 800f018:	4803      	ldr	r0, [pc, #12]	@ (800f028 <USBD_LL_Init+0x94>)
 800f01a:	f7fa fc6d 	bl	80098f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f01e:	2300      	movs	r3, #0
}
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	20001a18 	.word	0x20001a18

0800f02c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f042:	4618      	mov	r0, r3
 800f044:	f7f9 fb78 	bl	8008738 <HAL_PCD_Start>
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 f942 	bl	800f2d8 <USBD_Get_USB_Status>
 800f054:	4603      	mov	r3, r0
 800f056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f058:	7bbb      	ldrb	r3, [r7, #14]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
 800f06a:	4608      	mov	r0, r1
 800f06c:	4611      	mov	r1, r2
 800f06e:	461a      	mov	r2, r3
 800f070:	4603      	mov	r3, r0
 800f072:	70fb      	strb	r3, [r7, #3]
 800f074:	460b      	mov	r3, r1
 800f076:	70bb      	strb	r3, [r7, #2]
 800f078:	4613      	mov	r3, r2
 800f07a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f08a:	78bb      	ldrb	r3, [r7, #2]
 800f08c:	883a      	ldrh	r2, [r7, #0]
 800f08e:	78f9      	ldrb	r1, [r7, #3]
 800f090:	f7fa f84c 	bl	800912c <HAL_PCD_EP_Open>
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 f91c 	bl	800f2d8 <USBD_Get_USB_Status>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b084      	sub	sp, #16
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0c8:	78fa      	ldrb	r2, [r7, #3]
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fa f897 	bl	8009200 <HAL_PCD_EP_Close>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 f8fd 	bl	800f2d8 <USBD_Get_USB_Status>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f106:	78fa      	ldrb	r2, [r7, #3]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fa f94f 	bl	80093ae <HAL_PCD_EP_SetStall>
 800f110:	4603      	mov	r3, r0
 800f112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	4618      	mov	r0, r3
 800f118:	f000 f8de 	bl	800f2d8 <USBD_Get_USB_Status>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f120:	7bbb      	ldrb	r3, [r7, #14]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	460b      	mov	r3, r1
 800f134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f144:	78fa      	ldrb	r2, [r7, #3]
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fa f993 	bl	8009474 <HAL_PCD_EP_ClrStall>
 800f14e:	4603      	mov	r3, r0
 800f150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f152:	7bfb      	ldrb	r3, [r7, #15]
 800f154:	4618      	mov	r0, r3
 800f156:	f000 f8bf 	bl	800f2d8 <USBD_Get_USB_Status>
 800f15a:	4603      	mov	r3, r0
 800f15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f17a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f17c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f180:	2b00      	cmp	r3, #0
 800f182:	da0b      	bge.n	800f19c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f18a:	68f9      	ldr	r1, [r7, #12]
 800f18c:	4613      	mov	r3, r2
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	4413      	add	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	440b      	add	r3, r1
 800f196:	3316      	adds	r3, #22
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	e00b      	b.n	800f1b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f19c:	78fb      	ldrb	r3, [r7, #3]
 800f19e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f1a2:	68f9      	ldr	r1, [r7, #12]
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	4413      	add	r3, r2
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	440b      	add	r3, r1
 800f1ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f1b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1da:	78fa      	ldrb	r2, [r7, #3]
 800f1dc:	4611      	mov	r1, r2
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7f9 ff80 	bl	80090e4 <HAL_PCD_SetAddress>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1e8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 f874 	bl	800f2d8 <USBD_Get_USB_Status>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b086      	sub	sp, #24
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	607a      	str	r2, [r7, #4]
 800f208:	603b      	str	r3, [r7, #0]
 800f20a:	460b      	mov	r3, r1
 800f20c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f21c:	7af9      	ldrb	r1, [r7, #11]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	f7fa f88a 	bl	800933a <HAL_PCD_EP_Transmit>
 800f226:	4603      	mov	r3, r0
 800f228:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f22a:	7dfb      	ldrb	r3, [r7, #23]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 f853 	bl	800f2d8 <USBD_Get_USB_Status>
 800f232:	4603      	mov	r3, r0
 800f234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f236:	7dbb      	ldrb	r3, [r7, #22]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3718      	adds	r7, #24
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	607a      	str	r2, [r7, #4]
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	460b      	mov	r3, r1
 800f24e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f254:	2300      	movs	r3, #0
 800f256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f25e:	7af9      	ldrb	r1, [r7, #11]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	f7fa f816 	bl	8009294 <HAL_PCD_EP_Receive>
 800f268:	4603      	mov	r3, r0
 800f26a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f26c:	7dfb      	ldrb	r3, [r7, #23]
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 f832 	bl	800f2d8 <USBD_Get_USB_Status>
 800f274:	4603      	mov	r3, r0
 800f276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f278:	7dbb      	ldrb	r3, [r7, #22]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3718      	adds	r7, #24
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b082      	sub	sp, #8
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
 800f28a:	460b      	mov	r3, r1
 800f28c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f294:	78fa      	ldrb	r2, [r7, #3]
 800f296:	4611      	mov	r1, r2
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fa f836 	bl	800930a <HAL_PCD_EP_GetRxCount>
 800f29e:	4603      	mov	r3, r0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2b0:	4b03      	ldr	r3, [pc, #12]	@ (800f2c0 <USBD_static_malloc+0x18>)
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	370c      	adds	r7, #12
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	20001efc 	.word	0x20001efc

0800f2c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]

}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d817      	bhi.n	800f31c <USBD_Get_USB_Status+0x44>
 800f2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800f2f4 <USBD_Get_USB_Status+0x1c>)
 800f2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f2:	bf00      	nop
 800f2f4:	0800f305 	.word	0x0800f305
 800f2f8:	0800f30b 	.word	0x0800f30b
 800f2fc:	0800f311 	.word	0x0800f311
 800f300:	0800f317 	.word	0x0800f317
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f304:	2300      	movs	r3, #0
 800f306:	73fb      	strb	r3, [r7, #15]
    break;
 800f308:	e00b      	b.n	800f322 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f30a:	2303      	movs	r3, #3
 800f30c:	73fb      	strb	r3, [r7, #15]
    break;
 800f30e:	e008      	b.n	800f322 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f310:	2301      	movs	r3, #1
 800f312:	73fb      	strb	r3, [r7, #15]
    break;
 800f314:	e005      	b.n	800f322 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f316:	2303      	movs	r3, #3
 800f318:	73fb      	strb	r3, [r7, #15]
    break;
 800f31a:	e002      	b.n	800f322 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f31c:	2303      	movs	r3, #3
 800f31e:	73fb      	strb	r3, [r7, #15]
    break;
 800f320:	bf00      	nop
  }
  return usb_status;
 800f322:	7bfb      	ldrb	r3, [r7, #15]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3714      	adds	r7, #20
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <memset>:
 800f330:	4402      	add	r2, r0
 800f332:	4603      	mov	r3, r0
 800f334:	4293      	cmp	r3, r2
 800f336:	d100      	bne.n	800f33a <memset+0xa>
 800f338:	4770      	bx	lr
 800f33a:	f803 1b01 	strb.w	r1, [r3], #1
 800f33e:	e7f9      	b.n	800f334 <memset+0x4>

0800f340 <__libc_init_array>:
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	4d0d      	ldr	r5, [pc, #52]	@ (800f378 <__libc_init_array+0x38>)
 800f344:	4c0d      	ldr	r4, [pc, #52]	@ (800f37c <__libc_init_array+0x3c>)
 800f346:	1b64      	subs	r4, r4, r5
 800f348:	10a4      	asrs	r4, r4, #2
 800f34a:	2600      	movs	r6, #0
 800f34c:	42a6      	cmp	r6, r4
 800f34e:	d109      	bne.n	800f364 <__libc_init_array+0x24>
 800f350:	4d0b      	ldr	r5, [pc, #44]	@ (800f380 <__libc_init_array+0x40>)
 800f352:	4c0c      	ldr	r4, [pc, #48]	@ (800f384 <__libc_init_array+0x44>)
 800f354:	f000 f826 	bl	800f3a4 <_init>
 800f358:	1b64      	subs	r4, r4, r5
 800f35a:	10a4      	asrs	r4, r4, #2
 800f35c:	2600      	movs	r6, #0
 800f35e:	42a6      	cmp	r6, r4
 800f360:	d105      	bne.n	800f36e <__libc_init_array+0x2e>
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	f855 3b04 	ldr.w	r3, [r5], #4
 800f368:	4798      	blx	r3
 800f36a:	3601      	adds	r6, #1
 800f36c:	e7ee      	b.n	800f34c <__libc_init_array+0xc>
 800f36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f372:	4798      	blx	r3
 800f374:	3601      	adds	r6, #1
 800f376:	e7f2      	b.n	800f35e <__libc_init_array+0x1e>
 800f378:	0800fe30 	.word	0x0800fe30
 800f37c:	0800fe30 	.word	0x0800fe30
 800f380:	0800fe30 	.word	0x0800fe30
 800f384:	0800fe34 	.word	0x0800fe34

0800f388 <memcpy>:
 800f388:	440a      	add	r2, r1
 800f38a:	4291      	cmp	r1, r2
 800f38c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f390:	d100      	bne.n	800f394 <memcpy+0xc>
 800f392:	4770      	bx	lr
 800f394:	b510      	push	{r4, lr}
 800f396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f39e:	4291      	cmp	r1, r2
 800f3a0:	d1f9      	bne.n	800f396 <memcpy+0xe>
 800f3a2:	bd10      	pop	{r4, pc}

0800f3a4 <_init>:
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	bf00      	nop
 800f3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3aa:	bc08      	pop	{r3}
 800f3ac:	469e      	mov	lr, r3
 800f3ae:	4770      	bx	lr

0800f3b0 <_fini>:
 800f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b2:	bf00      	nop
 800f3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b6:	bc08      	pop	{r3}
 800f3b8:	469e      	mov	lr, r3
 800f3ba:	4770      	bx	lr
